<?php

namespace App\Controller;
use App\Controller\AppController;
use App\Controller\ConnectionManager;
use Cake\Network\Exception\NotFoundException;
use Cake\View\Exception\MissingTemplateException;
use Cake\Event\Event;
use Cake\ORM\TableRegistry;
use Cake\Core\Configure;
use Cake\Auth\DefaultPasswordHasher;
use Cake\View\Helper\SessionHelper;
use Cake\Controller\Component\PaginatorComponent;
use Cake\Network\Request;
use Cake\ORM\Query;
use Cake\Utility\Hash;
use Cake\ORM\Table;
use Cake\Utility\Security;
use Cake\View\Helper;
use Cake\I18n\Time;
use Cake\Routing\Router;
use Cake\Mailer\Email;
use Cake\I18n\Date;
use Cake\Collection\Collection;
use Facebook\FacebookSession;
use Facebook\FacebookRedirectLoginHelper;
use Facebook\FacebookRequest;
use Facebook\FacebookResponse;
use Facebook\FacebookSDKException;
use Facebook\FacebookRequestException;
use Facebook\FacebookAuthorizationException;
use Facebook\GraphObject;
use Facebook\GraphUser;
use Facebook\GraphSessionInfo;
use Twilio\Rest\Client;
use Cake\Validation\Validation;

class UsersController extends AppController
{
    public $prefix = false;
    public function initialize()
    {
      parent::initialize();
      $this->loadComponent('Cookie');
      $this->loadComponent('Paginator');
      $this->loadComponent('General');
      $this->loadComponent('MailSend');
      $this->loadComponent('CryptoSecurity');
      $this->loadComponent('UserTextMsgSend');
      $this->loadComponent('CcDetail');
      //$url_detail = explode("/", trim($_SERVER['REQUEST_URI']));
      $this->prefix = Configure::read('iframe_prefix');
    }

    public $paginate = [
            'limit' => 12,
        ];


    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event);
        $this->Auth->allow(['verifyOtp','resendOtp']);

        if($this->Auth->user()['role_id'] != 2){

            if(!empty($this->Auth->user('id'))){
              $this->General->userActivity(['action_performed' => 2, 'user_id' => $this->Auth->user('id')]);
            }
            $this->Auth->logout();
        }
        $this->Auth->allow(['signup','precedingSignup','interestedUser','fblogin','googlelogin','register','login','ajaxlogin', 'logout','forgotpassword','resetPassword','registerFrontUser','state','city', 'activate', 'getsuggestion', 'getsymptomsuggestion', 'getmedicationsuggestion', 'gettaginputsuggestion','getsymptomsuggestionortho', 'getsymptomsuggestionorthospine', 'getspecializationfordoctor','addAddress']);

        $this->Paginator->settings=array('limit'=>10);
        $curAction = $this->request->params['action'];
        $actionCheck = ['login','sellerRegister','buyerRegister','affiliateRegister','registerFrontUser','addAddress'];
    }


    protected function _setCookie()
    {

      if (!$this->request->data('rememberme')) {

          $this->Cookie->delete('Auth.User');
          return false;
      }
      $cookie = [
          'email' => $this->request->data('email'),
          'password' => $this->request->data('password'),
          'rememberme' => $this->request->data('rememberme')
      ];
      $this->Cookie->write('Auth.User', $cookie, false, '+1 week');
      return true;
    }

    public function logout()
    {
       // clear the cookie (if it exists) when logging out
        $activity = array();
        $activity['action_performed'] = 2;
        $activity['user_id'] =  $this->Auth->user('id');
        $this->General->userActivity($activity);
        $this->Flash->success(__('Logout successfully'));
        $session = $this->getRequest()->getSession();
        $session->destroy();
        return $this->redirect($this->Auth->logout());

    }


    /*----------------------------------code for registration starts-------------------------------------------------*/
    public function register()
    {

      $this->layout = 'homepage';
      $titleforlayout = 'Home'  ;
      $this->set('titleforpage', $titleforlayout);

    }
    /*----------------------------------code for login starts-------------------------------------------------*/
    public function login()
    {
      $this->viewBuilder()->setLayout('front');
      if ($curuser = $this->Auth->user()) {

        if($curuser['role_id'] == 2){
            return $this->redirect(array('action' => 'dashboard','prefix' => $this->prefix));
        }
        elseif($curuser['role_id'] == 3){

          return $this->redirect('/providers');
        }
        else{

          return $this->redirect('/admin');
        }
      }

      $login_attempt = $this->Cookie->read('login_attempt');

      if( $this->request->is('post') )
      {
        //pr($this->request->data());die;
        $login_attempt = $this->Cookie->read('login_attempt');
        if(empty($login_attempt))
          $login_attempt = 0;

        $this->Cookie->write('login_attempt', ++$login_attempt);
        if(empty($this->request->data['email']) || empty($this->request->data['password']))
        {

          $this->Flash->error(__('Email and Password fields are required.'));

        }
        else
        {
          $email = base64_encode($this->CryptoSecurity->encrypt($this->request->data['email'],SEC_KEY));

          if (!Validation::email($this->request->data['email']))
          {
            $this->Auth->config('authenticate', [
                'Form' => [
                    'fields' => ['username' => 'phone']
                ]
            ]);

            $this->Auth->constructAuthenticate();
            $this->request->data['phone'] = $email;
            unset($this->request->data['email']);
          }

          $this->request->data['email'] = $email;
          $user = $this->Auth->identify();
          //pr($user);die('wewewqe');

          if(!empty($user))
          {
                $activity = array();
                $activity['action_performed'] = 1;
                $activity['user_id'] = $user['id'];
                $this->General->userActivity($activity);

                if((!empty($user['email']) && $user['is_email_confirmed'] == 0) || (!empty($user['phone']) && $user['is_phone_confirmed'] == 0))
                {
                  $login_allowed_time = strtotime('+1 day', strtotime($user['created']));
                  if($login_allowed_time > strtotime(date('Y-m-d H:i:s')) && $user['role_id']== 2){

                    $this->Cookie->delete('login_attempt');

                    $this->Auth->setUser($user);
                    $this->_setCookie();
                    return $this->redirect(['controller'=>'Users','action' => 'dashboard','prefix' => $this->prefix]);
                  }



                  $userTlb  = TableRegistry::get("users");
                  $user_data = $userTlb->find('all')->where(['id' => $user['id']])->first();


                  if(!empty($user_data))
                  {

                    $first_name = "user";
                    if(!empty($user_data['first_name'])){

                      $first_name = $this->CryptoSecurity->decrypt(base64_decode($user_data['first_name']),SEC_KEY);
                    }


                    if(!empty($user_data['email']) && $user['is_email_confirmed'] == 0){

                      $email = $this->CryptoSecurity->decrypt(base64_decode($user_data['email']),SEC_KEY);
                      $hashCode = sha1(time() . rand(0, 100));
                      $user_data->activation_link = $hashCode;
                      $userTlb->save($user_data);
                      $activationLink = Router::url(['controller' => 'Users','action' => 'activate',
                                                   '?' => ['c' => $hashCode,'u' => $user_data['email']]], true);

                      $mailData = array();
                      $mailData['slug'] = 'activate-account';
                      $mailData['email'] = $email;
                      $mailData['replaceString'] = array('{user}','{activation_link}');
                      $mailData['replaceData'] = array($first_name,$activationLink);
                      $this->MailSend->send( $mailData );

                      $this->Flash->success(__('Please check your email for activation link or contact admin.'));

                    }

                    if(!empty($user_data['phone']) && $user['is_phone_confirmed'] == 0)
                    {

                      $otp = rand(111111,999999);
                      $phone = $this->CryptoSecurity->decrypt(base64_decode($user_data['phone']),SEC_KEY);
                      $msgData = array();
                      $msgData['slug'] = 'activate-account';
                      $msgData['phone'] = $phone;
                      $msgData['replaceString'] = array('{user}','{otp}');
                      $msgData['replaceData'] = array($first_name,$otp);
                      $this->UserTextMsgSend->send( $msgData );
                      $user_data->otp = $otp;
                      $userTlb->save($user_data);

                      $this->Flash->success(__("Please check your phone for otp or contact admin."));
                      return $this->redirect(['controller' => 'users','action' => 'verifyOtp','prefix' => $this->prefix]);
                    }
                  }
                }
                else if($user['status']== 0)
                {
                  $this->Flash->error(__('Your account is deactivated by admin, please contact admin to activate your account.'));
                  return $this->redirect($this->referer());
                }
                else if( $user['role_id']!=2)
                {
                  $this->Flash->error(__('You are not allowed to login here.'));
                  return $this->redirect($this->referer());
                }
                else if( $user['status']==1)
                {
                  $this->Cookie->delete('login_attempt');
                  $this->Auth->setUser($user);
                  $this->_setCookie();

                  if($user['role_id']==2)
                  {
                    return $this->redirect(['controller'=>'Users','action' => 'dashboard','prefix' => $this->prefix]);
                  }
                }
          }

          if(empty($user))
          {
            $userRecord =  $this->Users->find()->select(['id','email','password','phone'])->toArray();
            foreach($userRecord as $key => $value)
            {
                if($this->request->data['email'] == $value['email'] || $this->request->data['email'] == $value['phone'])
                {
                    if((new DefaultPasswordHasher)->check($this->request->data['password'],$value['password'])){
                  }
                  else
                  {
                      $activity['action_performed'] = 3;
                      $activity['user_id'] = $value['id'];
                      $this->General->userActivity($activity);
                      return $this->Flash->error('Your email or password is incorrect.');
                  }
                }
            }
          }
          else
          {
            $this->Flash->error(__('Invalid email or password, Please try again'));
          }
        }
      }
      $rememberme_cookie =  $this->Cookie->read('Auth.User') ;
      $this->set(compact('rememberme_cookie', 'login_attempt')) ;
    }

  public function registerFrontUser()
  {
    $url = $this->request->getParam('pass');
    if ($curuser = $this->Auth->user()) {

      $session = $this->getRequest()->getSession();

      $session->destroy();
      $this->Auth->logout();
      if(!empty($url)){

        return $this->redirect(array('action' => 'registerFrontUser','prefix' => $this->prefix, $url[0]));

      }else{

        return $this->redirect(array('action' => 'registerFrontUser','prefix' => $this->prefix));
      }
    }
    // verify zip code or not
    $session = $this->getRequest()->getSession();
    $zip_code_data = $session->read('zip_code_data');
    //pr($zip_code_data);
    $zipcode = $zip_code_data['zipcode'];
    $session_schedule_id = $zip_code_data['schedule_id'];
    if(empty($zipcode) && !empty($session_schedule_id))
    {
      return $this->redirect(array('action' => 'precedingSignup','prefix' => $this->prefix,$session_schedule_id));
    }
    elseif(empty($zipcode) && !empty($url[0]))
    {
      return $this->redirect(array('action' => 'precedingSignup','prefix' => $this->prefix,$url[0]));
    }
    elseif(empty($zipcode))
    {
      return $this->redirect(array('action' => 'precedingSignup','prefix' => $this->prefix));
    }
    // end
    $this->viewBuilder()->setLayout('front');

    $this->loadModel('Organizations');
    $query = $this->Organizations->find('list', [
        'keyField' => 'id',
        'valueField' => 'organization_name'
    ])->where(['status' => 1, 'is_shown' => 1]);
    $org_data = $query->toArray();
    $this->Users->validator();
    $user = $this->Users->newEntity();

    if($this->request->is('post'))
    {
     // pr($this->request->data());die;
      $session->delete('zip_code_data');
      $schedule_id_data =explode("-", base64_decode($this->request->getData('schedule_id')));
      $schedule_id_data = array_filter($schedule_id_data);
      $schedule_id = "";
      if(!empty($schedule_id_data)){

        $schedule_id = $schedule_id_data[0];
      }

      $scheuleTbl  = TableRegistry::get("Schedules");
      $usrTbl  = TableRegistry::get("Users");
      //pr($this->request->getData('email'));

      $isExistEmail = base64_encode($this->CryptoSecurity->encrypt($this->request->getData('email'),SEC_KEY));



      if(!empty($isExistEmail))
      {  
         $user_data = $usrTbl->find('all')->where(['email'=>$isExistEmail])->first();
      }

      $isExistPhone = base64_encode($this->CryptoSecurity->encrypt($this->request->getData('phone'),SEC_KEY));

      if(!empty($isExistPhone))
      {  
         $user_data = $usrTbl->find('all')->where(['phone'=>$isExistPhone])->first();
      }
      //pr($user_data); die;

      $schedule_data = null;
      if(!empty($schedule_id))
      {
        $schedule_data = $scheuleTbl->find('all')->where(['id'=>$schedule_id])->first();
        if(!empty($schedule_data) && date("Y-m-d", strtotime($schedule_data->appointment_date)) < date("Y-m-d") )
        {
          $this->Flash->error(__('User signup link expired.'));
          return $this->redirect(['controller'=>'users','action' => 'registerFrontUser','prefix' => $this->prefix ,$schedule_data['id']]);
        }
      }
      //pr($user_data); die;
      if(!empty($user_data))
      {$user = $user_data->toArray();
          $this->Auth->setUser($user);
          $activity = array();
          $activity['action_performed'] = 1;
          $activity['user_id'] = $user['id'];
          $this->General->userActivity($activity);
          $this->request->session()->delete('Flash');
        if(empty($user_data['city']) || empty($user_data['state']) || empty($user_data['zip']) || empty($user_data['clinical_race']) || empty($user_data['clinical_ethnicity']))
            {
              return $this->redirect(['action' => 'addAddress','prefix' => $this->prefix , base64_encode($schedule_data['id'])]);

            }else{
              return $this->redirect(['controller' => 'users', 'action' => 'registeredUserQuestion', 'prefix' => false, base64_encode($schedule_data['id'].'-'.time())]);

            }
      }

      $input = $this->request->data();
      $dob = explode("-", $input['dob']);
      $input['dob'] = $dob[2].'-'.$dob[0].'-'.$dob[1];

      $is_registered = 0;
      $validation_case_fail = 0;
      if(isset($schedule_id_data[1]) && $schedule_id_data[1] == 'P')
      {
        if(empty($input['email']) && empty($input['phone']) && (empty($input['first_name']) || empty($input['last_name']) || empty($input['dob'])))
        {

          $this->Flash->error(__('Email or mobile number or first name, last name and dob as tuple is required and must be unique.'));
          return $this->redirect($this->referer());
        }

        if(empty($input['email']) && empty($input['phone']) && (!empty($input['first_name']) && !empty($input['last_name']) && !empty($input['dob'])))
        {

         $user_dob = $input['dob'];

         $user_dob = base64_encode($this->CryptoSecurity->encrypt($user_dob,SEC_KEY));
         $first_name = base64_encode($this->CryptoSecurity->encrypt($input['first_name'],SEC_KEY));
         $last_name = base64_encode($this->CryptoSecurity->encrypt($input['last_name'],SEC_KEY));

         $filter = ['AND'=>
                          ['first_name'=> $first_name,
                          'last_name' => $last_name,
                          "dob" => $user_dob,
                          ["OR"=>[
                            'email'=>"",
                            'email IS NULL']
                          ],
                          ["OR"=>[
                            'phone'=>"",
                            'phone IS NULL']
                          ]
                        ]];

          $user_detail = $this->Users->find('all')->where($filter)->first();
          if(!empty($user_detail)){

             $this->Flash->error(__('First name, last name and dob as tuple is already registered.'));
             return $this->redirect($this->referer());
          }
        }
      }
      else{

        if(empty($input['email']) && empty($input['phone'])){

            $this->Flash->error(__('Email or mobile number is required and must be unique.'));
            return $this->redirect($this->referer());
        }
      }


      $dob_whitelist_check = true;
      if(!empty($this->request->getData('dob')))
        $dob_whitelist_check = \DateTime::createFromFormat("m-d-Y", $this->request->getData('dob'));

      $grecaptcharesponse  = $this->request->getData('g-recaptcha-response');
      // $grecaptcharesponse = true; // set to true as it is additional task
      $this->request->data['role_id'] = 2;
            // $password = $this->request->data['password'];
      $this->request->data = array_map(function ($d) {
              return is_string($d) ? trim($d) : $d;
            }, $this->request->data);


     if(!empty($this->request->data['email'])){
        $this->request->data['email'] = base64_encode($this->CryptoSecurity->encrypt($this->request->data['email'],SEC_KEY));
      }

      if(!empty($this->request->data['phone'])){
        $this->request->data['phone'] = base64_encode($this->CryptoSecurity->encrypt($this->request->data['phone'],SEC_KEY));
      }

      $user = $this->Users->patchEntity($user, $this->request->data);

      // check the user in clinic uploaded data dump file start
      $organization_id = $this->request->getData('organization_id');
      $email_id = $this->request->getData('email');
      $phone_no = $this->request->getData('phone');

      if(strlen($phone_no) == 10){
          $phone_no_with_extra_1 = '1'.$phone_no ;
      }

      if(!$user->errors())
      {
        // && !empty($grecaptcharesponse)
       // if no validation error and patient found in clinic dump file


        $hashCode = sha1(time() . rand(0, 100));
        if(!empty($schedule_id_data) && isset($schedule_id_data[1]) && $schedule_id_data[1] == 'E' && !empty($input['email'])){

          $user->activation_link = "";
          $user->is_email_confirmed = 1;
          $user->status = 1;
        }else{

           $user->activation_link = $hashCode;
        }

        $otp = rand(111111,999999);
        if(!empty($schedule_id_data) && isset($schedule_id_data[1]) && $schedule_id_data[1] == 'M' && !empty($input['phone'])){


          $user->is_phone_confirmed = 1;
          $user->status = 1;
        }else{

           $user->otp = $otp;
        }

        $activationLink = Router::url(['controller' => 'Users','action' => 'activate',
                                               '?' => ['c' => $hashCode,'u' => $user->email]], true);
        if(!empty($user->first_name))
            $user->first_name = base64_encode($this->CryptoSecurity->encrypt($user->first_name, SEC_KEY))  ;

        if(!empty($user->last_name))
          $user->last_name = base64_encode($this->CryptoSecurity->encrypt($user->last_name, SEC_KEY)) ;
        if(isset($user->gender) && $user->gender !== '')
          $user->gender = base64_encode(Security::encrypt($user->gender, SEC_KEY)) ;
        if(!empty($internal_emr_id))
           $user->internal_emr_id = base64_encode(Security::encrypt($internal_emr_id, SEC_KEY)) ;

        if(!empty($user->dob))
            $user->dob = base64_encode($this->CryptoSecurity->encrypt($input['dob'],SEC_KEY));
        if($record = $this->Users->save($user)){

          if(!empty($schedule_data) && isset($record['id'])){

            $scheuleTbl->updateAll(['user_id' => $record->id],['id' => $schedule_data['id']]);
          }

          //logic fir send msg on phone or email or both
          $send_nofitication = array(

            'email' => 0,
            'phone' => 0
          );

          if(empty($schedule_id_data)){

              $send_nofitication['email'] = 1;
              $send_nofitication['phone'] = 1;

          }
          elseif(!empty($schedule_id_data) && isset($schedule_id_data[1])){

            if($schedule_id_data[1] == 'E'){

              $send_nofitication['email'] = 0;
              $send_nofitication['phone'] = 1;
            }
            elseif($schedule_id_data[1] == 'M'){

              $send_nofitication['email'] = 1;
              $send_nofitication['phone'] = 0;
            }
            else{

              $send_nofitication['email'] = 1;
              $send_nofitication['phone'] = 1;
            }
          }
          else{

            $send_nofitication['email'] = 1;
            $send_nofitication['phone'] = 1;
          }

          $first_name = 'User';
          if(!empty($user->first_name))
             $first_name = $this->CryptoSecurity->decrypt(base64_decode($user->first_name), SEC_KEY);

          if($send_nofitication['email'] == 1 && !empty($user['email'])){

             $mailData = array();
             $mailData['slug'] = 'user_registration';
             $mailData['email'] = $this->CryptoSecurity->decrypt(base64_decode($user->email), SEC_KEY);
             $mailData['replaceString'] = array('{user}','{activation_link}','{email}','{password}');

            $mailData['replaceData'] = array($first_name,$activationLink,$mailData['email']);
            $this->MailSend->send( $mailData );

            $send_nofitication['email'] = 1;
          }
          else{

            $send_nofitication['email'] = 0;

          }

          if($send_nofitication['phone'] == 1 && !empty($user['phone'])){

            $phone = $user['phone'];
            if(!empty($user['phone'])){

              $phone = $this->CryptoSecurity->decrypt(base64_decode($user['phone']),SEC_KEY);
            }

            $msgData = array();
            $msgData['slug'] = 'user_registration';
            $msgData['phone'] = $phone;
            $msgData['replaceString'] = array('{user}','{otp}');
            $msgData['replaceData'] = array($first_name,$otp);
            $this->UserTextMsgSend->send( $msgData );
            $send_nofitication['phone'] = 1;
          }
          else{

            $send_nofitication['phone'] = 0;
          }

          //logic for show the flash msg on screen

          if($send_nofitication['email'] == 1 && $send_nofitication['phone'] == 0){

            echo  $this->Flash->success(__('Thank you for registering with Allevia. Please confirm your email before your next visit (not this visit) to activate your account.'));
          }
          elseif($send_nofitication['phone'] == 1 && $send_nofitication['email'] == 0){

            echo  $this->Flash->success(__('Thank you for registering with Allevia. Please confirm your phone number before your next visit (not this visit) to activate your account.'));
          }
          elseif($send_nofitication['phone'] == 1 && $send_nofitication['email'] == 1){

            echo  $this->Flash->success(__('Thank you for registering with Allevia. Please confirm your email and phone number before your next visit (not this visit) to activate your account.'));

          }
          else{
            echo $this->Flash->success(__('Thank you for registering with Allevia.'));
          }

          $user = $user->toArray();
          $this->Auth->setUser($user);
          $activity = array();
          $activity['action_performed'] = 1;
          $activity['user_id'] = $user['id'];
          $this->General->userActivity($activity);

          $this->request->session()->delete('Flash');

          //manage IFRAME api flow
          // pr($schedule_data); die;
          if(!empty($schedule_id_data) && isset($schedule_id_data[1]) && $schedule_id_data[1] == 'IF'){

            if(isset($schedule_data) && !empty($schedule_data)){

              $session = $this->getRequest()->getSession();
              $session->write('iframe_api_data', $schedule_data);
              if($schedule_data['go_through_medical_history'] == 1){

                $this->redirect(['controller'=>'Users','action' => 'editMedicalHistory','prefix' => $this->prefix]);
              }
              else{

                // $schedule_slug = $schedule_data['id'].'-'.time();
                // $this->redirect(['controller'=>'Users','action' => 'newAppointment', 'prefix' => $this->prefix ,base64_encode($schedule_slug)]);
                  return $this->redirect(['action' => 'addAddress','prefix' => $this->prefix , base64_encode($schedule_data['id'])]);
              }

              //pr($schedule_data);die;
            }
            else{

              echo  $this->Flash->error(__('Something went wrong, please try again.'));
            }
          }
          else{
            // pr($schedule_data);
            // echo $organization_id;
            // pr($schedule_data['organization']['id']); die('hghgh');
            /*$this->redirect(['controller'=>'Users','action' => 'scheduledAppointments', 'prefix' => $this->prefix]);*/
            // $this->redirect(['controller'=>'Users','action' => 'addAddress', 'prefix' => $this->prefix]);
            if(empty($user_data['city']) || empty($user_data['state']) || empty($user_data['zip']) || empty($user_data['clinical_race']) || empty($user_data['clinical_ethnicity']))
            {
              return $this->redirect(['action' => 'addAddress','prefix' => $this->prefix , base64_encode($schedule_data['id'])]);

            }else{
              return $this->redirect(['controller' => 'users', 'action' => 'registeredUserQuestion', 'prefix' => false, base64_encode($schedule_data['id'].'-'.time())]);

            }
            // return $this->redirect(['action' => 'addAddress','prefix' => $this->prefix , base64_encode($schedule_data['organization_id'])]);

          }

        }
        else{

            echo  $this->Flash->error(__('Something went wrong, please try again.'));
        }

      }
      else if(empty($grecaptcharesponse))
      {
        //echo  $this->Flash->error(__('Captcha not validated, please try again.'));
      }

    }
        $this->loadModel('Cms');
        $pages_data = $this->Cms->find('list', [
                      'keyField' => 'slug',
                      'valueField' => 'bottom_content'
                  ])->where(['slug IN' => array('phi-authorization', 'privacy-policy', 'terms-conditions') ]);
    $pages_data = $pages_data->toArray();


        $this->set(array('user'=>$user, 'org_data' => $org_data, 'pages_data' => $pages_data));


    }

    public function addAddress($sch_id = null)
    {
        $this->viewBuilder()->setLayout('front');
        $this->loadModel('Organizations');
        $this->loadModel('UserSignedDocs');
        $session = $this->getRequest()->getSession();
        $id = $this->Auth->user('id');

        $login_user = $this->Users->find('all')->where(['id'=>$id])->first();
        $schedule_data = '';
        if(!empty($sch_id))
        {
          $sch_id = base64_decode($sch_id);
          $scheuleTbl  = TableRegistry::get("Schedules");
          $schedule_data = $scheuleTbl->find('all')->where(['id'=>$sch_id])->first();
        }

       if(!empty($sch_id))
              {
                $this->Schedules = $this->loadModel('Schedules');
                $this->Organizations = $this->loadModel('Organizations');
                $schedule = $this->Schedules->find('all')->where(['id' => $sch_id])->first();
                $organization = $this->Organizations->find('all')->where(['id' => $schedule['organization_id']])->first();

                $clinic_color_scheme['heading_color'] = !empty($organization['heading_color']) ? $organization['heading_color'] : '' ;
                $clinic_color_scheme['general_title_color'] = !empty($organization['general_title_color']) ? $organization['general_title_color'] : '' ;
                $clinic_color_scheme['general_text_color'] = !empty($organization['general_text_color']) ? $organization['general_text_color'] : '' ;
                $clinic_color_scheme['background_color'] = !empty($organization['background_color']) ? $organization['background_color'] : '' ;
                $clinic_color_scheme['text_color'] = !empty($organization['text_color']) ? $organization['text_color'] : '' ;
                $clinic_color_scheme['button_gradient_color1'] = !empty($organization['button_gradient_color1']) ? $organization['button_gradient_color1'] : '' ;
                $clinic_color_scheme['button_gradient_color2'] = !empty($organization['button_gradient_color2']) ? $organization['button_gradient_color2'] : '' ;
                $clinic_color_scheme['button_gradient_color3'] = !empty($organization['button_gradient_color3']) ? $organization['button_gradient_color3'] : '' ;
                $clinic_color_scheme['active_button_color'] = !empty($organization['active_button_color']) ? $organization['active_button_color'] : '' ;
                $clinic_color_scheme['hover_state_color'] = !empty($organization['hover_state_color']) ? $organization['hover_state_color'] : '' ;
                $clinic_color_scheme['active_state_color'] = !empty($organization['active_state_color']) ? $organization['active_state_color'] : '' ;
                $clinic_color_scheme['link_color'] = !empty($organization['link_color']) ? $organization['link_color'] : '' ;
                $clinic_color_scheme['link_hover_color'] = !empty($organization['link_hover_color']) ? $organization['link_hover_color'] : '' ;
                $clinic_color_scheme['clinic_logo_status'] = !empty($organization['clinic_logo_status']) ? $organization['clinic_logo_status'] : '' ;
                $clinic_color_scheme['clinic_logo'] = !empty($organization['clinic_logo']) ? $organization['clinic_logo'] : '' ;
                $session = $this->getRequest()->getSession();
                $session->write([
                'clinic_color_scheme' => $clinic_color_scheme,
                ]);
        }
        if($this->request->is('post'))
        {

           $this->loadModel('Users');

           $city  =  $this->request->data('city') != '' ?  base64_encode(Security::encrypt($this->request->data('city'), SEC_KEY)):'';
           $state  = $this->request->data('state') != '' ? base64_encode(Security::encrypt( $this->request->data('state'), SEC_KEY)) :'';
           $zip  =  $this->request->data('zip') != '' ? base64_encode(Security::encrypt($this->request->data('zip'), SEC_KEY)):'';

           $clinical_race = $this->request->data('clinical_race');
           $clinical_ethnicity = $this->request->data('clinical_ethnicity');


          $update_data = $this->Users->updateAll(array('city' =>$city,'state' =>$state,'zip' =>$zip,'clinical_race' => $clinical_race,'clinical_ethnicity' =>$clinical_ethnicity), array('id' => $id));

          // if(!empty($user_sign_data)){

          // $user_sign_data->patient_type = 2;
          // }
          // else{

          // $user_sign_data = $this->UserSignedDocs->newEntity();
          // $user_sign_data->organization_id = $org_data['id'];
          // $user_sign_data->user_id = $login_user['id'];
          // $user_sign_data->patient_type = 2;
          // }

           if($update_data){

           if($sch_id && !empty($schedule_data)){
              $schedule_slug = $sch_id.'-'.time();
              $this->Flash->success('Data saved successfully.');
              return $this->redirect(['action' => 'newAppointment', 'prefix' => $this->prefix,base64_encode($schedule_slug)]);

            }
            else if($session->check('current_schedule_id') && !empty($session->read('current_schedule_id'))){

              $schedule_id = $session->read('current_schedule_id');
              $session->delete('current_schedule_id');
              $this->Flash->success('Data saved successfully.');
              return $this->redirect(['action' => 'newAppointment', 'prefix' => $this->prefix,$schedule_id]);

            }
            else{
                $this->Flash->success('Data saved successfully.');
                return $this->redirect(['action' => 'scheduledAppointments', 'prefix' => $this->prefix]);
            }
          }
          else
          {
           $this->Flash->error('Data could not be saved.');
           return $this->redirect($this->referer());
          }


          //$this->redirect(['controller'=>'Users','action' => 'scheduledAppointments', 'prefix' => $this->prefix]);
        }

    }

    public function registeredUserQuestion($schedule_id)
    {
        $this->viewBuilder()->setLayout('front');
        $this->loadModel('Organizations');
        $this->loadModel('UserSignedDocs');
        $orgTbl  = TableRegistry::get("Organizations");
        $session = $this->getRequest()->getSession();
        $id = $this->Auth->user('id');
        $login_user = $this->Users->find('all')->where(['id'=>$id])->first();
        //pr($login_user);
        // $org_id = base64_decode($org_id);
        $schedule_id = explode('-',base64_decode($schedule_id))[0];
        $scheuleTbl  = TableRegistry::get("Schedules");
        $schedule_data = $scheuleTbl->find('all')->where(['id'=>$schedule_id])->first();        
        $org_data = $orgTbl->find('all')->where(['id' => $schedule_data['organization_id']])->first();
        $schedule_slug = $schedule_id.'-'.time();
        // Hide user info form when setting is disable
        if(!empty($org_data) && $org_data->is_show_user_info != 1)
        {
          if(!empty($schedule_id) && !empty($schedule_data))
           {
            $this->redirect(['controller'=>'Users','action' => 'newAppointment', 'prefix' => $this->prefix ,base64_encode($schedule_slug)]);
          }else
          {
            return $this->redirect(array('action' => 'scheduledAppointments','prefix' => $this->prefix));

          }
        }
        // End
        if($this->request->is('post'))
        {
           $this->loadModel('Users');
           $user_data = array();
           if($this->request->data('is_address') == 0)
           {

           $user_data['city']  =  $this->request->data('city') != '' ? base64_encode(Security::encrypt($this->request->data('city'), SEC_KEY)):'';
           $user_data['state']  =  $this->request->data('state') != '' ? base64_encode(Security::encrypt($this->request->data('state'), SEC_KEY)):'';
           $user_data['address']  =  $this->request->data('address') != '' ? base64_encode(Security::encrypt($this->request->data('address'), SEC_KEY)):'';
           $user_data['zip']  =  $this->request->data('zip') != '' ? base64_encode(Security::encrypt($this->request->data('zip'), SEC_KEY)):'';
           }
           if($this->request->data('is_pharmacy') == 0)
           {
           $user_data['pharmacy']  = $this->request->data('pharmacy') != '' ? base64_encode(Security::encrypt($this->request->data('pharmacy'), SEC_KEY)):'';
           }
           if($this->request->data('is_phone') == 0)
           {
           $user_data['phone']  =  $this->request->data('phone') != '' ? base64_encode($this->CryptoSecurity->encrypt($this->request->data('phone'),SEC_KEY)):'';
           }
           if(!empty($user_data))
           {
              $data = $this->Users->updateAll($user_data, array('id' => $id));
           }
           if(!empty($schedule_id) && !empty($schedule_data))
           {
            $this->redirect(['controller'=>'Users','action' => 'newAppointment', 'prefix' => $this->prefix ,base64_encode($schedule_slug)]);
          }else
          {
            return $this->redirect(array('action' => 'scheduledAppointments','prefix' => $this->prefix));

          }
        }
        $this->set(compact('login_user'));

    }



  public function communicationSetting(){

        $this->viewBuilder()->setLayout('front');

        $session = $this->getRequest()->getSession(); // $this->request->session();
        $USER    = $session->read('Auth.User');
        $login_user = $USER ;

        $userId = $USER['id'];


      $users= TableRegistry::get('Users');
       $curuser = $users->get($userId);

        // $curuser = $this->Users->find('all')->where(['id' => $userId])->first() ;
        // pr($curuser); die;


        if($this->request->is(['post','put'])){

          // pr($this->request->data); die;

          $curuser->text_msg = $this->request->getData('text_msg');
          $curuser->email_msg = $this->request->getData('email_msg');

          $users->save($curuser);


          // $this->Users->query()
          //     ->update()
          //     ->set(['text_msg' => $text_msg, 'email_msg' => $email_msg])
          //     ->where(['id' => $userId])
          //     ->execute();





        }
// pr($curuser); die;

        $this->set(compact('curuser'));

    // echo 'hi'; die;
  }




   public function activate(){
        $this->autoRender = false;
        $key = $this->request->query['c'];
        $user = $this->request->query['u'];

        $data = $this->Users->find('all')->where(['email' => $user])->first();

        if( !empty($data) ){

            if($data->activation_link == $key){
                //$data->status = 1;
                $data->activation_link = null;
                $data->is_email_confirmed = 1;

                if(!empty($data['phone']) && $data['is_phone_confirmed'] == 0){

                  $first_name = "user";
                  if(!empty($data['first_name'])){

                    $first_name = $this->CryptoSecurity->decrypt(base64_decode($data['first_name']),SEC_KEY);
                  }

                  $phone = $this->CryptoSecurity->decrypt(base64_decode($data['phone']),SEC_KEY);
                  $otp = rand(111111,999999);

                  $msgData = array();
                  $msgData['slug'] = 'activate-account';
                  $msgData['phone'] = $phone;
                  $msgData['replaceString'] = array('{user}','{otp}');
                  $msgData['replaceData'] = array($first_name,$otp);
                  $this->UserTextMsgSend->send( $msgData );

                  $data->otp = $otp;
                  $this->Users->save( $data );

                  $this->Flash->success(__("Please check your phone for otp or contact admin."));
                  return $this->redirect(['controller' => 'users','action' => 'verifyOtp', 'prefix' => $this->prefix]);
                }
                else{

                  $this->Users->save( $data );
                  $msg = 'Account activated successfully.';
                  $this->Flash->success(__($msg));
                  $this->redirect(['action' => 'login', 'prefix' => $this->prefix]);
                }


            } else {

                $msg = 'Activation link Expired.';
                $this->Flash->error(__($msg));
                $this->redirect(['action' => 'login', 'prefix' => $this->prefix]);
            }

        }else{
            $msg = '';
            $this->redirect(['action' => 'login', 'prefix' => $this->prefix]);
        }

    }

/*----------------------------------------------code for  facebook login starts-----------------------------------------------*/
    function fblogin() {
           //die('1');
            //$role_id = $this->request->data['role_id'];
              //echo $role_id; die;
            //die('hello');
            $this->request->session()->start();
            //pr($this->request->data); die;
             $facebook_id = $this->request->data['facebook_id'];
             $role_id = $this->request->data['role_id'];
            // pr($this->request->data) ;die;
            $email = $this->request->data['email'];
            $first_name = $this->request->data['first_name'];
            $last_name = $this->request->data['last_name'];
            $session = $this->request->session();
            $dataList = TableRegistry::get('Users');
            $UserInfo = $dataList->find()->where(['email' => $email])->first();

            $userfc = $dataList->find()->where(['fb_id' => $facebook_id])->first();
      $this->Auth->logout() ; // 01-05-18

            ///pr($userfc);  die;
            //echo ($userfc); die;
            if ($userfc){
                $userfc = $userfc->toArray();
                $this->Auth->setUser($userfc);
                $session->write('Config.data', $userfc);

                $query = $dataList->query();
                $query->update()->set(['fb_id' => $facebook_id,'is_shown'=>1])->where(['email' => $email])->execute();
        echo  $userfc['role_id'];
                // echo "SaveFB";

            }
            elseif($UserInfo) {
             $query = $dataList->query();
             $query->update()->set(['fb_id' => $facebook_id,'is_shown'=>1])->where(['email' => $email])->execute();
             $UserInfo = $UserInfo->toArray();

             $this->Auth->setUser($UserInfo);
             $session->write('Config.data', $UserInfo);
       echo $UserInfo['role_id'];
             // echo "SaveEMAIL";
         } else {
            $passsend = '123456';
            $hasher = new DefaultPasswordHasher();
            $newpass = $hasher->hash($passsend);
      $this->request->data['username'] = $email;
            $this->request->data['email'] = $email;
            $this->request->data['first_name'] = $first_name;
            $this->request->data['last_name'] = $last_name;
            $this->request->data['password'] = $newpass;
            $this->request->data['status'] = 1;
            $this->request->data['is_shown'] = 1;
            $this->request->data['fb_id'] = $facebook_id;
            $this->request->data['role_id'] = $role_id ;

            //pr($data); die;
            $user  = $dataList->newEntity();
            $dataList->patchEntity($user,$this->request->data,['validate' => false]);

            if ($result=$dataList->save($user)) {

             $session->write('Config.data', $result);
             $userId =  $result->id;
             $userfc = $dataList->find()->where(['id' =>$userId])->first()->toArray();
             //$userfc = $userfc->toArray();
             //pr($userfc); die;
             if ($this->Auth->setUser($userfc)) {

                // echo "SaveNEW";
            }
            else{
             // echo "NoSave";
         }
     echo    $role_id;
                    //$session->write('fb_login_ft_time','fb_login_first_time');



     }

    }

  /*
   echo '<script>window.close();
        window.opener.location.reload();</script>';
    if($role_id == 2) {
      return $this->redirect(array('controller'=>'publishers','action'=>'dashboard'));
    } else if($role_id == 3) {
      return $this->redirect(array('controller'=>'Users','action'=>'viewer'));
    }
*/
    die;
    }


/*----------------------------------------------code for  facebook login ends-----------------------------------------------*/

/*----------------------------------------------code for google login starts-----------------------------------------------*/

 public function googlelogin($role_id=null){
        $session = $this->request->session();
           if(!empty($role_id))
            {

                  $session->write('Config.language', $role_id);
                  $value =  $session->read('Config.language');
            }
            else
            {
                $role_id = $session->read('Config.language');
            }

        $user = $this->Google->google();

        //pr($user); die;
        if(!empty($user))
        {
      $this->Auth->logout() ; // 01-05-18
            $session = $this->request->session();
            $dataList = TableRegistry::get('Users');
            $userfc = $dataList->find()->andWhere(['email' => $user['email']])->andWhere(['google_id' => $user['id']])->first();
                        //$userfc = $dataList->find()->where(['facebook_id' => $user_profile['id']])->first();
           // pr($userfc); die;
            if ($userfc){
             $userfc = $userfc->toArray();
             $this->Auth->setUser($userfc);
             $session->write('Config.data', $userfc);

             $query = $dataList->query();
             $query->update()->set(['username'=>$user['email'],'google_id' => $user['id'],'is_shown'=>1])->where(['email' => $user['email']])->execute();
                          //echo "<script> window.close(); </script>"; username=== email

         }
         else {
                        //$newpass = $this->Password->generatePassword();
            $passsend = '123456';
            $hasher = new DefaultPasswordHasher();
            $newpass = $hasher->hash($passsend);
            $this->request->data['username'] = $user['email'];
            $this->request->data['email'] = $user['email'];
            $this->request->data['first_name'] = $user['given_name'];
      $this->request->data['last_name'] = $user['family_name'];
            // $this->request->data['profile_picture'] = $user['picture'];
             $this->request->data['gender'] = $user['gender'] == 'male' ? 1 : 0 ;
            $this->request->data['password'] = $newpass;
            $this->request->data['status'] = 1;
            $this->request->data['google_id'] = $user['id'];
            $this->request->data['role_id'] = $role_id;

            $user  = $dataList->newEntity();
            $dataList->patchEntity($user,$this->request->data,['validate' => false]);

            if ($result=$dataList->save($user))
            {
                $user_details = TableRegistry::get('users');
                //$detailsData    = $user_details->newEntity();
                //$this->request->data['user_id'] = $result->id;
                //$user_details->patchEntity($detailsData,$this->request->data,['validate' => false]);
                //$user_details->save($detailsData);


                $userId =  $result->id;
                $userfc = $dataList->find()->where(['id' =>$userId])->first();
                $userfc = $userfc->toArray();
                $session->write('Config.data', $userfc);
                if ($this->Auth->setUser($userfc)) {
                                //echo "<script> window.close(); </script>";
                }
            }

        }
     echo '<script>window.close();
        window.opener.location.reload();</script>';

    if($role_id == 2) {
      return $this->redirect(array('controller'=>'publishers','action'=>'dashboard', 'prefix' => $this->prefix));
    } else if($role_id == 3) {
      return $this->redirect(array('controller'=>'Users','action'=>'viewer', 'prefix' => $this->prefix));
    }


     /*   ?><script> window.close(); </script> <?php */
    }
    die;
    }



/*----------------------------------------------code for  google login ends-----------------------------------------------*/

/*----------------------------------------------code for  forgot password starts-----------------------------------------------*/

    public function forgotpassword(){

      //echo $this->CryptoSecurity->decrypt(base64_decode('VGxRM2VqQXZUSGs0ZVRabFVVaHNSMjF6WVd0MFp6MDlPam89'),SEC_KEY);die;

      $this->viewBuilder()->setLayout('front');

      if( $this->request->is(['post','put']) ){

          $email_phone = base64_encode($this->CryptoSecurity->encrypt($this->request->data['email'],SEC_KEY));

          $result = $this->Users->find('all')->where(['or' => [['email' => $email_phone],['phone' => $email_phone]]])->first();
          if(empty($result)){

             $this->Flash->error(__('Record not found, Please try again!'));
             return $this->redirect($this->referer());
          }
          if($result->status!=1){

            $this->Flash->error(__('Your account is not active.'));
            return $this->redirect(['action' => 'login', 'prefix' => $this->prefix]);

          }

         if(!empty($result) ){


          if($result['email'] == $email_phone){

            $userEmail = $this->CryptoSecurity->decrypt(base64_decode($result->email),SEC_KEY);
            $username = "user";
            if(!empty($result->username)){
              $username = ucfirst($this->CryptoSecurity->decrypt(base64_decode($result->username),SEC_KEY));
            }
            $hashCode = sha1($result->id . rand(0, 100));
            $activationLink = Router::url(['controller' => 'Users','action' => 'reset_password',$hashCode], true);
            $link = $activationLink;

            /* Update to database */
           $result->activation_link = $hashCode;
            $this->Users->save($result);

            /* End update to database */

             /* Start Send email */
           $mailData = array();
           $mailData['slug'] = 'forgot_password';
           $mailData['email'] = $userEmail;
           $mailData['replaceString'] = array('{username}','{activation_link}');
           $mailData['replaceData'] = array($username,$link);

            $this->MailSend->send( $mailData );

           /* end send email  */

           $this->Flash->success(__('An activation link has been sent to your e-mail,please check to reset your password.'));
          }
          elseif($result['phone'] == $email_phone){

            $username = 'user';

            if(!empty($user_data['first_name'])){
              $username = $this->CryptoSecurity->decrypt(base64_decode($user_data['first_name']),SEC_KEY);
            }

            $phone = $this->CryptoSecurity->decrypt(base64_decode($result['phone']),SEC_KEY);
            $otp = rand(111111,999999);

            // Send an SMS using Twilio's REST API and PHP
            $msgData = array();
            $msgData['slug'] = 'forgot_password';
            $msgData['phone'] = $phone;
            $msgData['replaceString'] = array('{username}','{otp}');
            $msgData['replaceData'] = array($username,$otp);
            //pr($msgData);die;
            $this->UserTextMsgSend->send( $msgData );

            $result->otp = $otp;
            $this->Users->save($result);

          $this->Flash->success('An otp has been sent to your phone number. Please check to reset your password.');
          return $this->redirect(array('controller' => 'users','action' => 'verifyOtp', 'prefix' => $this->prefix ,base64_encode('forgotpassword') ));

          }

            // $this->redirect(['controller'=>'users','action'=>'login']);
         }else{
                $this->Flash->error(__('Please enter correct email!'));
                // $this->redirect(['action'=>'login','#' => 'toregister']);
            }
      }

    }

/*----------------------------------------------code for  forgot password ends-----------------------------------------------*/



/*----------------------------------------------code for  reset password starts-----------------------------------------------*/

    public function resetPassword($token = null){

      $users = $this->Users->newEntity();
      $this->viewBuilder()->setLayout('front');
      // $this->layout = 'homepage';
        // $titleforlayout = 'Home'  ;
        // $this->set('titleforpage', $titleforlayout);

      /* Start ---check token validation */

      //$this->viewBuilder()->layout('page');
      $users = $this->Users->find()
                           ->select(['id'])
                           ->where(['or'=>[['activation_link' => $token],['id' => base64_decode($token)]],'status IN' => [0,1]])
                           ->first();

      //pr($users); die;

      if( empty($users) ){
         $this->Flash->error(__('Link Expired'));
    return $this->redirect(['controller'=>'users','action'=>'login', 'prefix' => $this->prefix]);
      }

      /* end ---- check token validation */
      if( $this->request->is(['post','put']) ){
      $users->activation_link = '';
      $data =  $this->Users->patchEntity($users,$this->request->data);

         if( !$users->errors() ){

            if ($this->Users->save($data)) {
                     $this->Flash->success('Password updated successfully.');
                     return $this->redirect(['controller'=>'users','action'=>'login', 'prefix' => $this->prefix]);
              }

         }
         else{
            //pr($users->errors()); die;
            foreach($users->errors() as $key => $value){
                     $messageerror = [];
                     foreach($value as $key2 => $value2){
                             $messageerror[] = $value2;
                     }
                     $errorInputs[$key] = implode(",",$messageerror);
                     $this->Flash->error(__($errorInputs[$key]));
             }
             // $this->redirect(['controller'=>'users','action'=>'reset_password',$token]);
         }

      }

      $this->set(compact('token','users'));

    }

/*----------------------------------------------code for  reset password ends-----------------------------------------------*/

    public function index()
    {
       $this->layout = 'admin';
       $titleforlayout = 'Dashboard'  ;
       $this->set('titleforpage', $titleforlayout);
    }

    public function admin_profile()
    {
        //unlink('/insta/files/users/admin_avtar.jpg');


        $this->layout = 'admin';
        $this->loadModel('Users');
        $AdminId = $this->Auth->user('id');
        $user =  $this->Users->get($AdminId);
        if ($this->request->is(['post', 'put']))
        {
                $img =  $this->request->data['oldimgname'];
               // echo $img; die;
                $image_name = $this->request->data['profile_picture'];


                //$id =  $this->request->data['id'];
                $this->request->data['profile_picture'] = '';
                $user = $this->Users->patchEntity($user, $this->request->data);

                if ($this->Users->save($user))
                {
                    if(!empty( $image_name['name'] ))
                    {

                            $ext = pathinfo($image_name['name'], PATHINFO_EXTENSION);


                            if($ext=='png' || $ext=='jpeg' || $ext=='jpg' || $ext=='gif' || $ext=='GIF' || $ext=='PNG' || $ext=='JPEG' || $ext=='JPG' )
                            {
                                $img123 = time().'_avtar.'.$ext;
                                $temp_name =   $image_name['tmp_name'];
                                $name =  $image_name['name'];
                                move_uploaded_file($temp_name, WWW_ROOT . 'files' . DS . 'users' . DS  . $img123);

                                $image_dir = WWW_ROOT . 'files' . DS . 'users' . DS  . $img123;
                                $mediumfile_mname = WWW_ROOT . 'files' . DS . 'users' . DS  . 'small';
                                $usersTable = TableRegistry::get('Users');
                                $user = $usersTable->get($AdminId);

                              //  $this->resize_crop_image(400,400,$image_dir,$mediumfile_mname,80);



                                $user->profile_picture = $img123;
                                $usersTable->save($user);

                                $this->Flash->success(__('Profile Updated successfully.'));
                                return $this->redirect(['action' => 'profile', 'prefix' => $this->prefix]);
                            }
                            else
                            {
                                $usersTable = TableRegistry::get('Users');
                                $user = $usersTable->get($AdminId);
                                $user->profile_picture = $img;
                                $usersTable->save($user);

                                $this->Flash->error(__('Image not valid'));
                                return $this->redirect(['action' => 'profile', 'prefix' => $this->prefix]);

                            }
                    }
                    else
                    {
                                $usersTable = TableRegistry::get('Users');
                                $user = $usersTable->get($AdminId);
                                $user->profile_picture = $img;
                                $usersTable->save($user);
                    }


                    $this->Flash->success(__('Profile Updated successfully.'));
                    return $this->redirect(['action' => 'profile', 'prefix' => $this->prefix]);
                }
        }

        $country =  json_decode($this->country());
        $state   =  json_decode($this->state($user->country));
        $city    =  json_decode($this->city($user->state));
        $this->set(array('data'=>$user,'user'=>$user,'country'=>$country,'state'=>$state,'city'=>$city));
    }










    /**
 * @forgotpass
 *
 * @throws MethodNotAllowedException
 * @throws NotFoundException
 * @param integer $id
 * @return void
 */


    public function forgotpass()
    {
        $titleforlayout = 'Forgot Password'  ;
        $this->set('titleforpage', $titleforlayout);
         $this->layout = 'homepage';
        if ($this->request->is(['post', 'put']))
        {
            $emailId = $this->request->data["email"] ;

            $query = $this->Users->find('all')
            ->where(['Users.email' => $emailId]);
            $results = $query->first();



            if(!empty($results) && ( $results->role_id == 2 ||  $results->role_id == 3 ) )
            {
                $username = $results->username;

                $activation_link = SITE_URL.'/users/reset_password/'.base64_encode($results->id);
                $EmailTemplates= TableRegistry::get('EmailTemplates');

                $query = $EmailTemplates->find('all')
                ->where(['EmailTemplates.slug' => 'forgot_password']);

                $template = $query->first();

                $mailMessage = str_replace(array('{username}', '{activation_link}'), array($username,$activation_link), $template->description);

              //  echo $mailMessage;die;

                $configsTable = TableRegistry::get('Sptconfigs');
                $config = $configsTable->get('7');
                $reciveemail = $config->value;

                //$userEmail = $results->email;
                $userEmail = 'admin@gmail.com';
                $adminEmail = Configure::read('App.EmailFrom');

                $to = $emailId;
                $subject = $template->subject;
                $txt = $mailMessage;
                $headers = "MIME-Version: 1.0" . "\r\n";
                $headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";
                $headers .= "From:".$adminEmail . "\r\n";

                mail($to,$subject,$txt,$headers);

               // $email = new Email('default');
                //try {
                //
                //    $res = $email->from([ $adminEmail => $adminEmail ])
                //            ->emailFormat('html')
                //          ->to([$emailId => $emailId])
                //          ->subject($template->subject)
                //          ->send($mailMessage);
                //
                    $this->Flash->success(__('Please check your email for reset Password!'));
                    $this->redirect(array('controller'=>'users','action'=>'forgotpass', 'prefix' => $this->prefix));
                //
                //} catch (Exception $e) {
                //
                //$this->Flash->error('Enter correct email');
                //$this->redirect(array('controller'=>'users','action'=>'forgotpass'));
                //
                //}
            }else{
                $this->Flash->error(__('Please write correct email!'));
                $this->redirect(array('controller'=>'users','action'=>'forgotpass', 'prefix' => $this->prefix));
            }
        }

    }


/*

public function resetpasswords($id = null)
{
    $titleforlayout = 'Reset Password'  ;
    $this->set('titleforpage', $titleforlayout);
    $this->layout = 'homepage';
    $userTable = TableRegistry::get('Users');
    $pid = base64_decode($id);
    $users = $userTable->get($pid);

    if ($this->request->is(['post', 'put']))
    {
        $this->request->data['id'] = $pid;
        $data =  $userTable->patchEntity($users,$this->request->data,['validate'=>'resetpass']);
        $errorInputs =[];
        if (!$users->errors())
        {
            if ($userTable->save($data))
            {
                $this->Flash->success('password updated successfully.');
                return $this->redirect(array('controller'=>'users','action'=>'login'));
            }
        }
        else
        {
            foreach($users->errors() as $key => $value)
            {
                $messageerror = [];
                foreach($value as $key2 => $value2)
                {
                    $messageerror[] = $value2;
                }
                $errorInputs[$key] = implode(",",$messageerror);
            }
            $this->Flash->error($users->errors()['confirm_password']['matches'],['params'=>['class' => 'alert alert-danger']]);
            $this->redirect(array('controller'=>'users','action'=>'resetpasswords/'.$id));
        }
    }

    //pr($users); die;
    $this->set('users', $users);

}


    */



    public function changepassword()
    {

          $titleforlayout = 'Change Password'  ;
        $this->set('titleforpage', $titleforlayout);
        $this->layout = 'homepage';
        $this->loadModel('Users');
        $userId = $this->Auth->user('id');
        $user =  $this->Users->get($userId);


        //error_reporting(0);
        //$user = $this->Users->newEntity();
        if ($this->request->is(['post', 'put'])) {

            $query = $this->Users->find('all')
      ->where(['Users.id' => $userId]);
            $users = $query->first();
            $id = $users->id;
            $hasher = new DefaultPasswordHasher();
            $verify = $hasher->check($this->request->data['oldpassword'], $users->password);
            if($this->request->data['newpassword'] == $this->request->data['confirmpassword'])
            {
                if($verify==1){


                    $password = $hasher->hash($this->request->data['newpassword']);

                    $query = $this->Users->query();
                    $query->update()
                        ->set(['password' => $password])
                        ->where(['id' => $id])
                        ->execute();

                       // $this->Auth->setUser($userdata->toArray());
                          $this->Flash->set('Password Updated successfully.',['params'=>['class' => 'alert success']]);
                          return $this->redirect($this->referer());
                }else{
                     $this->Flash->set('Old Password not matched!',['params'=>['class' => 'alert error']]);
                }
            }else{
                $this->Flash->set('New Password and Confirm Password not matched!',['params'=>['class' => 'alert error']]);
            }
        }
    $this->set('user',$user);

    }



    /**
    * @country
    *
    * @throws MethodNotAllowedException
    * @throws NotFoundException
    * @param integer $id
    * @return void
    */

    public function country()
    {
        $this->loadModel('Countries');
        $query = $this->Countries->find('list', [
        'keyField' => 'id',
        'valueField' => 'name']);
        $country = $query->all();
        return json_encode($country);
        exit;
    }




    public function setting()
    {
        $titleforlayout = 'Setting';
        $this->set('titleforpage', $titleforlayout);
        $this->layout = 'contact_home_page';
        $this->loadModel('Settings');
        $this->loadModel('Users');
        $userId = $this->Auth->user('id');
        $query = $this->Settings->find('all')
    ->where(['user_id' => $userId]);
        $settingarray = $query->toArray();

        $setting = $query->count();
        if(!empty($setting))
        {
            $setting = $this->Settings->get($settingarray[0]->id);
        }
        else
        {
            $setting = $this->Settings->newEntity();
            $settingarray[0] = $setting;
        }

        if($this->request->is(['Post','Put']))
        {
            $this->request->data['user_id'] = $userId;
            $setting = $this->Settings->patchEntity($setting, $this->request->data);
            if ($this->Settings->save($setting))
            {
                $this->Flash->success('Settings updated successfully.');
                return $this->redirect(array('controller'=>'users','action'=>'setting', 'prefix' => $this->prefix));
            }
        }

        $this->set('setting',$settingarray[0]);
    }



  /*------------------------code for dashboard starts-------------------------------------------------------------------------*/

    public function dashboard()
    {


// pr(strtoupper('t7')); die;
   // pr((int) filter_var('left10', FILTER_SANITIZE_NUMBER_INT)); die;
/*
$cmd_argument = '["joint pain","hand pain","finger pain"]';

 // $output_py = shell_exec(ROOT."/env/bin/python ".WWW_ROOT."python_doc/symptomprompting.py ".$cmd_argument);
$spec = '"ORTHO"';
$output_py = shell_exec(ROOT."/env/bin/python ".WWW_ROOT."python_doc/symptomprompting.py ".json_encode($cmd_argument) . " " . $spec. ' 2>&1');
echo($output_py);
die;

*/

// pr(serialize(['Palm side forearm', 'Back hand side forearm', 'Not on the forearm'])); die;

// pr(serialize(array('Sudden', 'Gradual'))); // a:2:{i:0;s:6:"Sudden";i:1;s:7:"Gradual";}

/*
// security encryption example   SEC_KEY
$key = SEC_KEY;
$value = '123456' ;
$result = Security::encrypt($value, SEC_KEY);
echo $result ;
echo '<br> hihi' ;
$result = Security::decrypt($result, SEC_KEY);
echo $result; die;

*/

    // echo 'hi'; die;
    // pr($this->request);
    // $this->layout = 'homepage';
    $this->viewBuilder()->setLayout('front');
    // $titleforlayout = 'Home'  ;
    // $this->set('titleforpage', $titleforlayout);

    // pr($this->Auth->identify());
    $session = $this->getRequest()->getSession(); // $this->request->session();
    $USER    = $session->read('Auth.User');
    $userId = $USER['id'];



    $appoint_table = TableRegistry::get('Appointments');
    $tot_appoint = $appoint_table->find()->where(['user_id' => $userId])->count();

    $pending_appoint = $appoint_table->find()->where(['status' => 0 , 'user_id' => $userId])->count();

    $completed_appoint = $appoint_table->find()->where(['status' => 1 , 'user_id' => $userId])->count();

    $appont_data = $appoint_table->find('all')->where(['user_id' => $userId])->contain(['Doctors','Organizations', 'Specializations'])->all();



      $this->set(compact('tot_appoint', 'pending_appoint', 'completed_appoint', 'appont_data'));



    }


/*------------------------code for dashboard ends-------------------------------------------------------------------------*/


  public function previousAppointment(){


    $this->viewBuilder()->setLayout('front');
    $session = $this->getRequest()->getSession(); // $this->request->session();
    $USER    = $session->read('Auth.User');
    $userId = $USER['id'];
      $this->loadModel('ChiefCompliantUserdetails');
      $this->loadModel('ChiefCompliants');
      $this->loadModel('StepDetails');



      // taken from allevia doc

    $appoint_table = TableRegistry::get('Appointments');
    $tot_appoint = $appoint_table->find('all')->where(['Appointments.user_id' => $userId])->contain(['Doctors','Organizations', 'Specializations'])->order(['Appointments.id' => 'DESC'])->toArray();
// pr($tot_appoint); die;
      foreach ($tot_appoint as $key => $value) {
        $temp_compliant_user = $this->ChiefCompliantUserdetails->find('all')->where(['appointment_id' => $value->id])->first();
        // pr($temp_compliant_user);
        if(!empty($temp_compliant_user)){
            $temp_compliant = $this->ChiefCompliants->find('all')->where(['id' => $temp_compliant_user->chief_compliant_id ])->first();
            $value->current_step_id = $this->StepDetails->find('all')->where(['id' => $temp_compliant_user->current_step_id])->first();
            $value->chief_complain_name = isset($temp_compliant->name) ? $temp_compliant->name : '';
            $value->chief_complain_length = isset($temp_compliant_user->compliant_length) ? $temp_compliant_user->compliant_length : '' ;

        } else {
          unset($tot_appoint[$key]);
          // pr($key);
          // pr($value); die;
        }
      }

        // $this->ChiefCompliantUserdetails->find('all')->where(['appointment_id' => ])
    // pr($tot_appoint->all()); die;
    $this->set(compact('tot_appoint'));


  }


  public function editMedicalHistory($user_id = null)
  {
    //echo base64_encode(Security::encrypt(0, SEC_KEY)) ;die;
    $session = $this->getRequest()->getSession();
    $valid_user_id = $session->read('validate_editmedicalhistory_user');
    $iframe_api_data = null;
    if ($session->check('iframe_api_data')) {

        $iframe_api_data  = $session->read('iframe_api_data');
    }

    $this->viewBuilder()->setLayout('front');

    $USER    = $session->read('Auth.User');

    //pr($USER);die;
    if(!empty($USER) && $USER['role_id'] == 2){

      $userId = $USER['id'];

    }elseif(!empty($user_id)){

      $userId = $user_id;

    }else{

      return $this->redirect(['controller' => 'Users','action' => 'login', 'prefix' => $this->prefix]);
    }
    $user_table = TableRegistry::get('Users');
    $user_data = $user_table->get($userId);
    //pr($user_data); die;
    if($valid_user_id != $user_data['id']){

      return $this->redirect(['action'=> 'medicalhistory', 'prefix' => $this->prefix]);
    }
    if($user_data['role_id'] != 2){

      $this->Flash->error(__('Provider could not edit medical history. Please try again.'));
      return $this->redirect($this->referer());

    }

    //$pmh = unserialize((Security::decrypt(base64_decode($user_data->other_drug_history), SEC_KEY)));
    //pr($pmh);die;
    $schedule_id = null;
    $scheduleTlb = TableRegistry::get('Schedule');
    $schedule_data = $scheduleTlb->find('all',array('order' => array('id' => 'desc')))->where(['user_id'=>$userId])->first();
    if(!empty($schedule_data)){

      $schedule_id = $schedule_data['id'];
    }

    $womantable = TableRegistry::get('women_specific');
    $womandata = $womantable->find()->where(['user_id' => $userId])->first();

    $commonTable = TableRegistry::get('common_conditions');

    $medical_cond = $commonTable->find('list', [
                        'keyField' => 'id',
                        'valueField' => 'name'
                    ])->where(['cond_type' => 1])->toArray();
    $surgical_cond = $commonTable->find('list', [
                        'keyField' => 'id',
                        'valueField' => 'name'
                    ])->where(['cond_type' => 2])->toArray();
    $allergy_cond = $commonTable->find('list', [
                        'keyField' => 'id',
                        'valueField' => 'name'
                    ])->where(['cond_type' => 3])->toArray();
    $shot_cond = $commonTable->find('list', [
                        'keyField' => 'id',
                        'valueField' => 'name'
                    ])->where(['cond_type' => 4])->toArray();

// for quick picks start  ****************


    $common_medical_cond = $commonTable->find('list', [
                        'keyField' => 'id',
                        'valueField' => 'name'
                    ])->where(['cond_type' => 1, 'show_bottom' => 1])->toArray();
    $common_surgical_cond = $commonTable->find('list', [
                        'keyField' => 'id',
                        'valueField' => 'name'
                    ])->where(['cond_type' => 2, 'show_bottom' => 1])->toArray();
    $common_allergy_cond = $commonTable->find('list', [
                        'keyField' => 'id',
                        'valueField' => 'name'
                    ])->where(['cond_type' => 3, 'show_bottom' => 1])->toArray();
    $common_shot_cond = $commonTable->find('list', [
                        'keyField' => 'id',
                        'valueField' => 'name'
                    ])->where(['cond_type' => 4, 'show_bottom' => 1])->toArray();


// for quick picks end  *******************
   //set max visited tab
    if(!empty($user_data) && !empty($user_data->current_tab) && $user_data->current_tab > $user_data->max_visited_tab){

      $user_table->query()
                ->update()
                ->set(['max_visited_tab' => $user_data->current_tab])
                ->where(['id' => $user_data->id])
                ->execute();
    }

    $allergy_reaction_cond = $commonTable->find('list', [
                        'keyField' => 'id',
                        'valueField' => 'name'
                    ])->where(['cond_type' => 5])->toArray();
    $load_the_shots_tab = '';

    $edited_tab = $this->request->getData('edited_tab');

    if(!empty($edited_tab)){

        if((empty($user_data->max_visited_tab) && $user_data->current_tab > $edited_tab ) || ($user_data->max_visited_tab >= $edited_tab))
        {

            $user_data->current_tab = $edited_tab;
            $user_table->save($user_data);
        }
        else{

            $this->Flash->error(__('sorry, you can edit only the previously filled tab.'));
            return $this->redirect($this->referer());
        }
    }
   // pr($edited_tab);die('fdfd');
    if($this->request->is(['post'])){

      $input = $this->request->data();
      //pr($input);die;
      //$tab_name = $this->request->getData('tab_name');
      $tab_number = $this->request->getData('tab_number');

      if(isset($input['time']) && $input['time'] != ''){
      $timemanage = array();
      $timemanage['user_id'] = $userId;
      $timemanage['form_type'] = 'edit_medical_history';
      $timemanage['tab_number'] = isset($input['tab_number'])?$input['tab_number']:'';
      $timemanage['time'] = isset($input['time']) ? $input['time']:'';
      $this->timeManagement($timemanage);
     }

      // year array for year whitelisting validation
      $start_year = 1930;
      $curyear = date("Y");
      $year_whitelist_arr = array();
      for($curyear ; $curyear>= $start_year ; $curyear--){
        $year_whitelist_arr[] = $curyear ;
      }
      $year_whitelist_arr[] = ''; $year_whitelist_arr[] = 1;
      $month_whitelist_arr = array('',0,1,2,3,4,5,6,7,8,9,10,11);

      $data_arr = array();
      $data_arr['medical_history_update_date'] = Time::now();

       if(empty($user_data->check_emh_field_view)){

            $check_emh_field_view = array(

              'checkbasic' => 0,
              'checkmedical' => 0,
              'checksurgical' => 0,
              'checkfamily' => 0,
              'checkallergy' => 0,
              'checkshots' => 0,
              'checksocial' => 0,
              'checkobgyn' => 0
            );
          }
          else{

            $check_emh_field_view = unserialize($user_data->check_emh_field_view);

          }

      if($tab_number == 1){

          $is_retired = $this->request->getData('is_retired');
          $height = $this->request->getData('height');
          $height_inches = $this->request->getData('height_inches');
          $weight = $this->request->getData('weight');
          $zip = $this->request->getData('zip');
          $sexual_orientation = $this->request->getData('sexual_orientation');
          $marital_status = $this->request->getData('marital_status');
          $ethinicity = $this->request->getData('ethinicity');
          $occupation = $this->request->getData('occupation');
          $guarantor = $this->request->getData('guarantor');
          $insurance_company = $this->request->getData('insurance_company');
          $pharmacy = $this->request->getData('pharmacy');
          $address = $this->request->getData('address');
          $city = $this->request->getData('city');
          $state = $this->request->getData('state');
          $race = $this->request->getData('race');
          $bmi = $this->request->getData('bmi');
          $insuranceType = $this->request->getData('insuranceType');
          $subscriberName = $this->request->getData('subscriberName');
          $identificationNumber = $this->request->getData('identificationNumber');
          $groupNumber = $this->request->getData('groupNumber');
          $insuranceCompany = $this->request->getData('insuranceCompany');


        //whitelisting the all input fields of tab number 1
        if(!in_array($is_retired, array(0,1)) || !in_array($height, array(1,2,3,4,5,6,7)) || !in_array($height_inches, array(0,1,2,3,4,5,6,7,8,9,10,11)) || !is_numeric($weight) || !is_numeric($zip) || !in_array($sexual_orientation, array(0,1,2,9)) || !in_array($marital_status, array(0,1,2)) || !in_array($ethinicity, array(0,1,2,3,4,5,9)) ){
            //die('xZxZx');
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());
            // if whitlist validation failed we will directly redirect it back without saving data
        }

        //set the user data that we need to save in tab number 1
        $data_arr['height'] = $height;
        $data_arr['height_inches'] = $height_inches;
        if(is_numeric($data_arr['height']) && is_numeric($data_arr['height_inches'])){

          $data_arr['height'] = ( $data_arr['height'] * 12 ) + $data_arr['height_inches'] ;
        }

        if(!empty($data_arr['height'])){

          $data_arr['height'] = base64_encode(Security::encrypt($data_arr['height'], SEC_KEY));
        }

        $data_arr['weight'] = !empty($weight) ? base64_encode(Security::encrypt($weight, SEC_KEY)): $weight;
        $data_arr['guarantor'] = !empty($guarantor) ? base64_encode(Security::encrypt($guarantor, SEC_KEY)) : $guarantor;
        $data_arr['insurance_company'] = !empty($insurance_company) ? base64_encode(Security::encrypt($insurance_company, SEC_KEY)) : $insurance_company;
        $data_arr['pharmacy'] = !empty($pharmacy) ? base64_encode(Security::encrypt($pharmacy, SEC_KEY)) : $pharmacy;
        $data_arr['address'] = !empty($address) ? base64_encode(Security::encrypt($address, SEC_KEY)) : $address;

        $data_arr['insuranceType'] = !empty($insuranceType) ? base64_encode(Security::encrypt($insuranceType, SEC_KEY)) : $insuranceType;
        $data_arr['subscriberName'] = !empty($subscriberName) ? base64_encode(Security::encrypt($subscriberName, SEC_KEY)) : $subscriberName;
        $data_arr['identificationNumber'] = !empty($identificationNumber) ? base64_encode(Security::encrypt($identificationNumber, SEC_KEY)) : $identificationNumber;
        $data_arr['groupNumber'] = !empty($groupNumber) ? base64_encode(Security::encrypt($groupNumber, SEC_KEY)) : $groupNumber;
        $data_arr['insuranceCompany'] = !empty($insuranceCompany) ? base64_encode(Security::encrypt($insuranceCompany, SEC_KEY)) : $insuranceCompany;


        $data_arr['city'] = !empty($city) ? base64_encode(Security::encrypt($city, SEC_KEY)) : $city;
        $data_arr['state'] = !empty($state) ? base64_encode(Security::encrypt($state, SEC_KEY)) : $state;
        $data_arr['zip'] = !empty($zip) ? base64_encode(Security::encrypt($zip, SEC_KEY)) : $zip;
        $data_arr['race'] = isset($race) ? base64_encode(Security::encrypt($race, SEC_KEY)) : $race;
        $data_arr['bmi'] = !empty($bmi) ? base64_encode(Security::encrypt($bmi, SEC_KEY)) : $bmi;
        $data_arr['is_retired'] = !empty($is_retired) ? base64_encode(Security::encrypt($is_retired, SEC_KEY)) : $is_retired;
        $data_arr['occupation'] = !empty($occupation) ? base64_encode(Security::encrypt($occupation, SEC_KEY)) : $occupation;
        $data_arr['marital_status'] = !empty($marital_status) ? base64_encode(Security::encrypt($marital_status, SEC_KEY)) : $marital_status;
        $data_arr['sexual_orientation'] = !empty($sexual_orientation) ? base64_encode(Security::encrypt($sexual_orientation, SEC_KEY)) : $sexual_orientation;
        $data_arr['ethinicity'] = !empty($ethinicity) ? base64_encode(Security::encrypt($ethinicity, SEC_KEY)) : $ethinicity;
        $data_arr['current_tab'] = 2;
        $check_emh_field_view['checkbasic'] = 1;
        $data_arr['check_emh_field_view'] = serialize($check_emh_field_view);
        //$data_arr['max_visited_tab'] = 2;
        $user_table->patchEntity($user_data, $data_arr);
        if($user_table->save($user_data)){

            $this->Flash->success(__('Saved successfully.'));
           // return $this->redirect($this->referer());
        }
        else{

          $this->Flash->error(__('Could not be saved. Please try again.'));
         // return $this->redirect($this->referer());
        }
      }

      if($tab_number == 2){


        //save medical history data
        $medical_history = $this->request->getData('medical_history');

        $is_check_med_his = $this->request->getData('is_check_med_his');


        if(is_numeric($is_check_med_his) && in_array($is_check_med_his, array(0,1))){

          $data_arr['is_check_med_his'] = base64_encode(Security::encrypt($is_check_med_his, SEC_KEY));
        }

        if($is_check_med_his != 1){
          $medical_history = array(); // empty the array if user did not checked yes for the medical history existance related question
        }

        $tempar = array();
        $i = 0 ;
        if(!empty($medical_history['name']) && !empty(array_filter($medical_history['name'])))
        {

          foreach ($medical_history['name'] as $key => $value)
          {

            if(empty($medical_history['name'][$key])) continue ; // escape if name is empty

            // whitelisting validation for medical history year field start
            if(!in_array($medical_history['year'][$key], $year_whitelist_arr) ){
              $this->Flash->error(__('Could not be saved . Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
            // whitelisting validation for medical history year field end
            $tempar[$i]['name'] = $medical_history['name'][$key] ;
            $tempar[$i]['year'] = $medical_history['year'][$key] ;
            $i++ ;
          }
        }

        if(!empty($tempar))
        {
          $data_arr['medical_history'] = base64_encode(Security::encrypt((serialize($tempar)), SEC_KEY)) ;

        }
        else {
          $data_arr['medical_history'] = '';
        }

        $data_arr['current_tab'] = 3;
        $check_emh_field_view['checkmedical'] = 1;
        $data_arr['check_emh_field_view'] = serialize($check_emh_field_view);
        //$data_arr['max_visited_tab'] = 3;

        $user_table->patchEntity($user_data, $data_arr);
        if($user_table->save($user_data)){

            $this->Flash->success(__('Saved successfully.'));
           // return $this->redirect($this->referer());
        }
        else{

          $this->Flash->error(__('Could not be saved. Please try again.'));
         // return $this->redirect($this->referer());
        }
      }

      if($tab_number == 3){

        //save Surgical history data
        $surgical_history = $this->request->getData('surgical_history');
      	$is_check_surg_his = $this->request->getData('is_check_surg_his');

      	if(is_numeric($is_check_surg_his) && in_array($is_check_surg_his, array(0,1))){

         	$data_arr['is_check_surg_his'] = base64_encode(Security::encrypt($is_check_surg_his, SEC_KEY));
      	}
	    if($is_check_surg_his != 1){
	        $surgical_history = array(); // empty the array if user did not checked yes for the medical history existance related question
	    }

        $tempar = array();
        $i = 0 ;
      	if(!empty($surgical_history['name']) && !empty(array_filter($surgical_history['name'])))
      	{

        	foreach ($surgical_history['name'] as $key => $value)
        	{


        		if(empty($surgical_history['name'][$key])) continue ;  // escape if name is empty

  				// whitelisting validation for surgical history year field start
      			if(!in_array($surgical_history['year'][$key], $year_whitelist_arr) ){
			        $this->Flash->error(__('Could not be saved. Please try again.'));
			        return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
      			}
 				// whitelisting validation for surgical history year field end
          		$tempar[$i]['name'] = $surgical_history['name'][$key] ;
          		$tempar[$i]['year'] = $surgical_history['year'][$key] ;
          		$i++ ;
        	}
      	}
      	if(!empty($tempar)){

  			$data_arr['surgical_history'] = base64_encode(Security::encrypt((serialize($tempar)), SEC_KEY));
      	}
      	else{
        	$data_arr['surgical_history'] = '';
      	}

      	$data_arr['current_tab'] = 4;
      	$check_emh_field_view['checksurgical'] = 1;
        $data_arr['check_emh_field_view'] = serialize($check_emh_field_view);
        //$data_arr['max_visited_tab'] = 4;

        $user_table->patchEntity($user_data, $data_arr);
        if($user_table->save($user_data)){

            $this->Flash->success(__('Saved successfully.'));
           // return $this->redirect($this->referer());
        }
        else{

          $this->Flash->error(__('Could not be saved. Please try again.'));
         // return $this->redirect($this->referer());
        }
      }

      if($tab_number == 4){

        //save Family history data
        //pr($this->request->data());
        $family_history = $this->request->getData('family_history');
      	$is_family_his = $this->request->getData('is_family_his');
      	if(is_numeric($is_family_his) && in_array($is_family_his, array(0,1)))
      	{

         	$data_arr['is_family_his'] = base64_encode(Security::encrypt($is_family_his, SEC_KEY));
      	}
      	if($is_family_his != 1){
        	$family_history = array(); // empty the array if user did not checked yes for the family history existance related question

      	}
		    $age_whitelist_dece_arr = array();
    		for($dece = 0 ; $dece <= 110 ; $dece++){
    		  $age_whitelist_dece_arr[] = $dece ;
    		}
		    $age_whitelist_dece_arr[] = 911; $age_whitelist_dece_arr[] = 999;
        $tempar = array();
        $i= 0 ;
      	if(!empty($family_history['name']) && !empty(array_filter($family_history['name'])))
      	{

        	$family_history['name'] = array_filter($family_history['name']);
        	$check_for_unique_family_name = array();
        	foreach ($family_history['name'] as $key => $value)
        	{

          		//if(!isset($family_history['alive_status'][$key]) || empty($family_history['disease'][$key]) ) continue;

  				    if(in_array($family_history['name'][$key], $check_for_unique_family_name)) continue;
          		$check_for_unique_family_name[] = $family_history['name'][$key];
  		        $tempar[$i]['name'] = $family_history['name'][$key] ;
              $tempar[$i]['disease'] =  $family_history['disease'][$key] ;
              if(isset($family_history['alive_status'][$key])){
    		        $tempar[$i]['alive_status'] =  $family_history['alive_status'][$key] ;
    		        if($tempar[$i]['alive_status'] == 0)
    		        {
    		          	$tempar[$i]['decease_year'] =  $family_history['decease_year'][$key] ;
    		          	$tempar[$i]['cause_of_death'] =  $family_history['cause_of_death'][$key] ;
    		        }
              }

  				  // whitelisting validation for family history fields start
      			if(
    					!in_array($family_history['name'][$key], array('',1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)) || (isset($family_history['alive_status'][$key]) && !in_array($family_history['alive_status'][$key], array('',0,1))) || (isset($family_history['decease_year'][$key]) && !in_array($family_history['decease_year'][$key], $age_whitelist_dece_arr))
     			  )
     			  {
			        $this->Flash->error(__('Could not be saved. Please try again.'));
			        return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
      			}
  				// whitelisting validation for family history fields end
        		$i++ ;
        	}
          //pr($tempar);die;
        	if(!empty($tempar)){

     			  $data_arr['family_history'] = base64_encode(Security::encrypt((serialize($tempar)), SEC_KEY));
        	}
      	}
      	else
      	{
        	$data_arr['family_history'] = '' ;
      	}
      	$data_arr['current_tab'] = 5;
      	$check_emh_field_view['checkfamily'] = 1;
        $data_arr['check_emh_field_view'] = serialize($check_emh_field_view);
        //$data_arr['max_visited_tab'] = 5;

        $user_table->patchEntity($user_data, $data_arr);
        if($user_table->save($user_data)){

            $this->Flash->success(__('Saved successfully.'));
           // return $this->redirect($this->referer());
        }
        else{

          $this->Flash->error(__('Could not be saved. Please try again.'));
         // return $this->redirect($this->referer());
        }
      }

      if($tab_number == 5){

        //save Allergies history data
        $allergy_history = $this->request->getData('allergy_history');

      	$is_check_allergy_his = $this->request->getData('is_check_allergy_his');

      	if(is_numeric($is_check_allergy_his) && in_array($is_check_allergy_his, array(0,1))){

         	$data_arr['is_check_allergy_his'] = base64_encode(Security::encrypt($is_check_allergy_his, SEC_KEY));
      	}

      	if($is_check_allergy_his != 1){
        	$allergy_history = array(); // empty the array if user did not checked yes for the allergy history existance related question
      	}

        $tempar = array();
      	if(!empty($allergy_history))
      	{

	        foreach ($allergy_history as $key => $value)
	        {
	          if(empty($value['name'])) continue ; // escape if allergy name is empty
	          $tempar[] = $value ;
	        }
        	if(!empty($tempar)){

  				$data_arr['allergy_history'] = base64_encode(Security::encrypt((serialize($tempar)), SEC_KEY));
        	}
        }
  		  else
  		  {
    		  $data_arr['allergy_history'] = '';
 		    }

 		     $data_arr['current_tab'] = 6;
 		    $check_emh_field_view['checkallergy'] = 1;
        	$data_arr['check_emh_field_view'] = serialize($check_emh_field_view);
          //$data_arr['max_visited_tab'] = 6;

        $user_table->patchEntity($user_data, $data_arr);
        if($user_table->save($user_data)){

            $this->Flash->success(__('Saved successfully.'));
           // return $this->redirect($this->referer());
        }
        else{

          $this->Flash->error(__('Could not be saved. Please try again.'));
         // return $this->redirect($this->referer());
        }
      }

      if($tab_number == 6){


        //save Social history data
        $data_arr['current_smoke_pack'] = $this->request->getData('current_smoke_pack');
    	if(!empty($data_arr['current_smoke_pack'])){

     		$data_arr['current_smoke_pack'] = base64_encode(Security::encrypt($data_arr['current_smoke_pack'], SEC_KEY));
    	}

      /*$data_arr['current_smoke_year'] = $this->request->getData('current_smoke_year');
    	if(!empty($data_arr['current_smoke_year'])){

    		$data_arr['current_smoke_year'] = base64_encode(Security::encrypt($data_arr['current_smoke_year'], SEC_KEY));
    	}

      if(empty($data_arr['current_smoke_pack']) || empty($data_arr['current_smoke_year']))  {
        $data_arr['current_smoke_pack'] = '';
        $data_arr['current_smoke_year'] = '';
      }*/

  		if(empty($data_arr['current_smoke_pack']))  {
	      $data_arr['current_smoke_pack'] = '';
  		}

      $data_arr['past_smoke_pack'] = $this->request->getData('past_smoke_pack');
    	if(!empty($data_arr['past_smoke_pack'])){

     		$data_arr['past_smoke_pack'] = base64_encode(Security::encrypt($data_arr['past_smoke_pack'], SEC_KEY));
    	}
      	$data_arr['past_smoke_year'] = $this->request->getData('past_smoke_year');
    	if(!empty($data_arr['past_smoke_year'])){

     		$data_arr['past_smoke_year'] = base64_encode(Security::encrypt($data_arr['past_smoke_year'], SEC_KEY));
    	}
  		if(empty($data_arr['past_smoke_pack']) || empty($data_arr['past_smoke_year']))  {
      		$data_arr['past_smoke_pack'] = '';
      		$data_arr['past_smoke_year'] = '' ;
  		}

      	$data_arr['current_drink_pack'] = $this->request->getData('current_drink_pack');
    	if(!empty($data_arr['current_drink_pack'])){

     		$data_arr['current_drink_pack'] = base64_encode(Security::encrypt($data_arr['current_drink_pack'], SEC_KEY));
    	}
      /*$data_arr['current_drink_year'] = $this->request->getData('current_drink_year');
    	if(!empty($data_arr['current_drink_year'])){

     		$data_arr['current_drink_year'] = base64_encode(Security::encrypt($data_arr['current_drink_year'], SEC_KEY));
    	}
  		if(empty($data_arr['current_drink_pack']) || empty($data_arr['current_drink_year']))  {
      		$data_arr['current_drink_pack'] = '';
        	$data_arr['current_drink_year'] = '' ;
  		}*/

      if(empty($data_arr['current_drink_pack']))  {
          $data_arr['current_drink_pack'] = '';
      }

      	$data_arr['past_drink_pack'] = $this->request->getData('past_drink_pack');
    	if(!empty($data_arr['past_drink_pack'])){

     		$data_arr['past_drink_pack'] = base64_encode(Security::encrypt($data_arr['past_drink_pack'], SEC_KEY));
    	}
      	$data_arr['past_drink_year'] = $this->request->getData('past_drink_year');
    	if(!empty($data_arr['past_drink_year'])){

    		$data_arr['past_drink_year'] = base64_encode(Security::encrypt($data_arr['past_drink_year'], SEC_KEY));
    	}

  		if(empty($data_arr['past_drink_pack']) || empty($data_arr['past_drink_year']))  {
      		$data_arr['past_drink_pack'] = '';
        	$data_arr['past_drink_year'] =  '' ;
  		}

		  $data_arr['is_currentlysmoking'] = $this->request->getData('currentlysmoking');
    	if(!empty($data_arr['is_currentlysmoking'])){

     		$data_arr['is_currentlysmoking'] = base64_encode(Security::encrypt($data_arr['is_currentlysmoking'], SEC_KEY));
    	}

		  $data_arr['is_pastsmoking'] = $this->request->getData('pastsmoking');
    	if(!empty($data_arr['is_pastsmoking'])){

     		$data_arr['is_pastsmoking'] = base64_encode(Security::encrypt($data_arr['is_pastsmoking'], SEC_KEY));
    	}
		  $data_arr['is_currentlydrinking'] = $this->request->getData('currentlydrinking');
    	if(!empty($data_arr['is_currentlydrinking'])){

     		$data_arr['is_currentlydrinking'] = base64_encode(Security::encrypt($data_arr['is_currentlydrinking'], SEC_KEY));
    	}
		  $data_arr['is_pastdrinking'] = $this->request->getData('pastdrinking');
    	if(!empty($data_arr['is_pastdrinking'])){

     		$data_arr['is_pastdrinking'] = base64_encode(Security::encrypt($data_arr['is_pastdrinking'], SEC_KEY));
    	}
		  $data_arr['is_otherdrug'] = $this->request->getData('otherdrug');
    	if(!empty($data_arr['is_otherdrug'])){

     		$data_arr['is_otherdrug'] = base64_encode(Security::encrypt($data_arr['is_otherdrug'], SEC_KEY));
    	}
		  $data_arr['is_otherdrugpast'] = $this->request->getData('otherdrugpast');
    	if(!empty($data_arr['is_otherdrugpast'])){

     		$data_arr['is_otherdrugpast'] = base64_encode(Security::encrypt($data_arr['is_otherdrugpast'], SEC_KEY));
    	}

      $other_drug_history = $this->request->getData('other_drug_history');
      if(!empty($other_drug_history['name']) && is_array($other_drug_history['name']))
      {

        $other_drug_history['name'] = array_filter($other_drug_history['name']);
        $other_drug_history['year'] = array_filter($other_drug_history['year']);
        $tempar = array();
        $i = 0;
        foreach ($other_drug_history['name'] as $key => $value)
        {

          if(!empty($other_drug_history['name'][$key])  && !empty($other_drug_history['year'][$key]))
          {

            // whitelisting validation for other drug history year field start
            if(!in_array($other_drug_history['year'][$key], array('',1,2,3,4,5,6,7,8,9,10,'morethan10'))){
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
            // whitelisting validation for other drug history year field end
            $tempar[$i]['name'] = $other_drug_history['name'][$key] ;
            $tempar[$i]['year'] =  $other_drug_history['year'][$key] ;
            $i++ ;
          }
        }

        if(!empty($tempar)){

          $data_arr['other_drug_history'] = base64_encode(Security::encrypt(serialize($tempar), SEC_KEY));
        }
      }
      else
      {
        $data_arr['other_drug_history'] = '' ;
      }

      $other_drug_history_past = $this->request->getData('other_drug_history_past');
      if(!empty($other_drug_history_past['name']) && is_array($other_drug_history_past['name']))
      {

        $other_drug_history_past['name'] = array_filter($other_drug_history_past['name']);
        $other_drug_history_past['year'] = array_filter($other_drug_history_past['year']);
        $tempar = array();
        $i = 0;
        foreach ($other_drug_history_past['name'] as $key => $value)
        {

          if(!empty($other_drug_history_past['name'][$key])  && !empty($other_drug_history_past['year'][$key]))
          {
            // whitelisting validation for other drug history year field start
            if(!in_array($other_drug_history_past['year'][$key], array('',1,2,3,4,5,6,7,8,9,10,'morethan10'))){
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
            // whitelisting validation for other drug history year field end

            $tempar[$i]['name'] = $other_drug_history_past['name'][$key] ;
            $tempar[$i]['year'] =  $other_drug_history_past['year'][$key] ;
            $i++ ;
          }
        }

        if(!empty($tempar)){
          $data_arr['other_drug_history_past'] = base64_encode(Security::encrypt(serialize($tempar), SEC_KEY));
        }
      }
      else
      {
        $data_arr['other_drug_history_past'] = '' ;
      }

      $user_gender = $user_data->gender;
      if(!empty($user_gender)){

          $user_gender = Security::decrypt(base64_decode($user_gender),SEC_KEY);
      }
      //pr($user_gender);die;
      if($user_gender == 0){

        $data_arr['current_tab'] = 7;
       // $data_arr['max_visited_tab'] = 7;
      }
      else{

        $data_arr['current_tab'] = 8;
        //$data_arr['max_visited_tab'] = 8;
      }

      		$check_emh_field_view['checksocial'] = 1;
        	$data_arr['check_emh_field_view'] = serialize($check_emh_field_view);
        $user_table->patchEntity($user_data, $data_arr);
        if($user_table->save($user_data)){

            $this->Flash->success(__('Saved successfully.'));
           // return $this->redirect($this->referer());
        }
        else{

          $this->Flash->error(__('Could not be saved. Please try again.'));
         // return $this->redirect($this->referer());
        }
      }

      if($tab_number == 7)
      {
        //pr($this->request->getData());die;
        //save OB/GYN history data
        $womenspecific = $this->request->getData('womenspecific');
        $flag = 0 ;
        if($USER['gender'] == 0 && !empty($womenspecific))
        {
          // check for empty start
          $test_womenspecific = $womenspecific ;
          foreach ($test_womenspecific as $key => $value)
          {
            if(is_array($value))
            {
              foreach ($value as $key1 => $value1)
              {
                if(is_array($value1))
                {
                  $value1 = array_filter($value1) ;
                  if(empty($value1))
                  {
                    unset($test_womenspecific[$key][$key1]);
                  }
                  else break ;
                }
                else
                {
                  if(empty($value1)) unset($test_womenspecific[$key][$key1]);
                  else break;
                }
              }
              $test_womenspecific[$key] = array_filter($test_womenspecific[$key]);
              if(empty($test_womenspecific[$key])) unset($test_womenspecific[$key]);
            }
            else
            {
              if(empty($value)) unset($test_womenspecific[$key]);
              else break;
            }
          }

          if(!empty($test_womenspecific))
          {
            //check for empty end
            // no_of_miscarriage no_of_pregnency  no_of_live_birth
            // last_papsmear breast_lump_biopsy_date
            if(empty($womenspecific['is_previous_birth']))
            {

              $womenspecific['previous_birth_sex'] = '' ;
              $womenspecific['no_of_live_birth'] = '' ;
              $womenspecific['no_of_pregnency'] = '' ;
              $womenspecific['no_of_miscarriage'] = '' ;
              $womenspecific['previous_delivery_method'] = '' ;
              $womenspecific['previos_pregnancy_duration'] = '' ;
              $womenspecific['previous_complication'] = '' ;
              $womenspecific['previous_hospital'] = '' ;
              $womenspecific['prev_birth_detail'] = '';

            }
            else
            {

              $womenspecific['previous_birth_sex'] = '' ;
              $womenspecific['previous_birth_month'] = '' ;
              $womenspecific['previous_birth_year'] = '' ;
              $womenspecific['previous_delivery_method'] = '' ;
              $womenspecific['previos_pregnancy_duration'] = '' ;
              $womenspecific['previous_complication'] = '' ;
              $womenspecific['previous_hospital'] = '' ;
              if(!empty($womenspecific['prev_birth']['previous_birth_sex']) && is_array($womenspecific['prev_birth']['previous_birth_sex']))
              {

                // remove that field whose all field are empty start
                foreach ($womenspecific['prev_birth']['previous_birth_sex'] as $key => $value)
                {
                  // whitelisting validation start for prev_birth related fields start
                  if(
                    !in_array($womenspecific['prev_birth']['previous_birth_sex'][$key], array('',0,1)) ||
                    !in_array($womenspecific['prev_birth']['previous_birth_month'][$key], $month_whitelist_arr) ||
                    !in_array($womenspecific['prev_birth']['previous_birth_year'][$key], $year_whitelist_arr) ||
                    !in_array($womenspecific['prev_birth']['previous_delivery_method'][$key], array('',0,1)) ||
                    ( !empty($womenspecific['prev_birth']['previos_pregnancy_duration'][$key]) && ($womenspecific['prev_birth']['previos_pregnancy_duration'][$key] < 20 || $womenspecific['prev_birth']['previos_pregnancy_duration'][$key] > 50) )
                    )
                  {

                    $this->Flash->error(__('Could not be saved. Please try again.'));
                    return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                  }
                  // whitelisting validation end for prev_birth related fields end

                  if(
                      $womenspecific['prev_birth']['previous_birth_sex'][$key] == '' &&
                      $womenspecific['prev_birth']['previous_birth_month'][$key] == '' &&
                      $womenspecific['prev_birth']['previous_birth_year'][$key] == '' &&
                      $womenspecific['prev_birth']['previous_delivery_method'][$key] == '' &&
                      $womenspecific['prev_birth']['previos_pregnancy_duration'][$key] == '' &&
                      $womenspecific['prev_birth']['previous_complication'][$key] == '' &&
                      $womenspecific['prev_birth']['previous_hospital'][$key] == ''
                    )
                  {
                    unset( $womenspecific['prev_birth']['previous_birth_sex'][$key]);
                    unset( $womenspecific['prev_birth']['previous_birth_month'][$key]);
                    unset( $womenspecific['prev_birth']['previous_birth_year'][$key]);
                    unset( $womenspecific['prev_birth']['previous_delivery_method'][$key]);
                    unset( $womenspecific['prev_birth']['previos_pregnancy_duration'][$key]);
                    unset( $womenspecific['prev_birth']['previous_complication'][$key]);
                    unset( $womenspecific['prev_birth']['previous_hospital'][$key]);
                  }
                }
                // remove that field whose all field are empty start

                if(!empty($womenspecific['prev_birth'])&& is_array($womenspecific['prev_birth'])){

                  $womenspecific['prev_birth_detail'] = base64_encode(Security::encrypt((serialize($womenspecific['prev_birth'])), SEC_KEY));
                }
              }
              else
              {
                $womenspecific['prev_birth_detail'] = '' ;
              }
            }

            if(empty($womenspecific['is_mammogram']))
            {
              $womenspecific['mammogram_month'] = '' ;
              $womenspecific['mammogram_year'] = '' ;
            }

            // biopsy field start
            if(empty($womenspecific['any_biopsy']))
            {
              $womenspecific['breast_lump_biopsy_result'] = '' ;
            }
            else
            {

              if(!empty($womenspecific['breast_lump_biopsy_result']) && is_array($womenspecific['breast_lump_biopsy_result']))
              {

                // remove that field whose all field are empty start
                foreach ($womenspecific['breast_lump_biopsy_result']['biopsy_month'] as $key => $value)
                {

                  // whitelisting validation for biopsy related field start
                  if(
                    !in_array($womenspecific['breast_lump_biopsy_result']['biopsy_year'][$key], $year_whitelist_arr) ||
                    !in_array($womenspecific['breast_lump_biopsy_result']['biopsy_month'][$key], $month_whitelist_arr)
                  )
                  {
                    $this->Flash->error(__('Could not be saved. Please try again.'));
                    return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                  }
                  // whitelisting validation for biopsy related field end
                  if(
                      $womenspecific['breast_lump_biopsy_result']['biopsy_month'][$key] == '' &&
                      $womenspecific['breast_lump_biopsy_result']['biopsy_year'][$key] == '' &&
                      $womenspecific['breast_lump_biopsy_result']['biopsy_result'][$key] == ''
                    )
                  {
                    unset( $womenspecific['breast_lump_biopsy_result']['biopsy_month'][$key]);
                    unset( $womenspecific['breast_lump_biopsy_result']['biopsy_year'][$key]);
                    unset( $womenspecific['breast_lump_biopsy_result']['biopsy_result'][$key]);
                  }
                }
                // remove that field whose all field are empty start
                if(!empty($womenspecific['breast_lump_biopsy_result']) && is_array($womenspecific['breast_lump_biopsy_result']))
                {
                  $womenspecific['breast_lump_biopsy_result'] = base64_encode(Security::encrypt((serialize($womenspecific['breast_lump_biopsy_result'])), SEC_KEY)) ;
                }
              }
            }
            // biopsy field end

            if(empty($womenspecific['is_curently_pregnant'])){
              $womenspecific['current_baby_sex'] = '' ;
            }
            if(empty($womenspecific['is_sti_std']) || $womenspecific['is_sti_std'] !=1 ){
                $womenspecific['sti_std_detail'] = '' ;
            }
            else
            {
              if(!empty($womenspecific['sti_std_detail']) && is_array($womenspecific['sti_std_detail']))
              {

                $temp_std_detial = array();
                foreach ($womenspecific['sti_std_detail'] as $key => $value)
                {

                  if(isset($value['sti_std_key']))
                  {
                    $temp_std_detial[$key] = $value['year'] ;
                    if( $key == 7 )
                    {
                      // first condition ensure that other checkbox is selected
                      if(isset($womenspecific['sti_std_detail'][7]['sti_std_key'])  && !empty($womenspecific['sti_std_detail']['other']))
                      {
                        $temp_std_detial['other'] = $womenspecific['sti_std_detail']['other'] ;
                      }
                      else
                      {
                        unset($temp_std_detial[$key] );
                        unset($temp_std_detial['other'] );
                      }
                    }
                    // whitelisting validation for sti_std_details start
                    if(
                      !in_array($value['sti_std_key'], array('',0,1,2,3,4,5,6,7)) ||
                      !in_array($value['year'], $year_whitelist_arr)
                    )
                    {
                      $this->Flash->error(__('Could not be saved. Please try again.'));
                      return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                    }
                    // whitelisting validation for sti_std_details end
                  }
                }
                $womenspecific['sti_std_detail'] = $temp_std_detial ;
                if(!empty($womenspecific['sti_std_detail']) && is_array($womenspecific['sti_std_detail'])){

                  $womenspecific['sti_std_detail'] = base64_encode(Security::encrypt((serialize($womenspecific['sti_std_detail'])) , SEC_KEY))  ;
                }
              }
            }
            if(empty($womenspecific['previous_abnormal_breast_lump']))
            {
              $womenspecific['any_biopsy'] = '' ;
              $womenspecific['breast_lump_biopsy_date'] = '' ;
              $womenspecific['breast_lump_biopsy_result'] = '' ;
            }
            if(empty($womenspecific['any_biopsy']))
            {
              $womenspecific['breast_lump_biopsy_date'] = '' ;
              $womenspecific['breast_lump_biopsy_result'] = '' ;
            }
            $womenspecific['user_id'] = $userId;
            $womanrec = $womantable->find()->where(['user_id' => $userId])->first();
            if(empty($womanrec)){
              $womanrec = $womantable->newEntity();
            }
            else
            {
              $womanrec = $womantable->get($womanrec->id);
            }
            if(!empty($womenspecific['last_papsmear'])){

              $womenspecific['last_papsmear'] = Time::createFromFormat(
                                                    'm-d-Y', // 'd-m-Y'
                                                    $womenspecific['last_papsmear']
                                                );
            }
            if(!empty($womenspecific['breast_lump_biopsy_date'])){

              $womenspecific['breast_lump_biopsy_date'] = Time::createFromFormat(
                                                              'm-d-Y', // 'd-m-Y'
                                                              $womenspecific['breast_lump_biopsy_date']
                                                          );
            }
            $womantable->patchEntity($womanrec, $womenspecific );
            // encrypting women specific data start ******************

            if(!empty($womanrec->age_of_first_priod)){

              $womanrec->age_of_first_priod = base64_encode(Security::encrypt($womanrec->age_of_first_priod, SEC_KEY));
            }

            if(!empty($womanrec->no_of_pregnency))
              $womanrec->no_of_pregnency = base64_encode(Security::encrypt($womanrec->no_of_pregnency, SEC_KEY));

            if(!empty($womanrec->no_of_miscarriage))
              $womanrec->no_of_miscarriage = base64_encode(Security::encrypt($womanrec->no_of_miscarriage, SEC_KEY));
            if(!empty($womanrec->is_regular_papsmear))
              $womanrec->is_regular_papsmear = base64_encode(Security::encrypt($womanrec->is_regular_papsmear, SEC_KEY));

            if(!empty($womanrec->papsmear_month))
              $womanrec->papsmear_month = base64_encode(Security::encrypt($womanrec->papsmear_month, SEC_KEY));
            if(!empty($womanrec->papsmear_year))
              $womanrec->papsmear_year = base64_encode(Security::encrypt($womanrec->papsmear_year, SEC_KEY));
            if(!empty($womanrec->papsmear_finding))
              $womanrec->papsmear_finding = base64_encode(Security::encrypt($womanrec->papsmear_finding, SEC_KEY));
            if(!empty($womanrec->is_curently_pregnant))
              $womanrec->is_curently_pregnant = base64_encode(Security::encrypt($womanrec->is_curently_pregnant, SEC_KEY));
            if(!empty($womanrec->current_baby_sex))
              $womanrec->current_baby_sex = base64_encode(Security::encrypt($womanrec->current_baby_sex, SEC_KEY));
            if(!empty($womanrec->currently_pregnant_week))
              $womanrec->currently_pregnant_week = base64_encode(Security::encrypt($womanrec->currently_pregnant_week, SEC_KEY));
            if(!empty($womanrec->currently_pregnant_days))
              $womanrec->currently_pregnant_days = base64_encode(Security::encrypt($womanrec->currently_pregnant_days, SEC_KEY));
            if(!empty($womanrec->currently_pregnant_complication))
              $womanrec->currently_pregnant_complication = base64_encode(Security::encrypt($womanrec->currently_pregnant_complication, SEC_KEY));
            if(!empty($womanrec->is_previous_birth))
              $womanrec->is_previous_birth = base64_encode(Security::encrypt($womanrec->is_previous_birth, SEC_KEY));
            if(!empty($womanrec->previous_birth_sex))
              $womanrec->previous_birth_sex = base64_encode(Security::encrypt($womanrec->previous_birth_sex, SEC_KEY));
            if(!empty($womanrec->previous_delivery_method))
              $womanrec->previous_delivery_method = base64_encode(Security::encrypt($womanrec->previous_delivery_method, SEC_KEY));
            if(!empty($womanrec->previos_pregnancy_duration))
              $womanrec->previos_pregnancy_duration = base64_encode(Security::encrypt($womanrec->previos_pregnancy_duration, SEC_KEY));

            if(!empty($womanrec->previous_complication))
              $womanrec->previous_complication = base64_encode(Security::encrypt($womanrec->previous_complication, SEC_KEY));
            if(!empty($womanrec->previous_hospital))
              $womanrec->previous_hospital = base64_encode(Security::encrypt($womanrec->previous_hospital, SEC_KEY));

            if(!empty($womanrec->is_mammogram))
              $womanrec->is_mammogram = base64_encode(Security::encrypt($womanrec->is_mammogram, SEC_KEY));
            if(!empty($womanrec->mammogram_month))
              $womanrec->mammogram_month = base64_encode(Security::encrypt($womanrec->mammogram_month, SEC_KEY));
            if(!empty($womanrec->mammogram_year))
              $womanrec->mammogram_year = base64_encode(Security::encrypt($womanrec->mammogram_year, SEC_KEY));
            if(!empty($womanrec->previous_abnormal_breast_lump))
              $womanrec->previous_abnormal_breast_lump = base64_encode(Security::encrypt($womanrec->previous_abnormal_breast_lump, SEC_KEY));
            if(!empty($womanrec->any_biopsy))
              $womanrec->any_biopsy = base64_encode(Security::encrypt($womanrec->any_biopsy, SEC_KEY));
            if(!empty($womanrec->is_sti_std))
              $womanrec->is_sti_std = base64_encode(Security::encrypt($womanrec->is_sti_std, SEC_KEY));

            // encrypting women specific data end ******************
            if($womantable->save($womanrec)) $flag = 1;  else $flag=0;
          }
          else
          {
            $flag = 1 ;
          }
        }
        else
        {
          $flag = 1 ;
        }

        if($flag == 1){

          $data_arr['current_tab'] = 8;
          $check_emh_field_view['checkobgyn'] = 1;
        	$data_arr['check_emh_field_view'] = serialize($check_emh_field_view);
         // $data_arr['max_visited_tab'] = 8;

          $user_table->patchEntity($user_data, $data_arr);
          if($user_table->save($user_data)){

              $this->Flash->success(__('Saved successfully.'));
             // return $this->redirect($this->referer());
          }
          else{

            $this->Flash->error(__('Could not be saved. Please try again.'));
           // return $this->redirect($this->referer());
          }
        }
        else
        {
            $this->Flash->error(__('Could not be saved. Please try again.'));
           // return $this->redirect($this->referer());
        }
      }

      if($tab_number == 8){

        //save Shots history data
        //pr($this->request->data());
        $shots_history = $this->request->getData('shots_history');
        $other_shots_history = $this->request->getData('other_shots_history');
        $tempar = array();
        $tmp = array();
        $i = 0 ;
        if(!empty($shots_history) && is_array($shots_history))
        {
          foreach ($shots_history as $key => $value)
          {
            if(isset($value['shot_id']) && !empty($value['shot_id']) )
            {
              if(!in_array($value['shot_id'], $tmp))
              {
                // removing duplicate shot id
                $tempar[$value['shot_id']] = $value['year'] ;
              }
              $tmp[] = $value['shot_id'];

              // whitelisting validation for shots history field start
              if(
                !array_key_exists($value['shot_id'], $shot_cond) ||
                !in_array($value['year'], $year_whitelist_arr)
              )
              {
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
              // whitelisting validation for shots history field end
            }
          }
        }

        $temp_other_shots_history = [];
        if(!empty($other_shots_history)){

          $other_shots_name = isset($other_shots_history['name']) && !empty($other_shots_history['name']) && is_array($other_shots_history['name']) ? array_filter($other_shots_history['name']) : [];

          $other_shots_year = isset($other_shots_history['year']) && !empty($other_shots_history['year']) && is_array($other_shots_history['year']) ? array_filter($other_shots_history['year']) : [];

          if(!empty($other_shots_name)){

            foreach ($other_shots_name as $key => $value) {

               //check for year and validate year

                $year = "";
                if(isset($other_shots_year[$key]) && in_array($other_shots_year[$key], $year_whitelist_arr)){

                  $year = $other_shots_year[$key];
                }

                $temp_other_shots_history[] = array('name' => $value, 'year' => $year);
            }
          }
        }

        //pr($temp_other_shots_history);die;

        if(!empty($tempar))
        {
          $data_arr['shots_history'] =  base64_encode(Security::encrypt((serialize($tempar)), SEC_KEY));

        }
        else
        {
          $data_arr['shots_history'] = '' ;
        }


        $data_arr['other_shots_history'] = !empty($temp_other_shots_history) ? base64_encode(Security::encrypt((serialize($temp_other_shots_history)), SEC_KEY)) : "";

        $data_arr['current_tab'] = 8;
        $data_arr['max_visited_tab'] = 8;
        $check_emh_field_view['checkshots'] = 1;
        $data_arr['check_emh_field_view'] = serialize($check_emh_field_view);

        $user_table->patchEntity($user_data, $data_arr);
        if($user_table->save($user_data)){

          //redirect to the pre-appointment questionnaire form when edit medical history is accessed in iframe
          if(!empty($iframe_api_data)){

            return $this->redirect(['action' => 'newAppointment', 'prefix' => $this->prefix ,base64_encode($iframe_api_data['id'].'-'.time())]);
          }

          $schedule_data = $scheduleTlb->find('all')->where(['Date(Schedule.appointment_date)' => date('Y-m-d')])->where(['user_id' => $user_data->id,'status !=' => 3])->first();
          if(!empty($schedule_data)){

            $this->Flash->success('Medical history saved successfully.');
            $this->Flash->error('Please fill in the pre-appointment questionnaire for your scheduled appointment.');
          }
          else{

            $this->Flash->success(__('Medical history saved sucessfully.'));
          }

          return $this->redirect(array('action' => 'scheduledAppointments','prefix' => $this->prefix));

            //$this->Flash->success(__('Saved successfully.'));
           // return $this->redirect($this->referer());
        }
        else{

          $this->Flash->error(__('Could not be saved. Please try again.'));
         // return $this->redirect($this->referer());
        }
      }

    // fetch new data after updation
    $user_data = $user_table->get($userId);
   // pr($user_data);die;
    $womandata = $womantable->find()->where(['user_id' => $userId])->first();

    }



  // decrypting user data and woman data start ************************


// decrypting women specific data start ******************
if(!empty( $womandata)){
  $womanrec = $womandata;
    if(!empty($womanrec->age_of_first_priod))
     $womanrec->age_of_first_priod = Security::decrypt( base64_decode($womanrec->age_of_first_priod), SEC_KEY);

    if(!empty($womanrec->no_of_pregnency))
     $womanrec->no_of_pregnency = Security::decrypt( base64_decode($womanrec->no_of_pregnency), SEC_KEY);

         if(!empty($womanrec->no_of_miscarriage))
     $womanrec->no_of_miscarriage = Security::decrypt( base64_decode($womanrec->no_of_miscarriage), SEC_KEY);
        if(!empty($womanrec->is_regular_papsmear))
     $womanrec->is_regular_papsmear = Security::decrypt( base64_decode($womanrec->is_regular_papsmear), SEC_KEY);

        if(!empty($womanrec->papsmear_finding))
     $womanrec->papsmear_finding = Security::decrypt( base64_decode($womanrec->papsmear_finding), SEC_KEY);
        if(!empty($womanrec->is_curently_pregnant))
     $womanrec->is_curently_pregnant = Security::decrypt( base64_decode($womanrec->is_curently_pregnant), SEC_KEY);
        if(!empty($womanrec->current_baby_sex))
     $womanrec->current_baby_sex = Security::decrypt( base64_decode($womanrec->current_baby_sex), SEC_KEY);
        if(!empty($womanrec->currently_pregnant_week))
     $womanrec->currently_pregnant_week = Security::decrypt( base64_decode($womanrec->currently_pregnant_week), SEC_KEY);
        if(!empty($womanrec->currently_pregnant_days))
     $womanrec->currently_pregnant_days = Security::decrypt( base64_decode($womanrec->currently_pregnant_days), SEC_KEY);
        if(!empty($womanrec->currently_pregnant_complication))
     $womanrec->currently_pregnant_complication = Security::decrypt( base64_decode($womanrec->currently_pregnant_complication), SEC_KEY);

        if(!empty($womanrec->is_previous_birth))
     $womanrec->is_previous_birth = Security::decrypt( base64_decode($womanrec->is_previous_birth), SEC_KEY);
        if(!empty($womanrec->previous_birth_sex))
     $womanrec->previous_birth_sex = Security::decrypt( base64_decode($womanrec->previous_birth_sex), SEC_KEY);
        if(!empty($womanrec->previous_delivery_method))
     $womanrec->previous_delivery_method = Security::decrypt( base64_decode($womanrec->previous_delivery_method), SEC_KEY);
        if(!empty($womanrec->previos_pregnancy_duration))
     $womanrec->previos_pregnancy_duration = Security::decrypt( base64_decode($womanrec->previos_pregnancy_duration), SEC_KEY);

        if(!empty($womanrec->previous_complication))
     $womanrec->previous_complication = Security::decrypt( base64_decode($womanrec->previous_complication), SEC_KEY);
        if(!empty($womanrec->previous_hospital))
     $womanrec->previous_hospital = Security::decrypt( base64_decode($womanrec->previous_hospital), SEC_KEY);
        if(!empty($womanrec->is_mammogram))
     $womanrec->is_mammogram = Security::decrypt( base64_decode($womanrec->is_mammogram), SEC_KEY);
        if(!empty($womanrec->mammogram_month))
     $womanrec->mammogram_month = Security::decrypt( base64_decode($womanrec->mammogram_month), SEC_KEY);
        if(!empty($womanrec->mammogram_year))
     $womanrec->mammogram_year = Security::decrypt( base64_decode($womanrec->mammogram_year), SEC_KEY);
        if(!empty($womanrec->previous_abnormal_breast_lump))
     $womanrec->previous_abnormal_breast_lump = Security::decrypt( base64_decode($womanrec->previous_abnormal_breast_lump), SEC_KEY);

        if(!empty($womanrec->any_biopsy))
     $womanrec->any_biopsy = Security::decrypt( base64_decode($womanrec->any_biopsy), SEC_KEY);

        if(!empty($womanrec->is_sti_std))
     $womanrec->is_sti_std = Security::decrypt( base64_decode($womanrec->is_sti_std), SEC_KEY);


if(!empty($womanrec->papsmear_month))
$womanrec->papsmear_month = Security::decrypt( base64_decode($womanrec->papsmear_month), SEC_KEY);

if(!empty($womanrec->papsmear_year))
$womanrec->papsmear_year = Security::decrypt( base64_decode($womanrec->papsmear_year), SEC_KEY);


/*if(!empty($womanrec->prev_birth_detail))
$womanrec->prev_birth_detail = @unserialize(Security::decrypt( base64_decode($womanrec->prev_birth_detail), SEC_KEY));
*/


  $womandata  = $womanrec  ;
  //pr($womandata);die;
 }




// decrypting women specific data end ******************

// decrypting user data start

if(!empty($user_data)){

//pr($user_data);die;


if(!empty($user_data->height))
$user_data->height = Security::decrypt( base64_decode($user_data->height), SEC_KEY);

if(!empty($user_data->weight))
$user_data->weight = Security::decrypt( base64_decode($user_data->weight), SEC_KEY);

if(!empty($user_data->pharmacy))
$user_data->pharmacy = Security::decrypt( base64_decode($user_data->pharmacy), SEC_KEY);


if(!empty($user_data->address))
$user_data->address = Security::decrypt( base64_decode($user_data->address), SEC_KEY);
if(!empty($user_data->city))
$user_data->city = Security::decrypt( base64_decode($user_data->city), SEC_KEY);
if(!empty($user_data->state))
$user_data->state = Security::decrypt( base64_decode($user_data->state), SEC_KEY);
if(!empty($user_data->zip))
$user_data->zip = Security::decrypt( base64_decode($user_data->zip), SEC_KEY);
if(!empty($user_data->race))
$user_data->race = Security::decrypt( base64_decode($user_data->race), SEC_KEY);

if(!empty($user_data->insuranceType))
$user_data->insuranceType = Security::decrypt( base64_decode($user_data->insuranceType), SEC_KEY);
if(!empty($user_data->subscriberName))
$user_data->subscriberName = Security::decrypt( base64_decode($user_data->subscriberName), SEC_KEY);
if(!empty($user_data->groupNumber))
$user_data->groupNumber = Security::decrypt( base64_decode($user_data->groupNumber), SEC_KEY);
if(!empty($user_data->identificationNumber))
$user_data->identificationNumber = Security::decrypt( base64_decode($user_data->identificationNumber), SEC_KEY);
if(!empty($user_data->insuranceCompany))
$user_data->insuranceCompany = Security::decrypt( base64_decode($user_data->insuranceCompany), SEC_KEY);

if(!empty($user_data->guarantor))
$user_data->guarantor = Security::decrypt( base64_decode($user_data->guarantor), SEC_KEY);


if(!empty($user_data->bmi))
$user_data->bmi = Security::decrypt( base64_decode($user_data->bmi), SEC_KEY);


if(!empty($user_data->is_uterus_removal))
$user_data->is_uterus_removal = Security::decrypt( base64_decode($user_data->is_uterus_removal), SEC_KEY);


if(!empty($user_data->is_latex_allergy))
$user_data->is_latex_allergy = Security::decrypt( base64_decode($user_data->is_latex_allergy), SEC_KEY);

if(!empty($user_data->is_retired))
$user_data->is_retired = Security::decrypt( base64_decode($user_data->is_retired), SEC_KEY);

if(!empty($user_data->occupation))
$user_data->occupation = Security::decrypt( base64_decode($user_data->occupation), SEC_KEY);

if(!empty($user_data->marital_status))
$user_data->marital_status = Security::decrypt( base64_decode($user_data->marital_status), SEC_KEY);

if(!empty($user_data->sexual_orientation))
$user_data->sexual_orientation = Security::decrypt( base64_decode($user_data->sexual_orientation), SEC_KEY);

if(!empty($user_data->ethinicity))
$user_data->ethinicity = Security::decrypt( base64_decode($user_data->ethinicity), SEC_KEY);

if(!empty($user_data->current_smoke_pack))
$user_data->current_smoke_pack = Security::decrypt( base64_decode($user_data->current_smoke_pack), SEC_KEY);


if(!empty($user_data->current_smoke_year))
$user_data->current_smoke_year = Security::decrypt( base64_decode($user_data->current_smoke_year), SEC_KEY);

if(!empty($user_data->past_smoke_pack))
$user_data->past_smoke_pack = Security::decrypt( base64_decode($user_data->past_smoke_pack), SEC_KEY);

if(!empty($user_data->past_smoke_year))
$user_data->past_smoke_year = Security::decrypt( base64_decode($user_data->past_smoke_year), SEC_KEY);

if(!empty($user_data->current_drink_pack))
$user_data->current_drink_pack = Security::decrypt( base64_decode($user_data->current_drink_pack), SEC_KEY);

if(!empty($user_data->current_drink_year))
$user_data->current_drink_year = Security::decrypt( base64_decode($user_data->current_drink_year), SEC_KEY);

if(!empty($user_data->past_drink_pack))
$user_data->past_drink_pack = Security::decrypt( base64_decode($user_data->past_drink_pack), SEC_KEY);

if(!empty($user_data->past_drink_year))
$user_data->past_drink_year = Security::decrypt( base64_decode($user_data->past_drink_year), SEC_KEY);

if(!empty($user_data->is_currentlysmoking))
$user_data->is_currentlysmoking = Security::decrypt( base64_decode($user_data->is_currentlysmoking), SEC_KEY);

if(!empty($user_data->is_pastsmoking))
$user_data->is_pastsmoking = Security::decrypt( base64_decode($user_data->is_pastsmoking), SEC_KEY);

if(!empty($user_data->is_currentlydrinking))
$user_data->is_currentlydrinking = Security::decrypt( base64_decode($user_data->is_currentlydrinking), SEC_KEY);

if(!empty($user_data->is_pastdrinking))
$user_data->is_pastdrinking = Security::decrypt( base64_decode($user_data->is_pastdrinking), SEC_KEY);

if(!empty($user_data->is_otherdrug))
$user_data->is_otherdrug = Security::decrypt( base64_decode($user_data->is_otherdrug), SEC_KEY);

if(!empty($user_data->is_otherdrugpast))
$user_data->is_otherdrugpast = Security::decrypt( base64_decode($user_data->is_otherdrugpast), SEC_KEY);
if(!empty($user_data->is_check_med_his))
$user_data->is_check_med_his = Security::decrypt( base64_decode($user_data->is_check_med_his), SEC_KEY);
if(!empty($user_data->is_check_surg_his))
$user_data->is_check_surg_his = Security::decrypt( base64_decode($user_data->is_check_surg_his), SEC_KEY);
if(!empty($user_data->is_check_allergy_his))
$user_data->is_check_allergy_his = Security::decrypt( base64_decode($user_data->is_check_allergy_his), SEC_KEY);
if(!empty($user_data->is_family_his))
$user_data->is_family_his = Security::decrypt( base64_decode($user_data->is_family_his), SEC_KEY);


// if(!empty($user_data->gender))
// $user_data->gender = Security::decrypt( base64_decode($user_data->gender), SEC_KEY);



}



// decrypting user data end




 // decrypting user data and woman data end *****************************




    $curuser = $this->Users->find('all')->where(['id' => $userId])->first();
    // pr($curuser); die;

$this->loadModel('WomenSpecific');
//$suggest_msg = '';
if(!empty($curuser->gender))
$curuser->gender = Security::decrypt( base64_decode($curuser->gender), SEC_KEY);
/*if($curuser->gender == 0){
    $tmpt = $this->WomenSpecific->find('all')->where(['user_id' => $userId]);
    if($tmpt->isEmpty()){
        $suggest_msg .= 'OB/GYN,';
    }
}*/

$user_check_emh_field_view = @unserialize($curuser['check_emh_field_view']);


$all_field_atleast_click = 1 ; // 1 is for no error 0 is for error will show
$shot_field_click_check = 0;
$obgyn_field_click_check = 0;
$tmp_check_emh_field_view = $user_data->check_emh_field_view;
if(empty($tmp_check_emh_field_view)){
    $all_field_atleast_click = 0 ;
}else{
    $tmp_check_emh_field_view  = unserialize($tmp_check_emh_field_view ) ;
    $shot_field_click_check = !empty($tmp_check_emh_field_view['checkshots']) ? 1 : 0 ;
    $obgyn_field_click_check = !empty($tmp_check_emh_field_view['checkobgyn']) ? 1 : 0 ;
    // pr($tmp_check_emh_field_view); die;
    if(isset($tmp_check_emh_field_view['checkbasic']))
        unset($tmp_check_emh_field_view['checkbasic']); // removed basic tab check as basic tab visible on page load itself so no need to check
 //pr($curuser); die;
    if($curuser->gender == 1 || $curuser->gender == 2) unset($tmp_check_emh_field_view['checkobgyn']);
// pr($tmp_check_emh_field_view); die;
    foreach ($tmp_check_emh_field_view as $key => $value) {

        if($value == 0 ) $all_field_atleast_click = 0 ;

    }

}
// pr($all_field_atleast_click);
// pr($tmp_check_emh_field_view); die;
    $shots_id_arr = array();
    $prev_shot_arr = array();
        // if(!empty($load_the_shots_tab)){
            $now = Time::now();
            $user_dob = $user_data->dob;
            if(!empty($user_dob)){

              $user_dob = $this->CryptoSecurity->decrypt(base64_decode($user_dob),SEC_KEY);
            }
            $age = abs($now->year - date('Y',strtotime($user_dob)));
            // if #ID_AGE =>60, ask:  HSV, flu -  237 ,  17
if($age >= 60) $shots_id_arr[] = array(237, 17);
// if #ID_AGE =>65, ask: 17 , 218, 236
if($age >= 65) $shots_id_arr[] = array(17 , 218, 236);
// if #ID_AGE 18<=x<=26 and male, ask: 235, 17
if($age >= 18 && $age <= 26 && $user_data->gender == 1 ) $shots_id_arr[] = array( 235, 17);

// if #ID_AGE =>18:  223, 224, 225, 237
if($age >= 18) $shots_id_arr[] = array( 223, 224, 225, 237 );

// if #ID_AGE 18<=x<=26 and female, ask: 227, 17
if($age >= 18 && $age <= 26 && $user_data->gender == 0 ) $shots_id_arr[] = array( 227, 17);
// if #ID_AGE < 18, ask: 17, 223, 224, 225, 18, 19, 231, 234, 218, 236
if($age <= 18 ) $shots_id_arr[] = array(17, 223, 224, 225, 18, 19, 231, 234, 218, 236);
// pr(unserialize(base64_decode($user_data->medical_history))); die;

    $pmh_result = array();
if(!empty($user_data->medical_history)){

    // $pmh = unserialize(base64_decode($user_data->medical_history));
   $pmh = unserialize((Security::decrypt(base64_decode($user_data->medical_history), SEC_KEY)));

   if(empty($pmh)){
     $pmh = array();
   }

    array_walk_recursive($pmh,function($v) use (&$pmh_result){ $pmh_result[] = $v; }); // flatten multi dimensional array

    $pmh_result =    array_map(
                                function($item)  {
                                    // will remove extra white space and make it in lowercase
                                    return strtolower(preg_replace('/\s+/', '', $item)) ;
                                },
                                $pmh_result
                            );
    $pmh_result = implode(',', $pmh_result);
    // pr($pmh_result); die;
    // if #PMH_condition_diabetes, ask: 17, 218, 236, 231, 234, 232, 18
if (stripos($pmh_result, 'diabetes') !== false ) $shots_id_arr[] = array(17, 218, 236, 231, 234, 232, 18);

// if #PMH_condition_ckd or #PMH_condition_kidneyfailure or #PMH_condition_esrd or +hemodialysis,ask: 17, 18, 19, 231, 234, 232

if (stripos($pmh_result, 'chronickidneydisease') !== false  || stripos($pmh_result, 'kidneyfailure') !== false  || stripos($pmh_result, 'end-stagerenaldisease') !== false  || stripos($pmh_result, 'hemodialysis') !== false ) $shots_id_arr[] = array(17, 18, 19, 231, 234, 232);


// if #PMH_condition_chf or #PMH_condition_cardiomyopathy, ask: 17, 218, 18,19, 231,234,232
if (stripos($pmh_result, 'congestiveheartfailure') !== false  || stripos($pmh_result, 'cardiomyopathy') !== false ) $shots_id_arr[] = array(17, 218, 18,19, 231,234,232);


// if #PMH_condition_copd or #PMH_condition_asthma or #PMH_condition_emphysema, ask: 17, 236
if (stripos($pmh_result, 'chronicobstructivepulmonarydisease(copd)') !== false  || stripos($pmh_result, 'asthma') !== false  || stripos($pmh_result, 'emphysema') !== false ) $shots_id_arr[] = array(17, 236);
// if #PMH_condition_cirrhosis, ask: 17, 218, 231, 234, 232
if (stripos($pmh_result, 'cirrhosis') !== false ) $shots_id_arr[] = array(17, 218, 231, 234, 232);
// pr($shots_id_arr); die;
// if #PMH_condition_hiv_cdcount < 200, ask: 17, 18, 234, 232

if (stripos($pmh_result, 'hiv') !== false ) $shots_id_arr[] = array(17, 18, 234, 232);

if (stripos($pmh_result, 'sicklecell') !== false)  $shots_id_arr[] = array(17, 218, 236, 231, 234, 232);
}

$psh_result = array();

if(!empty($user_data->surgical_history)){

    // $pmh = unserialize(base64_decode($user_data->medical_history));
   $psh = unserialize((Security::decrypt(base64_decode($user_data->surgical_history), SEC_KEY)));


    array_walk_recursive($psh,function($v) use (&$psh_result){ $psh_result[] = $v; }); // flatten multi dimensional array

 $psh_result =    array_map(
                                function($item)  {
                                    // will remove extra white space and make it in lowercase
                                    return strtolower(preg_replace('/\s+/', '', $item)) ;
                                },
                                $psh_result
                            );
    $psh_result = implode(',', $psh_result);
// echo 'hello' ;
// pr($psh_result); die;



// if #PMH_condition_sicklecell or #PSH_procedure_splenectomy, ask: 17, 218, 236, 231, 234, 232

if ( stripos($psh_result, 'spleenremoval') !== false || stripos($psh_result, 'splenectomy') !== false )   $shots_id_arr[] = array(17, 218, 236, 231, 234, 232);

}


// if #ID_sex_male and #SH_etoh_current_drinks >14/week, ask: 17, 218, 18, 19, 231, 234, 232

// $user_data->current_drink_pack >14  (!empty($user_data->current_drink_pack) && !is_numeric($user_data->current_drink_pack))  as >14 value in db is 'morethan10' and saved as string
if($user_data->gender == 1 && (!empty($user_data->current_drink_pack) && !is_numeric($user_data->current_drink_pack)) ) $shots_id_arr[] = array( 17, 218, 18, 19, 231, 234, 232);

// if #ID_sex_female and #SH_etoh_current_drinks >7/week, ask: 17, 218, 18,19, 231,234, 232

if($user_data->gender == 0 && $user_data->current_drink_pack > 7 ) $shots_id_arr[] = array( 17, 218, 18,19, 231,234, 232);


// if #ID_sex_male and #SH_sexual_orientation_homosexual or #SH_sexual_orientation_bisexual, ask:  17, 218, 236, 18,19, 231, 234, 232, 235
if($user_data->gender == 1 && $user_data->sexual_orientation ==1  && $user_data->sexual_orientation ==2 ) $shots_id_arr[] = array(17, 218, 236, 18,19, 231, 234, 232, 235);

// if #SH_smoking_current, ask: 17, 236
if($user_data->is_currentlysmoking == 1) $shots_id_arr[] = array(17, 236);

// if #SH_occupation_military or #SH_occupation_student_college or #SH_occupation_microbiologist, ask:17, 231
if(stripos($user_data->occupation, 'military') !== false  || stripos($user_data->occupation, 'student') !== false  || stripos($user_data->occupation, 'microbiologist') !== false ) $shots_id_arr[] = array(17, 231);

// if #SH_occupation_doctor or #SH_occupation_nurse or #SH_occupation_healthtech or #SH_occupation_otherhealth, ask: 17, 224, 18, 19
if(stripos($user_data->occupation, 'doctor') !== false  || stripos($user_data->occupation, 'nurse') !== false  || stripos($user_data->occupation, 'healthtech') !== false  || stripos($user_data->occupation, 'otherhealth') !== false ) $shots_id_arr[] = array(17, 224, 18, 19);
// if #SH_occupation_teacher, ask: 17, 225
if(stripos($user_data->occupation, 'teacher') !== false ) $shots_id_arr[] = array(17, 225);


// pr($shots_id_arr);
$t_shots_id_arr  = array();
array_walk_recursive($shots_id_arr,function($v) use (&$t_shots_id_arr){ $t_shots_id_arr[] = $v; }); // flatten multi dimensional array
$shots_id_arr = $t_shots_id_arr ;
// pr($shots_id_arr);
// die;
 if(!empty($user_data->shots_history)){  // get the previously stored shots id
      // $tmp_shots_arr = unserialize(base64_decode($user_data->shots_history)) ;
$tmp_shots_arr = unserialize((Security::decrypt(base64_decode($user_data->shots_history), SEC_KEY))) ;
 $prev_shot_arr = $tmp_shots_arr;
 $tmp_shots_arr = array_keys($tmp_shots_arr);
  // pr($tmp_shots_arr); die;
 // pr($prev_shot_arr); die;
      // $tmp_shots_arr =  array_flip($tmp_shots_arr);

 }
 // pr($tmp_shots_arr); die;
 if(!empty($tmp_shots_arr)){

 // merging the previously stored shots id with current condition related shots id array
  $shots_id_arr = array_merge(array_values($shots_id_arr), array_values($tmp_shots_arr)) ;
  $shots_id_arr = array_unique($shots_id_arr) ;

 }
 // pr($prev_shot_arr); die;
// pr($shots_id_arr); die;
 $shots_id_arr = $commonTable->find('list', [
                            'keyField' => 'id',
                            'valueField' => 'name'
                        ])->where(['id IN' => $shots_id_arr])->toArray();



        // }
        $check_surgical_allergy = array();
        if(!empty($user_data->check_emh_field_view)){
            $check_surgical_allergy = unserialize($user_data->check_emh_field_view) ;
        }

        $active_tab = !empty($user_data->current_tab) ? $user_data->current_tab : 1;

        //pr($user_data);die;
    $this->set(compact('all_field_atleast_click', 'shot_field_click_check','obgyn_field_click_check','medical_cond', 'surgical_cond', 'allergy_cond', 'shot_cond', 'user_data', 'womandata', 'allergy_reaction_cond','common_medical_cond','common_surgical_cond','common_allergy_cond','common_shot_cond', 'load_the_shots_tab', 'shots_id_arr', 'prev_shot_arr', 'check_surgical_allergy', 'tab_name','schedule_id','active_tab','max_visited_tab'));
  }




  public function newAppointment($schedule_id = null)
  {
    //$this->request->session()->delete('Flash');
    //$this->viewBuilder()->setLayout('front');
    $session = $this->getRequest()->getSession(); // $this->request->session();
    $USER    = $session->read('Auth.User');
    $iframe_api_data = null;
    if ($session->check('iframe_api_data')) {

        $iframe_api_data  = $session->read('iframe_api_data');
    }
    $this->viewBuilder()->setLayout('front');

    $temp_schedule_id = $schedule_id;
    $schedule_id = explode('-',base64_decode($schedule_id))[0];

    //Color Scheme Change
    $this->Schedules = $this->loadModel('Schedules');
    $this->Organizations = $this->loadModel('Organizations');
    $schedule = $this->Schedules->find('all')->where(['id' => $schedule_id])->first();
    $organization = $this->Organizations->find('all')->where(['id' => $schedule['organization_id']])->first();

    $clinic_color_scheme['heading_color'] = !empty($organization['heading_color']) ? $organization['heading_color'] : '' ;
    $clinic_color_scheme['general_title_color'] = !empty($organization['general_title_color']) ? $organization['general_title_color'] : '' ;
    $clinic_color_scheme['general_text_color'] = !empty($organization['general_text_color']) ? $organization['general_text_color'] : '' ;
    $clinic_color_scheme['background_color'] = !empty($organization['background_color']) ? $organization['background_color'] : '' ;
    $clinic_color_scheme['dashboard_background_color'] = !empty($organization['dashboard_background_color']) ? $organization['dashboard_background_color'] : '' ;
    $clinic_color_scheme['text_color'] = !empty($organization['text_color']) ? $organization['text_color'] : '' ;
    $clinic_color_scheme['button_gradient_color1'] = !empty($organization['button_gradient_color1']) ? $organization['button_gradient_color1'] : '' ;
    $clinic_color_scheme['button_gradient_color2'] = !empty($organization['button_gradient_color2']) ? $organization['button_gradient_color2'] : '' ;
    $clinic_color_scheme['button_gradient_color3'] = !empty($organization['button_gradient_color3']) ? $organization['button_gradient_color3'] : '' ;

    $clinic_color_scheme['active_button_color'] = !empty($organization['active_button_color']) ? $organization['active_button_color'] : '' ;

    $clinic_color_scheme['hover_state_color'] = !empty($organization['hover_state_color']) ? $organization['hover_state_color'] : '' ;
    $clinic_color_scheme['active_state_color'] = !empty($organization['active_state_color']) ? $organization['active_state_color'] : '' ;


    $clinic_color_scheme['link_color'] = !empty($organization['link_color']) ? $organization['link_color'] : '' ;
    $clinic_color_scheme['link_hover_color'] = !empty($organization['link_hover_color']) ? $organization['link_hover_color'] : '' ;

    $clinic_color_scheme['appoint_box_bg_color'] = !empty($organization['appoint_box_bg_color']) ? $organization['appoint_box_bg_color'] : '' ;

    $clinic_color_scheme['appoint_box_text_color'] = !empty($organization['appoint_box_text_color']) ? $organization['appoint_box_text_color'] : '' ;
    $clinic_color_scheme['appoint_box_button_color'] = !empty($organization['appoint_box_button_color']) ? $organization['appoint_box_button_color'] : '' ;
    $clinic_color_scheme['clinic_logo_status'] = !empty($organization['clinic_logo_status']) ? $organization['clinic_logo_status'] : '' ;
    $clinic_color_scheme['progress_bar_graphic'] = !empty($organization['progress_bar_graphic']) ? $organization['progress_bar_graphic'] : '' ;

    $clinic_color_scheme['clinic_logo'] = !empty($organization['clinic_logo']) ? $organization['clinic_logo'] : '' ;

    $session = $this->getRequest()->getSession();
    $session->write([
    'clinic_color_scheme' => $clinic_color_scheme,
    ]);
// End Color scheme
    //echo $schedule_id;die;
     //get schedule_data
    $scheuleTbl  = TableRegistry::get("Schedule");
    $this->loadModel('UserSignedDocs');
    //pr($scheuleTbl);die;
    //$schedule_data = $scheuleTbl->get($schedule_id);
    $schedule_data = $scheuleTbl->find('all')->where(['Schedule.id'=> $schedule_id])->contain(['Organizations'])->first();
    //pr($schedule_data);die;
    // Add PP icon for progress
    if(!empty($schedule_data)){

      $query = $this->Schedules->query();
              $query->update()
                    ->set(['stage' => "Pre-appointment Questionnaire"])
                    ->where(['id' => $schedule_id])
                    ->execute();
      }
    // End

    if(!empty($USER) && $USER['role_id'] ==2)
    {
      $userId = $USER['id'];
    }
    elseif(isset($schedule_data['user_id']) && !empty($schedule_data['user_id']))
    {
      $userId = $schedule_data['user_id'];
    }
    else
    {
      return $this->redirect(['controller' => 'Users','action' => 'login','prefix' => $this->prefix]);
    }


    $curuser = $this->Users->find('all')->where(['id' => $userId])->first();

    if($curuser['role_id'] != 2){

      $this->Flash->error(__('Provider could not schedule a appointement. Please try again.'));
      return $this->redirect($this->referer());

    }
    //check ancilary docs is signed or not

    //get user signed document detail if exists
    $user_sign_data = $this->UserSignedDocs->find('all')->where(['user_id' => $curuser['id'], 'organization_id' => $schedule_data['organization_id']])->first();
    //pr($user_sign_data);die;
    // if(empty($user_sign_data)){

    //     $session->write('current_schedule_id',$temp_schedule_id);
    //     // return $this->redirect(['action' => 'signDocs','prefix' => $this->prefix , base64_encode($schedule_data['organization']['id'])]);
    //     return $this->redirect(['action' => 'addAddress','prefix' => $this->prefix , base64_encode($schedule_data['organization']['id'])]);
    // }

   // pr($user_sign_data);die;

    $login_user = $curuser;
    $user_id = $login_user['id'];

    if($user_sign_data['patient_type'] == 1){
      $all_field_atleast_click = 1 ; // 1 is for no error 0 is for error will show
      $tmp_check_emh_field_view = $curuser->check_emh_field_view;

      if(!empty($curuser->gender))
      $curuser->gender = Security::decrypt( base64_decode($curuser->gender), SEC_KEY);


      if(empty($tmp_check_emh_field_view))
      {
          $all_field_atleast_click = 0 ;
      }
      else
      {
        $tmp_check_emh_field_view  = unserialize($tmp_check_emh_field_view ) ;
        if(isset($tmp_check_emh_field_view['checkbasic']))
            unset($tmp_check_emh_field_view['checkbasic']); // removed basic tab check as basic tab visible on page load itself so no need to check
        if($curuser->gender == 1 || $curuser->gender == 2) unset($tmp_check_emh_field_view['checkobgyn']);
        foreach ($tmp_check_emh_field_view as $key => $value)
        {
            if($value == 0 ) $all_field_atleast_click = 0 ;
        }
      }
      $question_allergy = !empty($tmp_check_emh_field_view['checkallergy']) ? true : false ; // check the allergy tab is viewed
      $question_surgical = !empty($tmp_check_emh_field_view['checksurgical']) ? true : false ; // check the surical history tab is viewed

      // about this condition - ($curuser->gender == 0 && !( !is_null($curuser->is_uterus_removal) || $question_surgical ) )  -> client requirement is the question on surgical history is not mandatory to answer

     if($all_field_atleast_click != 1 ||
      is_null($curuser->is_retired) || $curuser->is_retired === '' ||
      ($curuser->is_retired == 0 && empty($curuser->occupation)) ||
      !(!empty($curuser->height) ||
        !empty($curuser->height_inches)) ||
      empty($curuser->weight) ||
       is_null($curuser->sexual_orientation) ||  $curuser->sexual_orientation === '' ||
       is_null($curuser->marital_status) ||  $curuser->marital_status === '' ||
       is_null($curuser->ethinicity) || $curuser->ethinicity === '' ||
       ($curuser->gender == 0 && !( !is_null($curuser->is_uterus_removal) || $question_surgical ) )  ||
        ($curuser->gender == 0 && !( !is_null($curuser->is_latex_allergy) || $question_allergy  ))   ||
         is_null($curuser->is_currentlysmoking)   ||  $curuser->is_currentlysmoking === '' ||
         is_null($curuser->is_pastsmoking)  || $curuser->is_pastsmoking === '' ||
          is_null($curuser->is_currentlydrinking)  || $curuser->is_currentlydrinking === '' ||
           is_null($curuser->is_pastdrinking)  || $curuser->is_pastdrinking === '' ||
            is_null($curuser->is_otherdrug)  ||  $curuser->is_otherdrug === '' ||
            is_null($curuser->is_otherdrugpast) ||   $curuser->is_otherdrugpast === '' ||
            empty($curuser->address) || empty($curuser->city) || empty($curuser->state) || empty($curuser->zip) || empty($curuser->guarantor) ||
             is_null($curuser->is_check_med_his) ||    $curuser->is_check_med_his === '' ||
             is_null($curuser->is_check_surg_his) ||   $curuser->is_check_surg_his === '' ||
             is_null($curuser->is_check_allergy_his)  ||  $curuser->is_check_allergy_his === '' ||
             is_null($curuser->is_family_his) ||  $curuser->is_family_his === '' || is_null($curuser->pharmacy) || empty($curuser->pharmacy))
      {
                  return $this->redirect(['action' => 'medicalhistory','prefix' => $this->prefix]);

      }
    }
    $this->loadModel('Doctors');
    $this->loadModel('Organizations');
    $this->loadModel('Specializations');
    $this->loadModel('Appointments');
    $this->loadModel('ChiefCompliantUserdetails');
    $check_org_active = $this->Organizations->find('all')->where(['id' => $schedule_data['organization_id'] ])->first();
    if($check_org_active->status != 1 || $check_org_active->is_shown != 1)
    {
      $this->redirect(['controller' => 'Pages', 'action' => 'contactUs', 'prefix' => $this->prefix]);
      $this->Flash->error(__('Sorry you can not book an appointment as your clinic is inactive, Please contact admin.'));
    }

    $aptdta = $this->Appointments->find('list', [
                'keyField' => 'id',
                'valueField' => 'id'
            ])->where(['user_id' => $userId])->toArray(); // get appointemnt id of this user

    if(!empty($aptdta))
    {
      $cclud_data = $this->ChiefCompliantUserdetails->find('list', [
                'keyField' => 'id',
                'valueField' => 'appointment_id'
            ])->where([
              'appointment_id IN' => $aptdta,
              'OR' => array(
                  array('questionnaire_detail' => ''),
                  array('questionnaire_detail IS NULL')
              )

            ])->toArray(); // get the empty questionnaire_detail record for this user


      $all_ccud_id = $this->ChiefCompliantUserdetails->find('list', [
                'keyField' => 'id',
                'valueField' => 'appointment_id'
            ])->where([
              'appointment_id IN' => $aptdta,
            ])->toArray();
      $no_cclud_data = array_diff($aptdta, $all_ccud_id);  // get all appointment id for which chief compliant user details have no data and delete from apointment table

      $cclud_data = array_merge($cclud_data, $no_cclud_data) ;

      //if(!empty($cclud_data)) // delete all appointment id that are partially filled
      //$this->Appointments->deleteAll(['id IN' => $cclud_data]);  // Commented By Pramod

      //if(!empty($cclud_data)) // delete all user details that are partially filled
      //$this->ChiefCompliantUserdetails->deleteAll(['appointment_id IN' => $cclud_data]); // delete those chief compliant user details which are partially filled
    }

    // remove the partially filled previous appointement  of this user end


    $query = $this->Doctors->find('list', [
        'keyField' => 'id',
        'valueField' => 'doctor_name'
    ])->where(['is_shown' => 1, 'status' => 1, 'organization_id' => $schedule_data['organization_id'],'specialization_id <>' => '']);  // ->where(['organization_id' => $login_user['organization_id']])
    $doctor_list = $query->toArray();
    if(empty($doctor_list)){

        $this->redirect(['controller' => 'Pages', 'action' => 'contactUs','prefix' => $this->prefix]);
        $this->Flash->error(__('Sorry you can not book an appointment as clinic`s doctors not available, Please contact admin.'));
    }

    $query = $this->Organizations->find('list', [
        'keyField' => 'id',
        'valueField' => 'organization_name'
    ])->where(['is_shown' => 1, 'status' => 1]);
    $org_list = $query->toArray();



    if(!empty($check_org_active->specialization_ids)) {
      $check_org_active->specialization_ids = explode(',', $check_org_active->specialization_ids) ;
    }

    $query = $this->Specializations->find('list', [
        'keyField' => 'id',
        'valueField' => 'name'
    ])->where(['is_shown' => 1, 'status' => 1, 'id IN' => $check_org_active->specialization_ids]);
    $specialization_list = $query->toArray();

    if ($this->request->is(['post', 'put']))
    {

        if(!empty($schedule_data) && (date("Y-m-d", strtotime($schedule_data->appointment_date)) < date("Y-m-d") || $schedule_data->status == 3))
        {
          $schedule_slug = $schedule_id.'-'.time();
          $this->Flash->error(__("You don't have an appointment scheduled. Please contact the clinic."));
          return $this->redirect(['controller'=>'users','action' => 'newAppointment','prefix' => $this->prefix,base64_encode($schedule_slug)]);
        }


      if(!empty($schedule_data) && !empty($schedule_data['appointment_id'])){

        $new_apt = $this->Appointments->find('all')->where(['id' => $schedule_data['appointment_id']])->first();
        $is_previous_appointment = 1;

      }else{

        $new_apt = $this->Appointments->newEntity();
        $is_previous_appointment = 0;
      }

      if(!empty($this->request->data['appointment_date']))
      {
          $this->request->data['appointment_date'] = Time::createFromFormat(
              'd-m-Y H:i',
              $this->request->data['appointment_date']
          );
      }

      $doctor_id = base64_decode($this->request->getData('doctor_id')) ;
      $yourdc = $this->Doctors->find('all')->contain('Specializations')->where(['Doctors.id' => $doctor_id])->first();

      if(!empty($yourdc))
      {
            $specialization_id = $yourdc->specialization_id;
      }

      if(
        empty($doctor_id) ||
        empty($specialization_id) ||
        !array_key_exists($doctor_id, $doctor_list) ||
        !array_key_exists($specialization_id, $specialization_list)
        )
      {
        $this->Flash->error(__('Could not proceed as some invalid data found in the input.'));
        return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
      }

      $request_data = array();
      $request_data['specialization_id'] = $specialization_id ;
      $request_data['doctor_id'] = $doctor_id;
      $request_data['schedule_id'] = $schedule_id;

      $scount = $this->Specializations->find('all')->where(['id' => $specialization_id])->first();
      $dcount = $this->Doctors->find('all')->where(['id' => $doctor_id])->first();

      if(empty($scount) || empty($dcount))
      {
        $this->Flash->error(__('Record not found for your input. Try again.'));
        return $this->redirect($this->referer());
      }

      //track the previous specialization id for clear pre-appointment data when specialization is changed.
      if($is_previous_appointment && $new_apt['specialization_id'] != $specialization_id){

        $request_data['previous_specialization_id'] = $new_apt['specialization_id'];
      }

      $this->Appointments->patchEntity($new_apt, $request_data);
      $new_apt->user_id = $userId  ;
      $new_apt->organization_id = $schedule_data['organization_id'];
      if($res_apt = $this->Appointments->save($new_apt))
      { //pr($res_apt);die;
          if(!empty($schedule_data))
          {
            if(isset($this->request->data['time']) && $this->request->data['time'] != ''){
            $timemanage = array();
            $timemanage['user_id'] = $userId;
            $timemanage['appointment_id'] = $res_apt->id;
            $timemanage['form_type'] = 'Doctor selection';
            $timemanage['time'] = isset($this->request->data['time']) ? $this->request->data['time']:'';
            $this->timeManagement($timemanage);
           }


            $schedule_data->appointment_id = $res_apt->id;
           // $schedule_data->step_id = 11;
            $schedule_data->user_id = $userId;
            $schedule_data->doctor_id = $res_apt->doctor_id;
            $scheuleTbl->save($schedule_data);
          }
          return $this->redirect(array('action'=>'chooseOption', 'prefix' => $this->prefix, base64_encode($res_apt->id), base64_encode($specialization_id)));
      }
      else
      {
          $this->Flash->success(__('Sorry appointment could not submitted, Please try again.'));
      }
    }

    $selected_doctor_data = null;
    if(!empty($schedule_data) && !empty($schedule_data['doctor_id'])){

      $selected_doctor_data = $this->Doctors->find('all')->where(['id' => $schedule_data['doctor_id']])->first();
      $doctor_specialization_ids = explode(',', $selected_doctor_data->specialization_id);
      $query1 = $this->Specializations->find('list', [
            'keyField' => 'id',
            'valueField' => 'name'
        ])->where(['is_shown' => 1, 'status' => 1, 'id IN' => $doctor_specialization_ids]);
        $specialization_list = $query1->toArray();
    }

    $this->set(compact('doctor_list', 'org_list', 'specialization_list', 'login_user','user_id','selected_doctor_data'));
  }



  public function verifyInsurance($apt_id = null, $specialization_id = null)
  {
      $this->viewBuilder()->setLayout('front');
      $id = $this->Auth->user('id');
      $this->loadModel('Users');
      $userInfo = $this->Users->find('all')->where(['id' =>$id])->first();

      if(!empty($userInfo->subscriberName))
      $userInfo->subscriberName = Security::decrypt( base64_decode($userInfo->subscriberName), SEC_KEY);
      if(!empty($userInfo->identificationNumber))
      $userInfo->identificationNumber = Security::decrypt( base64_decode($userInfo->identificationNumber), SEC_KEY);
      if(!empty($userInfo->groupNumber))
      $userInfo->groupNumber = Security::decrypt( base64_decode($userInfo->groupNumber), SEC_KEY);
      if(!empty($userInfo->insuranceCompany))
      $userInfo->insuranceCompany = Security::decrypt( base64_decode($userInfo->insuranceCompany), SEC_KEY);
      if(!empty($userInfo->insuranceType))
      $userInfo->insuranceType = Security::decrypt( base64_decode($userInfo->insuranceType), SEC_KEY);


      if($this->request->is(['post', 'put'])){

              $apt_id = $this->request->data('apt_id');
              $next_steps = $this->request->data('next_steps');
              $step_id = $this->request->data('step_id');
              $schedule_id = $this->request->data('schedule_id');

             if($this->request->data('verify') == 1)
             {

              $insuranceType = $this->request->getData('insuranceType');
              $subscriberName = $this->request->data('subscriberName');
              $identificationNumber = $this->request->data('identificationNumber');
              $groupNumber = $this->request->data('groupNumber');
              $insuranceCompany = $this->request->data('insuranceCompany');

              $subscriberName = !empty($subscriberName) ? base64_encode(Security::encrypt($subscriberName, SEC_KEY)) : '';
              $identificationNumber = !empty($identificationNumber) ? base64_encode(Security::encrypt($identificationNumber, SEC_KEY)) : '';
              $groupNumber = !empty($groupNumber) ? base64_encode(Security::encrypt($groupNumber, SEC_KEY)) : '';
              $insuranceCompany = !empty($insuranceCompany) ? base64_encode(Security::encrypt($insuranceCompany, SEC_KEY)) : '';
              $insuranceType = !empty($insuranceType) ? base64_encode(Security::encrypt($insuranceType, SEC_KEY)): '';

              $this->Users->updateAll(
                  array('subscriberName' => $subscriberName,'identificationNumber' =>$identificationNumber,'groupNumber' =>$groupNumber,'insuranceCompany' =>$insuranceCompany,'insuranceType' =>$insuranceType),
                  array('id' => $id)
              );

              if(!empty($userInfo->clinical_race) && !empty($userInfo->clinical_ethnicity))
              {
                  return $this->redirect(array('action'=>'newAppointmentstep2', 'prefix' => $this->prefix, $apt_id, $next_steps, $step_id,$schedule_id));
              }
              else
              {
                  $this->Flash->success('Insurance is verified!');
                  return  $this->redirect(array('action'=>'addRaceEthinicity', 'prefix' => $this->prefix, $apt_id, $next_steps, $step_id,$schedule_id));
              }
            }
            else
            {
                if(!empty($userInfo->clinical_race) && !empty($userInfo->clinical_ethnicity))
                {
                    return $this->redirect(array('action'=>'newAppointmentstep2', 'prefix' => $this->prefix, $apt_id, $next_steps, $step_id,$schedule_id));
                }
                else
                {
                    $this->Flash->success('Insurance is verified!');
                    return  $this->redirect(array('action'=>'addRaceEthinicity', 'prefix' => $this->prefix, $apt_id, $next_steps, $step_id,$schedule_id));
                }
            }
      }
      $this->set(compact('userInfo'));
  }


  public function addRaceEthinicity()
  {
      $this->viewBuilder()->setLayout('front');
      $id = $this->Auth->user('id');
      $this->loadModel('Users');
      $userInfo = $this->Users->find('all')->where(['id' =>$id])->first();

      if($this->request->is(['post', 'put'])){

        $apt_id = $this->request->data('apt_id');
        $next_steps = $this->request->data('next_steps');
        $step_id = $this->request->data('step_id');
        $schedule_id = $this->request->data('schedule_id');

        $clinical_race = $this->request->data('clinical_race');
        $clinical_ethnicity = $this->request->data('clinical_ethnicity');


        $this->Users->updateAll(array('clinical_race' => $clinical_race,'clinical_ethnicity' =>$clinical_ethnicity), array('id' => $id));

        return $this->redirect(array('action'=>'newAppointmentstep2', 'prefix' => $this->prefix, $apt_id, $next_steps, $step_id,$schedule_id));
      }
      $this->set(compact('userInfo'));
  }



  public function chooseOption($apt_id = null, $specialization_id = null){

    //$this->request->session()->delete('Flash');
    $this->viewBuilder()->setLayout('front');

    $this->loadModel('Specializations');
    $this->loadModel('StepDetails');
    $appointmentTbl  = TableRegistry::get("Appointments");
    $this->loadModel('ChiefCompliantUserdetails');
    $scheuleTbl  = TableRegistry::get("Schedules");
    $userTbl  = TableRegistry::get("Users");
    $doctorTbl = TableRegistry::get('doctors');

    if(empty($apt_id) || empty($specialization_id)){

      $apt_id = $this->request->getData('apt_id');
      $specialization_id = $this->request->getData('specialization_id');
    }
    $apt_id_data = $appointmentTbl->find('all')->where(['Appointments.id'=> base64_decode($apt_id)])->contain(['Users'])->first();
    $user_id = null;
    $schedule_id = null;
    $step_ids = null;  
    if(!empty($apt_id_data)){

      $user_id = $apt_id_data['user_id'];
      $schedule_id = $apt_id_data['schedule_id'];      
    }
    //After setting in admin panel for visit reason
    if(!empty($schedule_id))
    {
      $schedule_rec = $scheuleTbl->find('all')->where(['id' => $schedule_id])->first();
      $doctor_id = $schedule_rec->doctor_id;
      $doctor_data = $doctorTbl->find('all')->where(['id' => $doctor_id])->first();
      $temp_visit_reasons_ids = $doctor_data->visit_reason_ids ? $this->CryptoSecurity->decrypt(base64_decode($doctor_data->visit_reason_ids),SEC_KEY) : '';
      //pr($temp_visit_reasons);
      if(!empty($temp_visit_reasons_ids))
      {
        $step_ids = explode(',', $temp_visit_reasons_ids);
      }
      // pr($step_ids);
    }
    // end

    //check pre-appointment link is accessible or not
   /* if(empty($this->General->is_access_pre_appointment_link($apt_id_data['schedule_id']))){

      $schedule_slug = $apt_id_data['schedule_id'].'-'.date('dmY');
      $this->Flash->error("You don't have an appointment scheduled. Please contact the clinic.");
      return $this->redirect(['controller' => 'Users','action' => 'newAppointment',base64_encode($schedule_slug)]);

    }*/
    //pr($apt_id);die;
    $next_steps = $this->request->getData('next_steps');
    //pr($next_steps);die;


    if($this->request->is(['post', 'put'])){

      //pr($this->request->data());die;

      $step_id = $this->request->data('step_id');
      $is_find_steps = 0;
      if($step_id == 12){

        $user_appointment_detail = $this->ChiefCompliantUserdetails->find('all')->where(['appointment_id' => $apt_id])->first();
        if(!empty($user_appointment_detail)){

            if($user_appointment_detail->current_step_id == 12){

              $next_steps = $user_appointment_detail->follow_up_next_steps;
            }
            else{

              $if_find_steps = 1;
            }

        }else{

            $is_find_steps = 1;
        }

        if($is_find_steps ==1){

          $allcc_user_dtail = $this->ChiefCompliantUserdetails->find('all')->where(['current_step_id IN' => [1,9,11,12]]);

            $allcc_user_dtail = $allcc_user_dtail->matching('Appointments', function(\Cake\ORM\Query $q) use ($apt_id_data, $apt_id) {
                return $q->where(['Appointments.doctor_id' => $apt_id_data->doctor_id, 'Appointments.id !=' => $apt_id, 'specialization_id' => $apt_id_data->specialization_id ]);
            });

            $allcc_user_dtail = $allcc_user_dtail->order(['ChiefCompliantUserdetails.id' => 'desc'])->first();
           //pr($allcc_user_dtail);die('sdsad');

            if(empty($allcc_user_dtail)){

              $this->Flash->error(__('To Follow up : Make sure to choose the same doctor that you had chosen before at the time of your Symptom Complaint, GI Health Checkup, Post-procedure Checkup visit!'));
              $schedule_slug = $apt_id_data['schedule_id'].'-'.time();
              return $this->redirect(['action' => 'newAppointment','prefix' => $this->prefix ,base64_encode($schedule_slug)]);

            }
            else
            {


              if($allcc_user_dtail->current_step_id == 12){

                $next_steps = $allcc_user_dtail->folow_up_next_steps;

              }else{

                $step_details = $this->StepDetails->find('all')->where(['id'=> $allcc_user_dtail->current_step_id])->first();

                //pr($step_details);

                if(!empty($step_details)){
                  $next_steps = $step_details->next_steps;
                }
              }
            }
        }
      }
      // pr($this->request->data());die('xcx');      
      $schedule_data = $scheuleTbl->find('all')->where(['id' => $apt_id_data['schedule_id']])->first();
      //$schedule_data->appointment_id = $res_apt->id;
      $schedule_data->next_step = $next_steps;
      $schedule_data->step_id = $step_id;
      $scheuleTbl->save($schedule_data);

      $orgTbl  = TableRegistry::get("Organizations");
      $org_data = $orgTbl->find('all')->where(['id' => $apt_id_data['organization_id']])->first();




      //pr($apt_id_data); die;
      if(!empty($org_data) && $org_data->is_show_insurance != 1)
      {
        if(!empty($apt_id_data['user']['clinical_race']) && !empty($apt_id_data['user']['clinical_ethnicity']))
        {
            return $this->redirect(array('action'=>'newAppointmentstep2', 'prefix' => $this->prefix, $apt_id, base64_encode($next_steps), $step_id,$apt_id_data['schedule_id']));
        }
        else
        {
            return  $this->redirect(array('action'=>'addRaceEthinicity', 'prefix' => $this->prefix, $apt_id, $next_steps, $step_id,$schedule_id));
        }
      }else{
            return $this->redirect(array('action' =>'verifyInsurance','prefix' => $this->prefix, $apt_id, base64_encode($next_steps), $step_id,$apt_id_data['schedule_id']));
      }     

// return    $this->redirect(array('action'=>'newAppointmentstep2', 'prefix' => $this->prefix, $apt_id, base64_encode($next_steps), $step_id,$apt_id_data['schedule_id']));

      // pr($this->request->data); die;

    }



    $specialization_data = $this->Specializations->find('all')->where(['id' => base64_decode($specialization_id)])->first() ;
    $intermediate_steps = array();
    $intermediate_steps = $specialization_data->intermediate_steps;

    if(!empty($intermediate_steps)){
      $intermediate_steps = explode(',', $intermediate_steps) ;
      //pr($intermediate_steps);
      // intermediate step as per setting in admin 
        if(!empty($step_ids)){
          $temp_intermediate_steps = array_intersect($step_ids, $intermediate_steps);
          if(!empty($temp_intermediate_steps))
          {
            $intermediate_steps = $temp_intermediate_steps;
          }
        }
        // end
      $step_detail = $this->StepDetails->find('all')->where(['id IN' => $intermediate_steps])->all();

      if(!empty($step_detail)){

        $temp_step_detail = array();
        foreach ($step_detail as $key => $value) {

          $temp_step_detail[$value->id] = $value;
        }

        $step_detail = $temp_step_detail;

      }
     //pr($step_detail);die;


    }
    $this->set(compact('apt_id', 'specialization_id', 'step_detail','user_id','schedule_id'));


  }

  public function newAppointmentstep2($apt_id = null, $next_steps = null, $step_id = null,$schedule_id = null)
  {
    //$this->request->session()->delete('Flash');
    //set current steps array
    //die('dfd');
    ini_set('memory_limit', '1024M');
    $cur_next_steps = array();
    if(empty($next_steps)){
      $next_steps = $this->request->getData('next_steps');
      $next_steps = base64_decode($next_steps);
      $cur_next_steps = explode(',', $next_steps);
    } else{
      $next_steps = base64_decode($next_steps);
      $cur_next_steps = explode(',', $next_steps);
    }

    //set step_id
    if(empty($step_id)){
        $step_id = $this->request->getData('step_id');
    }

   $this->viewBuilder()->setLayout('front');

  if(!empty($apt_id)){

    $apt_id = base64_decode($apt_id);
    $schedule_slug = $schedule_id.'-'.time();

    if(empty($apt_id)){

      $this->Flash->error(__('Sorry, Appointment id is not valid!.'));
      return $this->redirect(array('action'=>'dashboard','prefix' => $this->prefix));

    }
    else{

      $this->loadModel('Appointments');
      $apt_id_data = $this->Appointments->find('all')->where(['Appointments.id'=>$apt_id])->contain(['Doctors','Users'])->first();

      if(empty($apt_id_data)){

        $this->Flash->error(__('Please book your appointment here.'));
        return $this->redirect(array('action'=>'newAppointment','prefix' => $this->prefix ,base64_encode($schedule_slug)));
      }
    }

  }
  else{

    $this->Flash->error(__('Please book an appointment here.'));
    return $this->redirect(array('action'=>'newAppointment','prefix' => $this->prefix ,base64_encode($schedule_slug)));
  }

  $login_user = $apt_id_data['user'];
  $uid = $login_user['id'];
  $schedule_id = $apt_id_data['schedule_id'];

  $this->loadModel('ChiefCompliants');
  $this->loadModel('ChiefCompliantMedication');
  $this->loadModel('ChiefCompliantUserdetails');
  $this->loadModel('ChiefCompliantDetails');
  $this->loadModel('ChiefCompliantQuestionnaire');
  $this->loadModel('StepDetails');
  $this->loadModel('ChiefCompliantOtherDetails');
  $this->loadModel('PainFollowupQuestionnaires');
  $this->loadModel('CommonQuestions');
  $this->loadModel('Diseases');
  $this->loadModel('Symptoms');
  $this->loadModel('Users');
  $commonTable = TableRegistry::get('common_conditions');


  // user data
  $user_table = TableRegistry::get('Users');
  $user_data = $user_table->get($uid);
  // pr($user_data);
  // end user data

  $prev_visit_for_gi_health = 0;
  $follow_up_step_id = 1;

  if(in_array($step_id,[25,26,28]))
  {
    $internal_medication_question = $this->CommonQuestions->find('all')->where(['step_id LIKE' => '25'])->order(['ques_order' => 'asc'])->toArray();
    $common_allergy_cond = $commonTable->find('list', [
                        'keyField' => 'id',
                        'valueField' => 'name'
                    ])->where(['cond_type' => 3, 'show_bottom' => 1])->toArray();
  }
  if($step_id == 26)
  {
    $psychiatry_question = $this->CommonQuestions->find('all')->where(['step_id LIKE' => '26','tab_number LIKE' => 'ccp'])->order(['ques_order' => 'asc'])->toArray();
  }
  if($step_id == 27)
  {

    $psychiatry_question = $this->CommonQuestions-> find('all')->where(['tab_number IN'=> ['ccp','followup']])->order(['ques_order' => 'asc'])->toArray();
     // pr($psychiatry_question); die;
  }

  // get related cheif complaints of specializations
  if($apt_id_data->specialization_id == 3)
  {

    $chief_compliant = $this->ChiefCompliants->find('all')->where(['specialization_id' => 3, 'default_shown_status' => 1 ])->order(['name' => 'ASC']);
    $chief_compliant_symptoms_tab1 = $chief_compliant ;

  }
  elseif($apt_id_data->specialization_id == 4)
  {

    $chief_compliant = $this->ChiefCompliants->find('all')->where(['specialization_id' => 4, 'default_shown_status' => 1  ])->order(['name' => 'ASC']);
    $chief_compliant_symptoms_tab1 = $chief_compliant ;

  }
  elseif ($apt_id_data->specialization_id == 5)
  {
    $chief_compliant = $this->ChiefCompliants->find('all')->where(['specialization_id' => 5, 'default_shown_status' => 1  ])->order(['name' => 'ASC']);
    $chief_compliant_symptoms_tab1 = $chief_compliant ;
  }
  elseif ($apt_id_data->specialization_id == 6) {

    $chief_compliant = $this->ChiefCompliants->find('all')->where(['specialization_id' => 6, 'default_shown_status' => 1  ])->order(['name' => 'ASC']);
    $chief_compliant_symptoms_tab1 = $chief_compliant ;

  }
  elseif ($apt_id_data->specialization_id == 7) {

    $chief_compliant = $this->ChiefCompliants->find('all')->where(['specialization_id' => 7, 'default_shown_status' => 1  ])->order(['name' => 'ASC']);
    $chief_compliant_symptoms_tab1 = $chief_compliant ;

  }
  else{ 

  	if($step_id == 17){

  		$chief_compliant = $this->ChiefCompliants->find('all')->where(['covid_shown_status' => 1  ])->order(['name' => 'ASC']);
  	}
  	else{
  		$chief_compliant = $this->ChiefCompliants->find('all')->where(['specialization_id NOT IN' => array(3,4,5,6,7), 'default_shown_status' => 1  ])->order(['name' => 'ASC']);
  	}

    $chief_compliant_symptoms_tab1 = $chief_compliant;
  }
  //pr($chief_compliant_symptoms_tab1->toArray());
  // pr($user_data); die;
  //pr($chief_compliant_symptoms_tab1->toArray());die;

  $chief_compliant_medication = $this->ChiefCompliantMedication->find('all')->order(['layman_name' => 'ASC']);
  //pr($chief_compliant_medication->toArray());
  $python_symptom_output = '';
  $detail_question_id = '';
  $default_symptoms_id = '';
  $compliant_questin = '';
  $tab_3_load_2_time = ''; // this variable is used for loading tab 3 two times as client requirement

  $how_it_taken_arr = ["mouth","nasal spray","both ears","right ear","left ear","both eyes","right eye","left eye","subcutaneously","muscle injection","under the skin", "under tongue","topical","suppository"] ;

  $protection_methods = ["withdrawal (pulling out)","vaginal sponge","condom", "birth control pill", "IUD", "vasectomy", "sterilization", "spermicide", "diaphragm", "female condom", "birth control vaginal ring",  "birth control sponge", "birth control shot", "birth control patch", "birth control implant"] ;

  // taken from allevia doc
  $length_arr =  '{"1x a day": "qd", "2x a day": "BID", "3x a day": "TID", "3x a day": "TID", "every 4 hours": "q4h", "every 6 hours": "q6h", "every 8 hours": "q8h", "every 12 hours": "q12h", "1x a week": "qwk", "2x a week": "2/wk", "3x a week": "3/wk", "4x a day": "q4wk", "5x a day": "q5wk", "6x a day": "q6wk", "at bedtime": "qhs", "in the morning": "qam", "as needed": "PRN","evening":"qpm"}' ;

  $length_arr = json_decode($length_arr, true);
  $length_arr = array_flip($length_arr);

  //get all medication to show dast or padt form
   $show_dast_padt_medication_list = $this->ChiefCompliantMedication ->find('list', [
                                            'keyField' => 'id',
                                            'valueField' =>  function ($row) {
                                              if($row['layman_name'] == $row['doctor_specific_name'])
                                              {
                                              return $row['layman_name'];
                                              }
                                              else {
                                              // return $row['layman_name'] . ' (' . $row['doctor_specific_name'].')';
                                                return $row['layman_name'];
                                              }
                                         }
                                        ])->where(['OR' => ['show_dast' => 1, 'show_padt' => 1,'show_soapp' => 1]])->toArray();

   $show_covid_19_symptom_list = $this->ChiefCompliants ->find('list', [
            'keyField' => 'id',
            'valueField' =>'name'
                  ])->where(['show_covid_19' => 1])->toArray();

   //$show_tab_18 = 0;
  $user_detail = $this->ChiefCompliantUserdetails->find('all')->where(['appointment_id' => $apt_id ])->first();

 // pr($user_detail);die;
 // pr($apt_id_data);die;
//set user detail appointment data when user switch between modules
  //  echo $user_detail->current_step_id;die;
 // echo $step_id;die;
  // pr($apt_id_data);die;
  if(!empty($user_detail) && ($step_id != $user_detail->current_step_id || !empty($apt_id_data['previous_specialization_id']))){

    // die('naveen');
    //update the appointment data
    $apt_id_data['previous_specialization_id'] = null;
    $this->Appointments->save($apt_id_data);


    $user_detail->current_step_id = $step_id;
    $user_detail->phq_9_detail = null;
    $user_detail->covid_detail = null;
    $user_detail->active_sub_tab = null;
    $user_detail->visited_sub_tabs = null;

    $user_detail->chronic_condition = null;
    $user_detail->chronic_cad_detail = null;
    $user_detail->chronic_chf_detail = null;
    $user_detail->chronic_copd_detail = null;
    $user_detail->chronic_dmii_detail = null;
    $user_detail->chronic_htn_detail = null;
    $user_detail->chronic_cad_medication = null;
    $user_detail->chronic_chf_medication = null;
    $user_detail->chronic_copd_medication = null;
    $user_detail->chronic_dmii_medication = null;
    $user_detail->chronic_htn_medication = null;
    $user_detail->glucose_reading_detail = null;
    $user_detail->chronic_general_detail = null;
    $user_detail->bp_reading_detail = null;
    $user_detail->chronic_asthma_detail = null;
    $user_detail->peak_flow_reading_detail = null;

    $user_detail->cancer_conditions = null;
    $user_detail->cancer_cc_detail = null;
    $user_detail->cancer_history_detail = null;
    $user_detail->cancer_assessments = null;
    //$user_detail->followup_assessment = null;
    $user_detail->cancer_medical_detail = null;
    $user_detail->cancer_family_members = null;
    $user_detail->family_members_cancer_disease_detail = null;
    $user_detail->pre_op_post_op = null;
    $user_detail->cancer_followup_general_detail = null;
    $user_detail->followup_medical_history_detail = null;

    $user_detail->medication_refill_comm_soapp_details = null;
    $user_detail->medication_refill_extra_details = null;
    $user_detail->med_refill_medication_side_effects_radio = null;
    $user_detail->if_more_recent_papsmear = null;
    $user_detail->max_visited_tab_number = null;
    $user_detail->json_patient_note = null;
    $user_detail->additional_comment = null;
    $user_detail->message_id = null;
    $user_detail->symptom_from_tab1 = null;
    $user_detail->old_python_file_option_3rd_tab = null;
    $user_detail->python_file_option_3rd_tab = null;
    $user_detail->no_of_option_3rd_tab = null;
    $user_detail->no_of_load_3rd_tab = null;
    $user_detail->last_pap_smear_info = null;
    $user_detail->last_pap_smear_date = null;
    $user_detail->last_period_info  = null;
    $user_detail->papsmear_year = null;
    $user_detail->papsmear_month = null;
    $user_detail->last_period_date = null;
    $user_detail->age_of_first_priod = null;
    $user_detail->currently_pregnant_complication = null;
    $user_detail->currently_pregnant_days = null;
    $user_detail->currently_pregnant_week = null;
    $user_detail->current_baby_sex = null;
    $user_detail->is_curently_pregnant = null;
    $user_detail->questionnaire_detail = null;
    $user_detail->chief_compliant_symptoms = null;
    $user_detail->already_asked_cc_details = null;
    $user_detail->pain_update_question = null;
    $user_detail->taken_before_medicine_info = null;
    $user_detail->prev_gi_health_checkup = null;
    $user_detail->disease_questions_detail = null;
    $user_detail->allready_asked_disease = null;
    $user_detail->disease_name = null;
    $user_detail->pre_op_allergies_detail = null;
    $user_detail->pre_op_medications_question_detail = null;
    $user_detail->pre_op_medical_condition_detail = null;
    $user_detail->pre_op_procedure_detail = null;
    $user_detail->post_checkup_question_detail = null;
    $user_detail->screening_questions_detail = null;
    $user_detail->general_update_procedure_detail = null;
    $user_detail->general_update_provider_info = null;
    $user_detail->general_update_question = null;
    $user_detail->other_questions_treatment_detail = null;
    $user_detail->chief_compliant_other_details = null;
    $user_detail->chief_compliant_details = null;
    $user_detail->sexual_info = null;
    $user_detail->medication_side_effects  = null;
    $user_detail->compliant_medication_detail = null;
    $user_detail->compliant_length = null;
    $user_detail->compliant_symptom_ids = null;
    $user_detail->random_chief_compliant = null;
    $user_detail->chief_compliant_id = null;
    $user_detail->folow_up_next_steps = null;
    $user_detail->follow_up_step_id = null;
    $user_detail->followup_main_parent_id = null;
    $user_detail->followup_parent_id = null;
    $user_detail->chronic_pain_assessment_ort = null;
    $user_detail->chronic_pain_opioid_overdose_risk = null;
    $user_detail->chronic_pain_assessment_tmb = null;
    $user_detail->chronic_pain_treatment_history = null;
    $user_detail->chronic_pain_assessment_pmh = null;
    $user_detail->chief_complaint_psychiatry = null;
    $user_detail->is_chief_complaint_doctor = null;

    switch($step_id){

      case 1 :
            $user_detail->current_tab_number = 1;
            break;

      case 2 :

            $user_detail->current_tab_number = 1;
            break;
      case 3 :

            $user_detail->current_tab_number = 4;
            break;
      case 4 :

            $user_detail->current_tab_number = 4;
            break;
      case 5 :

            $user_detail->current_tab_number = 1;
            break;
      case 6 :

            $user_detail->current_tab_number = 2;
            break;
      case 7 :

            $user_detail->current_tab_number = 1;
            break;
      case 8 :

           $user_detail->current_tab_number = 7;
            break;
      case 9 :

            $user_detail->current_tab_number = 9;
            break;
      case 10 :

            $user_detail->current_tab_number = 1;
            break;
      case 11 :

            $user_detail->current_tab_number = 10;
            break;

      case 13 :

            $user_detail->current_tab_number = 11;
            break;
      case 14 :

            $user_detail->current_tab_number = 14;
            break;

      case 16 :

            $user_detail->current_tab_number = 17;
            break;
       case 17 :

            $user_detail->current_tab_number = 1;
            break;

      case 18:

          $user_detail->current_tab_number = 24;
          break;

      case 19:

          $user_detail->current_tab_number = 25;
          break;

      case 20:
          $user_detail->current_tab_number = 29;
          break;

      case 21:
          $user_detail->current_tab_number = 30;
          break;
      case 22:
          $user_detail->current_tab_number = 33;
          break;
      case 23:
      $user_detail->current_tab_number = 4;
          break;
      case 27:
      $user_detail->current_tab_number = 34;
          break;
    }

    $this->ChiefCompliantUserdetails->save($user_detail);

  }

  // pr($user_detail);die;

  $edited_tab = $this->request->getData('edited_tab');
  $edited_sub_tab = $this->request->getData('edited_sub_tab');
  $edited_im_sub_tab = $this->request->getData('edited_im_sub_tab');
  $active_sub_tab = '';

  //pr($this->request->data());
  //pr($user_detail); die;

  if(!empty($edited_sub_tab) && !empty($user_detail)){

    $tab_number = $edited_tab;
    $visited_sub_tabs = array();
    if(!empty($user_detail->visited_sub_tabs)){

      $visited_sub_tabs = @unserialize($user_detail->visited_sub_tabs);
    }
    //pr($edited_sub_tab); pr($visited_sub_tabs);die;
    if(is_array($visited_sub_tabs) && !empty($visited_sub_tabs)){

      if(in_array($edited_sub_tab, $visited_sub_tabs)){

        $this->ChiefCompliantUserdetails->query()
                ->update()
                ->set(['active_sub_tab' => $edited_sub_tab,'current_tab_number' => $edited_tab])
                ->where(['appointment_id' => $apt_id])
                ->execute();

        $active_sub_tab = $edited_sub_tab;
        return $this->redirect($this->referer());
        //$this->set('active_sub_tab',$edited_sub_tab);
      }
      else{

        $this->Flash->error(__('sorry, you can edit only the previously filled tab.'));
        return $this->redirect($this->referer());

      }
    }
    else{

       $this->Flash->error(__('sorry, you can edit only the previously filled tab.'));
        return $this->redirect($this->referer());
    }
  }

  if(!empty($edited_im_sub_tab) && !empty($user_detail)){

    $tab_number = $edited_tab;
    $im_visited_sub_tabs = array();
    if(!empty($user_detail->im_visited_sub_tabs)){

      $im_visited_sub_tabs = @unserialize($user_detail->im_visited_sub_tabs);
    }
    //pr($im_visited_sub_tabs);die;
    if(is_array($im_visited_sub_tabs) && !empty($im_visited_sub_tabs)){

      if(in_array($edited_im_sub_tab, $im_visited_sub_tabs)){

        $this->ChiefCompliantUserdetails->query()
                ->update()
                ->set(['im_active_sub_tab' => $edited_im_sub_tab,'current_tab_number' => $edited_tab])
                ->where(['appointment_id' => $apt_id])
                ->execute();

        $im_active_sub_tab = $edited_im_sub_tab;
        return $this->redirect($this->referer());
        //$this->set('active_sub_tab',$edited_sub_tab);
      }
      else{

        $this->Flash->error(__('sorry, you can edit only the previously filled tab.'));
        return $this->redirect($this->referer());

      }
    }
    else{

       $this->Flash->error(__('sorry, you can edit only the previously filled tab.'));
        return $this->redirect($this->referer());
    }
  }
  //pr($edited_tab);die;

   // forward and back feature , get the tab number from url

  if(empty($user_detail) && !empty($edited_tab)){

    // forward and back feature , on the first tab if user click on the next tabs show them error message
    $this->Flash->error(__('sorry, you can edit only the previously filled tab.'));
    return $this->redirect($this->referer());
  }

  if(!empty($user_detail) && !empty($user_detail->current_tab_number)){

    //die('ZZxZ');

    if(!empty($user_detail->max_visited_tab_number) && $user_detail->current_tab_number > $user_detail->max_visited_tab_number){

        $this->ChiefCompliantUserdetails->query()
                ->update()
                ->set(['max_visited_tab_number' => $user_detail->current_tab_number])
                ->where(['appointment_id' => $apt_id])
                ->execute();
    }

    //pr($user_detail);die;

    if($this->request->is('post')){

      //pr($this->request->data());die;


      $last_tab_number = $user_detail->current_tab_number;
      //pr($edited_tab);die;
     // forward and back feature related code
      if(!empty($edited_tab)){

        if((empty($user_detail->max_visited_tab_number) && $user_detail->current_tab_number > $edited_tab ) || ($user_detail->max_visited_tab_number >= $edited_tab))
        {

         // die('ZXZX');
          $update_data = array();
          $update_data['max_visited_tab_number'] = max($user_detail->max_visited_tab_number, $user_detail->current_tab_number);
          $update_data['current_tab_number'] = $edited_tab;
          if($edited_tab == 2 || $edited_tab == 17 || $edited_tab == 26) {
            $update_data['already_asked_cc_details'] =  ''; // if tab 2 is edited then we clear data of this column and will ask questions from starting
          }
          if($edited_tab == 15){

            $update_data['allready_asked_disease'] = '';
          }
          if($edited_tab == 24 || ($edited_tab == 1 && $step_id == 25)){

            $update_data['active_sub_tab'] = '';
            $update_data['visited_sub_tabs'] = '';
          }
          if($edited_tab == 3){

            $update_data['no_of_load_3rd_tab'] =  0; // we will empty the no_of_load_3rd_tab column so that the third tab will load again  2 times.
            // Below 2 line will copy the  python_file_option_3rd_tab column into the old_python_file_option_3rd_tab column and then will empty the python_file_option_3rd_tab column , if user edited the third tab so that  the python file will ask the question from beginning as in the previous iteration
            if(!empty($user_detail->python_file_option_3rd_tab))
              $update_data['old_python_file_option_3rd_tab'] = $user_detail->python_file_option_3rd_tab;
              $update_data['python_file_option_3rd_tab'] = NULL ;

          }

         $this->ChiefCompliantUserdetails->query()
                ->update()
                ->set($update_data) // we save the current tab number in the max_visited_tab_number column and insert the currently edited tab to the current tab number
                ->where(['appointment_id' => $apt_id])
                ->execute();
        $user_detail->current_tab_number =  $edited_tab ;  // set the current tab number to the currently edited tab

        }
        elseif($step_id == 18 && $edited_tab == 3){

            $update_data['no_of_load_3rd_tab'] =  0; // we will empty the no_of_load_3rd_tab column so that the third tab will load again  2 times.
            // Below 2 line will copy the  python_file_option_3rd_tab column into the old_python_file_option_3rd_tab column and then will empty the python_file_option_3rd_tab column , if user edited the third tab so that  the python file will ask the question from beginning as in the previous iteration
            if(!empty($user_detail->python_file_option_3rd_tab))
              $update_data['old_python_file_option_3rd_tab'] = $user_detail->python_file_option_3rd_tab;
              $update_data['python_file_option_3rd_tab'] = NULL ;
              $this->ChiefCompliantUserdetails->query()
                ->update()
                ->set($update_data) // we save the current tab number in the max_visited_tab_number column and insert the currently edited tab to the current tab number
                ->where(['appointment_id' => $apt_id])
                ->execute();

          }
        elseif($edited_tab == 26){

          $update_data['current_tab_number'] = $edited_tab;
          $update_data['already_asked_cc_details'] =  '';
          $this->ChiefCompliantUserdetails->query()
                ->update()
                ->set($update_data) // we save the current tab number in the max_visited_tab_number column and insert the currently edited tab to the current tab number
                ->where(['appointment_id' => $apt_id])
                ->execute();
          $user_detail->current_tab_number =  $edited_tab ;
        }
        else if($edited_tab == 5 || $edited_tab == 6 ||  $edited_tab == 7 ||  $edited_tab == 8 || $edited_tab == 9 || $edited_tab == 10 || $edited_tab == 11 || $edited_tab == 12 || $edited_tab == 13 || $edited_tab == 14 || $edited_tab == 15 || $edited_tab == 16 || $edited_tab == 17 || $edited_tab == 18 || $edited_tab == 19 || $edited_tab == 22 || $edited_tab == 24 || $edited_tab == 23 || $edited_tab == 25 || $edited_tab == 27 || $edited_tab == 28 || $edited_tab == 29 || $edited_tab == 30 || $edited_tab == 31 || $edited_tab == 32 || $edited_tab == 33 || $edited_tab == 20 || $edited_tab == 34){          

          $user_detail->current_tab_number =  $edited_tab ;
        }
        else{

            $this->Flash->error(__('sorry, you can edit only the previously filled tab.'));
            return $this->redirect($this->referer());
        }
      }
    }

   //pr($current_tab_number);die;

    $tab_number = $user_detail->current_tab_number ;
    // pr($tab_number);die;
    //  as in orthopedic multiple chief compliant can be chosen
    $ccid_arr =   explode(',', $user_detail->chief_compliant_id) ;
    $chief_compliant_id = $ccid_arr[0] ; // $user_detail->chief_compliant_id ;

    $chief_compliant_userdata = $this->ChiefCompliants->find('all')->where(['id' => $chief_compliant_id])->first();

  }elseif(empty($user_detail) && $step_id == 11){

    $tab_number = 10;

  }elseif(empty($user_detail) && ($step_id == 3 || $step_id == 4)){

    $tab_number = 4;

  }elseif(empty($user_detail) && $step_id == 6){

    $tab_number = 2;
  }
  elseif(empty($user_detail) && $step_id == 8){

    $tab_number = 7;
  }
  elseif(empty($user_detail) && $step_id == 9){

    $tab_number = 9;
  }elseif(empty($user_detail) && $step_id == 13){

    $tab_number = 11;

  }elseif(empty($user_detail) && $step_id == 14){

    $tab_number = 14;

  }
  elseif(empty($user_detail) && $step_id == 16){

    $tab_number = 17;

  }
  elseif(empty($user_detail) && $step_id == 18){

    $tab_number = 24;

  }
  elseif(empty($user_detail) && $step_id == 19){

    $tab_number = 25;

  }
  elseif(empty($user_detail) && $step_id == 20){


    $tab_number = 29;

  }
  elseif(empty($user_detail) && $step_id == 21){

    $tab_number = 30;
  }
  elseif(empty($user_detail) && $step_id == 22){

    $tab_number = 33;
  }
  elseif(empty($user_detail) && $step_id == 27){

    $tab_number = 34;
  }
  else{

    $tab_number = 1;
  }
// pr($step_id);
// pr($tab_number);die;

  if($step_id  == 6 || $step_id  == 16 || $step_id  == 21 || $step_id  == 27)
  {

    //For Orthopedic module, in case of follow up (step id 6 ))
    if(empty($user_detail) || (!empty($user_detail) && empty($user_detail->followup_main_parent_id)))
    {
      if($step_id == 6){
        // in case of follow up (step id 6 )) , the path start from tab no 2 based on patient previous visit
      // get cc user detail completely filled and for orthopedic module(1, 6)
        $allcc_user_dtail = $this->ChiefCompliantUserdetails->find('all')->where(['current_step_id IN' => [1,6]  ,  'questionnaire_detail !=' => '',  'questionnaire_detail IS NOT NULL']);
      }
      else if($step_id == 21)
      {
        //die('zxczx');
        $allcc_user_dtail = $this->ChiefCompliantUserdetails->find('all')->where(['current_step_id IN' => [19,21]  ,  'questionnaire_detail !=' => '',  'questionnaire_detail IS NOT NULL']);

      }
      else if($step_id == 27)
      {
        //die('zxczx');
        $allcc_user_dtail = $this->ChiefCompliantUserdetails->find('all')->where(['current_step_id IN' => [26,27]]);

      }
      else{

        $allcc_user_dtail = $this->ChiefCompliantUserdetails->find('all')->where(['current_step_id IN' => [1,16]  ,  'questionnaire_detail !=' => '',  'questionnaire_detail IS NOT NULL']);
      }

      $user_id = $login_user->id;
      // compare previous appointement doctor id with the current appointemet doctor id ( same doctor ), and orthopedic module ( specialization id 3 )
      $allcc_user_dtail = $allcc_user_dtail->matching('Appointments', function(\Cake\ORM\Query $q) use ($apt_id_data, $apt_id,$user_id) {
                return $q->where(['Appointments.doctor_id' => $apt_id_data->doctor_id, 'Appointments.id !=' => $apt_id, 'specialization_id' => $apt_id_data->specialization_id,'Appointments.user_id' =>$user_id ]);
            });

      $allcc_user_dtail = $allcc_user_dtail->order(['ChiefCompliantUserdetails.id' => 'desc'])->first();


      if(empty($allcc_user_dtail)){

        if($step_id == 27)
        {
          $this->Flash->error(__('To Follow up : Make sure to choose the same doctor that you had chosen before at the time of your Chronic condition visit!'));
        }
        else
        {
          $this->Flash->error(__('To Follow up : Make sure to choose the same doctor that you had chosen before at the time of your Symptom Complaint visit!'));
        } 
        $schedule_slug = $apt_id_data['schedule_id'].'-'.time();
        return $this->redirect(['action' => 'newAppointment','prefix' => $this->prefix, base64_encode($schedule_slug)]);

      }
      else
      {
        // create record for current cc user detail for this appointment  , because  step 1 is not there in follow up round and we are currently creating new record in tab 1/ step 1 only

        if(empty($user_detail)){

          $new_fu_user_detail = $this->ChiefCompliantUserdetails->newEntity();
        }
        else
        {

          $new_fu_user_detail = $user_detail;
        }


        $new_fu_user_detail->followup_parent_id = $allcc_user_dtail->id;
        $new_fu_user_detail->current_step_id = $step_id; // step id of follow up round is 6
        $new_fu_user_detail->appointment_id = $apt_id;
        if($step_id != 21){
          $new_fu_user_detail->chief_compliant_id = $allcc_user_dtail->chief_compliant_id; // we are assigning the previous visit chief compliant id
        }

        if($step_id == 21){

          $new_fu_user_detail->cancer_conditions = $allcc_user_dtail['cancer_conditions'];
          $new_fu_user_detail->cancer_history_detail = $allcc_user_dtail['cancer_history_detail'];
          $new_fu_user_detail->cancer_medical_detail = $allcc_user_dtail['cancer_medical_detail'];
        }
        $new_fu_user_detail->previous_appointment_date = $allcc_user_dtail['created'];

        $new_fu_user_detail->current_tab_number = (($step_id == 16) ? 17 : (($step_id == 21) ? 30 : (($step_id == 27) ? 34 : 2))); // as follow up round starts with tab no 2i

        if(!empty($allcc_user_dtail->followup_main_parent_id))
        {
          $new_fu_user_detail->followup_main_parent_id = $allcc_user_dtail->followup_main_parent_id;
        }
        else
        {
          $new_fu_user_detail->followup_main_parent_id = $allcc_user_dtail->id;
        }

        // we save the record and assign result in user_detail varible for further processing in second tab
        if($user_detail = $this->ChiefCompliantUserdetails->save($new_fu_user_detail))
        {
           $tab_number = (($step_id == 16) ? 17 : (($step_id == 21) ? 30 : (($step_id == 27) ? 34 : 2)));
        }
        else
        {
          $schedule_slug = $apt_id_data['schedule_id'].'-'.time();
          $this->Flash->error(__('Some error occurred, Please try again.'));
              return $this->redirect(['action' => 'newAppointment','prefix' => $this->prefix, base64_encode($schedule_slug)]);
        }
      }
    }
  }
  if($step_id  == 8)
  {

    if(empty($user_detail) ||(!empty($user_detail) && empty($user_detail->compliant_medication_detail))){
      //For Pin medicine module, in case of pain follow up (step id 8 ))

      // in case of pain follow up (step id 8 )) , the path start from tab no 7 based on patient previous visit
      // get cc user detail completely filled and for pain medicine module(7,8)
      $allcc_user_dtail = $this->ChiefCompliantUserdetails->find('all')->where(['current_step_id IN' => [7,8]  ,  'questionnaire_detail !=' => '',  'questionnaire_detail IS NOT NULL']);

      // compare previous appointement doctor id with the current appointemet doctor id ( same doctor ), and pain medicine module ( specialization id 7 )
      $user_id = $login_user->id;
      $allcc_user_dtail = $allcc_user_dtail->matching('Appointments', function(\Cake\ORM\Query $q) use ($apt_id_data, $apt_id,$user_id) {
                  return $q->where(['Appointments.doctor_id' => $apt_id_data->doctor_id, 'Appointments.id !=' => $apt_id, 'specialization_id' => $apt_id_data->specialization_id,'Appointments.user_id' =>$user_id ]);
              });

      $allcc_user_dtail = $allcc_user_dtail->order(['ChiefCompliantUserdetails.id' => 'desc'])->first();

      if(empty($allcc_user_dtail)){

        $this->Flash->error(__('To Follow up : Make sure to choose the same doctor that you had chosen before at the time of your general category visit!'));
              $schedule_slug = $apt_id_data['schedule_id'].'-'.time();
              return $this->redirect(['action' => 'newAppointment','prefix' => $this->prefix, base64_encode($schedule_slug)]);
      }
      else
      {

        // create record for current cc user detail for this appointment  , because  step 1 is not there in follow up round and we are currently creating new record in tab 1/ step 1 only
        if(empty($user_detail)){

          $new_fu_user_detail = $this->ChiefCompliantUserdetails->newEntity();
        }
        else{

          $new_fu_user_detail = $user_detail;
        }

        $new_fu_user_detail->followup_parent_id = $allcc_user_dtail->id;
        $new_fu_user_detail->current_step_id = 8; // step id of pain follow up round is 8
        $new_fu_user_detail->appointment_id = $apt_id;
        $new_fu_user_detail->compliant_medication_detail = $allcc_user_dtail->compliant_medication_detail;
        $new_fu_user_detail->chief_compliant_id = $allcc_user_dtail->chief_compliant_id; // we are assigning the previous visit chief compliant id
        $new_fu_user_detail->current_tab_number = 7; // as follow up round starts with tab no 2
        if(!empty($allcc_user_dtail->followup_main_parent_id)){
            $new_fu_user_detail->followup_main_parent_id = $allcc_user_dtail->followup_main_parent_id;
        } else {
            $new_fu_user_detail->followup_main_parent_id = $allcc_user_dtail->id;
        }
        // we save the record and assign result in user_detail varible for further processing in second tab
        if($user_detail = $this->ChiefCompliantUserdetails->save($new_fu_user_detail)){
          //pr($user_detail);//die;
            $tab_number = 7;

        }else{

          $schedule_slug = $apt_id_data['schedule_id'].'-'.time();

         $this->Flash->error(__('Some error occurred, Please try again.'));
            return $this->redirect(['action' => 'newAppointment','prefix' => $this->prefix, base64_encode($schedule_slug)]);

        }
      }
    }
  }
  if($step_id  == 10){
       //pr($user_detail);die;
      if(empty($user_detail) && (!empty($user_detail) && empty($user_detail->compliant_medication_detail)))
      {
          $tab_number = 1;
          //For Pin medicine module, in case of pain follow up (step id 8 ))

          // in case of pain follow up (step id 8 )) , the path start from tab no 7 based on patient previous visit
          // get cc user detail completely filled and for pain medicine module(7,8)
          $allcc_user_dtail = $this->ChiefCompliantUserdetails->find('all')->where(['compliant_medication_detail !=' => '',  'compliant_medication_detail IS NOT NULL']);

          $user_id = $login_user->id;

          // compare previous appointement GI module ( specialization id 6 )
          $allcc_user_dtail = $allcc_user_dtail->matching('Appointments', function(\Cake\ORM\Query $q) use ($apt_id_data, $apt_id,$user_id) {
                  return $q->where(['Appointments.id !=' => $apt_id, 'specialization_id' => $apt_id_data->specialization_id,'Appointments.user_id' =>$user_id ]);
              });
           //pr($allcc_user_dtail->all()); die;
          $allcc_user_dtail = $allcc_user_dtail->order(['ChiefCompliantUserdetails.id' => 'desc'])->first();
          if(!empty($allcc_user_dtail)){


            // create record for current cc user detail for this appointment  , because  in step 1 we grab the last previous visit medications.


            $new_fu_user_detail = $this->ChiefCompliantUserdetails->newEntity();

           // $new_fu_user_detail->followup_parent_id = $allcc_user_dtail->id;
            $new_fu_user_detail->current_step_id = 10; // step id of GI medication refil round is 10
            $new_fu_user_detail->appointment_id = $apt_id;
            $new_fu_user_detail->compliant_medication_detail = $allcc_user_dtail->compliant_medication_detail;
            $new_fu_user_detail->chief_compliant_id = $allcc_user_dtail->chief_compliant_id; // we are assigning the previous visit chief compliant id
            $new_fu_user_detail->current_tab_number = 1; // as follow up round starts with tab no 1
  // pr($new_fu_user_detail); die;
            // we save the record and assign result in user_detail varible for further processing in second tab
            if($user_detail = $this->ChiefCompliantUserdetails->save($new_fu_user_detail)){
              //pr($user_detail);//die;
                $tab_number = 1;

            }else{

              $schedule_slug = $apt_id_data['schedule_id'].'-'.time();

             $this->Flash->error(__('Some error occurred, Please try again.'));
                return $this->redirect(['action' => 'newAppointment','prefix' => $this->prefix, base64_encode($schedule_slug)]);

            }
          }
        }
      }
  if($step_id  == 9){

        if(empty($user_detail) ||(!empty($user_detail) && empty($user_detail->screening_questions_detail))){

            $tab_number = 9;
            //For GI module, in case of GI health checkup (step id 9 ))

            // in case of GI health checkup (step id 9 )) , the path start from tab no 9 based on patient previous visit
            // get cc user detail completely filled and for screening questions
            $allcc_user_dtail = $this->ChiefCompliantUserdetails->find('all')->where(['screening_questions_detail !=' => '',  'screening_questions_detail IS NOT NULL']);


            $user_id = $login_user->id;
            // compare previous appointement GI module ( specialization id 6 )
            $allcc_user_dtail = $allcc_user_dtail->matching('Appointments', function(\Cake\ORM\Query $q) use ($apt_id_data, $apt_id,$user_id) {
                return $q->where(['Appointments.id !=' => $apt_id, 'specialization_id' => $apt_id_data->specialization_id,'Appointments.user_id' =>$user_id]);
            });

            $allcc_user_dtail = $allcc_user_dtail->order(['ChiefCompliantUserdetails.id' => 'desc'])->first();

          if(!empty($allcc_user_dtail)){

           // echo 'hello';
            $temp_screening_question = null;
            if(isset($allcc_user_dtail->screening_questions_detail) && !empty($allcc_user_dtail->screening_questions_detail)){

              $old_screening_question_detail = @unserialize(Security::decrypt(base64_decode($allcc_user_dtail->screening_questions_detail),SEC_KEY));
              if(isset($old_screening_question_detail[1]) && !empty($old_screening_question_detail[1])){
                $temp_screening_question[1] =  $old_screening_question_detail[1];
              }

              if(isset($old_screening_question_detail[2]) && !empty($old_screening_question_detail[2])){
                $temp_screening_question[2] =  $old_screening_question_detail[2];
              }

            }

            // create record for current cc user detail for this appointment  , because  in step 1 we grab the last previous visit screening questions.
            if(!empty($temp_screening_question)){

              if(empty($user_detail)){

                $new_fu_user_detail = $this->ChiefCompliantUserdetails->newEntity();
              }
              else{

                $new_fu_user_detail = $user_detail;

              }

             // $new_fu_user_detail->followup_parent_id = $allcc_user_dtail->id;
              $new_fu_user_detail->current_step_id = 9; // step id of GI medication refil round is 10
              $new_fu_user_detail->appointment_id = $apt_id;
              $new_fu_user_detail->screening_questions_detail =base64_encode(Security::encrypt(serialize($temp_screening_question),SEC_KEY));
              // we are assigning the previous visit chief compliant id
              $new_fu_user_detail->current_tab_number = 9;
              $new_fu_user_detail->prev_gi_health_checkup = $allcc_user_dtail->id;

              // we save the record and assign result in user_detail varible for further processing in second tab
              if($user_detail = $this->ChiefCompliantUserdetails->save($new_fu_user_detail)){
                //pr($user_detail);//die;
                  $tab_number = 9;
                  $prev_visit_for_gi_health = 1;


              }else{

                $schedule_slug = $apt_id_data['schedule_id'].'-'.time();

               $this->Flash->error(__('Some error occurred, Please try again.'));
                  return $this->redirect(['action' => 'newAppointment','prefix' => $this->prefix, base64_encode($schedule_slug)]);

              }
            }
          }
        }
      }
  if($step_id  == 12)
  {

    //For Orthopedic module, in case of follow up (step id 6 ))
    if(empty($user_detail) || (!empty($user_detail) && empty($user_detail->followup_main_parent_id)))
    {

      // in case of follow up (step id 6 )) , the path start from tab no 2 based on patient previous visit
      // get cc user detail completely filled and for orthopedic module(1, 6)
      $allcc_user_dtail = $this->ChiefCompliantUserdetails->find('all')->where(['current_step_id IN' => [1,9,11,12]]);


     // pr($login_user);die;
      $user_id = $login_user->id;
      // compare previous appointement doctor id with the current appointemet doctor id ( same doctor ), and orthopedic module ( specialization id 3 )
      $allcc_user_dtail = $allcc_user_dtail->matching('Appointments', function(\Cake\ORM\Query $q) use ($apt_id_data, $apt_id,$user_id) {
                return $q->where(['Appointments.doctor_id' => $apt_id_data->doctor_id, 'Appointments.id !=' => $apt_id, 'specialization_id' => $apt_id_data->specialization_id,'Appointments.user_id' =>$user_id ]);
            });

      $allcc_user_dtail = $allcc_user_dtail->order(['ChiefCompliantUserdetails.id' => 'desc'])->first();

      //pr($allcc_user_dtail->toArray());die;

      if(empty($allcc_user_dtail)){

        $this->Flash->error(__('To Follow up : Make sure to choose the same doctor that you had chosen before at the time of your Symptom Complaint, GI Health Checkup, Post-procedure Checkup visit!'));
        $schedule_slug = $apt_id_data['schedule_id'].'-'.time();
        return $this->redirect(['action' => 'newAppointment','prefix' => $this->prefix, base64_encode($schedule_slug)]);

      }
      else
      {

        // create record for current cc user detail for this appointment  , because  step 1 is not there in follow up round and we are currently creating new record in tab 1/ step 1 only

        if(empty($user_detail)){

          $new_fu_user_detail = $this->ChiefCompliantUserdetails->newEntity();
        }
        else
        {

          $new_fu_user_detail = $user_detail;
        }

        if($allcc_user_dtail->current_step_id == 12){

          $new_fu_user_detail->follow_up_step_id = $allcc_user_dtail->follow_up_step_id;
          $new_fu_user_detail->followup_main_parent_id = $allcc_user_dtail->followup_parent_id;
          $allcc_user_dtail->current_step_id = $allcc_user_dtail->follow_up_step_id;

        }else{

          $new_fu_user_detail->follow_up_step_id = $allcc_user_dtail->current_step_id;
          $new_fu_user_detail->followup_main_parent_id = $allcc_user_dtail->id;

        }

        $new_fu_user_detail->followup_parent_id = $allcc_user_dtail->id;
        $new_fu_user_detail->appointment_id = $apt_id;
        $new_fu_user_detail->current_step_id = 12;

        //for GI health checkup (step_id 9)

        if($allcc_user_dtail->current_step_id == 9){

          $new_fu_user_detail->screening_questions_detail = $allcc_user_dtail->screening_questions_detail;
          $new_fu_user_detail->current_tab_number = 9;
          $new_fu_user_detail->questionnaire_detail = $allcc_user_dtail->questionnaire_detail;
          $new_fu_user_detail->folow_up_next_steps = "9,5";
          $tab_number = 9;
        }
        elseif($allcc_user_dtail->current_step_id == 11){

          $new_fu_user_detail->post_checkup_question_detail = $allcc_user_dtail->post_checkup_question_detail;
          $new_fu_user_detail->questionnaire_detail = $allcc_user_dtail->questionnaire_detail;
          $new_fu_user_detail->current_tab_number = 10;
          $new_fu_user_detail->folow_up_next_steps = "10,4,5";
          $tab_number = 10;
        }
        elseif($allcc_user_dtail->current_step_id == 1){

          $new_fu_user_detail->chief_compliant_id = $allcc_user_dtail->chief_compliant_id;
          $new_fu_user_detail->random_chief_compliant = $allcc_user_dtail->random_chief_compliant;
          $new_fu_user_detail->compliant_symptom_ids = $allcc_user_dtail->compliant_symptom_ids;
          $new_fu_user_detail->compliant_length = $allcc_user_dtail->compliant_length;
          $new_fu_user_detail->compliant_medication_detail = $allcc_user_dtail->compliant_medication_detail;
          //$new->new_fu_user_detail->sexual_info = $allcc_user_dtail->sexual_info;

          $new_fu_user_detail->chief_compliant_details = $allcc_user_dtail->chief_compliant_details;
          $new_fu_user_detail->chief_compliant_symptoms = $allcc_user_dtail->chief_compliant_symptoms;
          $new_fu_user_detail->questionnaire_detail = $allcc_user_dtail->questionnaire_detail;
          $new_fu_user_detail->current_tab_number = 1;
          $new_fu_user_detail->folow_up_next_steps = "1,2,3,4,5";
          $tab_number = 1;
        }

        /*$new_fu_user_detail->followup_parent_id = $allcc_user_dtail->id;
        $new_fu_user_detail->current_step_id = 6; // step id of follow up round is 6
        $new_fu_user_detail->appointment_id = $apt_id;
        $new_fu_user_detail->chief_compliant_id = $allcc_user_dtail->chief_compliant_id; // we are assigning the previous visit chief compliant id
        $new_fu_user_detail->current_tab_number = 2; // as follow up round starts with tab no 2
*/
        // we save the record and assign result in user_detail varible for further processing in second tab
        if($user_detail = $this->ChiefCompliantUserdetails->save($new_fu_user_detail))
        {

        }
        else
        {

          $schedule_slug = $apt_id_data['schedule_id'].'-'.time();
          $this->Flash->error(__('Some error occurred, Please try again.'));
              return $this->redirect(['action' => 'newAppointment','prefix' => $this->prefix, base64_encode($schedule_slug)]);
        }
      }
    }
  }
 //pr($tab_number); die;
//  pr($cur_next_steps);

//   pr($user_detail);die('sdsad');
      /*elseif($step_id == 11){

        if(empty($user_detail) && (empty($user_detail->current_tab_number) || !in_array($user_detail->current_tab_number, $cur_next_steps))){

           $tab_number = 10;

        }
      }*/


   // $step_id  != 6  in the condition because for follow up round we only want to execute code if $tab_number is 2
  if($tab_number == 2 || (2 == $cur_next_steps[0] && $step_id  != 6 ))
  {
   if(!empty($user_detail->is_chief_complaint_doctor))
    {

      $is_internal_medication_doctor = unserialize(Security::decrypt( base64_decode($user_detail->is_chief_complaint_doctor), SEC_KEY));
       //pr($last_tab_number);die;
      if($is_internal_medication_doctor[556] == 'No')
      {
       // $update_internal_data['current_tab_number'] = $last_tab_number;
       // pr($update_data);die;
       $this->ChiefCompliantUserdetails->query()
                ->update()
                ->set(['current_tab_number' => $last_tab_number])
                ->where(['appointment_id' => $apt_id])
                ->execute();
        $this->Flash->error(__("sorry, you haven't select chief complaint!"));
        return $this->redirect($this->referer());
      }
      }
      // pr($user_detail->is_chief_complaint_doctor); die;
    
    // setting the cur_detail_tab_chief_compliant variable start
    if(!empty($user_detail->chief_compliant_id))
      $user_detail->chief_compliant_id  = Security::decrypt(base64_decode($user_detail->chief_compliant_id), SEC_KEY)  ;

    $tmp_chief_compliant_id = $user_detail->chief_compliant_id ;
    $tmp_chief_compliant_id = explode(',', $tmp_chief_compliant_id) ;
    if(empty($user_detail->already_asked_cc_details) || !empty($edited_tab))
    {
      // if it is first CC   ,  !empty($edited_tab) condition applied because of forward and back feature because if request come from tab clicking
      $cur_cc_data = $tmp_chief_compliant_id[0] ;
      $this->set('cur_detail_tab_chief_compliant', $cur_cc_data );
    }
    else
    {
      // get the next CC
      $tmp_already_asked_cc_details = explode(',', $user_detail->already_asked_cc_details) ;
      $tmp_key = array_search(end($tmp_already_asked_cc_details), $tmp_chief_compliant_id);
      if(!isset($tmp_chief_compliant_id[$tmp_key+1])){

        $this->ChiefCompliantUserdetails->query()
                ->update()
                ->set(['current_tab_number' => 18])
                ->where(['appointment_id' => $apt_id])
                ->execute();
        $this->redirect($this->referer());
      }
      else{

        $cur_cc_data = $tmp_chief_compliant_id[$tmp_key+1];
        $this->set('cur_detail_tab_chief_compliant', $cur_cc_data );
      }

    }
    if($apt_id_data->specialization_id == 3 || $apt_id_data->specialization_id == 4 || $apt_id_data->specialization_id == 7){
      $cur_cc_data = $this->ChiefCompliants->find('all')->where(['id' => $cur_cc_data, 'specialization_id' => $apt_id_data->specialization_id ])->first();
    }else{
      $cur_cc_data = $this->ChiefCompliants->find('all')->where(['id' => $cur_cc_data])->first();
    }
    // setting the cur_detail_tab_chief_compliant variable end

    //set the cc question
    //when we select covid module we have to get question from covid_related_compliant_detail_ids other we have use default_compliant_detail_ids

    if($step_id == 17 && !empty($cur_cc_data->covid_related_compliant_detail_ids)){

      $detail_question_id = $cur_cc_data->covid_related_compliant_detail_ids;
      $detail_question_id = explode(',', $detail_question_id);
      $detail_question_id =   $this->ChiefCompliantDetails->find('all')->where(['id IN' => $detail_question_id])->order(['question_order' => 'ASC']); // order by question_type descending because we want image at the top in the question set
    }
    elseif(!empty($cur_cc_data->default_compliant_detail_ids))
    {
      
      $detail_question_id = $cur_cc_data->default_compliant_detail_ids;
      $detail_question_id = explode(',', $detail_question_id);
      $detail_question_id =   $this->ChiefCompliantDetails->find('all')->where(['id IN' => $detail_question_id])->order(['question_order' => 'ASC']); // order by question_type descending because we want image at the top in the question set

    }
    else
    {
        //check tab number 18 show or not
        //get all the user symptoms that selected in tab number 1
          /*$temp_user_symptom_from_tab1 = array();
          if(!empty($user_detail->symptom_from_tab1)){

            $temp_user_symptom_from_tab1 = @unserialize(Security::decrypt(base64_decode($user_detail->symptom_from_tab1),SEC_KEY));
          }

          $temp_user_symptom_from_tab1 =    array_map(
                                          function($item)  {
                                              // will remove extra white space and make it in lowercase
                                              return strtolower(trim($item)) ;
                                          },
                                          $temp_user_symptom_from_tab1

                                           );
          $user_symptom_ids = array();
          if(!empty($temp_user_symptom_from_tab1)){
              $query = $this->ChiefCompliants->find('list', [
                                                          'keyField' => 'id',
                                                          'valueField' => 'name'
                                                      ])->where(['name IN' => $temp_user_symptom_from_tab1]);

              $user_symptom_ids = array_keys($query->toArray());
            }

            $temp_chief_compliant_id = explode(",",$user_detail->chief_compliant_id);
            $user_symptom_ids = array_unique(array_merge($user_symptom_ids,$temp_chief_compliant_id));
            //check covid-19 tab show or not
            //we check all current user sysmptom
            $temp_current_tab_number = 3;
            if(!empty($user_symptom_ids)){

              foreach ($user_symptom_ids as $sym_key => $sym_value) {

                if(array_key_exists($sym_value, $show_covid_19_symptom_list)){

                  $temp_current_tab_number = 18;
                  //$show_tab_18 = 1;
                  break;
                }
              }
            }*/
        //pr($user_detail);die;
        // redirecting to next step if no detals realted question found
         if($step_id == 25)
         {
          $current_tab_number = 23;
         } 
         elseif ($step_id == 7)
         {
          $current_tab_number = 3;
         } 
         elseif ($step_id == 27)
         {
          $current_tab_number = 34;
         } 
         else
         {
          $current_tab_number = 18;
         }
         $this->ChiefCompliantUserdetails->query()
                ->update()
                ->set(['current_tab_number' => $current_tab_number])
                ->where(['appointment_id' => $apt_id])
                ->execute();
        $this->redirect($this->referer());

      }

      $this->set(compact('cur_cc_data'));
      if($step_id == 12 && !empty($user_detail) && !empty($user_detail->follow_up_step_id)){

          $follow_up_step_id = $user_detail->follow_up_step_id;
       }

    }


        if($tab_number == 17 || (17 == $cur_next_steps[0] && $step_id  != 16)){

        // setting the cur_detail_tab_chief_compliant variable start

        if(!empty($user_detail->chief_compliant_id))
        // $user_detail->chief_compliant_id = $chief_compliant_id  ;
          $user_detail->chief_compliant_id  = Security::decrypt(base64_decode($user_detail->chief_compliant_id), SEC_KEY)  ;

         // pr($user_detail); die;
            $tmp_chief_compliant_id = $user_detail->chief_compliant_id ;

            $tmp_chief_compliant_id = explode(',', $tmp_chief_compliant_id) ;
            // pr($tmp_chief_compliant_id); die;
        // pr($user_detail->already_asked_cc_details); die ;
            if(empty($user_detail->already_asked_cc_details) || !empty($edited_tab)){ // if it is first CC   ,  !empty($edited_tab) condition applied because of forward and back feature because if request come from tab clicking
                $cur_cc_data = $tmp_chief_compliant_id[0] ;
                $this->set('cur_detail_tab_chief_compliant', $cur_cc_data );
            }else{  // get the next CC
        // pr($user_detail->already_asked_cc_details); die;
            $tmp_already_asked_cc_details = explode(',', $user_detail->already_asked_cc_details) ;

            $tmp_key = array_search (end($tmp_already_asked_cc_details), $tmp_chief_compliant_id);

             $cur_cc_data = $tmp_chief_compliant_id[$tmp_key+1] ;
             $this->set('cur_detail_tab_chief_compliant', $cur_cc_data );
            }

            //fetch the previous appointmnet data to show question based on previous appointmnet detail

            $previous_appoitment_data = $this->ChiefCompliantUserdetails->find('all')->where(['id' => $user_detail->followup_parent_id])->first();
            $previous_appoitment_data = $this->prepare_user_detial_data_for_render($previous_appoitment_data);
           // pr($previous_appoitment_data);die;
            $temp_previous_follow_up_detail = array();
            $previous_follow_up_symptom_detail = array();

            if(!empty($previous_appoitment_data)){

              //if previous appointmnet is symptom complaint
              if(!empty($previous_appoitment_data->chief_compliant_details)){

                //$temp_previous_follow_up_detail = @unserialize(Security::decrypt(base64_decode($previous_appoitment_data->chief_compliant_details),SEC_KEY));
                $temp_previous_follow_up_detail = $previous_appoitment_data->chief_compliant_details;
                // pr($cur_cc_data);
                // pr($temp_previous_follow_up_detail);die;

                if(!empty($temp_previous_follow_up_detail) && isset($temp_previous_follow_up_detail[$cur_cc_data]) && !empty($temp_previous_follow_up_detail[$cur_cc_data])){

                    foreach ($temp_previous_follow_up_detail[$cur_cc_data] as $key => $cc_value) {

                        //check pain scale best is exist or not
                        /*if(in_array($key, [10,144])){

                           $previous_follow_up_symptom_detail['pain_best_scale'] = $value;
                           continue;
                        }

                        //check pain scale worst is exist or not
                        if(in_array($key, [11,145])){

                           $previous_follow_up_symptom_detail['pain_worst_scale'] = $value;
                           continue;
                        }

                        //check temporal is exist or not
                        if(in_array($key, [6,154,96])){

                           $previous_follow_up_symptom_detail['temporal'] = $value;
                           continue;
                        }*/

                        //check pain scale best is exist or not
                        if(trim($cc_value['hpi_element']) == 'pain scale best'){

                            $previous_follow_up_symptom_detail['pain_best_scale'] = $cc_value['answer'];
                            //continue;
                        }

                        //check pain scale worst is exist or not
                        if(trim($cc_value['hpi_element']) == 'pain scale worst'){

                            $previous_follow_up_symptom_detail['pain_worst_scale'] = $cc_value['answer'];
                            //continue;
                        }
                        //check temporal is exist or not
                        if(trim($cc_value['hpi_element']) == 'temporal'){

                            $previous_follow_up_symptom_detail['temporal'][] = is_array($cc_value['answer']) ? implode(", ", $cc_value['answer']) : $cc_value['answer'];
                            //continue;
                        }

                        if(trim($cc_value['hpi_element']) == 'location'){

                            $previous_follow_up_symptom_detail['location'][] = is_array($cc_value['answer']) ? implode(", ", $cc_value['answer']) : $cc_value['answer'];
                            //continue;
                        }

                    }

                }


              }
              elseif($previous_appoitment_data->follow_up_sx_detail){

                //if previous appointmnet is follow up
                //$temp_previous_follow_up_detail = @unserialize(Security::decrypt(base64_decode($previous_appoitment_data->follow_up_sx_detail),SEC_KEY));
                $temp_previous_follow_up_detail = $previous_appoitment_data->follow_up_sx_detail;

                if(!empty($temp_previous_follow_up_detail) && isset($temp_previous_follow_up_detail[$cur_cc_data]) && !empty($temp_previous_follow_up_detail[$cur_cc_data])){

                    foreach ($temp_previous_follow_up_detail[$cur_cc_data] as $key => $value) {

                        //check pain scale best is exist or not
                        if($key == 134 && !empty($value['answer'])){

                           $previous_follow_up_symptom_detail['pain_best_scale'] = $value['answer'];
                           continue;
                        }

                        //check pain scale worst is exist or not
                        if($key == 135 && !empty($value['answer'])){

                           $previous_follow_up_symptom_detail['pain_worst_scale'] = $value['answer'];
                           continue;
                        }

                        //check temporal is exist or not
                        if($key == 136 && !empty($value['answer'])){

                           $previous_follow_up_symptom_detail['temporal'] = $value['answer'];
                           continue;
                        }

                        //check location is exist or not
                        if(in_array($key, [133]) && !empty($value['answer'])){

                            $previous_follow_up_symptom_detail['location'] = $value['answer'];
                            continue;
                        }

                    }

                }
              }
            }

            if(!empty($previous_follow_up_symptom_detail)){

              $previous_follow_up_symptom_detail = array_filter($previous_follow_up_symptom_detail);
              foreach ($previous_follow_up_symptom_detail as $pre_key => $pre_value) {

                 $previous_follow_up_symptom_detail[$pre_key] = is_array($pre_value) ? implode(", ", $pre_value) : $pre_value;
              }
            }

          // pr($previous_follow_up_symptom_detail);die;

           $this->set(compact('previous_follow_up_symptom_detail'));

        // pr($cur_cc_data);
        if($apt_id_data->specialization_id == 3 || $apt_id_data->specialization_id == 4 || $apt_id_data->specialization_id == 7){
          $cur_cc_data = $this->ChiefCompliants->find('all')->where(['id' => $cur_cc_data, 'specialization_id' => $apt_id_data->specialization_id ])->first();
        }else{
          $cur_cc_data = $this->ChiefCompliants->find('all')->where(['id' => $cur_cc_data])->first();
        }

        if(empty($cur_cc_data)){

            $this->ChiefCompliantUserdetails->query()
                ->update()
                ->set(['current_tab_number' => 4])
                ->where(['appointment_id' => $apt_id])
                ->execute();
            $this->redirect($this->referer());
        }

        //fetch the data of sceering questions for GI health checkup module
        $follow_up_question = $this->CommonQuestions->find('all')->where(['tab_number' => '17', 'step_id' => '16','specialization_id' => '0'])->toArray();
        //pr($follow_up_question);die;

        $this->set(compact('cur_cc_data'));
        //pr($follow_up_question);die;

      }

       // pr($user_detail);die('dfdf');

      if($tab_number == 3  || 3 == $cur_next_steps[0]) {

        //die('naveeen');



    $cmd_argument = array();

    $old_data = $this->ChiefCompliantUserdetails->find('all')->where(['appointment_id' => $apt_id])->first();
// pr(unserialize((Security::decrypt(base64_decode($old_data->chief_compliant_details), SEC_KEY)))) ; die;


// According to client requirement - In below code we are passing the response of the pain related two questions as argument to the python file. for detail please read the below point of client requirement in comment-

/*
-> For the question "how would you describe the pain?" and "whether the pain is constant or comes and goes?" , client want that answer of these questions will be included in the current symptoms (positive/negative symptoms)

Client requirement(provided in additional document)
For some chief complaints there is a question in the details about how would you describe the pain, and the answers are stabbing, burning etc. or something along those lines. We want those to be added to the array that contains current symptoms, with a slight modification where we concatenate "pain" to the end of each. For example, let's say the choices are stabbing, burning, sharp, all of the above. If the user selects stabbing and burning, then stabbing pain, burning pain, no sharp pain are added to the array. If the user selects all of the above, then stabbing pain, burning pain, sharp pain are added to the array. If the user selects none of them then no stabbing pain, no burning pain, no sharp pain are added to the array.



There is also a question about whether the pain is constant or comes and goes. If the user selects constant, then add constant pain, no comes and goes pain to the array. If the user selects comes and goes, then add comes and goes pain, no constant pain.

*/

$qid_28_describe_pain_arr = array("aching", "burning", "throbbing", "shooting");

$qid_39_describe_pain_arr = array("dull", "aching", "sharp", "stabbing", "shooting", "radiating", "cramping", "burning", "tender", "throbbing");

$temp_tab2_cmd_arg = array(); // we will append this symptoms in the command argument of python file


if(!empty($old_data->chief_compliant_details)){
    $tab2_chief_compliant_details = unserialize((Security::decrypt(base64_decode($old_data->chief_compliant_details), SEC_KEY)));

// pr($tab2_chief_compliant_details);

// pr($user_detail->chief_compliant_userdetail->chief_compliant_details); die;
foreach ($tab2_chief_compliant_details as $kc1 => $vc1) {
  // pr($vc1); die;
  foreach ($vc1 as $kc2 => $vc2) {
    // echo $kc2;
    // pr($vc2); die;
     if($kc2 == 28){
      // echo $vc2['question_id'];
         foreach ($qid_28_describe_pain_arr as $klevel3 => $vlevel3) {
               if(stripos($vlevel3, $vc2) !== false){
                  // $temp_tab2_cmd_arg .= $vlevel3.' pain, ';
                $temp_tab2_cmd_arg[] = $vlevel3.' pain';
               }else{
                  // $temp_tab2_cmd_arg .= 'no '.$vlevel3.' pain, ';
                $temp_tab2_cmd_arg[] = 'no '.$vlevel3.' pain';
               }
          }

     }

     if($kc2 == 29){
      // echo $vc2['question_id'];

        if(stripos($vc2, 'comes') !== false){
          // $temp_tab2_cmd_arg .= 'comes and goes pain, ';
          // $temp_tab2_cmd_arg .= 'no constant pain, ';
          $temp_tab2_cmd_arg[] = 'comes and goes pain';
          $temp_tab2_cmd_arg[] = 'no constant pain';

        }
        if(stripos($vc2, 'constant') !== false){
          // $temp_tab2_cmd_arg .= 'constant pain, ';
          // $temp_tab2_cmd_arg .= 'no comes and goes pain, ';
          $temp_tab2_cmd_arg[] = 'constant pain';
          $temp_tab2_cmd_arg[] = 'no comes and goes pain';
        }

     }

     if($kc2 == 39){

        if(is_array($vc2)){  // for question id 39 the response will be array
          $vc2 = array_map('trim', $vc2);
          $vc2 = array_map('strtolower', $vc2);
          // pr($vc2['answer']); die;
          foreach ($qid_39_describe_pain_arr as $klevel3 => $vlevel3) {
               if(in_array($vlevel3, $vc2)){
                  // $temp_tab2_cmd_arg .= $vlevel3.' pain, ';
                $temp_tab2_cmd_arg[] = $vlevel3.' pain';
               }else{
                  // $temp_tab2_cmd_arg .= 'no '.$vlevel3.' pain, ';
                $temp_tab2_cmd_arg[] = 'no '.$vlevel3.' pain';
               }
          }
        }
     }

     if($kc2 == 41){

      if(stripos($vc2, 'comes') !== false){
        // $temp_tab2_cmd_arg .= 'comes and goes pain, ';
        // $temp_tab2_cmd_arg .= 'no constant pain, ';
        $temp_tab2_cmd_arg[] = 'comes and goes pain';
        $temp_tab2_cmd_arg[] = 'no constant pain';

      }
      if(stripos($vc2, 'constant') !== false){
        // $temp_tab2_cmd_arg .= 'constant pain, ';
        // $temp_tab2_cmd_arg .= 'no comes and goes pain, ';
        $temp_tab2_cmd_arg[] = 'constant pain';
        $temp_tab2_cmd_arg[] = 'no comes and goes pain';
      }

     }

  }
}



// pr($positive_symptom);
// pr($negative_symptom);
// die;

 // pr($temp_tab2_cmd_arg); die;
}




// preparing argument for new python file start

    if(!empty($old_data->python_file_option_3rd_tab)){
        // $old_data_py = unserialize(base64_decode($old_data->python_file_option_3rd_tab));
$old_data_py = unserialize((Security::decrypt(base64_decode($old_data->python_file_option_3rd_tab), SEC_KEY)));


// pr($old_data_py);  die;
        foreach ($old_data_py as $key => $value) {
              foreach ($value as $k => $v) {
                  if($key == 0) $cmd_argument[] = 'no '.$v['layman'];
                  if($key == 1) $cmd_argument[] = $v['layman'];
                  if($key == 2) $cmd_argument[] = $v['layman'];
              }
        }

    }


// pr($cmd_argument); die;
// $apt_id_data->specialization_id
// preparing argument for new python file end


/*  // working code to call test python file helloworld.py , commented on 12-12-18 as now python file takes different input

    $cmd_argument = '';

    $old_data = $this->ChiefCompliantUserdetails->find('all')->where(['appointment_id' => $apt_id])->first();

    // creating the argument of python file ,
    if(!empty($old_data->python_file_option_3rd_tab)){
        $old_data_py = unserialize(base64_decode($old_data->python_file_option_3rd_tab));

        foreach ($old_data_py as $key => $value) {
              foreach ($value as $k => $v) {
                  if($key == 0) $cmd_argument .= ' \'no '.$v['layman'].'\' ' ;
                  if($key == 1) $cmd_argument .= ' \''.$v['layman'].'\' ' ;
                  if($key == 2) $cmd_argument .= ' \''.$v['layman'].'\' ' ;
              }
        }

    }

// pr($cmd_argument);
// $output_py = shell_exec("python /opt/lampp/htdocs/allevia/webroot/python_doc/helloworld.py ".$cmd_argument);

*/


$chief_compliant_symptom_arr = array();

// this if block is for filtering chief compliant from python file
// pr($user_detail->chief_compliant_id); die;
   if(!empty($user_detail->chief_compliant_id)){
            // $temp_chief_symp = $user_detail->chief_compliant_id;
     $temp_chief_symp = Security::decrypt( base64_decode($user_detail->chief_compliant_id), SEC_KEY);
                        if(!empty($temp_chief_symp)) {
                            $temp_chief_symp = explode(',', $temp_chief_symp) ;

                        }





                        $chief_compliant_symptom_arr = $temp_chief_symp;
                        $query = $this->ChiefCompliants->find('list', [
                            'keyField' => 'id',
                            'valueField' => function ($e) {
                                                    return strtolower($e->name);
                                                }
                        ])->where(['id IN' => $chief_compliant_symptom_arr ]);
                        $chief_compliant_symptom_arr = $query->toArray();
                        // put the symptom to the python file cmd line argument
                        foreach ($chief_compliant_symptom_arr as $ky => $val) {
                           $cmd_argument[] = $val;
                        }

    }

if(!empty($user_detail->random_chief_compliant))
     $cmd_argument[] =  Security::decrypt( base64_decode($user_detail->random_chief_compliant), SEC_KEY);


// put the symptom to the python file cmd line argument
  if(!empty($user_detail->symptom_from_tab1)){
    $symptom_from_tab1 = unserialize((Security::decrypt(base64_decode($user_detail->symptom_from_tab1), SEC_KEY))) ;

    foreach ($symptom_from_tab1 as $ky => $val) {
       $cmd_argument[] = $val;
    }
    }
// pr($cmd_argument); die;
// this if block is for , if the symptom submitted from tab 3 , it gets those currently submitted data that are not in the database right now
    $python_file_option_3rd_tab_not_in_db = array();
   $current_associated_symptom = $this->request->getData('associated_symptom');

if($this->request->is('post') && !empty($current_associated_symptom) && is_array($current_associated_symptom)){
  $python_file_option_3rd_tab_not_in_db = $current_associated_symptom ;
    foreach ($current_associated_symptom as $ky => $val) {
        if($val == 0 ) $cmd_argument[] = 'no '.$ky;
        if($val == 1 ) $cmd_argument[] = $ky;
        if($val == 2 ) $cmd_argument[] = $ky;
    }

}

// pr($temp_tab2_cmd_arg); die;
// pr($cmd_argument);
if(!empty($temp_tab2_cmd_arg)){
  $cmd_argument = array_merge($cmd_argument,$temp_tab2_cmd_arg);

}
// pr($cmd_argument); die;
$cmd_argument = "'".json_encode($cmd_argument)."'";
if($step_id == 1){

  $output_py = array(

        'technical' => array('chills','fever','abdominal pain','flank pain','back pain','gross hematuria'),
        'layman' => array('chills','fever','abdominal pain','flank pain','back pain','gross hematuria'),

        );
}

//echo '3b';die;
else if($step_id == 17){

    $output_py = array(

        'technical' => array('fever','cough','SOB','chest pain','cyanosis','hemoptysis','n/v','diarrhea','sputum production'),

        'layman' => array('fever','cough','shortness of breath','chest pain','blue face or lips','coughing up blood','nausea or vomiting','diarrhea','phlegm production'),

        );
}
elseif($step_id == 18 || $step_id == 25){

  $temp_chronic_condition = array();
  $temp_cronic_asso_sym = array();

  $temp_technical_name = array(

    'urinated excessively' => 'polyuria',
    'thristier' => 'polydipsia',
    'hungrier' => 'polyphagia',
    'unintentional weight loss' => 'unintentional weight loss',
    'numbness or tingling in hands or feet' => 'neuropathy',
    'loss of balance' => 'loss of balance',
    'dizziness' => 'dizziness',
    'weight loss' => 'unintentional weight loss',
    'edema' => 'edema',
    'platypnea' => 'platypnea',
    'exertional dyspnea' => 'exertional dyspnea',
    'fatigue' => 'fatigue',
    'wheezing' => 'wheezing',
    'cough' =>'cough',
    'sputum' => 'sputum',
    'headache' => 'headache',
    'lightheadedness' => 'lightheadedness',
    'fainiting' => 'syncope',
    'unusual chest pain when resting' => 'angina',
    'pain in both legs after walking one or more blocks' => 'claudication',
    'fever' => 'fever',
    'blueish lips or face' => 'cyanosis',
    'coughing up blood' => 'hemoptysis',
    'shortness of breath' => 'SOB',
    'chest tightness' => 'chest tightness',
    'trouble breathing at rest' => 'dyspnea at rest',
    'trouble breathing with exercise' => 'DOE',
    'gasping for air' => 'gasping',
    'acid reflux' => 'reflux'
  );
  //pr($user_detail);
  if(!empty($user_detail->chronic_condition)){

    $temp_chronic_condition = @unserialize(Security::decrypt(base64_decode($user_detail->chronic_condition),SEC_KEY));
  }

  if(in_array("dmii", $temp_chronic_condition)){

    $temp_cronic_asso_sym = array_merge($temp_cronic_asso_sym,['urinated excessively','thristier','hungrier','unintentional weight loss','numbness or tingling in hands or feet','loss of balance','dizziness']);
  }
  if(in_array("cad", $temp_chronic_condition)){

    $temp_cronic_asso_sym = array_merge($temp_cronic_asso_sym,['unusual chest pain when resting','fatigue','wheezing','cough','pain in both legs after walking one or more blocks']);
  }
  if(in_array("htn", $temp_chronic_condition)){

    $temp_cronic_asso_sym = array_merge($temp_cronic_asso_sym,['dizziness','headache','lightheadedness','fainiting']);
  }

  if(in_array("copd", $temp_chronic_condition)){

    $temp_cronic_asso_sym = array_merge($temp_cronic_asso_sym,['fever','wheezing','blueish lips or face','cough','coughing up blood','shortness of breath','chest tightness','trouble breathing at rest','trouble breathing with exercise']);
  }

  if(in_array("chf", $temp_chronic_condition)){

    $temp_cronic_asso_sym = array_merge($temp_cronic_asso_sym,['platypnea','exertional dyspnea','fatigue','weight loss','edema']);
  }

  if(in_array("asthma", $temp_chronic_condition)){

    $temp_cronic_asso_sym = array_merge($temp_cronic_asso_sym,['wheezing','blueish lips or face','gasping for air','coughing up blood','acid reflux','chest tightness']);
  }

  $temp_cronic_asso_sym = array_unique(array_filter($temp_cronic_asso_sym));
  $temp_cronic_tech_asso_sym = array();
  if(!empty($temp_cronic_asso_sym)){

      foreach ($temp_cronic_asso_sym as $key => $value) {

        $temp_cronic_tech_asso_sym[] = isset($temp_technical_name[$value]) ? $temp_technical_name[$value] : $value;
      }
  }

  $output_py = array(

        'technical' => $temp_cronic_tech_asso_sym,
        'layman' => $temp_cronic_asso_sym,

        );
  // Internal medication Module for chief complaint
  if($step_id == 25){

  $output_py_int = array(

        'technical' => array('chills','fever','abdominal pain','flank pain','back pain','gross hematuria'),
        'layman' => array('chills','fever','abdominal pain','flank pain','back pain','gross hematuria'),

        );
  $output_py = array_merge($output_py,$output_py_int);
}
// End
}
else{
// pr($cmd_argument); die;
if($apt_id_data->specialization_id == 1) {

  if($step_id == 17){

    $cmd_argument .= ' GEN ';
  }
  else{
    $cmd_argument .= ' GEN ';
  }
}
if($apt_id_data->specialization_id == 5) { $cmd_argument .= ' GEN ';  }
if($apt_id_data->specialization_id == 6) { $cmd_argument .= ' GEN ';  }
if($apt_id_data->specialization_id == 2) { $cmd_argument .= ' OBGYN ';  }
if($apt_id_data->specialization_id == 3) { $cmd_argument .= ' ORTHO ';  }
if($apt_id_data->specialization_id == 4) { $cmd_argument .= ' ORTHO_SPINE ';  }
if($apt_id_data->specialization_id == 7) { $cmd_argument .= ' ORTHO_SPINE ';  }

// pr($cmd_argument); die;
// exec("/opt/lampp/htdocs/allevia/env/bin/python /opt/lampp/htdocs/allevia/webroot/python_doc/symptomprompting.py [] GEN", $op, $rs);
// pr($op);
// pr($rs);
// die;
// /home/dev/public_html/allevia/webroot/

// /opt/lampp/htdocs/allevia/webroot/

// /opt/lampp/htdocs/allevia
//pr($cmd_argument);
//pr(WWW_ROOT);
 //pr(ROOT); ; die;
// pr($this->request->data); die;

// pr($cmd_argument); die;
// $cmd_argument = '';



 //$output_py = shell_exec("python ".WWW_ROOT."python_doc/symptomprompting.py ".$cmd_argument);

//localhost/live server
//$output_py = shell_exec(ROOT."/env/bin/python ".WWW_ROOT."python_doc/symptomprompting.py ".$cmd_argument);

//devtech server
$output_py = shell_exec("python3 ".WWW_ROOT."python_doc/symptomprompting.py 2>&1 ".$cmd_argument);
// pr($output_py);die;

// echo $step_id;
// pr($cmd_argument);
// pr($output_py);
//  die;
// python /opt/lampp/htdocs/allevia/webroot/python_doc/symptom_prompting.py [] ORTHO
// $output_py = preg_replace('/\s+/', '', $output_py);
// var_dump($output_py);
//pr($output_py );die;
$output_py = json_decode($output_py, true) ;
}
// pr(json_decode('{"layman": ["prolonged use of corticosteroids", "trauma", "back pain", "pain dull", "pain not dull", "pain sharp", "pain not sharp"], "technical": ["prolonged use of corticosteroids", "trauma", "back pain", "pain dull", "pain not dull", "pain sharp", "pain not sharp"]}', true));
//pr($output_py ); die;

$temp_output_py = array();
// now arrange the technical as key and layman as value in temp array
if(!empty($output_py['layman']) && !empty($output_py['technical'])){

 foreach ($output_py['layman'] as $key => $value) {
  $output_py['layman'][$key] = htmlspecialchars($value);

 }

  foreach ($output_py['technical'] as $key => $value) {
    $output_py['technical'][$key] = htmlspecialchars($value);
  }

    foreach ($output_py['layman'] as $key => $value) {
        if(isset($output_py['technical'][$key]))
        $temp_output_py[$output_py['technical'][$key]] =  $value;
    }
}
// pr($output_py) ;
// var_dump($temp_output_py); die;
// pr($temp_output_py);
 // pr($temp_tab2_cmd_arg); die;
// now we remove the symptoms from the python file response that are already asked in the tab no 2 question ( in this variable )

foreach ($temp_tab2_cmd_arg as $kt2 => $vt2) {

   if(stripos($vt2, 'no') !== false){
    // unset($temp_tab2_cmd_arg[$kt2]); // remove the negative symptom
    $temp_tab2_cmd_arg[$kt2] = trim(str_replace('no','',str_replace('pain','',$vt2))); // remove pain word from symptom , later we will search this element
   } else{
      $temp_tab2_cmd_arg[$kt2] = trim(str_replace('pain','',$vt2)); // remove pain word from symptom , later we will search this element
   }
  // var_dump(trim(str_replace('pain','',$vt2)));
//   pr(preg_grep( "/Sha/i" , $temp_tab2_cmd_arg ));
// pr(preg_grep( "/".trim(str_replace('pain','',$vt2))."/i" , $temp_output_py )); die;
}
// pr($temp_output_py);
//  pr($temp_tab2_cmd_arg); die;
// now we will remove the symptom from the python file output ($temp_output_py) that has already asked in the tab 2
foreach ($temp_output_py as $kp1 => $vp1) {
  foreach ($temp_tab2_cmd_arg as $kp2 => $vp2) {
    // pr($kp1);  pr($vp1); pr($vp2); die;
    if(stripos($vp1, $vp2) !== false || stripos($kp1, $vp2) !== false ) unset($temp_output_py[$kp1]);
  }
}

// pr($temp_output_py); die;
// pr($temp_tab2_cmd_arg); die;
$symptom_from_tab1 = array();
// remove the symptom that user already enter in tab 1 including chief compliant start
// pr($user_detail->symptom_from_tab1); die;
    // this if block is for filtering symptom that has chosed from tab 1 from python file output
  if(!empty($user_detail->symptom_from_tab1)){
    // $symptom_from_tab1 = unserialize(base64_decode($user_detail->symptom_from_tab1)) ;
  $symptom_from_tab1 = unserialize((Security::decrypt(base64_decode($user_detail->symptom_from_tab1), SEC_KEY))) ;
    // pr($symptom_from_tab1); die;
// chief_compliant_id
// random_chief_compliant

// pr($temp_output_py);
// pr($symptom_from_tab1); die;



  }

  //pr($symptom_from_tab1);die;

    $all_chief_cmp_lst = $this->ChiefCompliants->find('list', [
                        'keyField' => 'id',
                        'valueField' => 'name'
                    ])->toArray();

  // now we will include the chief complian id in the array

if(!empty($user_detail->chief_compliant_id)){
   $tmp_chf_id = Security::decrypt( base64_decode($user_detail->chief_compliant_id), SEC_KEY);
   if(is_numeric($tmp_chf_id))
        $symptom_from_tab1[] =  $all_chief_cmp_lst[$tmp_chf_id];
    else
      $symptom_from_tab1[] =  $tmp_chf_id ;
}

if(!empty($user_detail->random_chief_compliant))
     $symptom_from_tab1[] =  Security::decrypt( base64_decode($user_detail->random_chief_compliant), SEC_KEY);

// make all symptom in lowercase
$symptom_from_tab1 = array_map(function ($a) { return trim(strtolower($a)); }, $symptom_from_tab1);

// pr($symptom_from_tab1); die;
    if(!empty($temp_output_py)){
        foreach ($temp_output_py as $key => $value) {
    // check that if any symptom returned from python file is found in the previous submitted symptom then unset those symptoms
    if(in_array(strtolower($key), $symptom_from_tab1)) unset($temp_output_py[$key]) ;
    if(in_array(strtolower($value), $symptom_from_tab1)) unset($temp_output_py[$key]) ;

        }
    }

if(!empty($temp_output_py)){
    foreach ($temp_output_py as $key => $value) {
// check that if any symptom returned from python file is found in the previous submitted symptom then unset those symptoms
if(in_array(strtolower($key), $chief_compliant_symptom_arr)) unset($temp_output_py[$key]) ;
if(in_array(strtolower($value), $chief_compliant_symptom_arr)) unset($temp_output_py[$key]) ;

    }
}
// remove the symptom that user already enter in tab 1 including chief compliant end

// pr($python_file_option_3rd_tab_not_in_db);
// pr($old_data->python_file_option_3rd_tab);
// echo 'hello';
// pr($temp_output_py); die;
// pr($old_data_py);
//  die;
$tmp_old_data_py = array();
// remove the third tab data option that are already entered by user and saved in db
if(!empty($old_data_py)){
  foreach ($old_data_py as $k1 => $v1) {
    if(is_array($v1)){
      foreach ($v1 as $k2 => $v2) {
        $tmp_old_data_py[] = htmlspecialchars($v2['technical']);
      }
    }
  }

  foreach ($tmp_old_data_py as $k3 => $v3) {
    if(in_array($v3, $temp_output_py) || array_key_exists($v3, $temp_output_py)) unset($temp_output_py[$v3]) ;
  }

}
// pr($tmp_old_data_py); die;

if(!empty($python_file_option_3rd_tab_not_in_db)){  // the option from third tab that is not stored in the database yet in the database
  // pr($python_file_option_3rd_tab_not_in_db);
  // pr($python_file_option_3rd_tab_not_in_db);
  // pr($temp_output_py); die;

  foreach ($python_file_option_3rd_tab_not_in_db as $ky => $ve) {
    $ky = htmlspecialchars($ky) ;

    if(in_array($ky, $temp_output_py) || array_key_exists($ky, $temp_output_py)) unset($temp_output_py[$ky]) ;
  }

}





$python_symptom_output = array_slice($temp_output_py, 0, 3) ;


//pr($python_symptom_output);

//pr($this->request->is('get'));die('sf');

/*if($step_id == 18){

 // pr($python_symptom_output);

  //die('gg');

  if(empty($python_symptom_output)){

    $this->ChiefCompliantUserdetails->query()
              ->update()
              ->set([ 'current_tab_number' => 4])
              ->where(['appointment_id' => $apt_id])
              ->execute();
     return $this->redirect($this->referer());
   }
}
else{*/

  //die('45');
  // if no data found from the python file then set the current_tab_number to the next tab( tab no 4) and redirect
  //pr($this->request->is('get')); die;
  if($this->request->is('get') && empty($python_symptom_output)){

     $this->ChiefCompliantUserdetails->query()
              ->update()
              ->set([ 'current_tab_number' => 4])
              ->where(['appointment_id' => $apt_id])
              ->execute();
     return $this->redirect($this->referer());

  }
//}
//die('xczxc');
if($step_id == 12 && !empty($user_detail) && !empty($user_detail->follow_up_step_id)){

    $follow_up_step_id = $user_detail->follow_up_step_id;
 }
// pr($python_symptom_output);
// pr($temp_output_py); die;



}

     // pr($tab_number);die;




      if($tab_number == 4 || ( $tab_number <= 4 && 4 == $cur_next_steps[0])){

        

        // for 4th tab different condition is used because some steps start with 4th tab

        if(($step_id == 11 && $apt_id_data->specialization_id == 6) || (!empty($user_detail) && $user_detail->follow_up_step_id == 11 && $step_id == 12 && $apt_id_data->specialization_id == 6 )){

          $compliant_questin = $this->ChiefCompliantQuestionnaire->find('all')->where(['specialization_ids LIKE' => '%'.$apt_id_data->specialization_id.'%','step_id' => 11]);


        }
        elseif($step_id == 17){

          $compliant_questin = $this->ChiefCompliantQuestionnaire->find('all')->where(['step_id' => 17]);
        }
        elseif($step_id == 20){

          $compliant_questin = $this->ChiefCompliantQuestionnaire->find('all')->where(['step_id' => 11]);
        }
        elseif($step_id == 23){

          $compliant_questin = $this->ChiefCompliantQuestionnaire->find('all')->where(['step_id' => 23]);
        }
        elseif(in_array($step_id,[19,21])){

          $compliant_questin = $this->ChiefCompliantQuestionnaire->find('all')->where(['step_id' => 19,'tab_number !=' => '',  'tab_number IS NOT NULL']);
         //pr($compliant_questin->toArray());die;
        }
        elseif($step_id == 22){

          $compliant_questin = $this->ChiefCompliantQuestionnaire->find('all')->where(['questionnaire_type_id IN' => array(1,5,7,2,8)]);
        }
        elseif($step_id == 25){

          $compliant_questin = $this->ChiefCompliantQuestionnaire->find('all')->where(['specialization_ids LIKE' => '%'.$apt_id_data->specialization_id.'%']);
          //echo count($compliant_questin->toArray()); die;
          //pr($compliant_questin->toArray());
        }
        // elseif($step_id == 1){
        //   $compliant_questin = $this->ChiefCompliantQuestionnaire->find('all')->where(['questionnaire_type_id IN' => array(4,6,35,25,2,9,8,51,1),'step_id IS' =>NULL] )->order(["FIELD(questionnaire_type_id,4,6,35,25,2,9,8,51,1)"]);
        // }
        else{

          $compliant_questin = $this->ChiefCompliantQuestionnaire->find('all')->where(['specialization_ids LIKE' => '%'.$apt_id_data->specialization_id.'%']);

        }

        //pr($compliant_questin->toArray());die;

        $chief_compliant_symptom_arr = array();

        if(!empty($user_detail)){

          $chief_compliant_symptoms = $user_detail->chief_compliant_symptoms;

          if(!empty($chief_compliant_symptoms)){
            // $chief_compliant_symptom_arr = unserialize($chief_compliant_symptoms);

            $chief_compliant_symptom_arr = unserialize(Security::decrypt(base64_decode($chief_compliant_symptoms), SEC_KEY));


            $t = array();
            foreach ($chief_compliant_symptom_arr as $key => $value) {
              foreach ($value as $k => $v) {
                $t[] = $v;
              }


            }
            $t[] = $user_detail->chief_compliant_id ; // include chief compliant id  also (now chief compliant will be removed from the questionnaire list)

            $temp_chief_symp = $user_detail->compliant_symptom_ids;
            if(!empty($temp_chief_symp)) {
              $temp_chief_symp = explode(',', $temp_chief_symp) ;
                $t = array_merge($t,$temp_chief_symp);
            }

            $chief_compliant_symptom_arr = $t;
            $query = $this->ChiefCompliants->find('list', [
                'keyField' => 'id',
                'valueField' => 'name'
            ])->where(['id IN' => $chief_compliant_symptom_arr ]);
            $chief_compliant_symptom_arr = $query->toArray();
            // pr($chief_compliant_symptom_arr); die;

          }


        }

        $qustion_res =  $compliant_questin->toArray();

        //logic for exclude all the intial symptom of cancers and SIT tool

        if(in_array($step_id,[19,21]) && !empty($user_detail)){

          $temp_cancer_assessments = $commonTable->find('all')->where(['cond_type' => 6])->toArray();
          $initial_cancer_symptoms = [];
          $initial_cancer_symptoms_technical_names = [];

          if(!empty($temp_cancer_assessments)){

            foreach ($temp_cancer_assessments as $key => $value) {

              if(!empty($value->name)){

                $initial_cancer_symptoms[] = $value->name;
              }

              if(!empty($value->note_name)){

                $initial_cancer_symptoms_technical_names[] = $value->note_name;
              }
            }
          }

          // pr($initial_cancer_symptoms_technical_names);
          // pr($initial_cancer_symptoms);die;

          if(!empty($user_detail->cancer_history_detail)){

            $temp_cancer_history_detail = @unserialize(Security::decrypt(base64_decode($user_detail->cancer_history_detail),SEC_KEY));

            //store all cancers initial symptom in array
            if(!empty($temp_cancer_history_detail) && is_array($temp_cancer_history_detail)){

              foreach ($temp_cancer_history_detail as $key => $value) {

                  //breast cancer
                  if(isset($value[334]) && !empty($value[334]) && is_array($value[334])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[334]);
                  }

                  //esophageal cancer
                  if(isset($value[393]) && !empty($value[393]) && is_array($value[393])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[393]);
                  }
                  //brain cancer
                  if(isset($value[400]) && !empty($value[400]) && is_array($value[400])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[400]);
                  }
                  //lung cancer
                  if(isset($value[405]) && !empty($value[405]) && is_array($value[405])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[405]);
                  }

                  //stomach cancer
                  if(isset($value[408]) && !empty($value[408]) && is_array($value[408])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[408]);
                  }

                  //kidney cancer
                  if(isset($value[411]) && !empty($value[411]) && is_array($value[411])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[411]);
                  }

                  //colon cancer
                  if(isset($value[414]) && !empty($value[414]) && is_array($value[414])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[414]);
                  }

                  //prostate cancer
                  if(isset($value[417]) && !empty($value[417]) && is_array($value[417])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[417]);
                  }

                  //uterine cancer
                  if(isset($value[420]) && !empty($value[420]) && is_array($value[420])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[420]);
                  }

                  //vulvar cancer
                  if(isset($value[423]) && !empty($value[423]) && is_array($value[423])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[423]);
                  }

                  //cervical cancer
                  if(isset($value[426]) && !empty($value[426]) && is_array($value[426])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[426]);
                  }

                  //ovarian cancer
                  if(isset($value[429]) && !empty($value[429]) && is_array($value[429])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[429]);
                  }

                  //pancreatic cancer
                  if(isset($value[433]) && !empty($value[433]) && is_array($value[433])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[433]);
                  }

                  //leukemia
                  if(isset($value[440]) && !empty($value[440]) && is_array($value[440])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[440]);
                  }

                  //vaginal cancer
                  if(isset($value[445]) && !empty($value[445]) && is_array($value[445])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[445]);
                  }

                  //liver cancer
                  if(isset($value[449]) && !empty($value[449]) && is_array($value[449])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[449]);
                  }

                  //thyroid cancer
                  if(isset($value[453]) && !empty($value[453]) && is_array($value[453])){

                    $initial_cancer_symptoms = array_merge($initial_cancer_symptoms, $value[453]);
                  }

              }
            }
          }

          //unset all the health questionnaire that is matched with initial symptom that asked for all cancers
          if(!empty($initial_cancer_symptoms)){

            //change the symptom in lower case
            $initial_cancer_symptoms = array_unique($initial_cancer_symptoms);
            $temp_symptom_str = strtolower(implode(", ", $initial_cancer_symptoms));
            $initial_cancer_symptoms = explode(", ", $temp_symptom_str);

            $initial_symptoms_trans = array(
                'trouble swallowing' => 'dysphagia',
                'headaches' => 'headaches',
                'nausea' => 'nausea',
                'vomiting' => 'vomiting',
                'double vision' => 'diplopia',
                'told my personality has changed' => 'personality changes',
                'severe fatigue' => 'severe fatigue',
                'fainting' => 'syncope',
                'aphasia' => 'aphasia',
                'apraxia' => 'apraxia',
                'depressed mood' => 'depressed mood',
                'gait ataxia' => 'gait ataxia',
                'visual loss' => 'visual loss',
                'nipple discharge' => 'nipple dx',
                'breast pain' => 'breast pain',
                'breast grew in size' => 'breast enlargement',
                'breast redness' => 'breast redness',
                'lump or swelling in armpit' => 'axillary LAD',
                'arm swelling' => 'arm edema',
                'constant cough' => 'constant cough',
                'coughing up blood' => 'hemoptysis',
                'shortness of breath' => 'SOB',
                'chest pain' => 'chest pain',
                'wheezing' => 'wheezing',
                'unintentional weight loss' => 'unintentional weight loss',
                'abdominal pain' => 'abdominal pain',
                'feeling full too quickly' => 'early satiety',
                'stomach ulcers' => 'peptic ulcers',
                'really dark stools' => 'melena',
                'throwing up rusty or coffee ground looking stuff' => 'coffee-ground hematemesis',
                'asthenia' => 'lack of energy and strength',
                'anorexia' => 'anorexia',
                'dark urine' => 'dark urine',
                'yellow skin' => 'jaundice',
                'back pain' => 'back pain',
                'diarrhea' => 'diarrhea',
                'greasy, bad-smelling diarrhea' => 'steatorrhea',
                'flank pain' => 'flank pain',
                'hematuria' => 'visible blood in urine',
                'scrotal enlargement' => 'scrotal enlargement',
                'abdominal mass' => 'abdominal mass',
                'le edema' => 'ankle and/or leg swelling',
                'ascites' => 'ascites',
                'bright red blood in poop' => 'hematochezia',
                'dark stools' => 'melena',
                'constipation' => 'constipation',
                'bloating' => 'bloating',
                'rectal mass' => 'rectal mass',
                'abdominal mass' => 'abdominal mass',
                'pain when urinating' => 'dysuria',
                'nocturia' => 'nocturia',
                'loss of bladder control' => 'loss of bladder control',
                'urinary incontinence' => 'urinary incontinence',
                'weak urine stream' => 'decreased urine flow',
                'blood or red-colored urine' => 'hematuria',
                'blood in semen' => 'hematospermia',
                'frequent periods' => 'frequent periods',
                'heavy periods' => 'menorrhagia',
                'prolonged periods' => 'prolonged periods',
                'pelvic pain' => 'pelvic pain',
                'pelvic mass' => 'pelvic mass',
                'bowel changes' => 'bowel changes',
                'urinary urgency' => 'urinary urgency',
                'urinary frequency' => 'urinary frequency',
                'early satiety' => 'early satiety',
                'sob' => 'shortness of breath',
                'ascites' => 'abdominal swelling',
                'postmenopausal bleeding' => 'postmenopausal bleeding',
                'rectal bleeding' => 'rectal bleeding',
                'irregular periods' => 'metrorrhagia',
                'heavy bleeding' => 'mennorhagia',
                'bleeding after sex' => 'post-coital bleeding',
                'vaginal discharge' => 'vaginal discharge',
                'vaginal itching' => 'vaginal pruritis',
                'vulvar lesions' => 'vulvar lesions',
                'vaginal bleeding' => 'vaginal bleeding',
                'dysuria' => 'dysuria',
                'pain when pooping' => 'dyschezia',
                'rectal bleeding' => 'rectal bleeding',
                'ankle and/or leg swelling' => 'LE edema',
                'fatigue' => 'fatigue',
                'chills' => 'chills',
                'decreased appetite' => 'anorexia',
                'fever' => 'fever',
                'tiny red or purple spots on skin' => 'petechiae',
                'loss of face color, always looking pale' => 'pallor',
                'larger red or purple spots on skin' => 'purpura',
                'frequent bleeding' => 'frequent bleeding',
                'bleeding gums' => 'bleeding gums',
                'bruising' => 'bruising',
                'swollen gums' => 'swollen gums',
                'frequent infections' => 'frequent infections',
                'severe lad' => 'LAD',
                'yellow skin or eyes' => 'jaundice',
                'easy bruising' => 'easy bruising',
                'easy bleeding' => 'easy bleeding',
                'pain with swallowing' => 'dysphagia',
                'cough' => 'cough',
                'choking sensation' => 'globus sensation',
                'hoarseness' => 'hoarseness',
                'abnormal vaginal bleeding' => 'abnormal vaginal bleeding',
                'veginal discharge' => 'veginal dx',
                'bleeding or spotting after sex' => 'post-coital bleeding'
            );


            foreach($initial_cancer_symptoms as $key => $value) {

              if(!empty($value) && isset($initial_symptoms_trans[$value])){

                $initial_cancer_symptoms_technical_names[] = $initial_symptoms_trans[$value];
              }
            }

            //change the symptom technical name in lower case
            $initial_cancer_symptoms_technical_names = array_unique($initial_cancer_symptoms_technical_names);
            $temp_symptom_str = strtolower(implode(", ", $initial_cancer_symptoms_technical_names));
            $initial_cancer_symptoms_technical_names = explode(", ", $temp_symptom_str);
           // array_push($initial_cancer_symptoms_technical_names, 'fatigue');

            //pr(count($qustion_res));
            foreach ($qustion_res as $key => $value) {

              //match with layman name
              if(in_array(strtolower($value->questionnaire_text), $initial_cancer_symptoms) || (!empty($value->medical_name) &&  in_array(strtolower($value->medical_name), $initial_cancer_symptoms)) || (!empty($value->note_name) && in_array(strtolower($value->note_name), $initial_cancer_symptoms))){

                unset($qustion_res[$key]);
                continue;
              }

              //match with technical name
              if(in_array(strtolower($value->questionnaire_text), $initial_cancer_symptoms_technical_names) || (!empty($value->medical_name) &&  in_array(strtolower($value->medical_name), $initial_cancer_symptoms_technical_names)) || (!empty($value->note_name) && in_array(strtolower($value->note_name), $initial_cancer_symptoms_technical_names))){

                unset($qustion_res[$key]);
                continue;
              }
            }
          }
          
        }
        $questionnaire_grp_arr = array();
        foreach ($qustion_res as $key => $value) {
          $questionnaire_grp_arr[$value->questionnaire_type_id][] = $value;
        }       

    // remove the symptom that user already enter in tab 1 including chief compliant start
    // this if block is for filtering symptom that has chosed from tab 1 from python file output
  $symptom_from_tab1 = array();
  if(!empty($user_detail->symptom_from_tab1)){
    // $symptom_from_tab1 = unserialize(base64_decode($user_detail->symptom_from_tab1)) ;
    $symptom_from_tab1 = unserialize((Security::decrypt(base64_decode($user_detail->symptom_from_tab1), SEC_KEY))) ;

    $symptom_from_tab1 = array_map(function ($a) { return trim(strtolower($a)); }, $symptom_from_tab1);
    // pr($symptom_from_tab1); die;
  }

$chief_compliant_symptom_arr = array();

// this if block is for filtering chief compliant from python file
   if(!empty($user_detail->chief_compliant_id)){
    // pr($user_detail->chief_compliant_id); die ;
            // $temp_chief_symp = $user_detail->chief_compliant_id;
          $temp_chief_symp =   Security::decrypt( base64_decode($user_detail->chief_compliant_id), SEC_KEY);

                        if(!empty($temp_chief_symp)) {
                            $temp_chief_symp = explode(',', $temp_chief_symp) ;

                        }
                        // pr($temp_chief_symp);
                        $chief_compliant_symptom_arr = $temp_chief_symp;
                        $query = $this->ChiefCompliants->find('list', [
                            'keyField' => 'id',
                            'valueField' => function ($e) {
                                                    return strtolower($e->name);
                                                }
                        ])->where(['id IN' => $chief_compliant_symptom_arr ]);
                        $chief_compliant_symptom_arr = $query->toArray();
    }

// remove the symptom that user already enter in tab 1 including chief compliant end

if(!empty($user_detail->random_chief_compliant))
    $chief_compliant_symptom_arr[] =  strtolower(Security::decrypt( base64_decode($user_detail->random_chief_compliant), SEC_KEY));

// pr($chief_compliant_symptom_arr); die ;

    // prepare the array of symtom collected from python file from tab n o 3
  if($step_id != 25){
    $srch_in_python_file_symptm = array();
    if(!empty($user_detail->python_file_option_3rd_tab)){
        // $old_data_py = unserialize(base64_decode($user_detail->python_file_option_3rd_tab));
      $old_data_py = unserialize((Security::decrypt(base64_decode($user_detail->python_file_option_3rd_tab), SEC_KEY)));
// pr($old_data_py);
        foreach ($old_data_py as $key => $value) {
              foreach ($value as $k => $v) {
                $srch_in_python_file_symptm[] = strtolower($v['layman']) ;
              }
        }
    }

          foreach ($questionnaire_grp_arr as $key => $value) {

            // remove the option if this symptom asked before
            foreach ($value as $k => $v) {
              $questionnaire_text = strtolower(trim($v->questionnaire_text)) ;
              if(in_array($questionnaire_text, $chief_compliant_symptom_arr))
              unset($questionnaire_grp_arr[$key][$k]);

                            // search in pythom file symptoms (tab 3 symtoms)
                        if(in_array($questionnaire_text, $srch_in_python_file_symptm))
                            unset($questionnaire_grp_arr[$key][$k]);

                        // search in the symptom asked from tab 1
                        if(in_array($questionnaire_text, $symptom_from_tab1))
                            unset($questionnaire_grp_arr[$key][$k]);


            }
        }
      }
        $temp_questionnaire = array();
if($apt_id_data->specialization_id == 1 || $apt_id_data->specialization_id == 2 || $apt_id_data->specialization_id == 5 || $apt_id_data->specialization_id == 6 || $apt_id_data->specialization_id == 9) {

    // for the specialization id   1 and 2 different logic
      //pr($questionnaire_grp_arr);die;
      if(in_array($step_id,[18,25]))
      {
        $temp_cronic_questionnaire_grp_arr = array();  // we are creating new source array and take only those  options that are needed in cronic condition module

        $temp_cronic_cond = array();
        if(!empty($user_detail->chronic_condition) && !is_array($user_detail->chronic_condition)){

          $temp_cronic_cond =  @unserialize(Security::decrypt(base64_decode($user_detail->chronic_condition),SEC_KEY));
        }
        //pr($temp_cronic_cond);

        $required_associated_sym_count = array();
        $temp_copd_compliant_questin =  null;

        if(in_array("dmii", $temp_cronic_cond)){

          //5*(NEURO) + 3*(GEN+CV+GI)

          $temp_cronic_questionnaire_grp_arr['GEN'] = $questionnaire_grp_arr[1] ;
          $temp_cronic_questionnaire_grp_arr['GI'] = $questionnaire_grp_arr[2] ;
          $temp_cronic_questionnaire_grp_arr['CV'] = $questionnaire_grp_arr[5] ;
          $temp_cronic_questionnaire_grp_arr['NEURO'] = $questionnaire_grp_arr[6] ;

          //calculate the number of symptom according to condition
          $required_associated_sym_count['GEN'] = array_key_exists('GEN', $required_associated_sym_count) ? $required_associated_sym_count['GEN'] + 3 : 3;

          $required_associated_sym_count['GI'] = array_key_exists('GI', $required_associated_sym_count) ? $required_associated_sym_count['GI'] + 3 : 3;

          $required_associated_sym_count['CV'] = array_key_exists('CV', $required_associated_sym_count) ? $required_associated_sym_count['CV'] + 3 : 3;

          $required_associated_sym_count['NEURO'] = array_key_exists('NEURO', $required_associated_sym_count) ? $required_associated_sym_count['NEURO'] + 5 : 5;


        }

        //pr($required_associated_sym_count);

        if(in_array("cad", $temp_cronic_cond)){

          //CAD : 5*(cv) + 3*(GEN + NEURO + GI)
          $temp_cronic_questionnaire_grp_arr['GEN'] = $questionnaire_grp_arr[1] ;
          $temp_cronic_questionnaire_grp_arr['GI'] = $questionnaire_grp_arr[2] ;
          $temp_cronic_questionnaire_grp_arr['CV'] = $questionnaire_grp_arr[5] ;
          $temp_cronic_questionnaire_grp_arr['NEURO'] = $questionnaire_grp_arr[6] ;

          //calculate the number of symptom according to condition
          $required_associated_sym_count['GEN'] = array_key_exists('GEN', $required_associated_sym_count) ? $required_associated_sym_count['GEN'] + 3 : 3;

          $required_associated_sym_count['GI'] = array_key_exists('GI', $required_associated_sym_count) ? $required_associated_sym_count['GI'] + 3 : 3;

          $required_associated_sym_count['CV'] = array_key_exists('CV', $required_associated_sym_count) ? $required_associated_sym_count['CV'] + 5 : 5;

          $required_associated_sym_count['NEURO'] = array_key_exists('NEURO', $required_associated_sym_count) ? $required_associated_sym_count['NEURO'] + 3 : 3;

        }

        if(in_array("chf", $temp_cronic_cond)){

          //CHF: 5*(CV) + 3*(GEN+ neuro + psych)
          $temp_cronic_questionnaire_grp_arr['GEN'] = $questionnaire_grp_arr[1] ;
          $temp_cronic_questionnaire_grp_arr['PSYCH'] = $questionnaire_grp_arr[8] ;
          $temp_cronic_questionnaire_grp_arr['CV'] = $questionnaire_grp_arr[5] ;
          $temp_cronic_questionnaire_grp_arr['NEURO'] = $questionnaire_grp_arr[6] ;

          //calculate the number of symptom according to condition
          $required_associated_sym_count['GEN'] = array_key_exists('GEN', $required_associated_sym_count) ? $required_associated_sym_count['GEN'] + 3 : 3;

          $required_associated_sym_count['PSYCH'] = array_key_exists('PSYCH', $required_associated_sym_count) ? $required_associated_sym_count['PSYCH'] + 3 : 3;

          $required_associated_sym_count['CV'] = array_key_exists('CV', $required_associated_sym_count) ? $required_associated_sym_count['CV'] + 5 : 5;

          $required_associated_sym_count['NEURO'] = array_key_exists('NEURO', $required_associated_sym_count) ? $required_associated_sym_count['NEURO'] + 3 : 3;

        }

        if(in_array("htn", $temp_cronic_cond)){

          //5*(CV) + 3*(GEN + RESP+ NEURO)
          $temp_cronic_questionnaire_grp_arr['GEN'] = $questionnaire_grp_arr[1] ;
          $temp_cronic_questionnaire_grp_arr['RESP'] = $questionnaire_grp_arr[7] ;
          $temp_cronic_questionnaire_grp_arr['CV'] = $questionnaire_grp_arr[5] ;
          $temp_cronic_questionnaire_grp_arr['NEURO'] = $questionnaire_grp_arr[6] ;

          //calculate the number of symptom according to condition
          $required_associated_sym_count['GEN'] = array_key_exists('GEN', $required_associated_sym_count) ? $required_associated_sym_count['GEN'] + 3 : 3;

          $required_associated_sym_count['RESP'] = array_key_exists('RESP', $required_associated_sym_count) ? $required_associated_sym_count['RESP'] + 3 : 3;

          $required_associated_sym_count['CV'] = array_key_exists('CV', $required_associated_sym_count) ? $required_associated_sym_count['CV'] + 5 : 5;

          $required_associated_sym_count['NEURO'] = array_key_exists('NEURO', $required_associated_sym_count) ? $required_associated_sym_count['NEURO'] + 3 : 3;

        }
        
        if(in_array("copd", $temp_cronic_cond)){
           
           if($step_id == 25)
           {
            $temp_asthma_compliant_questin = $this->ChiefCompliantQuestionnaire->find('all')->where(['specialization_ids LIKE' => '%'.$apt_id_data->specialization_id.'%','tab_number LIKE' => '%copd%']);
           }
           else
           {
            $temp_copd_compliant_questin = $this->ChiefCompliantQuestionnaire->find('all')->where(['tab_number LIKE' => '%copd%'])->toArray();
           }
           $temp_questionnaire = $temp_copd_compliant_questin;
           //pr(array_column($temp_copd_compliant_questin,'questionnaire_text'));
           //pr($temp_copd_compliant_questin);die;
        }

        if(in_array("asthma", $temp_cronic_cond)){

           
           if($step_id == 25)
           {
            $temp_asthma_compliant_questin = $this->ChiefCompliantQuestionnaire->find('all')->where(['specialization_ids LIKE' => '%'.$apt_id_data->specialization_id.'%','tab_number LIKE' => '%asthma%']);
           }
           else
           {
            $temp_asthma_compliant_questin = $this->ChiefCompliantQuestionnaire->find('all')->where(['tab_number LIKE' => '%asthma%'])->toArray();
           }
           if(!empty($temp_asthma_compliant_questin)){

              foreach ($temp_asthma_compliant_questin as $key => $value) {

                  $temp_questionnaire[] = $value;
              }
           }
          // pr($temp_copd_compliant_questin);die;
           //$temp_questionnaire = $temp_copd_compliant_questin;
           //pr(array_column($temp_copd_compliant_questin,'questionnaire_text'));
           //pr($temp_copd_compliant_questin);die;
        }

        foreach ($temp_cronic_questionnaire_grp_arr as $key => $value)
        {
          $i = 1;
          foreach($value as $vl)
          {
            $temp_questionnaire[] = $vl ;

            /*if(in_array($key, array('NEURO')) && $i == 5 ) {   break; } // for cronic condition module module we will ask 5 symptom from each section 'NEURO'
            if(in_array($key, array('GEN', 'GI','CV')) && $i == 3 ) {   break; } // for cronic condition module we will ask 3 symptoms from each section 'GEN', 'GI','CV'*/

            if(array_key_exists($key, $required_associated_sym_count) && $i == $required_associated_sym_count[$key]){
              break;
            }

            $i++;

          }
        } 
        if(!empty($temp_questionnaire)){    
        $temp_questionnaire = array_reverse($temp_questionnaire);
              
        $temp_questionnaire = array_reverse( // Reverse array to the initial order.
            array_values( // Get rid of string keys (make array indexed again).
                array_combine( // Create array taking keys from column and values from the base array.
                    array_column($temp_questionnaire, 'questionnaire_text'),
                    $temp_questionnaire
                )
            )
        );
        }

        // Internal medicine module condition
        if(in_array($step_id,[25])){

          $temp_questionnaire = array();
          $temp_cronic_questionnaire_grp_arr = array();

          //5*(CV) + 3*(GEN + RESP+ NEURO)
       //   pr($questionnaire_grp_arr[22]);die;

          $temp_cronic_questionnaire_grp_arr['GEN'][] = $questionnaire_grp_arr[1][0];
          $temp_cronic_questionnaire_grp_arr['GEN'][] = $questionnaire_grp_arr[1][1];
          $temp_cronic_questionnaire_grp_arr['GI'][] = $questionnaire_grp_arr[22][2]; 
          $temp_cronic_questionnaire_grp_arr['oncology_gu'][] = $questionnaire_grp_arr[22][9];
          $temp_cronic_questionnaire_grp_arr['oncology_msk'][] = $questionnaire_grp_arr[43][1];
          $temp_cronic_questionnaire_grp_arr['ORTHO_GU'][] = $questionnaire_grp_arr[23][1];

          //pr($temp_cronic_questionnaire_grp_arr);die;

          //pr($temp_cronic_questionnaire_grp_arr);die;
          // $temp_cronic_questionnaire_grp_arr['RESP'] = $questionnaire_grp_arr[7] ;
          // $temp_cronic_questionnaire_grp_arr['CV'] = $questionnaire_grp_arr[5];
          // $temp_cronic_questionnaire_grp_arr['ORTHO_NECK'] = $questionnaire_grp_arr[17] ;
          // $temp_cronic_questionnaire_grp_arr['ORTHO_NEURO'] = $questionnaire_grp_arr[20] ;
          // $temp_cronic_questionnaire_grp_arr['ORTHO_MSK'] = $questionnaire_grp_arr[21] ;
          // $temp_cronic_questionnaire_grp_arr['ORTHO_GI'] = $questionnaire_grp_arr[22] ;
          // $temp_cronic_questionnaire_grp_arr['ORTHO_BREASTS'] = $questionnaire_grp_arr[25] ;
          // $temp_cronic_questionnaire_grp_arr['ORTHO_HEME'] = $questionnaire_grp_arr[26] ;
          // $temp_cronic_questionnaire_grp_arr['oncology_gen'] = $questionnaire_grp_arr[36] ;
          // $temp_cronic_questionnaire_grp_arr['oncology_cv'] = $questionnaire_grp_arr[39] ;
          // $temp_cronic_questionnaire_grp_arr['oncology_gu'] = $questionnaire_grp_arr[42] ;
          // $temp_cronic_questionnaire_grp_arr['oncology_msk'] = $questionnaire_grp_arr[43] ;

          // $temp_cronic_questionnaire_grp_arr['HEENT'] = $questionnaire_grp_arr[3] ;
          // $temp_cronic_questionnaire_grp_arr['IMMUNO'] = $questionnaire_grp_arr[53] ;
          // $temp_cronic_questionnaire_grp_arr['SKIN'] = $questionnaire_grp_arr[9] ;
          // $temp_cronic_questionnaire_grp_arr['ORTHO_GU'] = $questionnaire_grp_arr[23] ;

          // $temp_cronic_questionnaire_grp_arr['ORTHO_ENDO'] = $questionnaire_grp_arr[28] ;
          // $temp_cronic_questionnaire_grp_arr['REPROM'] = $questionnaire_grp_arr[23] ;

          //calculate the number of symptom according to condition
          $required_associated_sym_count['GEN'] = array_key_exists('GEN', $required_associated_sym_count) ? $required_associated_sym_count['GEN'] + 3 : 3;

          $required_associated_sym_count['RESP'] = array_key_exists('RESP', $required_associated_sym_count) ? $required_associated_sym_count['RESP'] + 3 : 3;

          $required_associated_sym_count['ORTHO_NECK'] = array_key_exists('ORTHO_NECK', $required_associated_sym_count) ? $required_associated_sym_count['ORTHO_NECK'] + 3 : 3;

          $required_associated_sym_count['ORTHO_NEURO'] = array_key_exists('ORTHO_NEURO', $required_associated_sym_count) ? $required_associated_sym_count['ORTHO_NEURO'] + 5 : 5;

          $required_associated_sym_count['ORTHO_MSK'] = array_key_exists('ORTHO_MSK', $required_associated_sym_count) ? $required_associated_sym_count['ORTHO_MSK'] + 3 : 3;

          $required_associated_sym_count['ORTHO_GI'] = array_key_exists('ORTHO_GI', $required_associated_sym_count) ? $required_associated_sym_count['ORTHO_GI'] + 3 : 3;

          $required_associated_sym_count['ORTHO_BREASTS'] = array_key_exists('ORTHO_BREASTS', $required_associated_sym_count) ? $required_associated_sym_count['ORTHO_BREASTS'] + 5 : 5;

          $required_associated_sym_count['ORTHO_HEME'] = array_key_exists('ORTHO_HEME', $required_associated_sym_count) ? $required_associated_sym_count['ORTHO_HEME'] + 3 : 3;


          $required_associated_sym_count['oncology_gen'] = array_key_exists('oncology_gen', $required_associated_sym_count) ? $required_associated_sym_count['oncology_gen'] + 5 : 5;

          $required_associated_sym_count['oncology_cv'] = array_key_exists('oncology_cv', $required_associated_sym_count) ? $required_associated_sym_count['oncology_cv'] + 3 : 3;

          $required_associated_sym_count['oncology_gu'] = array_key_exists('oncology_gu', $required_associated_sym_count) ? $required_associated_sym_count['oncology_gu'] + 3 : 3;

          $required_associated_sym_count['oncology_msk'] = array_key_exists('oncology_msk', $required_associated_sym_count) ? $required_associated_sym_count['oncology_msk'] + 5 : 5;

          $required_associated_sym_count['HEENT'] = array_key_exists('HEENT', $required_associated_sym_count) ? $required_associated_sym_count['HEENT'] + 3 : 3;

          $required_associated_sym_count['IMMUNO'] = array_key_exists('IMMUNO', $required_associated_sym_count) ? $required_associated_sym_count['IMMUNO'] + 5 : 5;

          $required_associated_sym_count['SKIN'] = array_key_exists('SKIN', $required_associated_sym_count) ? $required_associated_sym_count['SKIN'] + 3 : 3;

          $required_associated_sym_count['ORTHO_GU'] = array_key_exists('ORTHO_GU', $required_associated_sym_count) ? $required_associated_sym_count['ORTHO_GU'] + 3 : 3;

          $required_associated_sym_count['ORTHO_ENDO'] = array_key_exists('ORTHO_ENDO', $required_associated_sym_count) ? $required_associated_sym_count['ORTHO_ENDO'] + 5 : 5;

          $required_associated_sym_count['REPROM'] = array_key_exists('REPROM', $required_associated_sym_count) ? $required_associated_sym_count['REPROM'] + 3 : 3;

              foreach ($temp_cronic_questionnaire_grp_arr as $key => $value) {          
                 // shuffle($value);   // random array element so that each time system will ask different questions
                $i = 1;
                foreach($value as $vl){
                  $temp_questionnaire[] = $vl ;
                  if($i == 2 ) { break; } // for orthopedic module we will ask 2 symptom from each section
                  $i++;
                }
            }

            $array_questionnaire_ids = [];
            $temp_questionnaire_new = $temp_questionnaire;
            $temp_questionnaire = [];
            foreach ($temp_questionnaire_new as $key => $value) {
                if (!in_array($value['id'], $array_questionnaire_ids))
                {
                    array_push($array_questionnaire_ids, $value['id']);
                    array_push($temp_questionnaire, $value);
                }
              }
              //pr($temp_questionnaire);die;

        }
      }      
      else if($step_id == 23)
      {         
          foreach ($questionnaire_grp_arr as $key => $value) {
            foreach($value as $vl){
              $temp_questionnaire[] = $vl;
            }
        }
      }
      else if($step_id == 1)
      {
          foreach ($questionnaire_grp_arr as $key => $value) {

            foreach($value as $vl){

              $temp_questionnaire[] = $vl ;

            }

          if($apt_id_data->specialization_id == 2 && $key == 10){ // for ob-gyn case extra woman related question will be asked (questionare type id 10)
            foreach($value as $vl){
              $temp_questionnaire[] = $vl ;
            }
          }
        }
      }
      else
      {        
        foreach ($questionnaire_grp_arr as $key => $value) {

         if($key != 10) {
           $i = 1;

            foreach($value as $vl){

              $temp_questionnaire[] = $vl ;
              if($i == 3 ) { break; }
              $i++;

            }
         }
          if($apt_id_data->specialization_id == 2 && $key == 10){ // for ob-gyn case extra woman related question will be asked (questionare type id 10)
            foreach($value as $vl){

              $temp_questionnaire[] = $vl ;
            }
          }
          else if($apt_id_data->specialization_id == 9 )
          {
              $i = 1;
              foreach($value as $vl){

              $temp_questionnaire[] = $vl ;
              if($i == 3 ) { break; }
              $i++;
            }

          }
        }

      }
      //pr($temp_questionnaire);die;
    }
  elseif($apt_id_data->specialization_id == 3 ){

// John:The default for orthopedics modules is 2 from each of the following:
// GEN(32), EYES(12), ENT(13,14,16), CV(18), RESP(19), NEURO(20), MSK(21), GI(22), GU(23), SKIN/BREAST(24,25), ENDO(28), HEME/LYMPH(26,27), ALL/IMM(30,31), PSYCH(29)


// pr($questionnaire_grp_arr); die;
$temp_ortho_questionnaire_grp_arr = array();  // we are creating new source array and take only those  options that are needed in orthopedic module

$temp_ortho_questionnaire_grp_arr['GEN'] = $questionnaire_grp_arr[32] ;
$temp_ortho_questionnaire_grp_arr['EYES'] = $questionnaire_grp_arr[12] ;
$temp_ortho_questionnaire_grp_arr['ENT'] = array_merge($questionnaire_grp_arr[13], $questionnaire_grp_arr[14], $questionnaire_grp_arr[16])  ;
$temp_ortho_questionnaire_grp_arr['CV'] = $questionnaire_grp_arr[18] ;
$temp_ortho_questionnaire_grp_arr['RESP'] = $questionnaire_grp_arr[19] ;
$temp_ortho_questionnaire_grp_arr['NEURO'] = $questionnaire_grp_arr[20] ;
$temp_ortho_questionnaire_grp_arr['MSK'] = $questionnaire_grp_arr[21] ;
$temp_ortho_questionnaire_grp_arr['GI'] = $questionnaire_grp_arr[22] ;
$temp_ortho_questionnaire_grp_arr['GU'] = $questionnaire_grp_arr[23] ;
$temp_ortho_questionnaire_grp_arr['SKIN_BREAST'] = array_merge($questionnaire_grp_arr[24], $questionnaire_grp_arr[25])  ;
$temp_ortho_questionnaire_grp_arr['ENDO'] = $questionnaire_grp_arr[28] ;
$temp_ortho_questionnaire_grp_arr['HEME_LYMPH'] = $questionnaire_grp_arr[26] ;
// for 27, 30, 31 there is no  data so we commented it temporarily, when client provide data then we will uncomment it
// $temp_ortho_questionnaire_grp_arr['HEME_LYMPH'] = $questionnaire_grp_arr[27] ;
// $temp_ortho_questionnaire_grp_arr['ALL_IMM'] = $questionnaire_grp_arr[30] ;
// $temp_ortho_questionnaire_grp_arr['ALL_IMM'] = $questionnaire_grp_arr[31] ;
$temp_ortho_questionnaire_grp_arr['PSYCH'] = $questionnaire_grp_arr[29] ;

// pr($temp_ortho_questionnaire_grp_arr); die;
        foreach ($temp_ortho_questionnaire_grp_arr as $key => $value) {
          // pr($value);
          // shuffle($value);   // random array element so that each time system will ask different questions
           // pr($value); die;
            $i = 1;
            foreach($value as $vl){

              $temp_questionnaire[] = $vl ;
              if($i == 2 ) { break; } // for orthopedic module we will ask 2 symptom from each section

              $i++;

            }

        }


      }elseif($apt_id_data->specialization_id == 4  || $apt_id_data->specialization_id == 7){



    // However, we may specify it to be different for specific orthopedics modules, such as in this case with the spine module we want 5 of MSK(21), 5 of NEURO(20),  and two from each of the following :GEN(32), ENT(13,14,16), CV(18), RESP(19), GI(22), SKIN/BREAST(24,25), ENDO(28), HEME/LYMPH(26,27)


    //pr($questionnaire_grp_arr); die;
    $temp_spine_questionnaire_grp_arr = array(); // we are creating new source array and take only those  options that are needed in orthopedic spine module
    $temp_spine_questionnaire_grp_arr['MSK'] = $questionnaire_grp_arr[21];
    $temp_spine_questionnaire_grp_arr['NEURO'] = $questionnaire_grp_arr[20];
    $temp_spine_questionnaire_grp_arr['GEN'] = $questionnaire_grp_arr[32] ;
    $temp_spine_questionnaire_grp_arr['ENT'] = array_merge($questionnaire_grp_arr[13], $questionnaire_grp_arr[14], $questionnaire_grp_arr[16])  ;
    $temp_spine_questionnaire_grp_arr['CV'] = $questionnaire_grp_arr[18] ;
    $temp_spine_questionnaire_grp_arr['RESP'] = $questionnaire_grp_arr[19] ;
    $temp_spine_questionnaire_grp_arr['GI'] = $questionnaire_grp_arr[22] ;
    $temp_spine_questionnaire_grp_arr['SKIN_BREAST'] = array_merge($questionnaire_grp_arr[24], $questionnaire_grp_arr[25]) ;
    $temp_spine_questionnaire_grp_arr['ENDO'] = $questionnaire_grp_arr[28] ;
    $temp_spine_questionnaire_grp_arr['HEME_LYMPH'] = $questionnaire_grp_arr[26]; //  array_merge($questionnaire_grp_arr[26], $questionnaire_grp_arr[27]) ; there is no data in the id 27 so we commented this temporarily , when client provide data we will uncomment it

    // pr($temp_spine_questionnaire_grp_arr); die;

        foreach ($temp_spine_questionnaire_grp_arr as $key => $value) {
          // pr($value);

          // shuffle($value);   // random array element so that each time system will ask different questions
           // pr($key);
           // pr($value); die;
            $i = 1;
            foreach($value as $vl){

              $temp_questionnaire[] = $vl ;
 if(!in_array($key, array('MSK', 'NEURO')) && $i == 2 ) {   break; } // for orthopedic spine module we will ask 2 symptom from each section except 'MSK', 'NEURO'
 if(in_array($key, array('MSK', 'NEURO')) && $i == 5 ) {   break; } // for orthopedic module we will ask 5 symptoms from each section 'MSK', 'NEURO'

              $i++;

            }

        }
      }
      elseif($apt_id_data->specialization_id == 8 && in_array($step_id,[19,21])){


        $temp_cancer_conditions = array();
        $temp_cancer_questionnaire_grp_arr = array();
        $temp_cancer_healthquestionnaire_section = array();
        $temp_questionnaire = array();
        $unset_group_ids = array();

        if(!empty($user_detail) && !empty($user_detail->cancer_conditions)){

          $temp_cancer_conditions = @unserialize(Security::decrypt(base64_decode($user_detail->cancer_conditions),SEC_KEY));
        }

        //pr($temp_cancer_conditions);die;
        if(!empty($temp_cancer_conditions) && is_array($temp_cancer_conditions)){

            //health questionnaire for breast cancer

            if(in_array('Breast cancer', $temp_cancer_conditions) || in_array('breast cancer', $temp_cancer_conditions)){

                $temp_cancer_healthquestionnaire_section = array_merge($temp_cancer_healthquestionnaire_section,['breast cancer','bone mets','lung mets','brain mets','liver mets']);
            }

            if(in_array('Throat cancer (esophageal)', $temp_cancer_conditions) || in_array('throat cancer (esophageal)', $temp_cancer_conditions)){

                $temp_cancer_healthquestionnaire_section = array_merge($temp_cancer_healthquestionnaire_section,['esophageal cancer','lung mets','bone mets']);
            }

            if(in_array('Brain cancer', $temp_cancer_conditions) || in_array('brain cancer', $temp_cancer_conditions)){

                $temp_cancer_healthquestionnaire_section = array_merge($temp_cancer_healthquestionnaire_section,['brain cancer','lung mets','breast mets','colorectal mets','kidney mets','melanoma']);
            }

            if(in_array('Stomach cancer', $temp_cancer_conditions) || in_array('stomach cancer', $temp_cancer_conditions)){

                $temp_cancer_healthquestionnaire_section = array_merge($temp_cancer_healthquestionnaire_section,['stomach cancer','lung mets','liver mets','peritoneum mets']);
            }

            if(in_array('Pancreatic cancer', $temp_cancer_conditions) || in_array('pancreatic cancer', $temp_cancer_conditions)){

                $temp_cancer_healthquestionnaire_section = array_merge($temp_cancer_healthquestionnaire_section,['pancreatic cancer','lung mets','liver mets','peritoneum mets']);
            }

            if(in_array('Colon-rectal cancer', $temp_cancer_conditions) || in_array('colon-rectal cancer', $temp_cancer_conditions)){

                $temp_cancer_healthquestionnaire_section = array_merge($temp_cancer_healthquestionnaire_section,['colon_rectal cancer','lung mets','liver mets','peritoneum mets']);

            }

            //set healthquestionnaire using health questionnaire type for some cancers

            if(in_array('Kidney cancer', $temp_cancer_conditions) || in_array('kidney cancer', $temp_cancer_conditions) || in_array('Prostate cancer', $temp_cancer_conditions) || in_array('prostate cancer', $temp_cancer_conditions)){

                if(isset($questionnaire_grp_arr[36])){
                  $temp_cancer_questionnaire_grp_arr[36] = $questionnaire_grp_arr[36] ;
                  //array_push($unset_group_ids, 36);
                }

                if(isset($questionnaire_grp_arr[42])){
                  $temp_cancer_questionnaire_grp_arr[42] = $questionnaire_grp_arr[42] ;
                  //array_push($unset_group_ids, 42);
                }

            }

            if(in_array('Uterine cancer', $temp_cancer_conditions) || in_array('uterine cancer', $temp_cancer_conditions) || in_array('Overian cancer', $temp_cancer_conditions) || in_array('overian cancer', $temp_cancer_conditions) || in_array('Cervical cancer', $temp_cancer_conditions) || in_array('cervical cancer', $temp_cancer_conditions) || in_array('Vulvar cancer', $temp_cancer_conditions) || in_array('vulvar cancer', $temp_cancer_conditions)){

                if(isset($questionnaire_grp_arr[42])){
                  $temp_cancer_questionnaire_grp_arr[42] = $questionnaire_grp_arr[42] ;
                  //array_push($unset_group_ids, 42);
                }

                if(isset($questionnaire_grp_arr[36])){
                  $temp_cancer_questionnaire_grp_arr[36] = $questionnaire_grp_arr[36] ;
                  //array_push($unset_group_ids, 36);
                }


                if(isset($questionnaire_grp_arr[45])){
                  $temp_cancer_questionnaire_grp_arr[45] = $questionnaire_grp_arr[45] ;
                  //array_push($unset_group_ids, 45);
                }
            }

            if(in_array('Leukemia', $temp_cancer_conditions) || in_array('leukemia', $temp_cancer_conditions) || in_array('Lymphoma', $temp_cancer_conditions) || in_array('lymphoma', $temp_cancer_conditions)){

                if(isset($questionnaire_grp_arr[36])){
                  $temp_cancer_questionnaire_grp_arr[36] = $questionnaire_grp_arr[36] ;
                  //array_push($unset_group_ids, 36);
                }

                if(isset($questionnaire_grp_arr[49])){
                  $temp_cancer_questionnaire_grp_arr[49] = $questionnaire_grp_arr[49] ;
                  //array_push($unset_group_ids, 49);
                }
            }

            $temp_cancer_healthquestionnaire_section = array_unique($temp_cancer_healthquestionnaire_section);

            //$unset_group_ids = array_unique($unset_group_ids);
        }

        /*if(!empty($temp_cancer_questionnaire_grp_arr) && is_array($temp_cancer_questionnaire_grp_arr)){

            foreach ($temp_cancer_questionnaire_grp_arr as $key => $value) {

              if(!empty($value) && is_array($value)){

                  foreach ($value as $k => $v) {

                    $temp_questionnaire[$v->id] = $v;
                  }
              }
            }
        }*/

        //apply the formula of cancers and select the health questionnaire according to formula

        if(!empty($qustion_res)){


          foreach ($qustion_res as $key => $value) {

            $temp_cancer_group = !empty($value->tab_number) ? explode(",", $value->tab_number) : array();
            if(count(array_intersect($temp_cancer_group, $temp_cancer_healthquestionnaire_section))){

              $temp_cancer_questionnaire_grp_arr[$value->questionnaire_type_id][] = $value;
            }
          }
        }
        //pr($temp_cancer_questionnaire_grp_arr);


        //pr($qustion_res);
        //pr(array_keys($temp_cancer_questionnaire_grp_arr));

        //$temp_questionnaire_grp_arr = $questionnaire_grp_arr;
        //unset the health questionnaire based on group id
        /*if(!empty($unset_group_ids)){

          foreach ($unset_group_ids as $key => $value) {

            if(isset($temp_questionnaire_grp_arr[$value])){

                unset($temp_questionnaire_grp_arr[$value]);
            }
          }
        }*/

        /*if(!empty($temp_questionnaire_grp_arr) && !empty($temp_cancer_healthquestionnaire_section)){

          foreach ($temp_questionnaire_grp_arr as $key => $value) {

            if(!empty($value) && is_array($value)){

              foreach ($value as $k => $v) {

                $temp_cancer_group = !empty($v->tab_number) ? explode(",", $v->tab_number) : array();

                if(count(array_intersect($temp_cancer_group, $temp_cancer_healthquestionnaire_section))){

                  $temp_cancer_questionnaire_grp_arr[$v->questionnaire_type_id][] = $v;
                }

              }
            }
          }
        }*/

        //according to client requirement we need to ask at least one symptom from all groups. Now we check and insert one symptom for each gruop

        if(!empty($questionnaire_grp_arr)){
        //  echo count($questionnaire_grp_arr->count()die;


          foreach ($questionnaire_grp_arr as $key => $value) {

            if(!empty($value) && is_array($value) && !array_key_exists($key, $temp_cancer_questionnaire_grp_arr)){

              foreach ($value as $k => $v) {

                $temp_cancer_questionnaire_grp_arr[$key][] = $v;
                break;
              }
            }
          }
        }


        if(!empty($temp_cancer_questionnaire_grp_arr)){
          //pr(json_encode($temp_cancer_questionnaire_grp_arr));die;

          foreach ($temp_cancer_questionnaire_grp_arr as $key => $value) {

              if(!empty($value) && is_array($value)){

                  foreach ($value as $k => $v) {

                    $temp_questionnaire[] = $v;
                  }
              }
            }
        }

         //if($step_id == 19){
          $array_questionnaire_ids = [];
          $temp_questionnaire_new = $temp_questionnaire;
          $temp_questionnaire = [];
          foreach ($temp_questionnaire_new as $key => $value) {
            if (!in_array($value['id'], $array_questionnaire_ids))
            {
                array_push($array_questionnaire_ids, $value['id']);
                array_push($temp_questionnaire, $value);
            }
          }
       // }



      //  echo count($temp_questionnaire);
      //  pr($temp_questionnaire);die;

        //pr($temp_cancer_questionnaire_grp_arr); die;

        //if no cancer is selected then we need to show one health questionnaire from all groups
/*        if(empty($temp_questionnaire)){

            if(isset($questionnaire_grp_arr[36])){
              $temp_cancer_questionnaire_grp_arr['GEN'] = $questionnaire_grp_arr[36] ;
            }

            if(isset($questionnaire_grp_arr[37])){
              $temp_cancer_questionnaire_grp_arr['EYE'] = $questionnaire_grp_arr[37] ;
            }

            if(isset($questionnaire_grp_arr[38])){
              $temp_cancer_questionnaire_grp_arr['ENT'] = $questionnaire_grp_arr[38] ;
            }

            if(isset($questionnaire_grp_arr[39])){
              $temp_cancer_questionnaire_grp_arr['CV'] = $questionnaire_grp_arr[39] ;
            }

            if(isset($questionnaire_grp_arr[40])){
              $temp_cancer_questionnaire_grp_arr['RESP'] = $questionnaire_grp_arr[40] ;
            }

            if(isset($questionnaire_grp_arr[41])){
              $temp_cancer_questionnaire_grp_arr['GI'] = $questionnaire_grp_arr[41] ;
            }
            if(isset($questionnaire_grp_arr[42])){
              $temp_cancer_questionnaire_grp_arr['GU'] = $questionnaire_grp_arr[42] ;
            }
            if(isset($questionnaire_grp_arr[43])){
              $temp_cancer_questionnaire_grp_arr['MSK'] = $questionnaire_grp_arr[43] ;
            }
            if(isset($questionnaire_grp_arr[44])){
              $temp_cancer_questionnaire_grp_arr['SKIN'] = $questionnaire_grp_arr[44] ;
            }
            if(isset($questionnaire_grp_arr[45])){
              $temp_cancer_questionnaire_grp_arr['BREAST'] = $questionnaire_grp_arr[45] ;
            }
            if(isset($questionnaire_grp_arr[46])){
              $temp_cancer_questionnaire_grp_arr['NEURO'] = $questionnaire_grp_arr[46] ;
            }

            if(isset($questionnaire_grp_arr[47])){
              $temp_cancer_questionnaire_grp_arr['PSYCH'] = $questionnaire_grp_arr[47] ;
            }
            if(isset($questionnaire_grp_arr[48])){
              $temp_cancer_questionnaire_grp_arr['ENDO'] = $questionnaire_grp_arr[48] ;
            }
            if(isset($questionnaire_grp_arr[49])){
              $temp_cancer_questionnaire_grp_arr['HEME_LYMPH'] = $questionnaire_grp_arr[49] ;
            }
            if(isset($questionnaire_grp_arr[50])){

              $temp_cancer_questionnaire_grp_arr['ALL_IMM'] = $questionnaire_grp_arr[50] ;
            }

            foreach ($temp_cancer_questionnaire_grp_arr as $key => $value) {

              if(!empty($value) && is_array($value)){

                  foreach ($value as $k => $v) {

                    $temp_questionnaire[$v->id] = $v;
                    break;
                  }
              }
            }
        }

        $temp_questionnaire = array_merge($temp_questionnaire);*/

      }

        $compliant_questin = $temp_questionnaire ;
        //pr($compliant_questin);die;

        if($step_id == 12 && !empty($user_detail) && !empty($user_detail->follow_up_step_id)){

            $follow_up_step_id = $user_detail->follow_up_step_id;
         }

         //health questionnaire are empty for chronic condition module then set the summary tab
         if(in_array($step_id,[19,21,18]) && empty($compliant_questin)){

            $this->ChiefCompliantUserdetails->query()
                    ->update()
                    ->set(['current_tab_number' => 5])
                    ->where(['appointment_id' => $apt_id])
                    ->execute();
            $this->redirect($this->referer());
         }
      }

     // pr($user_detail);

      if($tab_number == 5  || (5 == $cur_next_steps[0] && $step_id != 8 && $step_id != 9 && $step_id != 11)){
       //die('cxcZX');

       // pr($cur_cc_names);die;
       $already_sent = $this->request->getQuery('already_sent');

       //  echo 'hello';
       // pr($already_sent);
        //pr($user_detail);die('fdf');
// pr(unserialize($user_detail->compliant_medication_detail)); die;
// for orthopedic follow up round we need to show the previous visit note to the patient
                if($step_id == 6 || $step_id == 8 ||($step_id == 12) || ($step_id == 16)){
                    $prev_visit_user_detail =  $this->ChiefCompliantUserdetails->find('all')->where(['id' => $user_detail->followup_parent_id])->first();
                    $prev_visit_user_detail = $this->prepare_user_detial_data_for_render($prev_visit_user_detail);
                    $cur_cc_names = null;

                    if(isset($prev_visit_user_detail->chief_compliant_details) && !empty($prev_visit_user_detail->chief_compliant_details)){

                      foreach ($prev_visit_user_detail->chief_compliant_details as $key => $value) {

                        if(isset($value['cc_data']['name']) && !empty($value['cc_data']['name'])){

                          $cur_cc_names[] = $value['cc_data']['name'];

                        }
                      }
                    }

                    if(!empty($cur_cc_names)){

                      $cur_cc_names = implode(",", $cur_cc_names);
                    }

                    $this->set(compact('cur_cc_names'));
                    $this->set(compact('prev_visit_user_detail'));
                }

                //pr($user_detail);die;

        $user_detail = $this->prepare_user_detial_data_for_render($user_detail);

        // sending note to MI7 api
        $id = $login_user['id'] ;
        $message_id = $user_detail->message_id ;
                $user_detail->user = $this->Users->find('all')->where(['id' => $id ])->first();

                if($step_id == 12 && !empty($user_detail) && !empty($user_detail->follow_up_step_id)){

                    $follow_up_step_id = $user_detail->follow_up_step_id;
                 }

                /*
        if(empty($message_id) && $message_id1 = $this->sendNoteToApi($id,$apt_id)){

          $message_id = $message_id1 ;
            $this->ChiefCompliantUserdetails->query()
                ->update()
                ->set(['message_id' => $message_id1])
                ->where(['appointment_id' => $apt_id])
                ->execute();

        }
                */

        $this->set(compact('user_detail', 'message_id', 'already_sent'));
                // $this->set(compact('user_detail'));



      }
      //die('dfdsf');

      if($tab_number == 6 || (6 == $cur_next_steps[0] && $step_id  == 7 )) {

        //die('test');

        //fetch the data of other detail of current chief complaint

        if(!empty($user_detail->chief_compliant_id)){

          $user_detail->chief_compliant_id  = Security::decrypt(base64_decode($user_detail->chief_compliant_id), SEC_KEY);
        }

          //get the detail of chief complaint

          if($apt_id_data->specialization_id == 3 || $apt_id_data->specialization_id == 4 || $apt_id_data->specialization_id == 7){
            $cur_cc_data = $this->ChiefCompliants->find('all')->where(['id' => $user_detail->chief_compliant_id, 'specialization_id' => $apt_id_data->specialization_id ])->first();
          }else{
            $cur_cc_data = $this->ChiefCompliants->find('all')->where(['id' => $user_detail->chief_compliant_id])->first();
          }          

          //get the detail of other detail questions of chief complaint
          if(!empty($cur_cc_data->other_compliant_detail_ids)){

            $other_detail_question_id = $cur_cc_data->other_compliant_detail_ids;

            $other_detail_question_id = explode(',', $other_detail_question_id);
            $other_detail_question_id =   $this->ChiefCompliantOtherDetails->find('all')->where(['id IN' => $other_detail_question_id])->order(['question_order' => 'ASC']);
            // order by question_type descending because we want image at the top in the question set

            //pr($other_detail_question_id->toArray());

          }
          else{
            // redirecting to next step if no detals realted other question found
             $this->ChiefCompliantUserdetails->query()
                    ->update()
                    ->set(['current_tab_number' => 2])
                    ->where(['appointment_id' => $apt_id])
                    ->execute();
            $this->redirect($this->referer());

          }

          $this->set(compact('cur_cc_data'));
      }

      if($tab_number == 7 || (7 == $cur_next_steps[0] && $step_id  == 8)) {
        // echo $tab_number;
        // echo 'fdd';
        // pr($user_detail);die;

        //fetch the data of pain followup questions for general update tab
       // echo 'he';die;

         if(!empty($user_detail->chief_compliant_id)){

          $user_detail->chief_compliant_id  = Security::decrypt(base64_decode($user_detail->chief_compliant_id), SEC_KEY);
        }

        if(!empty($user_detail->compliant_medication_detail)){

           $user_detail->compliant_medication_detail = unserialize(Security::decrypt(base64_decode($user_detail->compliant_medication_detail), SEC_KEY)) ;
        }
        //pr($user_detail->chief_compliant_id);die;
          //get the detail of chief complaint

          if($apt_id_data->specialization_id == 3 || $apt_id_data->specialization_id == 4 || $apt_id_data->specialization_id == 7){
            $cur_cc_data = $this->ChiefCompliants->find('all')->where(['id' => $user_detail->chief_compliant_id, 'specialization_id' => $apt_id_data->specialization_id ])->first();
          }else{
            $cur_cc_data = $this->ChiefCompliants->find('all')->where(['id' => $user_detail->chief_compliant_id])->first();
          }

        $general_update_questions = $this->PainFollowupQuestionnaires->find('all')->where(['tab_number' => 7])->toArray();

        $this->set(compact('cur_cc_data'));

      }


      if($tab_number == 8 || (8 == $cur_next_steps[0] && $step_id  == 8)) {

         if(!empty($user_detail->chief_compliant_id)){

          $user_detail->chief_compliant_id  = Security::decrypt(base64_decode($user_detail->chief_compliant_id), SEC_KEY);
        }

        $temp_cc_ids = explode(",",$user_detail->chief_compliant_id);
          //get the detail of chief complaint

          if($apt_id_data->specialization_id == 3 || $apt_id_data->specialization_id == 4 || $apt_id_data->specialization_id == 7){
            $cur_cc_data = $this->ChiefCompliants->find('all')->where(['id' => $user_detail->chief_compliant_id, 'specialization_id' => $apt_id_data->specialization_id ])->first();

            $cur_cc_names = $this->ChiefCompliants->find('list',array('fields' => ['name']))->where(['id In' => $temp_cc_ids, 'specialization_id' => $apt_id_data->specialization_id ])->toArray();


          }else{
            $cur_cc_data = $this->ChiefCompliants->find('all')->where(['id' => $user_detail->chief_compliant_id])->first();

             $cur_cc_names = $this->ChiefCompliants->find('list',array('fields' => ['name']))->where(['id In' => $temp_cc_ids])->toArray();
          }

         $cur_cc_names = implode(",", $cur_cc_names);
        $pain_update_questions = $this->PainFollowupQuestionnaires->find('all')->where(['tab_number' => 8])->toArray();

        $this->set(compact('cur_cc_data'));
        $this->set(compact('cur_cc_names'));

      }

    if($tab_number == 9 || (9 == $cur_next_steps[0] && ($step_id  == 9 || $step_id  == 12))){

        //fetch the data of sceering questions for GI health checkup module

         $screening_questions = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '%'.$tab_number.'%', 'step_id LIKE' => '%9%', 'specialization_id' => $apt_id_data->specialization_id]);

         if(empty($user_detail)){

            $this->set('prev_visit_for_gi_health',$prev_visit_for_gi_health);

          }else{

            if(!empty($user_detail->prev_gi_health_checkup)){

              $this->set('prev_visit_for_gi_health',$user_detail->prev_gi_health_checkup);
            }else{

              $this->set('prev_visit_for_gi_health',$prev_visit_for_gi_health);

            }
          }

          if($step_id == 12 && !empty($user_detail) && !empty($user_detail->follow_up_step_id)){

            $follow_up_step_id = $user_detail->follow_up_step_id;
         }
      }

      if($tab_number == 10 || (10 == $cur_next_steps[0] && ($step_id  == 11 || $step_id  == 12))){

        //fetch the data of sceering questions for GI health checkup module
         $post_checkup_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '%'.$tab_number.'%', 'step_id LIKE' => '%11%', 'specialization_id' => $apt_id_data->specialization_id]);

         if($step_id == 12 && !empty($user_detail) && !empty($user_detail->follow_up_step_id)){

            $follow_up_step_id = $user_detail->follow_up_step_id;
         }
      }

      if($tab_number == 11 || (11 == $cur_next_steps[0] && ($step_id  == 13))){

        //fetch the data of sceering questions for GI health checkup module
         $procedure_detail_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '%'.$tab_number.'%', 'step_id LIKE' => '%13%', 'specialization_id' => $apt_id_data->specialization_id]);

         $common_medical_cond = $commonTable->find('all')->where(['cond_type' => 1, 'specialization_id' => $apt_id_data->specialization_id])->toArray();
         $temp_medical_conditions = array();
         if(!empty($common_medical_cond)){

          foreach ($common_medical_cond as $key => $value) {

              $temp_medical_conditions[$value->heading][] = $value;

          }
         }

         $common_medical_cond = $temp_medical_conditions;
      }

      if($tab_number == 12 || (12 == $cur_next_steps[0] && ($step_id  == 13))){

        //fetch the data of sceering questions for GI health checkup module
         $pre_op_medications_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '%'.$tab_number.'%', 'step_id LIKE' => '%13%', 'specialization_id' => $apt_id_data->specialization_id]);

         //pr($pre_op_medications_question->toArray());die;
      }


      if($tab_number == 13 || (13 == $cur_next_steps[0] && ($step_id  == 13))){

         $common_allergies_cond = $commonTable->find('all')->where(['cond_type' => 3, 'specialization_id' => $apt_id_data->specialization_id])->toArray();

         //pr($common_allergies_cond);die;

      }

      if($tab_number == 14 || (14 == $cur_next_steps[0] && ($step_id  == 14))){

         $common_diseases = $this->Diseases->find('list',array(
                                    'keyField' => 'id',
                                    'valueField' => 'name'
                                   )
                                )->toArray();
      }



      if($tab_number == 15 || (15 == $cur_next_steps[0] && $step_id  == 14 )) {

        // setting the cur_disease_detail_tab variable start

        if(!empty($user_detail->disease_name))

          $user_detail->disease_name  = Security::decrypt(base64_decode($user_detail->disease_name), SEC_KEY);


        $tmp_disease_ids = explode(",",$user_detail->disease_name);

       // pr($tmp_disease_ids);die;

        if(empty($user_detail->allready_asked_disease) || !empty($edited_tab)){
         // if it is first diease   ,  !empty($edited_tab) condition applied because of forward and back feature because if request come from tab clicking
            $cur_disease_data = $tmp_disease_ids[0] ;
            $this->set('cur_disease_detail_tab', $cur_disease_data);
        }
        else{
        // get the next disease

          $tmp_already_asked_disease_details = explode(',', $user_detail->allready_asked_disease) ;

          $tmp_key = array_search(end($tmp_already_asked_disease_details), $tmp_disease_ids);

         //pr($tmp_disease_ids);die;
          $cur_disease_data = $tmp_disease_ids[$tmp_key+1];
          $this->set('cur_disease_detail_tab', $cur_disease_data );
        }

       // pr($cur_disease_data);die;
        $cur_disease_data = $this->Diseases->find('all')->where(['id' => $cur_disease_data])->first();

        $base_line_symptoms = null;
        $alarm_symptoms = null;
        $disease_detail_question_id = null;

      if(!empty($cur_disease_data)){

        $base_line_symptoms = $this->Symptoms->find('all')->where(['type' => 2, 'disease_id LIKE' => '%'.$cur_disease_data['id'].'%'])->toArray();

        $alarm_symptoms = $this->Symptoms->find('all')->where(['type' => 1, 'disease_id LIKE' => '%'.$cur_disease_data['id'].'%'])->toArray();

          if(!empty($cur_disease_data->common_question_ids)){

            $disease_detail_question_id = $cur_disease_data->common_question_ids;

            $disease_detail_question_id = explode(',', $disease_detail_question_id);

            $disease_detail_question_id =   $this->CommonQuestions->find('all')->where(['id IN' => $disease_detail_question_id]);

          }
      }
      else{

        // redirecting to next step if no detals realted question found
         $this->ChiefCompliantUserdetails->query()
                ->update()
                ->set(['current_tab_number' => 4])
                ->where(['appointment_id' => $apt_id])
                ->execute();
        $this->redirect($this->referer());

      }

      $this->set(compact('cur_disease_data'));
    }


    if($tab_number == 16 || (16 == $cur_next_steps[0] && ($step_id  == 4))){

       $temp_old_medication = '';
       $check_is_show_soapp_comm = 0;
       $show_tab_16 = 0;
       $is_show_soapp_comm = 0;
       $active_sub_tab = $user_detail->active_sub_tab;

       if(!empty($user_detail) && !empty($user_detail->compliant_medication_detail)){

        $temp_old_medication  = unserialize(Security::decrypt(base64_decode($user_detail->compliant_medication_detail), SEC_KEY));
       }
       if($step_id == 26)
       {
         $check_is_show_soapp_comm = 1;
         $show_tab_16 = 1;
         $is_show_soapp_comm = 1;
       }

       //check tab is show or not
       if(!empty($temp_old_medication)){

          foreach ($temp_old_medication as $key => $value) {

              if(isset($value['medication_name_name']) && in_array(trim($value['medication_name_name']), $show_dast_padt_medication_list)){

                $show_tab_16 = 1;
              }
          }
       }

       if($show_tab_16 == 0){

          $this->ChiefCompliantUserdetails->query()
                ->update()
                ->set(['current_tab_number' => 5])
                ->where(['appointment_id' => $apt_id])
                ->execute();
          $this->redirect($this->referer());
       }

       $all_padt_medication_detail = $this->ChiefCompliantMedication ->find('list', [
                                            'keyField' => 'id',
                                            'valueField' =>  function ($row) {
                                              if($row['layman_name'] == $row['doctor_specific_name'])
                                              {
                                              return $row['layman_name'];
                                              }
                                              else {
                                              // return $row['layman_name'] . ' (' . $row['doctor_specific_name'].')';
                                                return $row['layman_name'];
                                              }
                                         }
                                        ])->where(['show_padt' => 1])->toArray();

       $all_soapp_medication_detail = $this->ChiefCompliantMedication ->find('list', [
                                            'keyField' => 'id',
                                            'valueField' =>  function ($row) {
                                              if($row['layman_name'] == $row['doctor_specific_name'])
                                              {
                                              return $row['layman_name'];
                                              }
                                              else {
                                              // return $row['layman_name'] . ' (' . $row['doctor_specific_name'].')';
                                                return $row['layman_name'];
                                              }
                                         }
                                        ])->where(['show_soapp' => 1])->toArray();


        //fetch the data of sceering questions for GI health checkup module
        $comm_drug_question = $this->CommonQuestions->find('all')->where(['tab_number' => 'comm', 'step_id' => '4'])->toArray();
        $dast_drug_question = $this->CommonQuestions->find('all')->where(['tab_number' => 'dast', 'step_id' => '4'])->toArray();
        $soapp_drug_question = $this->CommonQuestions->find('all')->where(['tab_number' => 'soapp', 'step_id' => '4'])->toArray();
        $padt_drug_question = $this->CommonQuestions->find('all')->where(['tab_number' => 'padt', 'step_id' => '4'])->toArray();
        $ort_drug_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '%ort%'])->toArray();

        $m3_drug_question = $this->CommonQuestions->find('all')->where(['tab_number' => 'm3', 'step_id' => '26'])->toArray();

        $check_is_show_soapp_comm_padt_dast = array();
        if($step_id == 26)
        {
                $check_is_show_soapp_comm_padt_dast['soapp_comm'] = 1;
                $check_is_show_soapp_comm_padt_dast['padt'] = 1;
                $check_is_show_soapp_comm_padt_dast['ort'] = 1;
                $check_is_show_soapp_comm_padt_dast['m3'] = 1;
                $check_is_show_soapp_comm =1;
        }

       // pr($temp_old_medication);die;

        if(!empty($temp_old_medication)){

          //logic for show dast or padt form when soapp & comm form is not shown
        //if user medication exist in padt medication then we need to show dast and padt both. if medication  does not exist in padt medication then we need to check medication exist in dast or not.
          foreach ($temp_old_medication as $key => $value) {

            if(in_array(trim($value['medication_name_name']), $all_soapp_medication_detail)){

                $check_is_show_soapp_comm_padt_dast['soapp_comm'] = 1;
                $check_is_show_soapp_comm_padt_dast['padt'] = 1;
                $check_is_show_soapp_comm_padt_dast['dast'] = 1;
                $check_is_show_soapp_comm =1;
            }

            if(in_array(trim($value['medication_name_name']), $all_padt_medication_detail)){

                  $check_is_show_soapp_comm_padt_dast['padt'] = 1;
                  $check_is_show_soapp_comm_padt_dast['dast'] = 1;
            }

            if(in_array(trim($value['medication_name_name']), $show_dast_padt_medication_list)){
                $check_is_show_soapp_comm_padt_dast['dast'] = 1;
            }
          }
        }

        if(!isset($check_is_show_soapp_comm_padt_dast['soapp_comm'])){

          $check_is_show_soapp_comm_padt_dast['soapp_comm'] = 0;
        }

        if(!isset($check_is_show_soapp_comm_padt_dast['padt'])){

          $check_is_show_soapp_comm_padt_dast['padt'] = 0;
        }

        if(!isset($check_is_show_soapp_comm_padt_dast['dast'])){

          $check_is_show_soapp_comm_padt_dast['dast'] = 0;
        }
        if(!isset($check_is_show_soapp_comm_padt_dast['ort'])){

          $check_is_show_soapp_comm_padt_dast['ort'] = 0;
        }
        if(!isset($check_is_show_soapp_comm_padt_dast['m3'])){

          $check_is_show_soapp_comm_padt_dast['m3'] = 0;
        }
       // pr($check_is_show_soapp_comm_padt_dast);die;
       $this->set('check_is_show_soapp_comm_padt_dast',$check_is_show_soapp_comm_padt_dast);

         //Logic for show soapp and comm once per month
         //check last appointment in which patient fill soapp and comm detail
        if($check_is_show_soapp_comm){
          $allcc_user_dtail = $this->ChiefCompliantUserdetails->find('all')->where(['current_step_id IN' => [4]  ,  'medication_refill_comm_soapp_details !=' => '',  'medication_refill_comm_soapp_details IS NOT NULL']);
          $user_id = $login_user->id;

           // compare previous appointement user id with the current login user id
          $allcc_user_dtail = $allcc_user_dtail->matching('Appointments', function(\Cake\ORM\Query $q) use ($apt_id, $user_id) {

                  return $q->where(['Appointments.id !=' => $apt_id, 'Appointments.user_id' =>$user_id ]);
              });

          $allcc_user_dtail = $allcc_user_dtail->order(['ChiefCompliantUserdetails.id' => 'desc'])->first();

         // pr($allcc_user_dtail);die('sdsads');
          if(!empty($allcc_user_dtail)){

            $last_filled_soapp_comm_date = strtotime('+1 month',strtotime($allcc_user_dtail->created));

            if(time() < $last_filled_soapp_comm_date){

              $this->set('is_show_soapp_comm',0);
            }
            else{

              $is_show_soapp_comm = 1;
              $this->set('is_show_soapp_comm',1);
            }
          }
          else{
              $is_show_soapp_comm = 1;
              $this->set('is_show_soapp_comm',1);
          }
        }
        else{
          //die('dfdfds');
          $this->set('is_show_soapp_comm',0);
        }

        if(empty($active_sub_tab)){

          if($is_show_soapp_comm == 1){

            $active_sub_tab = 'soapp';
          }
          else{

            $active_sub_tab = 'padt';
          }
        }


        //$this->set('active_sub_tab',$active_sub_tab);

      }

      if($tab_number == 18 || 18 == $cur_next_steps[0]){

        if($step_id == 1 && empty($user_detail->chief_compliant_id)){

            $this->ChiefCompliantUserdetails->query()
                ->update()
                ->set(['current_tab_number' => 3])
                ->where(['appointment_id' => $apt_id])
                ->execute();
            $this->redirect($this->referer());
        }
        if($step_id == 1){

          $covid_questions = $this->CommonQuestions->find('all')->where(['tab_number' => 18,'specialization_id' => 1])->toArray();
          $phq_9_questions = $this->CommonQuestions->find('all')->where(['tab_number' => 'phq-9'])->toArray();
        }
        else{

          $covid_questions = $this->CommonQuestions->find('all')->where(['tab_number' => 'covid2'])->toArray();
          $phq_9_questions = $this->CommonQuestions->find('all')->where(['tab_number' => 'phq2'])->toArray();
        }


      }

      if($tab_number == 19 || 19 == $cur_next_steps[0]){

        if($step_id == 2){

           $show_tab_19 = 0;
           if(!empty($login_user->dob)){

            $user_dob = $this->CryptoSecurity->decrypt(base64_decode($login_user->dob),SEC_KEY);
            $now = Time::now();
            $age = abs($now->year - date('Y',strtotime($user_dob)));
            if($age >= 18 && $age <= 59 ){

              $show_tab_19 = 1;
            }

           }

          if($show_tab_19 == 0){

            $this->ChiefCompliantUserdetails->query()
                  ->update()
                  ->set(['current_tab_number' => 4])
                  ->where(['appointment_id' => $apt_id])
                  ->execute();
                  $this->redirect($this->referer());
          }

        }

        $phq_9_questions = $this->CommonQuestions->find('all')->where(['tab_number' => 'phq-9'])->toArray();
      }

      if($tab_number == 20 || 20 == $cur_next_steps[0])
      {

        //get the questions regarding cronic pain assessments
        // $cronic_pain_assessment_questions = $this->CommonQuestions->find('all')->where(['tab_number' => 'chronic pain assessment'])->toArray();
        $chronicPainAssessmentTab = array();
          // $chronicPainAssessmentTab = array('0' =>'tmb','1' =>'thc','2' =>'thp','3' =>'other','4' =>'ort');
           $chronicPainAssessmentTab = array('pain_assessments' =>'Pain assessments','treatment_history' =>'Treatment history','opioid_overdose_risk' =>'Opioid overdose risk','opioid_risk_tool' =>'Opioid risk tool');

            if(!empty($chronicPainAssessmentTab)){
              if(!empty($user_detail->active_sub_tab)){

                $active_sub_tab = $user_detail->active_sub_tab;
              }
              else
              {
                $active_sub_tab = current($chronicPainAssessmentTab);
              }
            }
            else
            {
              $this->ChiefCompliantUserdetails->query()
                      ->update()
                      ->set(['current_tab_number' => 18])
                      ->where(['appointment_id' => $apt_id])
                      ->execute();
                      $this->redirect($this->referer());
            }



        //get the questions regarding cronic pain assessments
        // $cronic_pain_assessment_questions = $this->CommonQuestions->find('all')->where(['tab_number' => 'chronic pain assessment'])->toArray();
        $cronic_pain_assessment_tmb_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '%pain_assessments chronic pain assessment%'])->toArray();
        $cronic_pain_assessment_thc_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '%treatment_history chronic pain assessment%'])->toArray();
        $cronic_pain_opioid_overdose_risk_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '%opioid_overdose_risk chronic pain assessment%'])->toArray();
        $cronic_pain_assessment_ort_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '%ort%'])->toArray();

        $cronic_pain_assessment_conditions = $commonTable->find('all')->where(['cond_type' => 9])->toArray();
        //pr($cronic_pain_assessment_conditions); die;
        $all_chronic_medication_detail = $this->ChiefCompliantMedication ->find('list', [
            'keyField' => 'id',
            'valueField' => function ($e) {

                        return $e->layman_name;
                    }
                  ])->where(['medication_disease' => 'chronic pain medicine'])->toArray();
      }

      if($tab_number == 22 || 22 == $cur_next_steps[0]){

          $focusStory_question = $this->CommonQuestions->find('all')->where(['tab_number' => 'focus history'])->toArray();
      }
      $old_internal_taps1_assessment_detail = '';
      if(!empty($user_detail->internal_taps1_assessment_detail)){

        $old_internal_taps1_assessment_detail = @unserialize(Security::decrypt(base64_decode($user_detail->internal_taps1_assessment_detail),SEC_KEY));
        //pr($old_internal_taps1_assessment_detail);die;
      }
      if($tab_number == 23 || 23 == $cur_next_steps[0]){

        $temp_cronic_cond = array();
        if(!empty($user_detail->chronic_condition) && !is_array($user_detail->chronic_condition)){

          $temp_cronic_cond =  @unserialize(Security::decrypt(base64_decode($user_detail->chronic_condition),SEC_KEY));
        }
        // if($step_id == 25)
        // {
        //   $temp_assess_cond = array('general_tap','taps1','taps2');
        //   $temp_cronic_cond = array_merge($temp_assess_cond,$temp_cronic_cond);
        //   //pr($temp_cronic_cond);die;
        //   if(!empty($old_internal_taps1_assessment_detail))
        //   {
        //     $unique_taps1_val = array_unique($old_internal_taps1_assessment_detail);
        //     // pr(count($unique_taps1_val));die;
        //     if(in_array("Never",$unique_taps1_val) && count($unique_taps1_val) == 1)
        //     {
        //       // die('mmmm');
        //       $temp_cronic_cond = array_diff($temp_cronic_cond,['taps2']);
        //       $temp_cronic_cond = array_values(array_filter($temp_cronic_cond));
        //     }
        //   }
        // // pr($temp_cronic_cond);die;
        // }

        //remove the other condition
        if(($temp_key = array_search('other', $temp_cronic_cond)) !== false){

          unset($temp_cronic_cond[$temp_key]);
        }
        if(($temp_key = array_search('none', $temp_cronic_cond)) !== false){

          unset($temp_cronic_cond[$temp_key]);
        }
        //pr($temp_cronic_cond); die;
        if(!empty($temp_cronic_cond)){

          if(!empty($user_detail->active_sub_tab)){

            $active_sub_tab = $user_detail->active_sub_tab;
          }
          else
          {
            $active_sub_tab = current($temp_cronic_cond);
          }
        }
        else if($step_id == 25)
        {
          $this->ChiefCompliantUserdetails->query()
                  ->update()
                  ->set(['current_tab_number' => 28])
                  ->where(['appointment_id' => $apt_id])
                  ->execute();
                  $this->redirect($this->referer());
        }
        else
        {
          $this->ChiefCompliantUserdetails->query()
                  ->update()
                  ->set(['current_tab_number' => 3])
                  ->where(['appointment_id' => $apt_id])
                  ->execute();
                  $this->redirect($this->referer());
        }

        $choronic_cad_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '%cad%','tab_number NOT LIKE' => '%chronic condition management%'])->toArray();
        $choronic_chf_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '%chf%','tab_number NOT LIKE' => '%chronic condition management%'])->toArray();
        $choronic_copd_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '%copd%','tab_number NOT LIKE' => '%chronic condition management%'])->order(['ques_order' => 'desc'])->toArray();
        $choronic_dmii_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '%dmii%','tab_number NOT LIKE' => '%chronic condition management%'])->order(['ques_order' => 'asc'])->toArray();
        $choronic_htn_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '%htn%','tab_number NOT LIKE' => '%chronic condition management%'])->order(['ques_order' => 'asc'])->toArray();
        $choronic_asthma_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '%asthma%','tab_number NOT LIKE' => '%chronic condition management%'])->order(['ques_order' => 'asc'])->toArray();       


        //pr($choronic_asthma_question);die;
        $or_filter = array();
        if(!empty($temp_cronic_cond) && is_array($temp_cronic_cond)){

          foreach ($temp_cronic_cond as $key => $value) {

            $value = strtolower($value);
            $or_filter[]['tab_number LIKE'] = '%'.$value.'%';
          }
        }
       // pr($or_filter);

        $choronic_general_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '%chronic condition management%','OR' => $or_filter,'step_id' => 18])->order(['ques_order' => 'asc'])->toArray(); //['tab_number LIKE' => '%chronic condition management%','OR' => $or_filter,'step_id' => 18]


        if($active_sub_tab == 'general' && empty($choronic_general_question) && $step_id != 25){

          $this->ChiefCompliantUserdetails->query()
                  ->update()
                  ->set(['current_tab_number' => 3])
                  ->where(['appointment_id' => $apt_id])
                  ->execute();
                  $this->redirect($this->referer());
        }

       //pr($choronic_copd_question);die;


      }

      if($tab_number == 24 || 24 == $cur_next_steps[0])
      {

        $chronicCondition = array('asthma' => 'Asthma','cad' =>'Coronary artery disease','chf' =>'Congestive heart failure','copd' =>'Chronic obstructive pulmonary disease','dmii' =>'Diabetes','htn'=>'Hypertension','other' =>'Other');

        //$chronicCondition = array('cad' =>'Coronary artery disease','chf' =>'Congestive heart failure','dmii' =>'Diabetes','htn'=>'Hypertension','other' =>'Other');

      }

      if($tab_number == 25 || 25 == $cur_next_steps[0])
      {
        $cancer_cc_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '25'])->order(['ques_order' => 'asc'])->toArray();
       // pr($cancer_cc_question);die;
      }

      if($tab_number == 26 || 26 == $cur_next_steps[0])
      {
        $temp_cancer_conditions = array();
        $cur_cancer_chief_compliant = '';
        if(!empty($user_detail) && !empty($user_detail->cancer_conditions)){

          $temp_cancer_conditions = @unserialize(Security::decrypt(base64_decode($user_detail->cancer_conditions), SEC_KEY));

        }

        $rotated_cancer_conditions = array();
        //check the in cancer condition array, breast cancer and throat cancer (esophageal) exist
        //rorate the cancer history tab for breast cancer and throat cancer (esophageal)
        if(is_array($temp_cancer_conditions) && !empty($temp_cancer_conditions)){

          foreach ($temp_cancer_conditions as $key => $value) {
            $value = strtolower($value);
            if(in_array($value, ['breast cancer','throat cancer (esophageal)','brain cancer','lung cancer',"stomach cancer","kidney cancer",'colon-rectal cancer','cervical cancer','ovarian cancer','prostate cancer','uterine cancer','vulvar cancer','liver cancer','thyroid cancer','vaginal cancer','leukemia','pancreatic cancer'])){
            //if(in_array($value, ['breast cancer','throat cancer (esophageal)','brain cancer',"stomach cancer","kidney cancer",'colon cancer','cervical cancer','ovarian cancer','prostate cancer'])){

              $rotated_cancer_conditions[] = $value;
            }

          }
        }
        if(!empty($rotated_cancer_conditions)){
          if(empty($user_detail->already_asked_cc_details) || !empty($edited_tab))
          {
            // if it is first Cancer condition,  !empty($edited_tab) condition applied because of forward and back feature because if request come from tab clicking
            $cur_cancer_chief_compliant = $rotated_cancer_conditions[0] ;
            $this->set('cur_cancer_chief_compliant', $cur_cancer_chief_compliant );
          }
          else
          {
            // get the next CC
            $tmp_already_asked_cc_details = explode(',', $user_detail->already_asked_cc_details) ;
            $tmp_key = array_search(end($tmp_already_asked_cc_details), $rotated_cancer_conditions);
            if(!isset($rotated_cancer_conditions[$tmp_key+1])){

              $this->ChiefCompliantUserdetails->query()
                      ->update()
                      ->set(['current_tab_number' => 27])
                      ->where(['appointment_id' => $apt_id])
                      ->execute();
              $this->redirect($this->referer());
            }
            else{

              $cur_cancer_chief_compliant = $rotated_cancer_conditions[$tmp_key+1];
              $this->set('cur_cancer_chief_compliant', $cur_cancer_chief_compliant );
            }

          }
        }
        else{

          $this->ChiefCompliantUserdetails->query()
                      ->update()
                      ->set(['current_tab_number' => 27])
                      ->where(['appointment_id' => $apt_id])
                      ->execute();
              $this->redirect($this->referer());
        }

        /*$show_breast_cancer_tab = 0;

        if(!empty($temp_cancer_conditions) && is_array($temp_cancer_conditions) && (in_array("Breast cancer", $temp_cancer_conditions) || in_array("breast cancer", $temp_cancer_conditions))){

          $show_breast_cancer_tab = 1;
        }

        if(!$show_breast_cancer_tab){

          $this->ChiefCompliantUserdetails->query()
              ->update()
              ->set(['current_tab_number' => 27])
              ->where(['appointment_id' => $apt_id])
              ->execute();
              $this->redirect($this->referer());
        }*/

        //$cur_cancer_chief_compliant = $cur_cancer_chief_compliant == 'throat cancer (esophageal)' ? "esophageal cancer" : $cur_cancer_chief_compliant;

        if($cur_cancer_chief_compliant == 'throat cancer (esophageal)'){

          $cur_cancer_chief_compliant = 'esophageal cancer';
        }
        elseif($cur_cancer_chief_compliant == 'colon-rectal cancer'){

          $cur_cancer_chief_compliant = 'colon cancer';
        }

        $cancer_history_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => "%".$cur_cancer_chief_compliant."%"])->order(['ques_order' => 'asc'])->toArray();
        //pr($cancer_history_question);die;
      }

      if($tab_number == 27 || 27 == $cur_next_steps[0])
      {
        $is_show_chemo_assessment = 0;
        if(!empty($user_detail) && !empty($user_detail->cancer_history_detail)){

          $temp_cancer_history = @unserialize(Security::decrypt(base64_decode($user_detail->cancer_history_detail),SEC_KEY));
          if(!empty($temp_cancer_history)){

            foreach ($temp_cancer_history as $key => $value) {

              if(isset($value[343]) && (in_array('Chemotherapy', $value[343]) || in_array('chemotherapy', $value[343]) || in_array("Combo therapy (chemo/radiation)", $value[343]) || in_array("combo therapy (chemo/radiation)", $value[343]))){

                $is_show_chemo_assessment = 1;
              }
              elseif(isset($value[399]) && (in_array('Chemotherapy', $value[399]) || in_array('chemotherapy', $value[399]) || in_array("Combo therapy (chemo/radiation)", $value[399]) || in_array("combo therapy (chemo/radiation)", $value[399]))){

                $is_show_chemo_assessment = 1;
              }
              elseif(isset($value[404]) && (in_array('Chemotherapy', $value[404]) || in_array('chemotherapy', $value[404]) || in_array("Combo therapy (chemo/radiation)", $value[404]) || in_array("combo therapy (chemo/radiation)", $value[404]))){

                $is_show_chemo_assessment = 1;
              }
              elseif(isset($value[432]) && (in_array('Chemotherapy', $value[432]) || in_array('chemotherapy', $value[432]) || in_array("Combo therapy (chemo/radiation)", $value[432]) || in_array("combo therapy (chemo/radiation)", $value[432]))){

                $is_show_chemo_assessment = 1;
              }
              elseif(isset($value[439]) && (in_array('Chemotherapy', $value[439]) || in_array('chemotherapy', $value[439]) || in_array("Combo therapy (chemo/radiation)", $value[439]) || in_array("combo therapy (chemo/radiation)", $value[439]))){

                $is_show_chemo_assessment = 1;
              }
              elseif(isset($value[452]) && (in_array('Chemotherapy', $value[452]) || in_array('chemotherapy', $value[452]) || in_array("Combo therapy (chemo/radiation)", $value[452]) || in_array("combo therapy (chemo/radiation)", $value[452]))){

                $is_show_chemo_assessment = 1;
              }

            }
          }

          //pr($temp_cancer_history);die;
        }
        $this->set('is_show_chemo_assessment', $is_show_chemo_assessment);

       /* //if chemo therphy assessment is not shown the move to the next step
         $current_tab_number = $step_id == 19 ? 28 :4;
        if($is_show_chemo_assessment == 0){

          $this->ChiefCompliantUserdetails->query()
                      ->update()
                      ->set(['current_tab_number' => $current_tab_number])
                      ->where(['appointment_id' => $apt_id])
                      ->execute();
              $this->redirect($this->referer());
        }*/
        $cancer_assessments = $commonTable->find('all')->where(['cond_type' => 6])->toArray();
        $cancer_life_quality_assessments = $commonTable->find('all')->where(['cond_type' => 7])->toArray();
        $cancer_chemo_assessments = $commonTable->find('all')->where(['cond_type' => 8])->toArray();
        $cancer_covid_question = $this->CommonQuestions->find('all')->where(['tab_number IN' =>['covid-oncology'],'step_id' => 19])->order(['ques_order' => 'asc'])->toArray();




      }
      //pr($tab_number); die;
      if($tab_number == 28 || 28 == $cur_next_steps[0])
      {
        if($step_id == 25)
        {
          $cancer_mh_question = $this->CommonQuestions->find('all')->where(['tab_number IN' =>['nw','sh','pfh','pmh'],'step_id IN' => [19,25],'specialization_id' => 9])->order(['ques_order' => 'asc'])->toArray();
        }
        elseif($step_id == 26)
        {
          $cancer_mh_question = $this->CommonQuestions->find('all')->where(['tab_number IN' =>['sh','pfh','pmh','mh','ah'],'step_id IN' => [19,26],'specialization_id' => 1])->order(['ques_order' => 'asc'])->toArray();
        }
        else
        {
        $cancer_mh_question = $this->CommonQuestions->find('all')->where(['tab_number IN' =>['pfh','sh','psh','ob','pmh'],'step_id' => 19])->order(['ques_order' => 'asc'])->toArray();
        }
        // $oncology_pmh_question = $this->CommonQuestions->find('all')->where(['tab_number' =>'pmh','step_id' => 19])->order(['ques_order' => 'asc'])->toArray();
        // $covid_oncology_question = $this->CommonQuestions->find('all')->where(['tab_number' =>'covid-oncology','step_id' => 19])->order(['ques_order' => 'asc'])->toArray();
        //$ob_estrogen_treatments_que = $commonTable->find('all')->where(['cond_type' => 9])->toArray();
        //pr($cancer_mh_question); die;

      }

      if($tab_number == 29 || 29 == $cur_next_steps[0])
      {
        $preop_postop_questions = $this->CommonQuestions->find('all')->where(['tab_number' => '20'])->toArray();
        //pr($preop_postop_questions);die;

      }

      if($tab_number == 30 || 30 == $cur_next_steps[0])
      {
        $cancer_followup_general_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '30'])->order(['ques_order' => 'asc'])->toArray();
        //pr($cancer_followup_general_question);die;
      }


      if($tab_number == 31 || 31 == $cur_next_steps[0])
      {
        $cancer_followup_medical_history_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '31'])->order(['ques_order' => 'asc'])->order(['id' => 'asc'])->toArray();


        // $followup_medical_history_detail = array();
        //
         // $getSavedData = $this->ChiefCompliantUserdetails->find('all')->where(['appointment_id' => $apt_id])->first();
         //
         //
         // if(isset($getSavedData['followup_medical_history_detail']) && !empty($getSavedData['followup_medical_history_detail']))
         // {
         //   $existdetail = unserialize(Security::decrypt(base64_decode($getSavedData['followup_medical_history_detail']), SEC_KEY));
         //
         //   if(!empty($existdetail))
         //   {
         //     $tmparray = array();
         //     $followup_medical_history_detail = array();
         //     $tmparray['medical_history'] = unserialize(Security::decrypt(base64_decode($login_user->medical_history), SEC_KEY));
         //     $is_check_med = (Security::decrypt(base64_decode($login_user->is_check_med_his), SEC_KEY));
         //     $tmparray['followup_medical_history_detail']['476'] = $is_check_med == 1 ? 'Yes' :'No';
         //
         //     $tmparray['surgical_history'] = unserialize(Security::decrypt(base64_decode($login_user->surgical_history), SEC_KEY));
         //     $is_check_surg_his = (Security::decrypt(base64_decode($login_user->is_check_surg_his), SEC_KEY));
         //     $tmparray['followup_medical_history_detail']['477'] = $is_check_surg_his == 1 ? 'Yes' :'No';
         //
         //     $tmparray['allergy_history'] = unserialize(Security::decrypt(base64_decode($login_user->allergy_history), SEC_KEY));
         //     $is_check_allergy_his = (Security::decrypt(base64_decode($login_user->is_check_allergy_his), SEC_KEY));
         //     $tmparray['followup_medical_history_detail']['497'] = $is_check_allergy_his == 1 ? 'Yes' :'No';
         //     $mergefollow_editM = array_merge($tmparray,$existdetail);
         //     $followup_medical_history_detail = base64_encode(Security::encrypt((serialize($mergefollow_editM)), SEC_KEY));
         //   }
         // }
         // else {
         //
         //   $tmparray = array();
         //   $followup_medical_history_detail = array();
         //   $tmparray['medical_history'] = unserialize(Security::decrypt(base64_decode($login_user->medical_history), SEC_KEY));
         //   $is_check_med = (Security::decrypt(base64_decode($login_user->is_check_med_his), SEC_KEY));
         //   $tmparray['followup_medical_history_detail']['476'] = $is_check_med == 1 ? 'Yes' :'No';
         //
         //   $tmparray['surgical_history'] = unserialize(Security::decrypt(base64_decode($login_user->surgical_history), SEC_KEY));
         //   $is_check_surg_his = (Security::decrypt(base64_decode($login_user->is_check_surg_his), SEC_KEY));
         //   $tmparray['followup_medical_history_detail']['477'] = $is_check_surg_his == 1 ? 'Yes' :'No';
         //
         //   $tmparray['allergy_history'] = unserialize(Security::decrypt(base64_decode($login_user->allergy_history), SEC_KEY));
         //   $is_check_allergy_his = (Security::decrypt(base64_decode($login_user->is_check_allergy_his), SEC_KEY));
         //   $tmparray['followup_medical_history_detail']['497'] = $is_check_allergy_his == 1 ? 'Yes' :'No';
         //   $followup_medical_history_detail = base64_encode(Security::encrypt((serialize($tmparray)), SEC_KEY));
         // }

         // if(!empty($followup_medical_history_detail))
         // {
         //   $this->ChiefCompliantUserdetails->query()
         //      ->update()
         //      ->set(['followup_medical_history_detail' => $followup_medical_history_detail])
         //      ->where(['appointment_id' => $apt_id])
         //      ->execute();
         // }
      }


      if($tab_number == 32 || 32 == $cur_next_steps[0])
      {

        $is_show_chemo_assessment = 0;

        if(isset($user_detail->followup_parent_id) && !empty($user_detail->followup_parent_id))
        {
          $user_detail = $this->ChiefCompliantUserdetails->find('all')->where(['id' =>$user_detail->followup_parent_id])->first();

         if(!empty($user_detail) && !empty($user_detail->cancer_history_detail)){

          $temp_cancer_history = @unserialize(Security::decrypt(base64_decode($user_detail->cancer_history_detail),SEC_KEY));

          if(!empty($temp_cancer_history)){

            foreach ($temp_cancer_history as $key => $value) {

              if(isset($value[343]) && (in_array('Chemotherapy', $value[343]) || in_array('chemotherapy', $value[343]) || in_array("Combo therapy (chemo/radiation)", $value[343]) || in_array("combo therapy (chemo/radiation)", $value[343]))){

                $is_show_chemo_assessment = 1;
              }
              elseif(isset($value[399]) && (in_array('Chemotherapy', $value[399]) || in_array('chemotherapy', $value[399]) || in_array("Combo therapy (chemo/radiation)", $value[399]) || in_array("combo therapy (chemo/radiation)", $value[399]))){

                $is_show_chemo_assessment = 1;
              }
              elseif(isset($value[404]) && (in_array('Chemotherapy', $value[404]) || in_array('chemotherapy', $value[404]) || in_array("Combo therapy (chemo/radiation)", $value[404]) || in_array("combo therapy (chemo/radiation)", $value[404]))){

                $is_show_chemo_assessment = 1;
              }
              elseif(isset($value[432]) && (in_array('Chemotherapy', $value[432]) || in_array('chemotherapy', $value[432]) || in_array("Combo therapy (chemo/radiation)", $value[432]) || in_array("combo therapy (chemo/radiation)", $value[432]))){

                $is_show_chemo_assessment = 1;
              }
              elseif(isset($value[439]) && (in_array('Chemotherapy', $value[439]) || in_array('chemotherapy', $value[439]) || in_array("Combo therapy (chemo/radiation)", $value[439]) || in_array("combo therapy (chemo/radiation)", $value[439]))){

                $is_show_chemo_assessment = 1;
              }
              elseif(isset($value[452]) && (in_array('Chemotherapy', $value[452]) || in_array('chemotherapy', $value[452]) || in_array("Combo therapy (chemo/radiation)", $value[452]) || in_array("combo therapy (chemo/radiation)", $value[452]))){

                $is_show_chemo_assessment = 1;
              }

            }
          }

          //pr($temp_cancer_history);die;
        }
      }


        $cancer_assessments = $commonTable->find('all')->where(['cond_type' => 6])->toArray();
        $cancer_life_quality_assessments = $commonTable->find('all')->where(['cond_type' => 7])->toArray();
        $cancer_chemo_assessments = $commonTable->find('all')->where(['cond_type' => 8])->toArray();

        $this->set('is_show_chemo_assessment', $is_show_chemo_assessment);

      }

      if($tab_number == 33 || 33 == $cur_next_steps[0])
      {

        $hospital_er_question = $this->CommonQuestions->find('all')->where(['tab_number LIKE' => '33'])->toArray();
        //pr($hospital_er_question);die;
      }
      if($tab_number == 23 || 23 == $cur_next_steps[0] && $step_id == 25)
      {
      $internal_general_assessment_question = $this->CommonQuestions->find('all')->where(['tab_number' => 'gen','step_id' => 25])->order(['ques_order' => 'desc'])->toArray();
        // pr($internal_general_assessment_question);
        $internal_taps1_assessment_question = $this->CommonQuestions->find('all')->where(['tab_number' => 'taps1','step_id' => 25])->toArray();
        $internal_taps2_assessment_question = $this->CommonQuestions->find('all')->where(['tab_number' => 'taps2','step_id' => 25])->toArray();
      }


  // echo 'hi'; die;
// pr($edited_tab); die;
    if($this->request->is(['post', 'put']) && empty($edited_tab)){ // forward and back feature related code, checking $edited_tab , $edited_tab  should be empty because its mean this request is from tab url
 // echo 'hi'; die;
       //pr($this->request->data); die;

       if(isset($this->request->data['time']) && $this->request->data['time'] != ''){
       $timemanage = array();
       $timemanage['user_id'] = $uid;
       $timemanage['appointment_id'] = $apt_id;
       $timemanage['step_id'] = $step_id;
       $timemanage['form_type'] = 'Pre-Appointment Form';
       $timemanage['tab_number'] = isset($this->request->data['tab_number'])?$this->request->data['tab_number']:'';
       $timemanage['time'] = isset($this->request->data['time']) ? $this->request->data['time']:'';
       $this->timeManagement($timemanage);
      }

      $tab_number = $this->request->getData('tab_number');
    
     if($tab_number == 1)
     {
      // year array for year whitelisting validation
      $start_year = 1930;
      $curyear = date("Y");
      $year_whitelist_arr = array();
      for($curyear ; $curyear>= $start_year ; $curyear--){
        $year_whitelist_arr[] = $curyear ;
      }
      $year_whitelist_arr[] = ''; $year_whitelist_arr[] = 1;

      $month_whitelist_arr = array('',0,1,2,3,4,5,6,7,8,9,10,11);

      $ccl_whitlist_arr = array();
      $ccl_whitlist_arr [] = '1 hour';
      $ccl_whitlist_arr [] = '2 hours';
      $ccl_whitlist_arr [] = '3 hours';
      $ccl_whitlist_arr [] = '6 hours';
      $ccl_whitlist_arr [] = '12 hours';

      for ($i=1; $i < 14 ; $i++) {
        $ccl_whitlist_arr[] =  $i. ($i>1 ?' days' : ' day') ;
      }
      for ($i=2; $i < 7 ; $i++) {
         $ccl_whitlist_arr[] =  $i. ($i>1 ?' weeks' : ' week') ;
      }
      for ($i=2; $i < 12 ; $i++) {
         $ccl_whitlist_arr[] =  $i. ($i>1 ?' months' : ' month') ;
      }
      for ($i=1; $i < 11 ; $i++) {
         $ccl_whitlist_arr[] =  $i. ($i>1 ?' years' : ' year') ;
      }
      $ccl_whitlist_arr[] = "10+ years";

      $lpd_whitelist_check = true;
      if(!empty($this->request->getData('last_period_date')))
      $lpd_whitelist_check = \DateTime::createFromFormat("m-d-Y", $this->request->getData('last_period_date'));

      // whitelisting validation for fields in new appointment tab 1  start
    if(
      $lpd_whitelist_check === false ||
    // empty($this->request->getData('main_chief_compliant_id')) ||
    // empty($this->request->getData('chief_compliant_length')) ||
    (!empty($this->request->getData('chief_compliant_length')) && !in_array($this->request->getData('chief_compliant_length'), $ccl_whitlist_arr )) ||
    (!empty($this->request->getData('currently_pregnant_week')) && (trim($this->request->getData('currently_pregnant_week')) != '') && !is_numeric($this->request->getData('currently_pregnant_week'))) ||
    (!empty($this->request->getData('currently_pregnant_days')) && (trim($this->request->getData('currently_pregnant_days')) != '') && !is_numeric($this->request->getData('currently_pregnant_days'))) ||
    (!in_array($this->request->getData('is_curently_pregnant'), array('',0,1)))


    )
    {
        $this->Flash->error(__('Could not be saved. Please try again.'));
        return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
    }
    // whitelisting validation for fields in new appointment tab 1  end

    //remove the dupticate cc and synonyms of cc
    $symtomsArray = array();
    $symtomsArray[] = $this->request->getData('main_chief_compliant_id');
    if(is_array($this->request->getData('chief_compliant_id'))){

      $symtomsArray = array_merge($symtomsArray,$this->request->getData('chief_compliant_id'));
    }

    $symtomsArray = array_filter($symtomsArray);
    $symtomsArray = array_unique($symtomsArray) ;
    $symtomsArray = $this->checkSynonyms($symtomsArray);

    if(!empty($symtomsArray)){

      foreach ($symtomsArray as $key => $value) {

        if(strtolower(trim($value)) == strtolower(trim($this->request->data['main_chief_compliant_id']))){

            unset($symtomsArray[$key]);
            break;
        }
      }
    }

    $chief_compliant_id = $symtomsArray;
    //pr($chief_compliant_id);die;
    $chief_compliant_length =  $this->request->getData('chief_compliant_length');
    $compliant_symptom_ids = '';
    $symptom_from_tab1 = array();
    if(!empty($chief_compliant_id) && is_array($chief_compliant_id))
    {
      $chief_compliant_id = array_filter($chief_compliant_id);
      $chief_compliant_id = array_unique($chief_compliant_id);

      // for orthopedic module and orthopedic spine module the symptom compliant from tab 1 that are in database will be concatenated in mian chief compliant
      $temp_cc_id = '';

      if($apt_id_data->specialization_id == 3 || $apt_id_data->specialization_id == 4 || $apt_id_data->specialization_id == 7)
      {
          $query = $this->ChiefCompliants->find('list', [
                                      'keyField' => 'id',
                                      'valueField' => 'name'
                                  ])->where(['specialization_id' => $apt_id_data->specialization_id]);
          $chief_compliant_arr = $query->toArray();
          $i = 1;
          foreach ($chief_compliant_id as $key => $value)
          {
              $chief_compliant_arr =    array_map(
                      function($item)  {
                          // will remove extra white space and make it in lowercase
                          return strtolower(preg_replace('/\s+/', '', $item)) ;
                      },
                      $chief_compliant_arr
                  );
              if($tk = array_search(strtolower(preg_replace('/\s+/', '', $value)), $chief_compliant_arr))
              {

                //store the cc for detail tab when detail question is given.
                $check_temp_cc_detail = $this->ChiefCompliants->find('all')->where(['id'=>$tk])->first();
                if(!empty($check_temp_cc_detail) && !empty($check_temp_cc_detail->default_compliant_detail_ids)){

                  if($i == 3){

                    break;
                  }
                  $temp_cc_id .=  ','.$tk;
                  unset($chief_compliant_id[$key]);
                  $i++;
                }
              }
          }
        }
        else
        {

          $query = $this->ChiefCompliants->find('list', [
                                      'keyField' => 'id',
                                      'valueField' => 'name'
                                  ]);
          $chief_compliant_arr = $query->toArray();
          $i = 1;
          foreach ($chief_compliant_id as $key => $value) {
            $chief_compliant_arr =    array_map(
                      function($item)  {
                          // will remove extra white space and make it in lowercase
                          return strtolower(preg_replace('/\s+/', '', $item)) ;
                      },
                      $chief_compliant_arr
                  );

            if($tk = array_search(strtolower(preg_replace('/\s+/', '', $value)), $chief_compliant_arr))
            {
              //pr($tk);die;
              //store the cc for detail tab when detail question is given.
              $check_temp_cc_detail = $this->ChiefCompliants->find('all')->where(['id'=>$tk])->first();
              if(!empty($check_temp_cc_detail) && !empty($check_temp_cc_detail->default_compliant_detail_ids)){

                if($i == 3){

                  break;
                }
                $temp_cc_id .=  ','.$tk;
                unset($chief_compliant_id[$key]);
                $i++;
              }
            }
          }
        }
        // pr($temp_cc_id);
        // pr($chief_compliant_id);

        if(!empty($chief_compliant_id) && is_array($chief_compliant_id))
          //$symptom_from_tab1 = base64_encode(Security::encrypt((serialize($chief_compliant_id)), SEC_KEY));
          $symptom_from_tab1 = $chief_compliant_id;
        }

      $main_chief_compliant_id = $this->request->getData('main_chief_compliant_id');
      // main chief complaint id now changed to text field  start

      $random_chief_compliant = ''; // used when user enter other chief complaint that is not in database

      if(!empty($main_chief_compliant_id))
      {

        $query = $this->ChiefCompliants->find('list', [
                            'keyField' => 'id',
                            'valueField' => function ($e) {
                                                    return strtolower(preg_replace('/\s+/', '', $e->name));
                                                }
                        ]);

        // for orhthopedic and orthopedic spine module we are getting related chief complaint as there are common chief complaint in both module
        if($apt_id_data->specialization_id == 3 || $apt_id_data->specialization_id == 4 || $apt_id_data->specialization_id == 7)
        {
          $query = $this->ChiefCompliants->find('list', [
                            'keyField' => 'id',
                            'valueField' => function ($e) {
                                                    return strtolower(preg_replace('/\s+/', '', $e->name));
                                                }
                        ])->where(['specialization_id' => $apt_id_data->specialization_id ]);
        }

        $temp_cc_arr = $query->toArray();
        $tk = array_search(strtolower(preg_replace('/\s+/', '', $main_chief_compliant_id)), $temp_cc_arr) ;

        if($tk)
        {
          $main_chief_compliant_id = $tk ;
        }
        else
        { 
          $random_chief_compliant = $main_chief_compliant_id;
          $main_chief_compliant_id = '';
        }
      }

      // main chief complaint id now changed to text field  end
      if(!empty($temp_cc_id))
      {
        $main_chief_compliant_id = trim($main_chief_compliant_id.''.$temp_cc_id,','); // concatenate the symptoms id  to main chief compliant
      }

     // pr($random_chief_compliant);
     // pr($symptom_from_tab1);

      if(!empty($random_chief_compliant)){

        array_push($symptom_from_tab1,$random_chief_compliant);

        //$symptom_from_tab1 = $symptom_from_tab1;
      }
      if(!empty($this->request->getData('is_chief_complaint_doctor')))
      {
        $is_chief_complaint_doctor = $this->request->getData('is_chief_complaint_doctor');
        //pr($is_chief_complaint_doctor);die;
          if(!empty($is_chief_complaint_doctor && is_array($is_chief_complaint_doctor)))
          {
            $is_chief_complaint_doctor = array_filter($is_chief_complaint_doctor);
            // whitelisting validation for detail questions field start
             //pr($input);  die;
            foreach ($is_chief_complaint_doctor as $ky => $ve)
            {

              $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

               if(!empty($tempq)){
                 if(($tempq['options'] != '')){
                   $tempq = unserialize($tempq['options']);
                  if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                    $this->Flash->error(__('Could not be saved. Please try again.'));
                    return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                  }
                }
                else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
                {
                    if(!is_numeric($ve))
                    {
                      $this->Flash->error(__('Could not be saved. Please try again.'));
                      return $this->redirect($this->referer());
                    }

                }
                else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
                {
                  $checkDateFor = $this->General->checkDateFormat($ve);
                  if(!$checkDateFor)
                  {
                    $this->Flash->error(__('Could not be saved. Please try again.'));
                    return $this->redirect($this->referer());
                  }
                }
              }else{
              //pr($tempq);
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
              }
            }
      }

      if(!empty($this->request->getData('chief_complaint_psychiatry')))
      {
        $chief_complaint_psychiatry = $this->request->getData('chief_complaint_psychiatry');
        //pr($chief_complaint_psychiatry);die;
          if(!empty($chief_complaint_psychiatry && is_array($chief_complaint_psychiatry)))
          {
            $chief_complaint_psychiatry = array_filter($chief_complaint_psychiatry);
            // whitelisting validation for detail questions field start
             //pr($input);  die;
            foreach ($chief_complaint_psychiatry as $ky => $ve)
            {

              $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

               if(!empty($tempq)){
                 if(($tempq['options'] != '')){
                   $tempq = unserialize($tempq['options']);
                  if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                    $this->Flash->error(__('Could not be saved. Please try again.'));
                    return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                  }
                }
                else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
                {
                    if(!is_numeric($ve))
                    {
                      $this->Flash->error(__('Could not be saved. Please try again.'));
                      return $this->redirect($this->referer());
                    }

                }
                else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
                {
                  $checkDateFor = $this->General->checkDateFormat($ve);
                  if(!$checkDateFor)
                  {
                    $this->Flash->error(__('Could not be saved. Please try again.'));
                    return $this->redirect($this->referer());
                  }
                }
              }else{
              //pr($tempq);
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
              }
            }
      }

      

                $chief_compliant_id = $main_chief_compliant_id;
                $medication_name_id = $this->request->getData('medication_name_name');
                $medication_data = array();
                if(!empty($medication_name_id) && is_array($medication_name_id)){
                    // pr($medication_name_id);
                    $medication_name_id = array_filter($medication_name_id) ;
                    $medication_name_id = array_unique($medication_name_id);

                    $medication_dose = $this->request->getData('medication_dose');
                    $medication_how_often = $this->request->getData('medication_how_often');
                    if(is_array($medication_how_often))
                    $medication_how_often = array_filter($medication_how_often); //remove the empty value from the array
                  // pr($medication_how_often); die;
                    $medication_how_taken = $this->request->getData('medication_how_taken');

                    $i = 0 ;
                foreach ($medication_name_id as $key => $value) {
                    // $medication_data[$i]['medication_name_id'] = $value;

// whitelisting validation for medication how often field  start
    if(!empty($medication_how_often) && isset($medication_how_often[$key]) && !array_key_exists($medication_how_often[$key], $length_arr))
      {
       //  pr($medication_how_often); pr($length_arr); die;
       // echo 'hello4gh'; die;
        $this->Flash->error(__('Could not be saved. Please try again.'));
        return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
      }
   // whitelisting validation for medication how often field  end

                    $medication_data[$i]['medication_name_name'] = $value;
                    $medication_data[$i]['medication_dose'] = !empty($medication_dose[$key]) ?  $medication_dose[$key] : '';
                    $medication_data[$i]['medication_how_often'] = !empty($medication_how_often[$key]) ? $medication_how_often[$key] : '';
                    $medication_data[$i]['medication_how_taken'] = !empty($medication_how_taken[$key]) ? $medication_how_taken[$key] : '';
                        $i++;
                }
              }

// current_tab_number  max_visited_tab_number
if(empty($user_detail->current_tab_number) && empty($user_detail->max_visited_tab_number))
  $user_detail = $this->ChiefCompliantUserdetails->newEntity();  // create new row only at the first time  because at first time both field will be empty


// woman specific field start
if($login_user['gender'] == 0)
{

  $last_period_date = $this->request->getData('last_period_date');
  $last_period_info = $this->request->getData('last_period_info');
  $if_more_recent_papsmear = $this->request->getData('if_more_recent_papsmear');
  $last_pap_smear_date = $this->request->getData('last_pap_smear_date');
  $last_pap_smear_info = $this->request->getData('last_pap_smear_info');
  $user_detail->age_of_first_priod = $this->request->getData('age_of_first_priod');
  if(!empty($user_detail->age_of_first_priod))
    $user_detail->age_of_first_priod = base64_encode(Security::encrypt($user_detail->age_of_first_priod, SEC_KEY));

  $user_detail->is_curently_pregnant = $this->request->getData('is_curently_pregnant');
  if(!empty($user_detail->is_curently_pregnant))
    $user_detail->is_curently_pregnant = base64_encode(Security::encrypt($user_detail->is_curently_pregnant, SEC_KEY));

  $user_detail->current_baby_sex = $this->request->getData('current_baby_sex');

  // commented as now we are using tagsinput instead of multiselect
  if(!empty($user_detail->current_baby_sex) && is_array($user_detail->current_baby_sex))
  {
    foreach ($user_detail->current_baby_sex as $ky => $ve)
    {
      if(empty($ve)) unset($user_detail->current_baby_sex[$ky]) ;
      // whitelisting validation for current baby sex start
      if(!in_array($ve, array('', '0 male', '1 male', '2 male', '3 male', '4 male', '5 male', '0 female', '1 female', '2 female', '3 female', '4 female', '5 female' )))
      {
          $this->Flash->error(__('Could not be saved. Please try again.'));
          return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
      }
      // whitelisting validation for current baby sex end
    }
    $user_detail->current_baby_sex = implode(', ', $user_detail->current_baby_sex);
  }

  $user_detail->currently_pregnant_week = $this->request->getData('currently_pregnant_week');
  $user_detail->currently_pregnant_days = $this->request->getData('currently_pregnant_days');
  $user_detail->currently_pregnant_complication = $this->request->getData('currently_pregnant_complication');


  if($this->request->getData('is_curently_pregnant') != 1){
    $user_detail->currently_pregnant_week = '';
    $user_detail->currently_pregnant_days = '';
    $user_detail->currently_pregnant_complication = '';
    $user_detail->current_baby_sex = '' ;
  }

  if(!empty($user_detail->currently_pregnant_week))
    $user_detail->currently_pregnant_week = base64_encode(Security::encrypt($user_detail->currently_pregnant_week, SEC_KEY));
  if(!empty($user_detail->currently_pregnant_days))
    $user_detail->currently_pregnant_days = base64_encode(Security::encrypt($user_detail->currently_pregnant_days, SEC_KEY));
  if(!empty($user_detail->currently_pregnant_complication))
    $user_detail->currently_pregnant_complication = base64_encode(Security::encrypt($user_detail->currently_pregnant_complication, SEC_KEY));



  if(isset($if_more_recent_papsmear) && $if_more_recent_papsmear === '')
  {
    $user_detail->last_pap_smear_date = '';
    $user_detail->last_pap_smear_info = '';
    $user_detail->papsmear_month = '';
    $user_detail->papsmear_year = '';


  }
  else
  {

  // whitelisting validation for last period info field start
  if(
    !in_array($if_more_recent_papsmear, array('',0,1)) ||
  (!empty($last_pap_smear_info['papsmear_year'])  && !in_array($last_pap_smear_info['papsmear_year'], $year_whitelist_arr)) ||
  (!empty($last_pap_smear_info['papsmear_month'])  && !in_array($last_pap_smear_info['papsmear_month'], $month_whitelist_arr)) ||
  (isset($last_pap_smear_info['was_it_regular_or_not']) && !in_array($last_pap_smear_info['was_it_regular_or_not'], array('',0,1)))
  )
  {
    $this->Flash->error(__('Could not be saved. Please try again.'));
    return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
  }
  // whitelisting validation for last period info field end

  $user_detail->if_more_recent_papsmear = base64_encode(Security::encrypt($if_more_recent_papsmear, SEC_KEY));

  $user_table = TableRegistry::get('WomenSpecific');
  $papsmear_month = $last_pap_smear_info['papsmear_month'];
  if(!empty($papsmear_month))
  {
    // update the date in edit medical history
    $papsmear_month = base64_encode(Security::encrypt($papsmear_month, SEC_KEY));
    $user_detail->papsmear_month = trim($papsmear_month);
    $query = $user_table->query();
    $query->update()
      ->set(['papsmear_month' => $papsmear_month])
      ->where(['user_id' => $login_user['id']])
      ->execute();
  }
  $papsmear_year = $last_pap_smear_info['papsmear_year'];
  if(!empty($papsmear_year))
  {
    // update the date in edit medical history
    $papsmear_year = base64_encode(Security::encrypt($papsmear_year, SEC_KEY));
    $user_detail->papsmear_year = trim($papsmear_year);
    $query = $user_table->query();
    $query->update()
      ->set(['papsmear_year' => $papsmear_year])
      ->where(['user_id' => $login_user['id']])
      ->execute();
  }

  if(!empty($last_pap_smear_info) && $if_more_recent_papsmear == 1) {
    $user_detail->last_pap_smear_info = base64_encode(Security::encrypt(serialize($last_pap_smear_info), SEC_KEY));
  }else{
    $user_detail->last_pap_smear_info = '';
  }
    // $user_detail->last_pap_smear_info = serialize($last_pap_smear_info);
}

  if(!empty($last_period_date)){
        $last_period_date = Time::createFromFormat(
            'm-d-Y', // 'd-m-Y'
            $last_period_date
        );

    $user_detail->last_period_date = $last_period_date;
  }
  // pr($last_period_info); die;




  if(!empty($last_period_info)) {    
      if(
(isset($last_period_info['flow_duration_in_days']) && (trim($last_period_info['flow_duration_in_days']) != '') && !is_numeric($last_period_info['flow_duration_in_days'])) ||
(isset($last_period_info['cycle_length_in_days'])  && (trim($last_period_info['cycle_length_in_days']) != '') &&  !is_numeric($last_period_info['cycle_length_in_days'])) ||
(isset($last_period_info['was_it_regular_or_not']) && !in_array($last_period_info['was_it_regular_or_not'], array('',0,1)))
){
        // echo 'hello1'; die;
        $this->Flash->error(__('Could not be saved. Please try again.'));
        return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
  }
  // whitelisting validation for last period info field end

    // $user_detail->last_period_info = serialize($last_period_info);
    $user_detail->last_period_info = base64_encode(Security::encrypt(serialize($last_period_info), SEC_KEY));

  }





}

// woman specific field end
// sexual info related field start


  $sexual_info = $this->request->getData('sexual_info');
  // pr($sexual_info); die;
  if(!empty($sexual_info) && is_array($sexual_info)){

    if(isset($sexual_info['sexual_active_or_not']) && $sexual_info['sexual_active_or_not'] != 1){
      unset($sexual_info['no_of_partner']); unset($sexual_info['protection_used_or_not']); unset($sexual_info['protection_method']);
    }
    if(isset($sexual_info['protection_used_or_not']) && $sexual_info['protection_used_or_not'] != 1){
      unset($sexual_info['protection_method']);
    }

    // $user_detail->sexual_info  =  base64_encode(serialize($sexual_info)) ;
    $user_detail->sexual_info  =  base64_encode(Security::encrypt((serialize($sexual_info)), SEC_KEY));

  }

// sexual info related field end
  $user_detail->current_step_id  =  $step_id ;
  $user_detail->appointment_id  =  $apt_id ;
  if(!empty($symptom_from_tab1))
    $user_detail->symptom_from_tab1  = base64_encode(Security::encrypt((serialize($symptom_from_tab1)), SEC_KEY));
  //   $user_detail->symptom_from_tab1  = base64_encode(Security::encrypt($symptom_from_tab1, SEC_KEY)) ;

if(!empty($random_chief_compliant))
  // $user_detail->random_chief_compliant  = $random_chief_compliant  ;
  $user_detail->random_chief_compliant  = base64_encode(Security::encrypt($random_chief_compliant, SEC_KEY))   ;

  if(!empty($chief_compliant_id))
  // $user_detail->chief_compliant_id = $chief_compliant_id  ;
    $user_detail->chief_compliant_id  = base64_encode(Security::encrypt($chief_compliant_id, SEC_KEY))  ;

  if(!empty($chief_compliant_length))
  $user_detail->compliant_length  = $chief_compliant_length;
if(!empty($compliant_symptom_ids))
  // $user_detail->compliant_symptom_ids  = $compliant_symptom_ids;
  $user_detail->compliant_symptom_ids = base64_encode(Security::encrypt($compliant_symptom_ids, SEC_KEY));

  // $user_detail->compliant_medication_detail = serialize($medication_data);
if(!empty($medication_data))
  $user_detail->compliant_medication_detail = base64_encode(Security::encrypt(serialize($medication_data), SEC_KEY));
if(!empty($is_chief_complaint_doctor))
  $user_detail->is_chief_complaint_doctor = base64_encode(Security::encrypt(serialize($is_chief_complaint_doctor), SEC_KEY));
if(!empty($chief_complaint_psychiatry))
  $user_detail->chief_complaint_psychiatry = base64_encode(Security::encrypt(serialize($chief_complaint_psychiatry), SEC_KEY));
// if(!empty($internal_general_assessment_detail))
//   $user_detail->internal_general_assessment_detail = base64_encode(Security::encrypt(serialize($internal_general_assessment_detail), SEC_KEY));

// if(!empty($internal_taps1_assessment_detail))
//   $user_detail->internal_taps1_assessment_detail = base64_encode(Security::encrypt(serialize($internal_taps1_assessment_detail), SEC_KEY));

// if(!empty($internal_taps2_assessment_detail))
//   $user_detail->internal_taps2_assessment_detail = base64_encode(Security::encrypt(serialize($internal_taps2_assessment_detail), SEC_KEY));
//  pr($user_detail->internal_general_assessment_detail);

// chronic condtion(HTN, CAD, COPD, Daibetes, Asthma)
      $chronic_condition = $this->request->getData('chronic_condition');
      // Blank assement/ACP when we select none of these
      if(!empty($chronic_condition) && $chronic_condition[0] == 'none')
      {
        $user_detail->chronic_cad_detail = null;
        $user_detail->chronic_dmii_detail = null;
        $user_detail->chronic_chf_detail = null;
        $user_detail->chronic_copd_detail = null;
        $user_detail->chronic_htn_detail = null;
        $user_detail->chronic_asthma_detail = null;
        $user_detail->chronic_general_detail = null;
      }
      if(!empty($chronic_condition) && is_array($chronic_condition)){

        sort($chronic_condition);
      }

      //update past medical history of patient
      if(!empty($chronic_condition)){

        if(!empty($login_user->medical_history)){

          $login_user->medical_history = @unserialize(Security::decrypt(base64_decode($login_user->medical_history),SEC_KEY));
        }

        $temp_pmh_cond = array();

        if(!empty($login_user->medical_history) && is_array($login_user->medical_history)){

          $temp_pmh_cond = explode(", ",strtolower(implode(", ",array_column($login_user->medical_history, 'name'))));
        }
          $chronic_question = $this->CommonQuestions->find('all')->where(['id' => '557'])->first();
          $temp_cond = array();
          $chronicCondition = unserialize($chronic_question->options) ;

          // $chronicCondition = array('asthma' => 'Asthma','cad' =>'Coronary artery disease','chf' =>'Congestive heart failure','copd' =>'Chronic obstructive pulmonary disease','dmii' =>'Diabetes','htn'=>'Hypertension');
          //  pr($chronic_option);
          // pr($chronicCondition);die;

          foreach ($chronic_condition as $key => $value) {

            if(isset($chronicCondition[$value])){

              $temp_cond_name = strtolower($chronicCondition[$value]);

              if(!in_array($temp_cond_name, $temp_pmh_cond)){

                $temp_cond[] = array('name' => $temp_cond_name,'year' => '');
              }
            }
          }

        $login_user->medical_history = !empty($login_user->medical_history) && is_array($login_user->medical_history) ? array_merge($login_user->medical_history,$temp_cond) : $temp_cond;

        $login_user->medical_history = !empty($login_user->medical_history) ? base64_encode(Security::encrypt(serialize($login_user->medical_history),SEC_KEY)) : '';

        $this->Users->save($login_user);
      }


      if(!empty($chronic_condition))
      {
        $user_detail->chronic_condition =  base64_encode(Security::encrypt((serialize($chronic_condition)), SEC_KEY));
      }
// End chronic condition


  // pr($cur_next_steps); die;
  /*if($step_id == 7){

    $user_detail->current_tab_number = 6;

  }
  else{
    // if step 2 is not in the current step path
    if(in_array(2, $cur_next_steps)){
      $user_detail->current_tab_number = 2 ;
    } else{
      $user_detail->current_tab_number = 4 ;
    }
  }*/


//pr($cur_next_steps);die;

  // if step 2 is not in the current step path
  if(in_array(6, $cur_next_steps)){

      $user_detail->current_tab_number = 6 ;
      $tab_number = 6;
    }
  elseif(in_array(2, $cur_next_steps)){
      $user_detail->current_tab_number = 2 ;
      $tab_number = 2 ;
    }
    else{

      $user_detail->current_tab_number = 4 ;
      $tab_number = 4;
    }
    //pr($is_chief_complaint_doctor); die;
    if($step_id == 25 && $is_chief_complaint_doctor[556] == "No" ){
      $user_detail->chief_compliant_details = null;
      $user_detail->compliant_length = null;
      $user_detail->chief_compliant_id = null;
      $user_detail->symptom_from_tab1 = null;
      $user_detail->sub_chief_compliant_id = null;
      $user_detail->current_tab_number = 23 ;
      $tab_number = 23 ;
    }
    //pr($chief_complaint_psychiatry);die;
    if($step_id == 26 && !in_array("Symptom Complaints",$chief_complaint_psychiatry[694])){
      $user_detail->chief_compliant_details = null;
      $user_detail->compliant_length = null;
      $user_detail->chief_compliant_id = null;
      $user_detail->symptom_from_tab1 = null;
      $user_detail->sub_chief_compliant_id = null;
      $user_detail->current_tab_number = 28 ;
      $tab_number = 28;
    }
    if($step_id == 2 && !empty($login_user->dob))
    {
      $user_dob = $this->CryptoSecurity->decrypt(base64_decode($login_user->dob),SEC_KEY);
      $now = Time::now();
      $age = abs($now->year - date('Y',strtotime($user_dob)));
      if($age >= 18 && $age <= 59 ){

        $user_detail->current_tab_number = 19 ;
        $tab_number = 19;
      }
    }

  if(!empty($user_detail->max_visited_tab_number)){

    $user_detail->already_asked_cc_details = '';
    //$user_detail->allready_asked_disease = '';
      // remove the already_asked_cc_details column values if user edited the first tab, so that tab 2 will be load freshly
  }



  if($this->ChiefCompliantUserdetails->save($user_detail)){
   //pr($user_detail);die;
      //update schedule status
          $input = $this->request->data();

          if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

              $schedule = TableRegistry::get('Schedule');
              $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

              if(!empty($schedule_data) && isset($input['tab_number']) && isset($input['step_id'])){



                if($input['tab_number'] != 5){

                  $schedule_data->status = 2;

                  // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
                  if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                      $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

                  }else{

                    $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                  }
                  $schedule->save($schedule_data);
                }


              }
          }



    // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
    return $this->redirect($this->referer());

  }else{
    $tab_number = 1 ;
    $this->Flash->error(__('Data could not be saved, Please try again.'));
  }

      }


        if($tab_number == 2)
        {

          $cur_detail_tab_chief_compliant = $this->request->getData('cur_detail_tab_chief_compliant');

          $details_question = $this->request->getData('details_question');
          //pr($details_question);die;

          if(!empty($details_question && is_array($details_question)))
          {

            // compliant detial image related array
            // whitelisting validation for detail questions field start

            $daysArray = array('Every day/Every other day/Per week' =>'0','Every day' =>'1','Every other day' =>'2','Per week' =>'3');

            foreach ($details_question as $ky => $ve) {
              // pr($ky);
              if(!is_numeric($ky) || $ky == 42 || in_array($ky, array(36,37,38))) continue; // if key is more_option string in that case we do not whitelist and for image we do not white list

             $tempq =  $this->ChiefCompliantDetails->find('all')->where(['id' => $ky])->first()->toArray();
             if(!empty($tempq)){
              if($tempq['options']){
                $tempq = unserialize($tempq['options']);
                // if($ky == 77)
                // {
                //     $tmeparr = array();
                //     $tempQuestion = $tempq;
                //     foreach($tempQuestion as $key => $value)
                //     {
                //         $tmeparr[] =  $daysArray[$value];
                //     }
                //     $tempq = $tmeparr;
                // }
                if(in_array($ky, [77,66,98,100]))
                {
                  $tempq = array_flip($tempq);
                }
                if((is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
              {
                  if(!is_numeric($ve))
                  {
                    $this->Flash->error(__('Could not be saved. Please try again.'));
                    return $this->redirect($this->referer());
                  }

              }
            }else{
            //pr($tempq);
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }


            // read the previously stored CC detial qeustions
            if(!empty($user_detail->chief_compliant_details)) {
              // $tmp_details_question = unserialize(base64_decode($user_detail->chief_compliant_details)) ;
              $tmp_details_question = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_details), SEC_KEY))) ;

            }

            //pr($details_question);die;

            $tmp_details_question [$cur_detail_tab_chief_compliant] = $details_question ;
            
            $details_question = $tmp_details_question ;
            if(!empty($details_question))
              $details_question =  base64_encode(Security::encrypt((serialize($details_question)), SEC_KEY));  //  serialize($details_question);

          // add the current CC in  already_asked_cc_details
          if(empty($user_detail->already_asked_cc_details)){
              $already_asked_cc_details = $cur_detail_tab_chief_compliant ;
          }
          else{
              $already_asked_cc_details = $user_detail->already_asked_cc_details.','.$cur_detail_tab_chief_compliant ;
          }

//get all the user symptoms that selected in tab number 1
/*$temp_user_symptom_from_tab1 = '';
if(!empty($user_detail->symptom_from_tab1)){

  $temp_user_symptom_from_tab1 = @unserialize(Security::decrypt(base64_decode($user_detail->symptom_from_tab1),SEC_KEY));
}

$user_symptom_ids = array();
if(!empty($temp_user_symptom_from_tab1)){

    $temp_user_symptom_from_tab1 =    array_map(
                                function($item)  {
                                    // will remove extra white space and make it in lowercase
                                    return strtolower(trim($item)) ;
                                },
                                $temp_user_symptom_from_tab1
                            );
  $query = $this->ChiefCompliants->find('list', [
                                                'keyField' => 'id',
                                                'valueField' => 'name'
                                            ])->where(['name IN' => $temp_user_symptom_from_tab1]);

  $user_symptom_ids = array_keys($query->toArray());
}

$temp_chief_compliant_id = explode(",",$user_detail->chief_compliant_id);
$user_symptom_ids =array_unique(array_merge($user_symptom_ids,$temp_chief_compliant_id));
//check covid-19 tab show or not
//we check all current user sysmptom
$temp_current_tab_number = 3;
if(!empty($user_symptom_ids)){

  foreach ($user_symptom_ids as $sym_key => $sym_value) {

    if(array_key_exists($sym_value, $show_covid_19_symptom_list)){

      $temp_current_tab_number = 18;
     //$show_tab_18 = 1;
      break;
    }
  }
}*/
// pr($apt_id_data->specialization_id);die;
// $temp_current_tab_number = 20;
$temp_current_tab_number = 18;
if($tab_number == 2 && $step_id == 7 && $apt_id_data->specialization_id == 7){

  $temp_current_tab_number = 4;
}

if($tab_number == 2 && $step_id == 1){
  $temp_current_tab_number = 20;
}
if($step_id == 17){

  $temp_current_tab_number = 22;
}
if($step_id == 26){

  $temp_current_tab_number = 28;
}
if($step_id == 25){

  $temp_current_tab_number = 23;
}
if(!empty($user_detail)){

// check if all CC questions has asked then set the current tab number to 3

if($already_asked_cc_details == $user_detail->chief_compliant_id ){

    if($step_id == 6){ // for orthopedic module the path is tab 2 -> tab 4 -> tab 5
 $this->ChiefCompliantUserdetails->query()
    ->update()
    ->set(['chief_compliant_details' => $details_question, 'already_asked_cc_details' => $already_asked_cc_details, 'current_tab_number' => 4])
    ->where(['appointment_id' => $apt_id])
    ->execute();
    } else{
 $this->ChiefCompliantUserdetails->query()
    ->update()
    ->set(['chief_compliant_details' => $details_question, 'already_asked_cc_details' => $already_asked_cc_details, 'current_tab_number' => $temp_current_tab_number])
    ->where(['appointment_id' => $apt_id])
    ->execute();
    }

}else{
 $this->ChiefCompliantUserdetails->query()
    ->update()
    ->set(['chief_compliant_details' => $details_question, 'already_asked_cc_details' => $already_asked_cc_details])
    ->where(['appointment_id' => $apt_id])
    ->execute();
}

                } else {
                  $tempuser = $this->ChiefCompliantUserdetails->newEntity();
                  $tempuser->appointment_id  =  $apt_id ;
                  $tempuser->chief_compliant_details  =  $details_question ;
                  $tempuser->current_tab_number  =  $temp_current_tab_number ;
                  $tempuser->current_step_id  =  $step_id ;
                  $this->ChiefCompliantUserdetails->save($tempuser);

                }

                //update schedule status
              $input = $this->request->data();

              if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

                  $schedule = TableRegistry::get('Schedule');
                  $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

                  if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

                    if($input['tab_number'] != 5){

                      $schedule_data->status = 2;

                      // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
                      if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                          $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

                      }else{

                        $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                      }
                      //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                      $schedule->save($schedule_data);
                    }


                  }
              }

    // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
    return $this->redirect($this->referer());


          }else{

            $this->Flash->error(__('Data could not be saved, Please try again.'));
          }

        }

        if($tab_number == 3){

          //pr($this->request->data());die;
          // storing symptoms response in d/b
          $python_symptom_output_from_user = $this->request->getData('python_symptom_output');
          $associated_symptom = $this->request->getData('associated_symptom');
                    // pr($python_symptom_output_from_user);
                    //pr($associated_symptom);die;
                    // pr($user_detail->python_file_option_3rd_tab); die;
                    // create symptom array for yes - 1 , no - 0 , i don't know - 2
                    $temp_associated_symptom = array();
                    foreach ($associated_symptom as $key => $value) {

  // whitelisting validation for other drug history year field start
      if(!in_array($value, array(0,1,2))){
        $this->Flash->error(__('Could not be saved. Please try again.'));
        return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
      }
  // whitelisting validation for other drug history year field end
                    $temp_associated_symptom[$value][]= array('technical' => $key, 'layman' => $python_symptom_output_from_user[$key] );
                    }

                   // pr($temp_associated_symptom);
    $old_data = $this->ChiefCompliantUserdetails->find('all')->where(['appointment_id' => $apt_id])->first();
    // pr($temp_associated_symptom);

    if(!empty($old_data->python_file_option_3rd_tab)){
        // $temp_var = unserialize(base64_decode($old_data->python_file_option_3rd_tab));
      $temp_var = unserialize((Security::decrypt(base64_decode($old_data->python_file_option_3rd_tab), SEC_KEY)));

        // merging 2 multi dimensional array , merging this request symptom with the previously strord symptom
        foreach ($temp_associated_symptom as $key => $value) {
            foreach ($value as $k => $v) {
                $temp_var[$key][] = $v ;
            }
        }

        $python_file_option_3rd_tab = $temp_var ;
// $python_file_option_3rd_tab = array_merge($temp_var, $python_file_option_3rd_tab) ;
    } else {

        $python_file_option_3rd_tab = $temp_associated_symptom;

    }

   // pr($old_data);die;

    // $python_file_option_3rd_tab =  base64_encode(serialize($python_file_option_3rd_tab)) ;
    if(!empty($python_file_option_3rd_tab))
      //pr($python_file_option_3rd_tab);die;
$python_file_option_3rd_tab =  base64_encode(Security::encrypt((serialize($python_file_option_3rd_tab)), SEC_KEY));


// the third tab will load 2 times for 0,1 when step_id != 17
    if( $old_data->no_of_load_3rd_tab == 1 && $step_id != 17 && $step_id != 18){


     $this->ChiefCompliantUserdetails->query()
            ->update()
            ->set(['python_file_option_3rd_tab' => $python_file_option_3rd_tab, 'no_of_load_3rd_tab' => $old_data->no_of_load_3rd_tab +1 , 'current_tab_number' => 4])
            ->where(['appointment_id' => $apt_id])
            ->execute();

    } else {
// pr($python_file_option_3rd_tab); die;
     $this->ChiefCompliantUserdetails->query()
        ->update()
        ->set(['python_file_option_3rd_tab' => $python_file_option_3rd_tab, 'no_of_load_3rd_tab' => $old_data->no_of_load_3rd_tab + 1])
        ->where(['appointment_id' => $apt_id])
        ->execute();

    }

    //update schedule status
          $input = $this->request->data();

          if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

              $schedule = TableRegistry::get('Schedule');
              $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

              if(!empty($schedule_data) && isset($input['tab_number']) && isset($input['step_id'])){

                if($input['tab_number'] != 5){

                  $schedule_data->status = 2;

                  // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
                  if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                      $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

                  }else{

                    $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                  }
                  //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                  $schedule->save($schedule_data);
                }
              }
          }



    // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
    return $this->redirect($this->referer());

 /* // commented on 11-12-18  as client want to ask symptom from python file based on each specialization




          if(!empty($associated_symptom) && is_array($associated_symptom)){
            $tempar = array();
            foreach ($associated_symptom as $key => $value) {
              $tempar[$value][] = $key ;

            }

            ksort($tempar);
            $associated_symptom = $tempar ;
            // $associated_symptom = serialize($tempar) ;



// tab_3_load_2_time
// we are loading tab 3  , 2 times according to client requirement (first time 5 and rest symptom 2nd time)
    $tab_3_load_2_time = $this->request->getData('tab_3_load_2_time');

          if($tab_3_load_2_time == 2){

      $temp_u_dtils = $this->ChiefCompliantUserdetails->find('all')->where(['appointment_id' => $apt_id])->first();
      $temp_u_dtils = $temp_u_dtils->chief_compliant_symptoms;
      if(!empty($temp_u_dtils)){
        $temp_u_dtils = unserialize($temp_u_dtils);
        // this for loop recursively merges the 2 array (1- saved in db from step 1 , 2 - array received in this step)

        foreach ($temp_u_dtils as $key => $value) {
          if(empty($associated_symptom[$key])){
            $associated_symptom[$key] = $value;
          } else{
            $associated_symptom[$key] = array_merge($associated_symptom[$key], $value);
          }

        }

        // $associated_symptom = array_merge_recursive($associated_symptom,$temp_u_dtils ) ;
      }

      $associated_symptom = serialize($associated_symptom) ;

          if(!empty($user_detail)){
               $this->ChiefCompliantUserdetails->query()
                    ->update()
                    ->set(['chief_compliant_symptoms' => $associated_symptom, 'current_tab_number' => 4])
                    ->where(['appointment_id' => $apt_id])
                    ->execute();
                } else {
                  $tempuser = $this->ChiefCompliantUserdetails->newEntity();
                  $tempuser->appointment_id  =  $apt_id ;
                  $tempuser->chief_compliant_symptoms  =  $associated_symptom ;
                  $tempuser->current_tab_number  =  4 ;
                  $tempuser->current_step_id  =  $step_id ;
                  $this->ChiefCompliantUserdetails->save($tempuser);

                }



    $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
    return $this->redirect($this->referer());
        } else {
$associated_symptom = serialize($associated_symptom) ;
        if(!empty($user_detail)){
               $this->ChiefCompliantUserdetails->query()
                    ->update()
                    ->set(['chief_compliant_symptoms' => $associated_symptom])
                    ->where(['appointment_id' => $apt_id])
                    ->execute();
                }
$tab_3_load_2_time = 2 ; // set to 2
          $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
        }


          }else{

            $this->Flash->error(__('Data could not be saved, Please try again.'));
          }

                    */

        }

        if($tab_number == 4){



               $user_detail = $this->prepare_user_detial_data_for_render($user_detail);            
               $is_show_payment = !empty($user_detail->appointment_id->organization_id->is_show_payment) ? $user_detail->appointment_id->organization_id->is_show_payment : '';
                
                $medication_name_id = $this->request->getData('medication_name_name');
                //pr($medication_name_id);
                $medication_data = array();
                if(!empty($medication_name_id) && is_array($medication_name_id)){
                    // pr($medication_name_id);
                    $medication_name_id = array_filter($medication_name_id) ;
                    $medication_name_id = array_unique($medication_name_id);

                    $medication_dose = $this->request->getData('medication_dose');
                    $medication_how_often = $this->request->getData('medication_how_often');
                    $medication_how_taken = $this->request->getData('medication_how_taken');

                    $i = 0 ;
                foreach ($medication_name_id as $key => $value) {
                    $medication_data[$i]['medication_name_id'] = $value;
                    // $medication_data[$i]['medication_name_name'] = $value;
                    // $medication_data[$i]['medication_dose'] = $medication_dose[$key];
                    // $medication_data[$i]['medication_how_often'] = $medication_how_often[$key];
                    // $medication_data[$i]['medication_how_taken'] = $medication_how_taken[$key];

                    $medication_data[$i]['medication_name_name'] = $value;
                    $medication_data[$i]['medication_dose'] = !empty($medication_dose[$key]) ?  $medication_dose[$key] : '';
                    $medication_data[$i]['medication_how_often'] = !empty($medication_how_often[$key]) ? $medication_how_often[$key] : '';
                    $medication_data[$i]['medication_how_taken'] = !empty($medication_how_taken[$key]) ? $medication_how_taken[$key] : '';

                        $i++;
                }


                }

    $medication_side_effects = $this->request->getData('medication_side_effects');
    $medication_side_effect_radio = $this->request->getData('medication_side_effect_radio');



$question_symptom = $this->request->getData('question_symptom');
$all_question_symptom = $this->request->getData('all_question_symptom');


$result = array();
if(!empty($all_question_symptom))
{
  foreach($all_question_symptom as $key => $value) {
      $result[$key] = $value;
  }
}
if(!empty($question_symptom))
{
  foreach($question_symptom as $key => $value) {
      $result[$key] = $value;
  }
}
$question_symptom = $result;
//pr($question_symptom);die;

if($step_id == 25)
{
   if(!empty($question_symptom))
   {
      $temp_associated_symptom = array();
      foreach($question_symptom as $key => $value)
      {
        $questionnarir  = $this->ChiefCompliantQuestionnaire->find('all')->where(['id' => $key])->first();        
        $temp_associated_symptom[$value][]= array('technical' => $questionnarir['questionnaire_text'], 'layman' => $questionnarir['questionnaire_text'] );
      }        
   }
   $python_file_option_3rd_tab =  base64_encode(Security::encrypt((serialize($temp_associated_symptom)), SEC_KEY));
   $update_user_appointment_detail = array(
    'python_file_option_3rd_tab' => $python_file_option_3rd_tab,
  );
}
          if(!empty($question_symptom) && is_array($question_symptom)){
            $tempar = array();
            foreach ($question_symptom as $key => $value) {

  // whitelisting validation for questioniare fields start
      if(!in_array($value, array('0','1','2'))){
        $this->Flash->error(__('Could not be saved. Please try again.'));
        return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
      }
  // whitelisting validation for questioniare fields end

              $tempar[$value][] = $key ;

            }

            ksort($tempar);

            //pr($tempar);die;

            // $question_symptom = serialize($tempar) ;
            if(!empty($tempar) && is_array($tempar))
            $question_symptom =  base64_encode(Security::encrypt(serialize($tempar), SEC_KEY));
// pr($medication_data);die;
          if(!empty($user_detail)){
 // pr($medication_data);die;
            $tmp_compliant_medication_detail = '';

  $update_user_appointment_detail['questionnaire_detail'] = $question_symptom;  

  if($step_id == 4){

    $update_user_appointment_detail['medication_side_effects'] = $medication_side_effects;
    $update_user_appointment_detail['med_refill_medication_side_effects_radio'] = $medication_side_effect_radio;
   // pr($medication_data);



   // pr($show_dast_padt_medication_list);die;
    if(!empty($medication_data) && is_array($medication_data)){

      foreach ($medication_data as $key => $value) {

        if(isset($value['medication_name_name']) && in_array(trim($value['medication_name_name']), $show_dast_padt_medication_list)){

          $update_user_appointment_detail['current_tab_number'] = 16;
          //$update_user_appointment_detail[''] = '';
          break;
        }
      }

      $update_user_appointment_detail['compliant_medication_detail'] = base64_encode(Security::encrypt(serialize($medication_data), SEC_KEY));

    }

    if($update_user_appointment_detail['current_tab_number'] == 5){

      $update_user_appointment_detail['medication_refill_extra_details'] = null;
    }

  }
  //pr($apt_id);die;
 // pr($update_user_appointment_detail);die;

  $this->ChiefCompliantUserdetails->query()
                    ->update()
                    ->set($update_user_appointment_detail)
                    ->where(['appointment_id' => $apt_id])
                    ->execute();
                } else {

                  $tempuser = $this->ChiefCompliantUserdetails->newEntity();
                  $tempuser->appointment_id  =  $apt_id ;
                  $tempuser->questionnaire_detail  =  $question_symptom ;
                 // $tempuser->current_tab_number  =  5 ;
                  $tempuser->current_step_id  =  $step_id ;

        if($step_id == 4 && !empty($medication_data)) {

          // $tempuser->compliant_medication_detail = serialize($medication_data);
if(!empty($medication_data) && is_array($medication_data)){

  foreach ($medication_data as $key => $value) {

        if(isset($value['medication_name_name']) && in_array(trim($value['medication_name_name']), $show_dast_padt_medication_list)){

          $tempuser->current_tab_number  = 16;
          //$update_user_appointment_detail[''] = '';
          break;
        }
      }
    $tempuser->compliant_medication_detail = base64_encode(Security::encrypt(serialize($medication_data), SEC_KEY));
  }

  if($tempuser->current_tab_number == 5){

      $tempuser->medication_refill_extra_details = null;
    }

          $tempuser->medication_side_effects = $medication_side_effects;
          $tempuser->med_refill_medication_side_effects_radio = $medication_side_effect_radio;


        }
        //pr($tempuser);die;
                  $this->ChiefCompliantUserdetails->save($tempuser);

                }

                  //update schedule status
          $input = $this->request->data();

          if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

              $schedule = TableRegistry::get('Schedule');
              $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

              if(!empty($schedule_data) && isset($input['step_id']) && $input['tab_number']){

                if($input['tab_number'] != 5){

                  $schedule_data->status = 2;

                  // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
                  if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                      $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

                  }else{

                    $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                  }
                 // $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                  $schedule->save($schedule_data);
                }
              }
          }


         if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

              $schedule = TableRegistry::get('Schedule');
              $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

              if(!empty($schedule_data)){

                if($input['tab_number'] == 4){

                  $schedule_data->status = 3;
                  $schedule_data->stage = 'completed';
                  $schedule->save($schedule_data);
                }
              }
          }

          //Remove summary tab as per client requiement so code of summary tab written in heathquestionnair tab

          $id = $login_user['id'];
          if(in_array($step_id, [1,4,16,17,18,19,21,25])){
              $ehr_note_FHIR = $this->General->ipc_note_detail($login_user['id'],$apt_id,"FHIR");
              $ehr_note_FHIR = !empty($ehr_note_FHIR) ? base64_encode(Security::encrypt($ehr_note_FHIR,SEC_KEY)) : "";
              $ehr_note_readable = $this->General->ipc_note_detail($login_user['id'],$apt_id,"readable");
              $ehr_note_readable = !empty($ehr_note_readable) ? base64_encode(Security::encrypt($ehr_note_readable,SEC_KEY)) : "";
              $ehr_note_raw = $this->General->ipc_note_detail($login_user['id'],$apt_id,"raw");              
              $ehr_note_raw = !empty($ehr_note_raw) ? base64_encode(Security::encrypt($ehr_note_raw,SEC_KEY)) : "";
              $ehr_note_raw_readable = $this->General->ipc_note_detail($login_user['id'],$apt_id,"rawAndReadable");              
              $ehr_note_raw_readable = !empty($ehr_note_raw_readable) ? base64_encode(Security::encrypt($ehr_note_raw_readable,SEC_KEY)) : "";
              $this->ChiefCompliantUserdetails->query()
              ->update()
              ->set(['ehr_note_json' => $ehr_note_FHIR,'ehr_note_json_readable' =>$ehr_note_readable,'ehr_note_json_raw'=>$ehr_note_raw, 'ehr_note_json_raw_readable' => $ehr_note_raw_readable])
              ->where(['appointment_id' => $apt_id])
              ->execute();
          }       
          if(!empty($schedule_data) && isset($schedule_data['mrn'])){
              $dec_mrn = $schedule_data['mrn'];
              if(!empty($schedule_data['mrn'])){
              $dec_mrn = $this->CryptoSecurity->decrypt(base64_decode($dec_mrn),SEC_KEY);
              }
              if($is_show_payment != 1){
              $result = $this->sendNoteToApi($id,$apt_id,$dec_mrn);
              }
          }else{
              if($is_show_payment != 1){
              $result = $this->sendNoteToApi($id,$apt_id);
              }
          }  

          if($is_show_payment != 1)    
          {
            if($result){
            //update schedule status
            //$this->Flash->success(__('Report sent successfully.'));
            $this->Auth->logout();
            $this->redirect(['controller' => 'Pages', 'action' => 'reports','prefix' => $this->prefix, $apt_id]);
            }else{
            $this->Flash->error(__('Report could not be sent to EHR, please contact to this email : john@valhalla.healthcare.'));
            return $this->redirect($this->referer());
          }
          }else{
          return $this->redirect(['action' =>'payment','prefix' => $this->prefix, base64_encode($apt_id),base64_encode($schedule_data->id),base64_encode($schedule_data->organization_id)]);
          }

          return $this->redirect($this->referer());

          } else {

            $this->Flash->error(__('Data could not be saved, Please try again.'));
          }
        }



if($tab_number == 5){
    $is_show_payment = !empty($user_detail->appointment_id->organization_id->is_show_payment) ? $user_detail->appointment_id->organization_id->is_show_payment : '';
  //pr($is_show_payment);die;



                      //pr($this->request->data);die;

            $additional_comment = $this->request->getData('additional_comment');
            if(!empty($additional_comment)){
              $this->ChiefCompliantUserdetails->query()
                                ->update()
                                ->set(['additional_comment' => $additional_comment])
                                ->where(['appointment_id' => $apt_id])
                                ->execute();

            }



            $id = $login_user['id'] ;

    $tmp_dtl = $this->ChiefCompliantUserdetails->find('all')->where(['appointment_id' => $apt_id ])->first();

    $input = $this->request->data();
    //pr($input);die;

    if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

        $schedule = TableRegistry::get('Schedule');
        $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

        if(!empty($schedule_data)){

          if($input['tab_number'] == 5){

            $schedule_data->status = 3;
            $schedule_data->stage = 'completed';
            $schedule->save($schedule_data);
          }
        }
    }



      //save the note in database for EHR
      $redirectUrl = $schedule_data['api_redirect_uri'];
      if(!empty($redirectUrl))
      {
         return $this->redirect($redirectUrl);
      }

      // Saved note for oncology, chronic condition, internal medicine       

      if(in_array($step_id, [1,4,16,17,18,19,21,25])){

        $ehr_note_FHIR = $this->General->ipc_note_detail($login_user['id'],$apt_id,"FHIR");
        $ehr_note_FHIR = !empty($ehr_note_FHIR) ? base64_encode(Security::encrypt($ehr_note_FHIR,SEC_KEY)) : "";

        $ehr_note_readable = $this->General->ipc_note_detail($login_user['id'],$apt_id,"readable");
        $ehr_note_readable = !empty($ehr_note_readable) ? base64_encode(Security::encrypt($ehr_note_readable,SEC_KEY)) : "";

        $ehr_note_json_raw = $this->General->ipc_note_detail($login_user['id'],$apt_id,"raw");
        $ehr_note_json_raw = !empty($ehr_note_readable) ? base64_encode(Security::encrypt($ehr_note_json_raw,SEC_KEY)) : "";

        $this->ChiefCompliantUserdetails->query()
                    ->update()
                    ->set(['ehr_note_json' => $ehr_note_FHIR,'ehr_note_json_readable' =>$ehr_note_readable,'ehr_note_json_raw'=>$ehr_note_json_raw])
                    ->where(['appointment_id' => $apt_id])
                    ->execute();
      }       



                    if(!empty($schedule_data) && isset($schedule_data['mrn'])){

                      $dec_mrn = $schedule_data['mrn'];
                      if(!empty($schedule_data['mrn'])){
                        $dec_mrn = $this->CryptoSecurity->decrypt(base64_decode($dec_mrn),SEC_KEY);
                      }
                        if($is_show_payment != 1){
                          $result = $this->sendNoteToApi($id,$apt_id,$dec_mrn);
                      }
                      
                    }else{
                      if($is_show_payment != 1){
                      $result = $this->sendNoteToApi($id,$apt_id);
                      }
                    }  
                    if($is_show_payment != 1)    
                    {
                      if($result){
                       //update schedule status
                      
                      //$this->Flash->success(__('Report sent successfully.'));
                      $this->Auth->logout();
                      $this->redirect(['controller' => 'Pages', 'action' => 'reports','prefix' => $this->prefix, $apt_id]);
                     
                               
                      }else{
                                       $this->Flash->error(__('Report could not be sent to EHR, please contact to this email : john@valhalla.healthcare.'));
                       return $this->redirect($this->referer());

                               }
                    }else{
                      return $this->redirect(['action' =>'payment','prefix' => $this->prefix, base64_encode($apt_id),base64_encode($schedule_data->id),base64_encode($schedule_data->organization_id)]);
                    }
                }

  if($tab_number == 6){

  $input = $this->request->data();
  //pr($input);die;

  $other_details_question = $this->request->getData('other_details_question');
  //pr($other_details_question);die;

  if(!empty($other_details_question && is_array($other_details_question))){
    // compliant detial image related array
    // whitelisting validation for detail questions field start
    foreach ($other_details_question as $ky => $ve) {

        $tempq =  $this->ChiefCompliantOtherDetails->find('all')->where(['id' => $ky])->first()->toArray();

         if(!empty($tempq)){
          if($tempq['options']){
            $tempq = unserialize($tempq['options']);
            if(in_array($ky, [8,9]))
            {
              $tempq = array_flip($tempq);
            }
            if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){
              
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
        }else{
        //pr($tempq);
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
        }
        // die('hh');
      if(!empty($other_details_question)){


       //set treatment detail array

        $treatment_arr = null;
        if(isset($input['treatment_type']) && !empty($input['treatment_type']) && isset($input['treatment_date']) && !empty($input['treatment_date']) && $other_details_question[12] == 'Yes') {

          foreach ($input['treatment_type'] as $key => $value) {
            if(!empty($value) && $input['treatment_date'][$key]){
              $treatment_arr[] = array(
                'treatment_type' => $value,
                'treatment_date' => $input['treatment_date'][$key]

              );
            }
          }
        }

        //set medicine_detail

        $taken_before_medicine_info = null;

         if(isset($input['medicine_name']) && !empty($input['medicine_name']) && isset($input['medicine_dose']) && !empty($input['medicine_dose']) && isset($input['medicine_stop_reason']) && !empty($input['medicine_stop_reason'])) {

            foreach ($input['medicine_name'] as $key => $value) {
              if(!empty($value) && $input['medicine_dose'][$key] && $input['medicine_stop_reason'][$key]){
                $taken_before_medicine_info[] = array(
                  'medicine_name' => $value,
                  'medicine_dose' => $input['medicine_dose'][$key],
                  'medicine_stop_reason' => $input['medicine_stop_reason'][$key]
                );
              }
            }
         }


        if(!empty($treatment_arr)){

          $treatment_arr =  base64_encode(Security::encrypt((serialize($treatment_arr)), SEC_KEY));
        }

        if(!empty($taken_before_medicine_info)){

          $taken_before_medicine_info = base64_encode(Security::encrypt((serialize($taken_before_medicine_info)),SEC_KEY));
        }

        $other_details_question =  base64_encode(Security::encrypt((serialize($other_details_question)), SEC_KEY));

      }



      if(!empty($user_detail)){

         // pr($step_id);die;

            if($step_id == 7){ // for orthopedic module the path is tab 2 -> tab 4 -> tab 5
         $this->ChiefCompliantUserdetails->query()
            ->update()
            ->set(['chief_compliant_other_details' => $other_details_question, 'other_questions_treatment_detail' => $treatment_arr, 'current_tab_number' => 2,'taken_before_medicine_info' => $taken_before_medicine_info])
            ->where(['appointment_id' => $apt_id])
            ->execute();
            } else{
         $this->ChiefCompliantUserdetails->query()
            ->update()
            ->set(['chief_compliant_other_details' => $other_details_question, 'current_tab_number' => 3])
            ->where(['appointment_id' => $apt_id])
            ->execute();
            }
      }
      else
      {
        $tempuser = $this->ChiefCompliantUserdetails->newEntity();
        $tempuser->appointment_id  =  $apt_id ;
        $tempuser->chief_compliant_other_details  =  $other_details_question ;
        $tempuser->taken_before_medicine_info = $taken_before_medicine_info;
        $tempuser->other_questions_treatment_detail = $treatment_arr;
        $tempuser->current_tab_number  =  2;
        $tempuser->current_step_id  =  $step_id ;
        $this->ChiefCompliantUserdetails->save($tempuser);

      }

        //update schedule status
      $input = $this->request->data();

      if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

          $schedule = TableRegistry::get('Schedule');
          $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

          if(!empty($schedule_data) && isset($input['step_id']) && isset($input['tab_number'])){

            if($input['tab_number'] != 5){

              $schedule_data->status = 2;
              $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
              $schedule->save($schedule_data);
            }

          }
      }

    // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
    return $this->redirect($this->referer());


  }
  else
  {

    $this->Flash->error(__('Data could not be saved, Please try again.'));
  }

}


//save data for pain medicine module pain follow up category
if($tab_number == 7){

  $input = $this->request->data();
  //pr($input);die;

  $general_update_question = $this->request->getData('general_update_question');
  //pr($other_details_question);die;

  if(!empty($general_update_question && is_array($general_update_question))){

    // compliant detial image related array
    // whitelisting validation for detail questions field start
    foreach ($general_update_question as $ky => $ve) {

        $tempq =  $this->PainFollowupQuestionnaires->find('all')->where(['id' => $ky])->first()->toArray();

         if(!empty($tempq)){
          if(!empty($tempq->options)){
            $tempq = unserialize($tempq->options);
            if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
        }else{
        //pr($tempq);
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
        }



      if(!empty($general_update_question)){

       //set procedure detail array

        $procedure_arr = null;
        if(isset($input['procedure_type']) && !empty($input['procedure_type']) && isset($input['procedure_date']) && !empty($input['procedure_date']) && $general_update_question[18] == 'Yes') {

          foreach ($input['procedure_type'] as $key => $value) {
            if(!empty($value) && $input['procedure_date'][$key]){
              $procedure_arr[] = array(
                'procedure_type' => $value,
                'procedure_date' => $input['procedure_date'][$key]

              );
            }
          }
        }

        if(!empty($procedure_arr)){

          $procedure_arr =  base64_encode(Security::encrypt((serialize($procedure_arr)), SEC_KEY));
        }


        $provider_info = null;

        //set provider dettial info

        if($general_update_question[15] == 'Yes'){

          $provider_info = array(

            'provider_name' => isset($input['provider_name']) ? $input['provider_name']: "",
            'speciality' => isset($input['speciality']) ? $input['speciality']: "",
            'address' => isset($input['address']) ? $input['address']: "",
            'phone' => isset($input['phone']) ? $input['phone']: "",
          );
        }

        if(!empty($provider_info)){

          $provider_info =  base64_encode(Security::encrypt((serialize($provider_info)), SEC_KEY));
        }

        $general_update_question =  base64_encode(Security::encrypt((serialize($general_update_question)), SEC_KEY));

      }

      //save medication detail
      $medication_name_id = $this->request->getData('medication_name_name');
      $medication_data = array();
      if(!empty($medication_name_id) && is_array($medication_name_id)){

        $medication_name_id = array_filter($medication_name_id) ;
        $medication_name_id = array_unique($medication_name_id);

        $medication_dose = $this->request->getData('medication_dose');
        $medication_how_often = $this->request->getData('medication_how_often');
        if(is_array($medication_how_often)){

          $medication_how_often = array_filter($medication_how_often); //remove the empty value from the array
        }
        $medication_how_taken = $this->request->getData('medication_how_taken');

        $i = 0 ;
        foreach ($medication_name_id as $key => $value) {

          // whitelisting validation for medication how often field  start
          if(!empty($medication_how_often) && !array_key_exists($medication_how_often[$key], $length_arr))
          {
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());
            // if whitlist validation failed we will directly redirect it back without saving data
          }
          // whitelisting validation for medication how often field  end
          $medication_data[$i]['medication_name_name'] = $value;
          $medication_data[$i]['medication_dose'] = !empty($medication_dose[$key]) ?  $medication_dose[$key] : '';
          $medication_data[$i]['medication_how_often'] = !empty($medication_how_often[$key]) ? $medication_how_often[$key] : '';
          $medication_data[$i]['medication_how_taken'] = !empty($medication_how_taken[$key]) ? $medication_how_taken[$key] : '';
          $i++;
        }
      }

      if(!empty($medication_data))
        $medication_data = base64_encode(Security::encrypt(serialize($medication_data), SEC_KEY));



      if(!empty($user_detail)){

        if(!empty($medication_data)){

            $this->ChiefCompliantUserdetails->query()
            ->update()
            ->set(['general_update_question' => $general_update_question,'general_update_procedure_detail' => $procedure_arr, 'current_tab_number' => 8,'general_update_provider_info' => $provider_info,'compliant_medication_detail' => $medication_data])
            ->where(['appointment_id' => $apt_id])
            ->execute();

        }else{

         $this->ChiefCompliantUserdetails->query()
            ->update()
            ->set(['general_update_question' => $general_update_question,'general_update_procedure_detail' => $procedure_arr, 'current_tab_number' => 8,'general_update_provider_info' => $provider_info])
            ->where(['appointment_id' => $apt_id])
            ->execute();
          }
      }
      else
      {
        $tempuser = $this->ChiefCompliantUserdetails->newEntity();
        $tempuser->appointment_id  =  $apt_id ;
        $tempuser->general_update_question  =  $general_update_question ;
        $tempuser->current_tab_number  =  8;
        $tempuser->general_update_procedure_detail = $procedure_arr;
        $tempuser->general_update_provider_info = $provider_info;
        $tempuser->current_step_id  =  $step_id ;

        if(!empty($medication_data)){

          $tempuser->compliant_medication_detail = $medication_data;
        }
        $this->ChiefCompliantUserdetails->save($tempuser);

      }
        //update schedule status
      $input = $this->request->data();

      if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

          $schedule = TableRegistry::get('Schedule');
          $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

          if(!empty($schedule_data) && isset($input['tab_number']) && isset($input['step_id'])){

            if($input['tab_number'] != 5){

              $schedule_data->status = 2;
              $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
              $schedule->save($schedule_data);
            }

          }
      }

    // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
    return $this->redirect($this->referer());


  }
  else
  {

    $this->Flash->error(__('Data could not be saved, Please try again.'));
  }

}

//save data for pain medicine module pain follow up category
if($tab_number == 8){

  $input = $this->request->data();
 // pr($input);die;

  $pain_update_question = $this->request->getData('pain_update_question');
  //pr($other_details_question);die;

  if(!empty($pain_update_question && is_array($pain_update_question))){

    // compliant detial image related array
    // whitelisting validation for detail questions field start
    foreach ($pain_update_question as $ky => $ve) {

        $tempq =  $this->PainFollowupQuestionnaires->find('all')->where(['id' => $ky])->first()->toArray();

         if(!empty($tempq)){
          if(!empty($tempq->options)){
            $tempq = unserialize($tempq->options);
            if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
        }else{
        //pr($tempq);
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
        }



      if(!empty($pain_update_question)){

        $pain_update_question =  base64_encode(Security::encrypt((serialize($pain_update_question)), SEC_KEY));
      }


      if(!empty($user_detail)){

         $this->ChiefCompliantUserdetails->query()
            ->update()
            ->set(['pain_update_question' => $pain_update_question, 'current_tab_number' => 5])
            ->where(['appointment_id' => $apt_id])
            ->execute();
      }
      else
      {
        $tempuser = $this->ChiefCompliantUserdetails->newEntity();
        $tempuser->appointment_id  =  $apt_id ;
        $tempuser->pain_update_question  =  $pain_update_question ;
        $tempuser->current_tab_number  =  5;
        $tempuser->current_step_id  =  $step_id ;
        $this->ChiefCompliantUserdetails->save($tempuser);

      }
        //update schedule status
      $input = $this->request->data();

      if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

          $schedule = TableRegistry::get('Schedule');
          $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

          if(!empty($schedule_data) && isset($input['tab_number']) && isset($input['step_id'])){

            if($input['tab_number'] != 5){

              $schedule_data->status = 2;
              $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
              $schedule->save($schedule_data);
            }

          }
      }

    // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
    return $this->redirect($this->referer());


  }
  else
  {

    $this->Flash->error(__('Data could not be saved, Please try again.'));
  }

}


//save data for GI module health checkup category
if($tab_number == 9){

  $input = $this->request->data();
  //pr($input);die;

  $screening_question = $this->request->getData('screening_question');
  //pr($other_details_question);die;

  if(!empty($screening_question && is_array($screening_question))){

    // compliant detial image related array
    // whitelisting validation for detail questions field start


    $ageArray = array('' =>'','<50 years' =>'1','50-60 years' =>'2','>60 years' =>'3');
   // pr($screening_question);
    foreach ($screening_question as $ky => $ve) {

        $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

       // pr($tempq);




         if(!empty($tempq)){
          if($tempq['options']){
            $tempq = unserialize($tempq['options']);
            //pr($tempq);

            if($ky == 2)
            {
                $tmeparr = array();
                $tempQuestion = $tempq;
                foreach($tempQuestion as $key => $value)
                {
                    $tmeparr[] =  $ageArray[$value];
                }
                $tempq = $tmeparr;
              //  pr($tempq);
            }

            if((is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq))){

              //echo $ky;

              //$this->Flash->error(__('Could not be saved. Please try again.'));
             // return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
        }else{
        //pr($tempq);
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
        }
        //die;

        //pr($user_detail);

        if(!empty($user_detail) && !empty($user_detail->prev_gi_health_checkup)){

          $prev_user_detail = $this->ChiefCompliantUserdetails->find('all')->where(['id' => $user_detail->prev_gi_health_checkup])->first();

         if(!empty($prev_user_detail) && !empty($prev_user_detail->screening_questions_detail)){

            $prev_user_detail->screening_questions_detail =  @unserialize(Security::decrypt( base64_decode($prev_user_detail->screening_questions_detail),SEC_KEY));
            if(isset($prev_user_detail->screening_questions_detail[1]) && !empty($prev_user_detail->screening_questions_detail[1])){

              $screening_question[1] = $prev_user_detail->screening_questions_detail[1];

            }

            if(isset($prev_user_detail->screening_questions_detail[2]) && !empty($prev_user_detail->screening_questions_detail[2])){

              $screening_question[2] = $prev_user_detail->screening_questions_detail[2];

            }
         }
       }

       // pr($screening_question);die;

      if(!empty($screening_question)){

        $screening_question =  base64_encode(Security::encrypt((serialize($screening_question)), SEC_KEY));
      }

      if(!empty($user_detail)){

         $this->ChiefCompliantUserdetails->query()
            ->update()
            ->set(['screening_questions_detail' => $screening_question,'current_tab_number' => 4])
            ->where(['appointment_id' => $apt_id])
            ->execute();
      }
      else
      {
        $tempuser = $this->ChiefCompliantUserdetails->newEntity();
        $tempuser->appointment_id  =  $apt_id ;
        $tempuser->screening_questions_detail = $screening_question ;
        $tempuser->current_tab_number  =  4;
        $tempuser->current_step_id  =  $step_id;
        $this->ChiefCompliantUserdetails->save($tempuser);

      }
        //update schedule status
      $input = $this->request->data();

      if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

          $schedule = TableRegistry::get('Schedule');
          $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

          if(!empty($schedule_data) && isset($input['tab_number']) && isset($input['step_id'])){

            if($input['tab_number'] != 5){

              $schedule_data->status = 2;

              // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
              if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                  $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

              }else{

                $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
              }
              //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
              $schedule->save($schedule_data);
            }

          }
      }

    // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
    return $this->redirect($this->referer());


  }
  else
  {

    $this->Flash->error(__('Data could not be saved, Please try again.'));
  }

}


//save data for GI module health checkup category
if($tab_number == 10){

  $input = $this->request->data();
  //pr($input);die;

  $post_checkup_question = $this->request->getData('post_checkup_question');
  $post_checkup_question = array_filter($post_checkup_question);

  if(!empty($post_checkup_question && is_array($post_checkup_question))){

    // compliant detial image related array
    // whitelisting validation for detail questions field start
    $feelArray = array('' =>'','great' =>'1','good' =>'2','bad' =>'3');
    foreach ($post_checkup_question as $ky => $ve) {

        $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

         if(!empty($tempq)){
          if($tempq['options']){
            $tempq = unserialize($tempq['options']);
            if($ky == 24)
            {
                $tmparr = array();
                $tempQuestion = $tempq;
                foreach($tempQuestion as $key => $value)
                {
                    $tmparr[] =  $feelArray[$value];
                }
                $tempq = $tmparr;
            }
            if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
          else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
          {
              if(!is_numeric($ve))
              {
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());
              }

          }
          else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
          {
            $checkDateFor = $this->General->checkDateFormat($ve);
            if(!$checkDateFor)
            {
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());
            }
          }
        }else{
        //pr($tempq);
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
        }

       // pr($screening_question);die;

      if(!empty($post_checkup_question)){

        $post_checkup_question =  base64_encode(Security::encrypt((serialize($post_checkup_question)), SEC_KEY));
      }

      if(!empty($user_detail)){

         $this->ChiefCompliantUserdetails->query()
            ->update()
            ->set(['post_checkup_question_detail' => $post_checkup_question,'current_tab_number' => 4])
            ->where(['appointment_id' => $apt_id])
            ->execute();
      }
      else
      {
        $tempuser = $this->ChiefCompliantUserdetails->newEntity();
        $tempuser->appointment_id  =  $apt_id ;
        $tempuser->post_checkup_question_detail = $post_checkup_question ;
        $tempuser->current_tab_number  =  4;
        $tempuser->current_step_id  =  $step_id;
        $this->ChiefCompliantUserdetails->save($tempuser);

      }
        //update schedule status
      $input = $this->request->data();

      if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

          $schedule = TableRegistry::get('Schedule');
          $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

          if(!empty($schedule_data) && isset($input['tab_number']) && isset($input['step_id'])){

            if($input['tab_number'] != 5){

              $schedule_data->status = 2;

              // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
              if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                  $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

              }else{

                $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
              }
             // $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
              $schedule->save($schedule_data);
            }

          }
      }

    // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
    return $this->redirect($this->referer());


  }
  else
  {

    $this->Flash->error(__('Data could not be saved, Please try again.'));
  }

}


//save data for GI module health checkup category
if($tab_number == 11){

  $input = $this->request->data();


 //pr($input);die;

  $procedure_detail_question = $this->request->getData('procedure_detail_question');
  $medical_condition = $this->request->getData('medical_condition');
  $procedure_detail_question = array_filter($procedure_detail_question);

  if(!empty($procedure_detail_question && is_array($procedure_detail_question))){

    // compliant detial image related array
    // whitelisting validation for detail questions field start
    foreach ($procedure_detail_question as $ky => $ve) {

        $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

         if(!empty($tempq)){
          if($tempq['options']){
            $tempq = unserialize($tempq['options']);
            if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
          else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
          {
              if(!is_numeric($ve))
              {
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());
              }

          }
          else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
          {
            $checkDateFor = $this->General->checkDateFormat($ve);
            if(!$checkDateFor)
            {
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());
            }
          }
        }else{
        //pr($tempq);
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
        }

       // pr($screening_question);die;

      if(!empty($procedure_detail_question)){

        $procedure_detail_question =  base64_encode(Security::encrypt((serialize($procedure_detail_question)), SEC_KEY));
      }

      //update user medical conditions in edit medical history section
      $temp_user_medicatal_conditions = null;
      $user_medical_conditions = null;
      if(!empty($apt_id_data['user']) && isset($apt_id_data['user']->medical_history) && !empty($apt_id_data['user']->medical_history)){

          $user_medical_conditions = unserialize(Security::decrypt(base64_decode($apt_id_data['user']->medical_history), SEC_KEY));
          $temp_user_medicatal_conditions = array_column($user_medical_conditions,'name');
        }

        //pr($user_medical_conditions);

        $temp_medical_condition = $medical_condition;

        if(!empty($temp_medical_condition)){

          //pr($temp_medical_condition);die;
          $curyear = date('Y');
          $start_year = 1930;
          $yearRange = array();
          for($curyear ; $curyear>= $start_year ; $curyear--){
            $yearRange[] = $curyear;
          }
          foreach ($temp_medical_condition as $ky => $ve) {

            if(!in_array($ve['name'],['0','1'])){
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
            else if(isset($ve['year']) && $ve['year'] != '')
            {
              if(!in_array($ve['year'],$yearRange))
              {
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());
              }
            }
          }

          foreach ($temp_medical_condition as $key => $value)
          {

            if($value['name'] == 1){

              $temp = $commonTable->find('all')->where(['id'=> $key ])->first();
              $temp_medical_condition[$key]['condition_name'] = $temp->name;

              if(!empty($temp_user_medicatal_conditions) && in_array($temp->name, $temp_user_medicatal_conditions)){

                $condition_key = array_search($temp->name, $temp_user_medicatal_conditions);

                if(isset($user_medical_conditions[$condition_key])){

                    $user_medical_conditions[$condition_key]['year'] = $value['year'];
                }

              }else{

                $user_medical_conditions[] = array('name' => $temp->name, 'year' =>$value['year']);
              }
            }
          }
        }

        // pr($user_medical_conditions);die;
        if(!empty($user_medical_conditions)){

            $user_medical_conditions =  base64_encode(Security::encrypt((serialize($user_medical_conditions)), SEC_KEY));

            $this->Users->query()
            ->update()
            ->set(['medical_history' => $user_medical_conditions])
            ->where(['id' => $apt_id_data->user_id])
            ->execute();

        }



        if(!empty($medical_condition)){

          $medical_condition =  base64_encode(Security::encrypt((serialize($medical_condition)), SEC_KEY));

        }



      if(!empty($user_detail)){

         $this->ChiefCompliantUserdetails->query()
            ->update()
            ->set(['pre_op_procedure_detail' => $procedure_detail_question,'pre_op_medical_condition_detail' => $medical_condition,'current_tab_number' => 12])
            ->where(['appointment_id' => $apt_id])
            ->execute();
      }
      else
      {
        $tempuser = $this->ChiefCompliantUserdetails->newEntity();
        $tempuser->appointment_id  =  $apt_id ;
        $tempuser->pre_op_procedure_detail = $procedure_detail_question ;
        $tempuser->pre_op_medical_condition_detail = $medical_condition;
        $tempuser->current_tab_number  =  12;
        $tempuser->current_step_id  =  $step_id;
        $this->ChiefCompliantUserdetails->save($tempuser);

      }
        //update schedule status
      $input = $this->request->data();

      if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

          $schedule = TableRegistry::get('Schedule');
          $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

          if(!empty($schedule_data) && isset($input['tab_number']) && isset($input['step_id'])){

            if($input['tab_number'] != 5){

              $schedule_data->status = 2;
              $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
              $schedule->save($schedule_data);
            }

          }
      }

    // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
    return $this->redirect($this->referer());


  }
  else
  {

    $this->Flash->error(__('Data could not be saved, Please try again.'));
  }

}



//save data for GI module pre opertaion medication category
if($tab_number == 12){


  $input = $this->request->data();
  //pr($input);die;

  $pre_op_medications_question_detail = $this->request->getData('pre_op_medications_question');
  $pre_op_medications_question_detail = array_filter($pre_op_medications_question_detail);

  if(!empty($pre_op_medications_question_detail && is_array($pre_op_medications_question_detail))){

    // compliant detial image related array
    // whitelisting validation for detail questions field start
    foreach ($pre_op_medications_question_detail as $ky => $ve) {

        $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

         if(!empty($tempq)){
          if($tempq['options']){

            $tempq = unserialize($tempq['options']);
            if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
        }else{
        //pr($tempq);
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
        }

       // pr($screening_question);die;

      if(!empty($pre_op_medications_question_detail)){

        $pre_op_medications_question_detail =  base64_encode(Security::encrypt((serialize($pre_op_medications_question_detail)), SEC_KEY));
      }

      $medication_name_id = $this->request->getData('medication_name_name');
      $medication_data = null;
      if(!empty($medication_name_id) && is_array($medication_name_id))
      {

        $medication_name_id = array_filter($medication_name_id) ;
        $medication_name_id = array_unique($medication_name_id);

        $medication_dose = $this->request->getData('medication_dose');
        $medication_how_often = $this->request->getData('medication_how_often');
        if(is_array($medication_how_often))
        $medication_how_often = array_filter($medication_how_often); //remove the empty value from the array
        $medication_how_taken = $this->request->getData('medication_how_taken');

        if(empty($medication_how_taken) || empty($medication_how_often) || empty($medication_dose) || empty($medication_name_id)){

          $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
        }

        $i = 0 ;
        foreach ($medication_name_id as $key => $value)
        {

          // whitelisting validation for medication how often field  start
          if(!empty($medication_how_often) && isset($medication_how_often[$key]) && !array_key_exists($medication_how_often[$key], $length_arr))
          {

            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }

          $medication_data[$i]['medication_name_name'] = $value;
          $medication_data[$i]['medication_dose'] = !empty($medication_dose[$key]) ?  $medication_dose[$key] : '';
          $medication_data[$i]['medication_how_often'] = !empty($medication_how_often[$key]) ? $medication_how_often[$key] : '';
          $medication_data[$i]['medication_how_taken'] = !empty($medication_how_taken[$key]) ? $medication_how_taken[$key] : '';
          $i++;
        }
      }

    if(!empty($medication_data)){
      $medication_data = base64_encode(Security::encrypt(serialize($medication_data), SEC_KEY));
    }


    if(!empty($user_detail)){

       $this->ChiefCompliantUserdetails->query()
          ->update()
          ->set(['pre_op_medications_question_detail' => $pre_op_medications_question_detail,'current_tab_number' => 13,'compliant_medication_detail' => $medication_data])
          ->where(['appointment_id' => $apt_id])
          ->execute();
    }
    else
    {
      $tempuser = $this->ChiefCompliantUserdetails->newEntity();
      $tempuser->appointment_id  =  $apt_id ;
      $tempuser->pre_op_medications_question_detail = $pre_op_medications_question_detail;
      $tempuser->compliant_medication_detail = $medication_data;
      $tempuser->current_tab_number  =  13;
      $tempuser->current_step_id  =  $step_id;
      $this->ChiefCompliantUserdetails->save($tempuser);

    }
    //update schedule status
    $input = $this->request->data();

    if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

        $schedule = TableRegistry::get('Schedule');
        $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

        if(!empty($schedule_data) && isset($input['tab_number']) && isset($input['step_id'])){

          if($input['tab_number'] != 5){

            $schedule_data->status = 2;
            $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
            $schedule->save($schedule_data);
          }

        }
    }

    // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
    return $this->redirect($this->referer());
  }
  else
  {

    $this->Flash->error(__('Data could not be saved, Please try again.'));
  }

}



//save data for GI module health checkup category
if($tab_number == 13){

  $input = $this->request->data();
  //pr($input);die;

  $alleries_conditions_detail = $this->request->getData('alleries_conditions');

  if(!empty($alleries_conditions_detail)){


      //update user allergic conditions in edit medical history section
      $temp_user_allergic_conditions = null;
      $user_allergic_conditions = null;
      if(!empty($apt_id_data['user']) && isset($apt_id_data['user']->allergy_history) && !empty($apt_id_data['user']->allergy_history)){

          $user_allergic_conditions = unserialize(Security::decrypt(base64_decode($apt_id_data['user']->allergy_history), SEC_KEY));
          $temp_user_allergic_conditions = array_column($user_allergic_conditions,'name');
        }

        //pr($user_medical_conditions);

        $temp_allergic_condition = $alleries_conditions_detail;


        if(!empty($temp_allergic_condition)){



          foreach ($temp_allergic_condition as $key => $value)
          {
            if(!in_array($value['name'],['0','1'])){
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }

            if($value['name'] == 1){

              $temp = $commonTable->find('all')->where(['id'=> $key ])->first();
              //$temp_allergic_condition[$key]['condition_name'] = $temp->name;

              if(!empty($temp_user_allergic_conditions) && in_array($temp->name, $temp_user_allergic_conditions)){

                $condition_key = array_search($temp->name, $temp_user_allergic_conditions);

                if(isset($user_allergic_conditions[$condition_key])){

                    $user_allergic_conditions[$condition_key]['reaction'] = $value['reaction'];
                }

              }else{

                $user_allergic_conditions[] = array('name' => $temp->name, 'reaction' =>$value['reaction']);
              }
            }
          }
        }

       // pr($user_allergic_conditions);die;
        if(!empty($user_allergic_conditions)){

            $user_allergic_conditions =  base64_encode(Security::encrypt((serialize($user_allergic_conditions)), SEC_KEY));

            $this->Users->query()
            ->update()
            ->set(['allergy_history' => $user_allergic_conditions])
            ->where(['id' => $apt_id_data->user_id])
            ->execute();

        }

        //pr($alleries_conditions_detail);die;

       $alleries_conditions_detail =  base64_encode(Security::encrypt((serialize($alleries_conditions_detail)), SEC_KEY));

      if(!empty($user_detail)){

         $this->ChiefCompliantUserdetails->query()
            ->update()
            ->set(['pre_op_allergies_detail' => $alleries_conditions_detail,'current_tab_number' => 5])
            ->where(['appointment_id' => $apt_id])
            ->execute();
      }
      else
      {
        $tempuser = $this->ChiefCompliantUserdetails->newEntity();
        $tempuser->appointment_id  =  $apt_id ;
        $tempuser->pre_op_allergies_detail = $alleries_conditions_detail ;
        $tempuser->current_tab_number  =  5;
        $tempuser->current_step_id  =  $step_id;
        $this->ChiefCompliantUserdetails->save($tempuser);

      }
        //update schedule status
      $input = $this->request->data();

      if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

          $schedule = TableRegistry::get('Schedule');
          $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

          if(!empty($schedule_data) && isset($input['tab_number']) && isset($input['step_id'])){

            if($input['tab_number'] != 5){

              $schedule_data->status = 2;
              $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
              $schedule->save($schedule_data);
            }

          }
      }

    // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
    return $this->redirect($this->referer());


  }
  else
  {

    $this->Flash->error(__('Data could not be saved, Please try again.'));
  }

}


//save data for GI module health checkup category
if($tab_number == 14){

  $input = $this->request->data();
  //pr($input);die;

  $disease_name = $this->request->getData('disease_name');

  if(!empty($disease_name))
  {
    $disease_name = implode(',', $disease_name);
    $disease_name =  base64_encode(Security::encrypt($disease_name, SEC_KEY));

    if(!empty($user_detail)){

       $this->ChiefCompliantUserdetails->query()
          ->update()
          ->set(['disease_name' => $disease_name,'current_tab_number' => 15,'allready_asked_disease' => ''])
          ->where(['appointment_id' => $apt_id])
          ->execute();
    }
    else
    {
      $tempuser = $this->ChiefCompliantUserdetails->newEntity();
      $tempuser->appointment_id  =  $apt_id ;
      $tempuser->disease_name = $disease_name ;
      $tempuser->current_tab_number  =  15;
      $tempuser->allready_asked_disease = '';
      $tempuser->current_step_id  =  $step_id;
      $this->ChiefCompliantUserdetails->save($tempuser);

    }
          //update schedule status
    $input = $this->request->data();

    if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

        $schedule = TableRegistry::get('Schedule');
        $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

        if(!empty($schedule_data) && isset($input['tab_number']) && isset($input['step_id'])){

          if($input['tab_number'] != 5){

            $schedule_data->status = 2;
            $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
            $schedule->save($schedule_data);
          }

        }
    }

    // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
    return $this->redirect($this->referer());

  }
  else
  {

    $this->Flash->error(__('Data could not be saved, Please try again.'));
  }

}

  if($tab_number == 15){
   // pr($user_detail);
          // storing user details question in d/b
    //pr($this->request->data); die;
    $cur_disease_detail_tab = $this->request->getData('cur_disease_detail_tab');
    $disease_detail_question = $this->request->getData('disease_detail_question');
    $baseline_sysmptom_data = $this->request->getData('baseline_sysmptom');
    $alarm_sysmptom_data = $this->request->getData('alarm_sysmptom');
    $smoking_detail = $this->request->getData('smoking');
    $alcohol_detail = $this->request->getData('alcohol');
    $multivitamin_detail = $this->request->getData('multivitamin');

    $user_insert_data = array();

    if(!empty($disease_detail_question && is_array($disease_detail_question)))
    {

      // whitelisting validation for detail questions field start

      foreach ($disease_detail_question as $ky => $ve) {


        $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

        if(!empty($tempq)){
          if($tempq['options']){
            $tempq = unserialize($tempq['options']);
            if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

              $this->Flash->error(__('Could not be saved1. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
          else if(isset($tempq['data_type']) && $tempq['data_type'] == 2 && $ve !='' )
          {
              if(!is_numeric($ve))
              {
                $this->Flash->error(__('Could not be saved2. Please try again.'));
                return $this->redirect($this->referer());
              }
          }
          else if(isset($tempq['data_type']) && $tempq['data_type'] == 3 && $ve !='' )
          {
            $checkDateFor = $this->General->checkDateFormat($ve);
            if(!$checkDateFor)
            {
              $this->Flash->error(__('Could not be saved3. Please try again.'));
              return $this->redirect($this->referer());
            }
          }
        }
        else{

          $this->Flash->error(__('Could not be saved. Please try again.'));
          return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
        }
      }




      // read the previously stored disease detial qeustions
      if(!empty($user_detail->disease_questions_detail)) {

        $tmp_disease_questions_detail = unserialize((Security::decrypt(base64_decode($user_detail->disease_questions_detail), SEC_KEY))) ;

      }



      //pr($baseline_sysmptom_data);die;
      $scaleArray = array('','better','worse','about the same');
      if(!empty($baseline_sysmptom_data) && is_array($baseline_sysmptom_data)){
      foreach ($baseline_sysmptom_data as $ky => $ve) {

        if(!in_array($ve['answer'],['0','1'])){
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
        }
        else if(isset($ve['scale']) && $ve['scale'] != '')
        {
          if(!in_array($ve['scale'],$scaleArray))
          {
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());
          }
        }
      }
    }

    if(!empty($alarm_sysmptom_data) && is_array($alarm_sysmptom_data)){

      foreach ($alarm_sysmptom_data as $ky => $ve) {

          if(!in_array($ve['answer'],['0','1'])){
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
      }
    }







     $tmp_disease_questions_detail[$cur_disease_detail_tab] = array(
                                    'disease_detail_question' => $disease_detail_question,
                                    'baseline_sysmptom' => $baseline_sysmptom_data,
                                    'alarm_sysmptom' => $alarm_sysmptom_data
                                   );
                                   //pr($tmp_disease_questions_detail);die;

     //$disease_detail_question = $tmp_disease_questions_detail ;




    /*if(!empty($disease_detail_question))
      $disease_detail_question =  base64_encode(Security::encrypt((serialize($disease_detail_question)), SEC_KEY));*/
  }

  //pr($smoking_detail);die;
  if(!empty($smoking_detail) && is_array($smoking_detail))
  {
     if(!in_array($smoking_detail['current']['currentlysmoking'],['0','1']))
     {
       $this->Flash->error(__('Could not be saved. Please try again.'));
       return $this->redirect($this->referer());
     }
     if(!in_array($smoking_detail['current']['current_smoke_pack'],['','1','2','3','4','5','6','7','8','9','10']))
     {
       $this->Flash->error(__('Could not be saved. Please try again.'));
       return $this->redirect($this->referer());
     }

     if(!in_array($smoking_detail['past']['pastsmoking'],['0','1']))
     {
       $this->Flash->error(__('Could not be saved. Please try again.'));
       return $this->redirect($this->referer());
     }

     if(!in_array($smoking_detail['past']['past_smoke_pack'],['','1','2','3','4','5','6','7','8','9','10']))
     {
       $this->Flash->error(__('Could not be saved. Please try again.'));
       return $this->redirect($this->referer());
     }

     if(!in_array($smoking_detail['past']['past_smoke_year'],['','1','2','3','4','5','6','7','8','9','10']))
     {
       $this->Flash->error(__('Could not be saved. Please try again.'));
       return $this->redirect($this->referer());
     }
  }

  if($cur_disease_detail_tab == 1){

    $medical_history_data = array();

    if(!empty($smoking_detail)){

      //pr($smoking_detail);

      if(isset($smoking_detail['current']['currentlysmoking'])){

          $medical_history_data['is_currentlysmoking'] = $smoking_detail['current']['currentlysmoking'];

          if(!empty($medical_history_data['is_currentlysmoking'])){

            $medical_history_data['is_currentlysmoking'] = base64_encode(Security::encrypt($medical_history_data['is_currentlysmoking'], SEC_KEY));
          }

          if($smoking_detail['current']['currentlysmoking'] == 1){

            if(isset($smoking_detail['current']['current_smoke_year'])){

                $medical_history_data['current_smoke_year'] = $smoking_detail['current']['current_smoke_year'];

                if(!empty($medical_history_data['current_smoke_year'])){

                  $medical_history_data['current_smoke_year'] = base64_encode(Security::encrypt($medical_history_data['current_smoke_year'], SEC_KEY));
                }
            }

            if(isset($smoking_detail['current']['current_smoke_pack'])){

                $medical_history_data['current_smoke_pack'] = $smoking_detail['current']['current_smoke_pack'];

                if(!empty($medical_history_data['current_smoke_pack'])){

                  $medical_history_data['current_smoke_pack'] = base64_encode(Security::encrypt($medical_history_data['current_smoke_pack'], SEC_KEY));
                }
            }
          }
      }



      if(isset($smoking_detail['past']['pastsmoking'])){

          $medical_history_data['is_pastsmoking'] = $smoking_detail['past']['pastsmoking'];

          if(!empty($medical_history_data['is_pastsmoking'])){

            $medical_history_data['is_pastsmoking'] = base64_encode(Security::encrypt($medical_history_data['is_pastsmoking'], SEC_KEY));
          }

          if($smoking_detail['past']['pastsmoking'] == 1){

            if(isset($smoking_detail['past']['past_smoke_pack'])){

                $medical_history_data['past_smoke_pack'] = $smoking_detail['past']['past_smoke_pack'];

                if(!empty($medical_history_data['past_smoke_pack'])){

                  $medical_history_data['past_smoke_pack'] = base64_encode(Security::encrypt($medical_history_data['past_smoke_pack'], SEC_KEY));
                }
            }

            if(isset($smoking_detail['past']['past_smoke_year'])){

                $medical_history_data['past_smoke_year'] = $smoking_detail['past']['past_smoke_year'];

                if(!empty($medical_history_data['past_smoke_year'])){

                  $medical_history_data['past_smoke_year'] = base64_encode(Security::encrypt($medical_history_data['past_smoke_year'], SEC_KEY));
                }
            }
          }
      }

      $tmp_disease_questions_detail[$cur_disease_detail_tab]['smoking_detail'] = $smoking_detail;

     // $smoking_detail = base64_encode(Security::encrypt((serialize($smoking_detail)), SEC_KEY));

      //$user_insert_data['smoking_detail'] = $smoking_detail;
    }


    if(!empty($alcohol_detail) && is_array($alcohol_detail))
    {
       if(!in_array($alcohol_detail['current']['currentlydrinking'],['0','1']))
       {
         $this->Flash->error(__('Could not be saved. Please try again.'));
         return $this->redirect($this->referer());
       }
       if(!in_array($alcohol_detail['current']['current_drink_pack'],['','1','2','3','4','5','6','7','8','9','10','11','12','13','14']))
       {
         $this->Flash->error(__('Could not be saved. Please try again.'));
         return $this->redirect($this->referer());
       }

       if(!in_array($alcohol_detail['past']['pastdrinking'],['0','1']))
       {
         $this->Flash->error(__('Could not be saved. Please try again.'));
         return $this->redirect($this->referer());
       }

       if(!in_array($alcohol_detail['past']['past_drink_pack'],['','1','2','3','4','5','6','7','8','9','10','11','12','13','14']))
       {
         $this->Flash->error(__('Could not be saved. Please try again.'));
         return $this->redirect($this->referer());
       }

       if(!in_array($alcohol_detail['past']['past_drink_year'],['','1','2','3','4','5','6','7','8','9','10']))
       {
         $this->Flash->error(__('Could not be saved. Please try again.'));
         return $this->redirect($this->referer());
       }
    }





    if(!empty($alcohol_detail)){



      if(isset($alcohol_detail['current']['currentlydrinking'])){

          $medical_history_data['is_currentlydrinking'] = $alcohol_detail['current']['currentlydrinking'];

          if(!empty($medical_history_data['is_currentlydrinking'])){

            $medical_history_data['is_currentlydrinking'] = base64_encode(Security::encrypt($medical_history_data['is_currentlydrinking'], SEC_KEY));
          }

          if($alcohol_detail['current']['currentlydrinking'] == 1){

            if(isset($alcohol_detail['current']['current_drink_pack'])){

                $medical_history_data['current_drink_pack'] = $alcohol_detail['current']['current_drink_pack'];

                if(!empty($medical_history_data['current_drink_pack'])){

                  $medical_history_data['current_drink_pack'] = base64_encode(Security::encrypt($medical_history_data['current_drink_pack'], SEC_KEY));
                }

            }

            if(isset($alcohol_detail['current']['current_drink_year'])){

                $medical_history_data['current_drink_year'] = $alcohol_detail['current']['current_drink_year'];

                if(!empty($medical_history_data['current_drink_year'])){

                  $medical_history_data['current_drink_year'] = base64_encode(Security::encrypt($medical_history_data['current_drink_year'], SEC_KEY));
                }
            }
          }
      }



      if(isset($alcohol_detail['past']['pastdrinking'])){

          $medical_history_data['is_pastdrinking'] = $alcohol_detail['past']['pastdrinking'];

          if(!empty($medical_history_data['is_pastdrinking'])){

            $medical_history_data['is_pastdrinking'] = base64_encode(Security::encrypt($medical_history_data['is_pastdrinking'], SEC_KEY));
          }

          if($alcohol_detail['past']['pastdrinking'] == 1){

            if(isset($alcohol_detail['past']['past_drink_pack'])){

                $medical_history_data['past_drink_pack'] = $alcohol_detail['past']['past_drink_pack'];

                if(!empty($medical_history_data['past_drink_pack'])){

                  $medical_history_data['past_drink_pack'] = base64_encode(Security::encrypt($medical_history_data['past_drink_pack'], SEC_KEY));
                }
            }

            if(isset($alcohol_detail['past']['past_drink_year'])){

                $medical_history_data['past_drink_year'] = $alcohol_detail['past']['past_drink_year'];

                if(!empty($medical_history_data['past_drink_year'])){

                  $medical_history_data['past_drink_year'] = base64_encode(Security::encrypt($medical_history_data['past_drink_year'], SEC_KEY));
                }
            }
          }
      }

      // $alcohol_detail = base64_encode(Security::encrypt((serialize($alcohol_detail)), SEC_KEY));
      // $user_insert_data['alcohol_detail'] = $alcohol_detail;

      $tmp_disease_questions_detail[$cur_disease_detail_tab]['alcohol_detail'] = $alcohol_detail;
    }

    if(!empty($medical_history_data)){

       $this->Users->query()
            ->update()
            ->set($medical_history_data)
            ->where(['id' => $apt_id_data->user_id])
            ->execute();
    }

    $medication_name_id = $this->request->getData('medication_name_name');
    $medication_data = array();
    if(!empty($medication_name_id) && is_array($medication_name_id))
    {

      $medication_name_id = array_filter($medication_name_id) ;
      $medication_name_id = array_unique($medication_name_id);

      $medication_dose = $this->request->getData('medication_dose');
      $medication_how_often = $this->request->getData('medication_how_often');
      if(is_array($medication_how_often))
      $medication_how_often = array_filter($medication_how_often);
      //remove the empty value from the array

      $medication_how_taken = $this->request->getData('medication_how_taken');

      $i = 0 ;
      foreach ($medication_name_id as $key => $value)
      {

        // whitelisting validation for medication how often field  start
        if(!empty($medication_how_often) && isset($medication_how_often[$key]) && !array_key_exists($medication_how_often[$key], $length_arr))
          {

            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
          // whitelisting validation for medication how often field  end
          $medication_data[$i]['medication_name_name'] = $value;
          $medication_data[$i]['medication_dose'] = !empty($medication_dose[$key]) ?  $medication_dose[$key] : '';
          $medication_data[$i]['medication_how_often'] = !empty($medication_how_often[$key]) ? $medication_how_often[$key] : '';
          $medication_data[$i]['medication_how_taken'] = !empty($medication_how_taken[$key]) ? $medication_how_taken[$key] : '';
          $i++;
      }
    }

    if(!empty($medication_data)){

      $user_insert_data['compliant_medication_detail'] = base64_encode(Security::encrypt(serialize($medication_data), SEC_KEY));
    }

    if(!empty($multivitamin_detail)){

        $tmp_disease_questions_detail[$cur_disease_detail_tab]['multivitamin_detail'] = $multivitamin_detail;
       //  $multivitamin_data[$cur_disease_detail_tab] = $multivitamin_detail;
       // // pr($multivitamin_data);die;
       //  $user_insert_data['chronic_illnesses_multivitamin_detail'] = base64_encode(Security::encrypt(serialize($multivitamin_data), SEC_KEY));
    }

  }
  // Pain Management
  // if($already_asked_cc_details == $user_detail->chief_compliant_id ){
  // $chronic_pain_assessment_pmh = $this->request->getData('chronic_pain_assessment_pmh');

  //       $chronic_pain_assessment_thc = $this->request->getData('chronic_pain_assessment_thc');
  //      // pr($chronic_pain_assessment_thc);die;


  //       $chronic_pain_curr_treat_history = $this->request->getData('chronic_pain_curr_treat_history');


  //       $chronic_pain_past_treat_history = $this->request->getData('chronic_pain_past_treat_history');


  //       $chronic_pain_opioid_overdose_risk = $this->request->getData('chronic_pain_opioid_overdose_risk');

  //             if($tempq['options']){
  //               $tempq = unserialize($tempq['options']);
  //               if((is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq))){
  //                 $this->Flash->error(__('Could not be saved. Please try again.'));
  //                 $this->Flash->error(__('Could not be saved t1. Please try again.'));
  //                 return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
  //               }
  //             }
  //         $user_detail->chronic_pain_assessment_pmh = $tempar;
  //       }

  //       if(!empty($user_detail->chronic_pain_treatment_history)){

  //           $user_detail->chronic_pain_treatment_history = unserialize(Security::decrypt( base64_decode($user_detail->chronic_pain_treatment_history), SEC_KEY));
  //            $tempar = array();
  //           foreach($user_detail->chronic_pain_treatment_history as $key => $value){

  //               if(!empty($value)){

  //                 $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
  //                 $tempar[$key]['question_id'] = $temp->id ;
  //                 $tempar[$key]['question'] = $temp->question ;
  //                 $tempar[$key]['answer'] = $value;
  //               }
  //             }
  //             $user_detail->chronic_pain_treatment_history = $tempar;
  //       }


  //         if(!empty($user_detail->chronic_pain_curr_treat_history)){

  //           $user_detail->chronic_pain_curr_treat_history = unserialize(Security::decrypt( base64_decode($user_detail->chronic_pain_curr_treat_history), SEC_KEY));
  //            $tempar = array();
  //           foreach($user_detail->chronic_pain_curr_treat_history as $key => $value){

  //               if(!empty($value)){

  //                 $temp = $this->ChiefCompliantMedication->find('all')->where(['id'=> $key])->first();
  //                 $tempar[$key]['layman_name'] = $temp->layman_name ;
  //                 $tempar[$key]['answer'] = $value;
  //               }
  //             }
  //             $user_detail->chronic_pain_curr_treat_history = $tempar;
  //       }


  //        if(!empty($user_detail->chronic_pain_past_treat_history)){

  //           $user_detail->chronic_pain_past_treat_history = unserialize(Security::decrypt( base64_decode($user_detail->chronic_pain_past_treat_history), SEC_KEY));
  //            $tempar = array();
  //           foreach($user_detail->chronic_pain_past_treat_history as $key => $value){

  //               if(!empty($value)){

  //                 $temp = $this->ChiefCompliantMedication->find('all')->where(['id'=> $key])->first();
  //                 $tempar[$key]['layman_name'] = $temp->layman_name ;
  //                 $tempar[$key]['answer'] = $value;
  //               }
  //             }
  //             $user_detail->chronic_pain_past_treat_history = $tempar;
  //       }

  // End Pain Management

   $disease_detail_question = $tmp_disease_questions_detail ;

    if(!empty($disease_detail_question))
      $disease_detail_question =  base64_encode(Security::encrypt((serialize($disease_detail_question)), SEC_KEY));

     // add the current disease in  allready_asked_disease
    if(empty($user_detail->allready_asked_disease)){
        $allready_asked_disease = $cur_disease_detail_tab ;
    }
    else{
        $allready_asked_disease = $user_detail->allready_asked_disease.','.$cur_disease_detail_tab ;
    }

   // pr($user_detail);die;
    /*if(!empty($user_detail->disease_name)){

      $user_detail->disease_name = Security::decrypt(base64_decode($user_detail->disease_name),SEC_KEY);
    }*/

    // pr($allready_asked_disease);
    // pr($user_detail->disease_name);die;


    $user_insert_data['disease_questions_detail'] = $disease_detail_question;
    $user_insert_data['allready_asked_disease'] = $allready_asked_disease;
    $user_insert_data['current_tab_number'] = 15;
    if(!empty($user_detail)){

      // check if all disease questions has asked then set the current tab number to 4
      if($allready_asked_disease == $user_detail->disease_name){

        $user_insert_data['current_tab_number'] = 4;

       $this->ChiefCompliantUserdetails->query()
          ->update()
          ->set($user_insert_data)
          ->where(['appointment_id' => $apt_id])
          ->execute();

      }else{
       $this->ChiefCompliantUserdetails->query()
          ->update()
          ->set($user_insert_data)
          ->where(['appointment_id' => $apt_id])
          ->execute();
      }

    }
    else {

      $tempuser = $this->ChiefCompliantUserdetails->newEntity();
      $tempuser->appointment_id  =  $apt_id ;
      $tempuser->disease_questions_detail  =  $details_question ;
      $tempuser->allready_asked_disease = $allready_asked_disease;
     // $tempuser->smoking_detail = $smoking_detail;
      //$tempuser->alcohol_detail = $alcohol_detail;
      $tempuser->current_tab_number  =  4;
      $tempuser->current_step_id  =  $step_id ;
      $this->ChiefCompliantUserdetails->save($tempuser);

    }

      //update schedule status
    $input = $this->request->data();

    if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

        $schedule = TableRegistry::get('Schedule');
        $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

        if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

          if($input['tab_number'] != 5){

            $schedule_data->status = 2;

            // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
            if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

            }else{

              $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
            }
            //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
            $schedule->save($schedule_data);
          }


        }
    }

    // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
    return $this->redirect($this->referer());


 /* }else{

    $this->Flash->error(__('Data could not be saved, Please try again.'));
  }*/

}


  if($tab_number == 16)
  {

   //pr($this->request->data());die;
    $sub_tab_name = $this->request->getData('sub_tab_name');
    $soapp_drug_details_question = $this->request->getData('soapp_drug_details_question');
    $comm_drug_details_question = $this->request->getData('comm_drug_details_question');
    $dast_drug_details_question = $this->request->getData('dast_drug_details_question');
    $padt_drug_details_question = $this->request->getData('padt_drug_details_question');
    $padt_other_question_119 = $this->request->getData('padt_other_question_119');
    $ort_drug_details_question = $this->request->getData('ort_drug_details_question');
    $m3_drug_details_question = $this->request->getData('m3_drug_details_question');

    if($sub_tab_name == 'soapp'){

      if(!empty($soapp_drug_details_question && is_array($soapp_drug_details_question)))
      {
        // whitelisting validation for detail questions field start
        // pr($details_question);  die;
        foreach ($soapp_drug_details_question as $ky => $ve)
        {

          $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

           if(!empty($tempq)){
            if($tempq['options']){
              $tempq = unserialize($tempq['options']);
              if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
          }else{
          //pr($tempq);
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
        }
      }

      if($sub_tab_name == 'comm'){

        if(!empty($comm_drug_details_question && is_array($comm_drug_details_question)))
        {
          // whitelisting validation for detail questions field start
          // pr($details_question);  die;
          foreach ($comm_drug_details_question as $ky => $ve)
          {

            $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

             if(!empty($tempq)){
              if($tempq['options']){
                $tempq = unserialize($tempq['options']);
                if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
              }
            }else{
            //pr($tempq);
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
          }
        }
      }

    if($sub_tab_name == 'dast'){
      if(!empty($dast_drug_details_question && is_array($dast_drug_details_question)))
      {
        // whitelisting validation for detail questions field start
        // pr($details_question);  die;
        foreach ($dast_drug_details_question as $ky => $ve)
        {

          $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

           if(!empty($tempq)){
            if($tempq['options']){
               $tempq = unserialize($tempq['options']);
              if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
          }else{
          //pr($tempq);
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
        }
      }
    }

    if($sub_tab_name == 'padt'){
      if(!empty($padt_drug_details_question && is_array($padt_drug_details_question)))
      {
        // whitelisting validation for detail questions field start

        foreach ($padt_drug_details_question as $ky => $ve)
        {
          $painArray = array(''=>'','0%' =>'0','10%' =>'10','20%' =>'20','30%' =>'30','40%' =>'40','50%' =>'50','60%' =>'60','70%' =>'70','80%' =>'80','90%' =>'90','100%' =>'100');
          $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

           if(!empty($tempq)){
             if($tempq['options']){
               $tempq = unserialize($tempq['options']);
               if($ky == 122)
               {
                   $tmeparr = array();
                   $tempQuestion = $tempq;
                   foreach($tempQuestion as $key => $value)
                   {
                       $tmeparr[] =  $painArray[$value];
                   }

                   $tempq = $tmeparr;
               }

              if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq))){

                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
          }else{
          //pr($tempq);
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
        }
      }

      if($sub_tab_name == 'ort')
        {
             if(!empty($ort_drug_details_question && is_array($ort_drug_details_question)))
          {
              /* whitelisting validation for covid detail questions field start */

            foreach ($ort_drug_details_question as $ky => $ve) {
              /*if key is more_option string in that case we do not whitelist and for image we do not white list */
             $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();
             if(!empty($tempq)){
              if($tempq['options']){
                $tempq = unserialize($tempq['options']);
                if((is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq))){
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
              {
                if(!is_numeric($ve))
                {
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());
                }
              }
            }else{
              $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
              //update schedule status

           //  if(!empty($ort_drug_details_question)){

           //   $ort_drug_details_question = base64_encode(Security::encrypt(serialize($chronic_pain_assessment_ort),SEC_KEY));
           // }

           // $user_detail_update['chronic_pain_assessment_ort'] = $chronic_pain_assessment_ort;
          }
        }

        if($sub_tab_name == 'm3'){

        if(!empty($m3_drug_details_question && is_array($m3_drug_details_question)))
        {
          // whitelisting validation for detail questions field start
          // pr($details_question);  die;
          foreach ($m3_drug_details_question as $ky => $ve)
          {

            $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

             if(!empty($tempq)){
              if($tempq['options']){
                $tempq = unserialize($tempq['options']);
                if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
              }
            }else{
            //pr($tempq);
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
          }
        }
      }

     //save the data in database
    $medication_refill_drug_detail = array();
    $medication_refill_comm_soapp_details = array();
// pr($user_detail->medication_refill_extra_details);die;
    if(!empty($user_detail->medication_refill_extra_details)){

      $medication_refill_drug_detail = @unserialize(Security::decrypt(base64_decode($user_detail->medication_refill_extra_details),SEC_KEY));
    }

    if(!empty($user_detail->medication_refill_comm_soapp_details)){

      $medication_refill_comm_soapp_details = @unserialize(Security::decrypt(base64_decode($user_detail->medication_refill_comm_soapp_details),SEC_KEY));
    }

    if(!empty($dast_drug_details_question)){
      $medication_refill_drug_detail['dast'] = $dast_drug_details_question;

    }

    if(!empty($comm_drug_details_question)){

      $medication_refill_comm_soapp_details['comm'] = $comm_drug_details_question;
    }

    if(!empty($soapp_drug_details_question)){

      $medication_refill_comm_soapp_details['soapp'] = $soapp_drug_details_question;
    }

    if(!empty($padt_drug_details_question)){

      $medication_refill_drug_detail['padt'] = $padt_drug_details_question;
    }
    if(!empty($ort_drug_details_question)){

      $medication_refill_drug_detail['ort'] = $ort_drug_details_question;
    }
    if(!empty($m3_drug_details_question)){

      $medication_refill_drug_detail['m3'] = $m3_drug_details_question;
    }

    $medication_refill_drug_detail['padt_other_question_119'] = $padt_other_question_119;

    //pr($medication_refill_drug_detail);die;

    if(!empty($medication_refill_drug_detail))
      $medication_refill_drug_detail =  base64_encode(Security::encrypt((serialize($medication_refill_drug_detail)), SEC_KEY));
    else{

      $medication_refill_drug_detail = '';
    }

    if(!empty($medication_refill_comm_soapp_details)){

      $medication_refill_comm_soapp_details =  base64_encode(Security::encrypt((serialize($medication_refill_comm_soapp_details)), SEC_KEY));
    }
    else{

      $medication_refill_comm_soapp_details = '';
    }

    //logic for next active sub tab and visited sub tabs

    $active_sub_tab = '';
    $visited_sub_tabs = array();
    if(!empty($user_detail->visited_sub_tabs)){

      $visited_sub_tabs = @unserialize($user_detail->visited_sub_tabs);
    }


    if($sub_tab_name == 'soapp'){

      $active_sub_tab = 'comm';
      $visited_sub_tabs = array_unique(array_merge($visited_sub_tabs, array('soapp','comm')));
    }
    elseif($sub_tab_name == 'comm'){

      $active_sub_tab = 'padt';
      $visited_sub_tabs = array_unique(array_merge($visited_sub_tabs, array('padt','comm')));
    }
    elseif($sub_tab_name == 'padt'){
      

      $active_sub_tab = 'dast';
      $visited_sub_tabs = array_unique(array_merge($visited_sub_tabs, array('dast','padt')));
      if($step_id == 26)
      {
        $active_sub_tab = 'ort';
        $visited_sub_tabs = array_unique(array_merge($visited_sub_tabs, array('ort','padt')));
      }
    }
    elseif($sub_tab_name == 'dast'){

      $active_sub_tab = 'dast';
      $visited_sub_tabs = array_unique(array_merge($visited_sub_tabs, array('dast')));
    }
    elseif($sub_tab_name == 'ort'){
        // die('test');
      $active_sub_tab = 'm3';
      $visited_sub_tabs = array_unique(array_merge($visited_sub_tabs, array('m3','ort')));
    }

    if(!empty($visited_sub_tabs)){

      $visited_sub_tabs = serialize($visited_sub_tabs);
    }

    $current_tab_number = $sub_tab_name == 'dast' ? 5 : 16;
    if($step_id == 26)
    {
      $current_tab_number = $sub_tab_name == 'm3' ? 5 : 16;
    }

    if(!empty($user_detail)){

      $this->ChiefCompliantUserdetails->query()
        ->update()
        ->set(['medication_refill_extra_details' => $medication_refill_drug_detail,'current_tab_number' => $current_tab_number,'medication_refill_comm_soapp_details' => $medication_refill_comm_soapp_details, 'active_sub_tab' =>$active_sub_tab, 'visited_sub_tabs' =>$visited_sub_tabs])
        ->where(['appointment_id' => $apt_id])
        ->execute();
    }
    else
    {
      $tempuser = $this->ChiefCompliantUserdetails->newEntity();
      $tempuser->appointment_id  =  $apt_id ;
      $tempuser->medication_refill_extra_details  =  $medication_refill_drug_detail ;
      $tempuser->medication_refill_comm_soapp_details = $medication_refill_comm_soapp_details;
      $tempuser->current_tab_number  = $current_tab_number ;
      $tempuser->current_step_id  =  $step_id ;
      $tempuser->active_sub_tab  = $active_sub_tab ;
      $tempuser->visited_sub_tabs  =  $visited_sub_tabs ;
      $this->ChiefCompliantUserdetails->save($tempuser);

    }

    //update schedule status
    $input = $this->request->data();

    if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

        $schedule = TableRegistry::get('Schedule');
        $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

        if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

          if($input['tab_number'] != 5){

            $schedule_data->status = 2;

            // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
            if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

            }else{

              $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
            }
            //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
            $schedule->save($schedule_data);
          }


        }
    }

    // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
    return $this->redirect($this->referer());
  }


  if($tab_number == 17)
  {

    //pr($this->request->data());die;

      $cur_detail_tab_chief_compliant = $this->request->getData('cur_detail_tab_chief_compliant');
      $details_question = $this->request->getData('follow_up_question');

      if(!empty($details_question && is_array($details_question))){


  // whitelisting validation for detail questions field start
// pr($details_question);  die;
        foreach ($details_question as $ky => $ve) {
          // pr($ky);
          if(!is_numeric($ky)) continue; // if key is more_option string in that case we do not whitelist and for image we do not white list

         $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

         if(!empty($tempq)){
          if(!empty($tempq->options)){
            $tempq = unserialize($tempq->options);
            if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
        }else{
        //pr($tempq);
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
        }

// read the previously stored follow up sx detial qeustions
if(!empty($user_detail->follow_up_sx_detail)) {
  // $tmp_details_question = unserialize(base64_decode($user_detail->chief_compliant_details)) ;
  $tmp_details_question = unserialize((Security::decrypt(base64_decode($user_detail->follow_up_sx_detail), SEC_KEY))) ;

}

// pr($tmp_details_question);
//  pr($details_question);

 $tmp_details_question [$cur_detail_tab_chief_compliant] = $details_question ;
$details_question = $tmp_details_question ;

 //pr($details_question); die;

   // $details_question = base64_encode(serialize($details_question)) ;  //  serialize($details_question);
// pr($details_question); die;
if(!empty($details_question))
 $details_question =  base64_encode(Security::encrypt((serialize($details_question)), SEC_KEY));  //  serialize($details_question);


  // add the current CC in  already_asked_cc_details
if(empty($user_detail->already_asked_cc_details)){
    $already_asked_cc_details = $cur_detail_tab_chief_compliant ;
}
else{
    $already_asked_cc_details = $user_detail->already_asked_cc_details.','.$cur_detail_tab_chief_compliant ;
}
          if(!empty($user_detail)){

// check if all CC questions has asked then set the current tab number to 3

if($already_asked_cc_details == $user_detail->chief_compliant_id ){


 $this->ChiefCompliantUserdetails->query()
    ->update()
    ->set(['follow_up_sx_detail' => $details_question, 'already_asked_cc_details' => $already_asked_cc_details, 'current_tab_number' => 3,'max_visited_tab_number' => 17])
    ->where(['appointment_id' => $apt_id])
    ->execute();


}else{
 $this->ChiefCompliantUserdetails->query()
    ->update()
    ->set(['follow_up_sx_detail' => $details_question, 'already_asked_cc_details' => $already_asked_cc_details,'max_visited_tab_number' => 17])
    ->where(['appointment_id' => $apt_id])
    ->execute();
}

                } else {

                  $tempuser = $this->ChiefCompliantUserdetails->newEntity();
                  $tempuser->appointment_id  =  $apt_id ;
                  $tempuser->follow_up_sx_detail  =  $details_question ;
                  $tempuser->current_tab_number  =  3 ;
                  $tempuser->max_visited_tab_number = 17;
                  $tempuser->current_step_id  =  $step_id ;
                  $this->ChiefCompliantUserdetails->save($tempuser);

                }

                //update schedule status
              $input = $this->request->data();

              if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

                  $schedule = TableRegistry::get('Schedule');
                  $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

                  if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

                    if($input['tab_number'] != 5){

                      $schedule_data->status = 2;

                      // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
                      if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                          $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

                      }else{

                        $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                      }
                      //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                      $schedule->save($schedule_data);
                    }


                  }
              }

    // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
    return $this->redirect($this->referer());


          }else{

            $this->Flash->error(__('Data could not be saved, Please try again.'));
          }

        }


    if($tab_number == 18)
  {


      $covid_detail = $this->request->getData('covid_detail');
      $phq_9_detail = $this->request->getData('phq_9_detail');

      if(!empty($covid_detail && is_array($covid_detail)) && !empty($phq_9_detail && is_array($phq_9_detail)))
      {


        // whitelisting validation for covid detail questions field start
        foreach ($covid_detail as $ky => $ve) {

          if(!is_numeric($ky)) continue; // if key is more_option string in that case we do not whitelist and for image we do not white list

         $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

         if(!empty($tempq)){
          if(($tempq['options'])){
            $tempq = unserialize($tempq['options']);
            if((is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
        }else{
        //pr($tempq);
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
        }

        // whitelisting validation for phq-9 detail questions field start

        foreach ($phq_9_detail as $ky => $ve) {
          // pr($ky);
          if(!is_numeric($ky)) continue; // if key is more_option string in that case we do not whitelist and for image we do not white list

         $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

         if(!empty($tempq)){
          if(!in_array($ve,['0','1','2','3'])){
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
        }else{
        //pr($tempq);
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
        }




      if(!empty($covid_detail))
       $covid_detail =  base64_encode(Security::encrypt((serialize($covid_detail)), SEC_KEY));  //  serialize($details_question);

      if(!empty($phq_9_detail))
       $phq_9_detail =  base64_encode(Security::encrypt((serialize($phq_9_detail)), SEC_KEY));  //  serialize($details_question);

      $this->ChiefCompliantUserdetails->query()
        ->update()
        ->set(['covid_detail' => $covid_detail,'phq_9_detail' => $phq_9_detail,'current_tab_number' => 3])
        ->where(['appointment_id' => $apt_id])
        ->execute();

        //update schedule status
        $input = $this->request->data();

        if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

            $schedule = TableRegistry::get('Schedule');
            $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

            if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

              if($input['tab_number'] != 5){

                $schedule_data->status = 2;

                // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
                if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                    $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

                }else{

                  $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                }
                //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                $schedule->save($schedule_data);
              }


            }
        }

          // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
          return $this->redirect($this->referer());


          }else{

            $this->Flash->error(__('Data could not be saved, Please try again.'));
          }

        }

  if($tab_number == 19)
  {

   // pr($this->request->data());die;

      $details_question = $this->request->getData('phq_9_detail');


      if(!empty($details_question && is_array($details_question))){


  // whitelisting validation for detail questions field start
// pr($details_question);  die;
        foreach ($details_question as $ky => $ve) {
          // pr($ky);
          if(!is_numeric($ky)) continue; // if key is more_option string in that case we do not whitelist and for image we do not white list

         $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

         if(!empty($tempq)){
          if(!in_array($ve,['0','1','2','3'])){

              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data

          }
        }else{
        //pr($tempq);
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
        }

      if(!empty($details_question))
       $details_question =  base64_encode(Security::encrypt((serialize($details_question)), SEC_KEY));  //  serialize($details_question);


      if($step_id == 2){

        $current_tab_number = 4;
      }
      else{

        $current_tab_number = 3;
      }
      $this->ChiefCompliantUserdetails->query()
        ->update()
        ->set(['phq_9_detail' => $details_question,'current_tab_number' => $current_tab_number])
        ->where(['appointment_id' => $apt_id])
        ->execute();

        //update schedule status
        $input = $this->request->data();

        if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

            $schedule = TableRegistry::get('Schedule');
            $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

            if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

              if($input['tab_number'] != 5){

                $schedule_data->status = 2;

                // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
                if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                    $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

                }else{

                  $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                }
                //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                $schedule->save($schedule_data);
              }


            }
        }

          // $this->Flash->success(__('Successfully saved provided detail, Please proceed.'));
          return $this->redirect($this->referer());


          }else{

            $this->Flash->error(__('Data could not be saved, Please try again.'));
          }

        }

    if($tab_number == 22)
    {
        //pr($this->request->data());die;
        $focused_story = $this->request->getData('focused_history');
           //save Allergies history data
      if(!empty($focused_story && is_array($focused_story)))
      {

            // whitelisting validation for covid detail questions field start
            //pr($focused_story);
            foreach ($focused_story as $ky => $ve) {

              if(!is_numeric($ky)) continue; // if key is more_option string in that case we do not whitelist and for image we do not white list



             $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

             if(!empty($tempq)){
              if($tempq['options']){
                $tempq = unserialize($tempq['options']);

                if($ky == 212)
                {
                  unset($ve['members']);
                }

                if((is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq))){
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
              {
                  if(!is_numeric($ve))
                  {
                    $this->Flash->error(__('Could not be saved. Please try again.'));
                    return $this->redirect($this->referer());
                  }
              }
            }else{
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }

              if(!empty($focused_story))
              $focused_story =  base64_encode(Security::encrypt(serialize($focused_story), SEC_KEY));  //  serialize($details_question);
             $current_tab_number = $step_id == 26 ? 28 :18;
             $this->ChiefCompliantUserdetails->query()
              ->update()
              ->set(['focused_history_detail' => $focused_story,'current_tab_number' => $current_tab_number])
              ->where(['appointment_id' => $apt_id])
              ->execute();

              //update schedule status
              $input = $this->request->data();

                if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

                $schedule = TableRegistry::get('Schedule');
                $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

                if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

                  if($input['tab_number'] != 5){

                    $schedule_data->status = 2;

                    // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
                    if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                        $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

                    }else{

                      $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                    }
                    //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                    $schedule->save($schedule_data);
                  }
                }
            }
            return $this->redirect($this->referer());
      }
      else{
        $this->Flash->error(__('Data could not be saved, Please try again.'));
        
      }

    }

    // Pain managemnt
    if($tab_number == 20)
    {
        // pr($this->request->getData()); die;
        $user_detail_update = array();
        $sub_tab_name = $this->request->getData('sub_tab_name');
        $chronic_pain_assessment_tmb = $this->request->getData('chronic_pain_assessment_tmb');
        $chronic_pain_assessment_pmh = $this->request->getData('chronic_pain_assessment_pmh');

        $chronic_pain_assessment_thc = $this->request->getData('chronic_pain_assessment_thc');


        $chronic_pain_curr_treat_history = $this->request->getData('chronic_pain_curr_treat_history');


        $chronic_pain_past_treat_history = $this->request->getData('chronic_pain_past_treat_history');


        $chronic_pain_opioid_overdose_risk = $this->request->getData('chronic_pain_opioid_overdose_risk');

        $chronic_pain_assessment_ort = $this->request->getData('chronic_pain_assessment_ort');


        if($sub_tab_name == 'Pain assessments')
        {

          if(!empty($chronic_pain_assessment_tmb && is_array($chronic_pain_assessment_tmb)))
          {
              /* whitelisting validation for covid detail questions field start */

            foreach ($chronic_pain_assessment_tmb as $ky => $ve) {
              /*if key is more_option string in that case we do not whitelist and for image we do not white list */
             $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();
             if(!empty($tempq)){
              if($tempq['options']){
                $tempq = unserialize($tempq['options']);
                if((is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq))){
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
              {
                if(!is_numeric($ve))
                {
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());
                }
              }
            }else{
              $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
              //update schedule status

            if(!empty($chronic_pain_assessment_tmb)){

             $chronic_pain_assessment_tmb = base64_encode(Security::encrypt(serialize($chronic_pain_assessment_tmb),SEC_KEY));
           }

           $user_detail_update['chronic_pain_assessment_tmb'] = $chronic_pain_assessment_tmb;
          }
           if(!empty($chronic_pain_assessment_pmh && is_array($chronic_pain_assessment_pmh)))
          {
              /* whitelisting validation for covid detail questions field start */

               foreach ($chronic_pain_assessment_pmh as $key => $value)
                {
                  if(isset($value['sym_id']) && !empty($value['sym_id']))
                  {
                    // whitelisting validation for cancer symptom assessment
                    $cond = $commonTable->find('all')->where(['cond_type' => 9,'id' => $value['sym_id']])->toArray();
                    if(empty($cond)) {

                        $this->Flash->error(__('Could not be saved. Please try again.'));
                        return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                    }
                    // whitelisting validation for shots history field end
                    if(isset($value['sym_id']) && isset($value['date'])){
                      $temp_chronic_pain_assessment_pmh[$value['sym_id']] = $value['date'];
                    }
                  }
                }
              //update schedule status
            if(!empty($temp_chronic_pain_assessment_pmh)){

             $temp_chronic_pain_assessment_pmh = base64_encode(Security::encrypt(serialize($temp_chronic_pain_assessment_pmh),SEC_KEY));

             $user_detail_update['chronic_pain_assessment_pmh'] = $temp_chronic_pain_assessment_pmh;
           }
           }
        }


        if($sub_tab_name == 'Treatment history')
        {

                if(!empty($chronic_pain_assessment_thc && is_array($chronic_pain_assessment_thc)))
                {
                    /* whitelisting validation for covid detail questions field start */

                  foreach ($chronic_pain_assessment_thc as $ky => $ve) {

                    if($ky == 170 || $ky == 173 )
                    continue;
                    /*if key is more_option string in that case we do not whitelist and for image we do not white list */
                   $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();
                   if(!empty($tempq)){
                    if($tempq['options']){
                      $tempq = unserialize($tempq['options']);
                      if((is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq))){
                        $this->Flash->error(__('Could not be saved. Please try again.'));
                        return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                      }
                    }
                    else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
                    {
                      if(!is_numeric($ve))
                      {
                        $this->Flash->error(__('Could not be saved. Please try again.'));
                        return $this->redirect($this->referer());
                      }
                    }
                  }else{
                    $this->Flash->error(__('Could not be saved. Please try again.'));
                      return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                    }
                  }
                    //update schedule status

                  if(!empty($chronic_pain_assessment_thc)){

                   $chronic_pain_assessment_thc = base64_encode(Security::encrypt(serialize($chronic_pain_assessment_thc),SEC_KEY));
                 }

                 $user_detail_update['chronic_pain_treatment_history'] = $chronic_pain_assessment_thc;
                }


              if(!empty($chronic_pain_curr_treat_history && is_array($chronic_pain_curr_treat_history)))
              {
                  /* whitelisting validation for covid detail questions field start */

                   foreach ($chronic_pain_curr_treat_history as $key => $value)
                    {
                      if(isset($value['sym_id']) && !empty($value['sym_id']))
                      {
                        // whitelisting validation for cancer symptom assessment
                        $cond = $this->ChiefCompliantMedication->find('all')->where(['medication_disease' => 'chronic pain medicine','id' => $value['sym_id']])->toArray();
                        if(empty($cond)) {

                            $this->Flash->error(__('Could not be saved. Please try again.'));
                            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                        }
                        // whitelisting validation for shots history field end
                        if(isset($value['sym_id']) && isset($value['pain'])){
                          $temp_chronic_pain_curr_treat_history[$value['sym_id']] = $value['pain'];
                        }
                      }
                    }
                  //update schedule status

                if(!empty($temp_chronic_pain_curr_treat_history)){

                 $temp_chronic_pain_curr_treat_history = base64_encode(Security::encrypt(serialize($temp_chronic_pain_curr_treat_history),SEC_KEY));

                 $user_detail_update['chronic_pain_curr_treat_history'] = $temp_chronic_pain_curr_treat_history;
               }
               }


               if(!empty($chronic_pain_past_treat_history && is_array($chronic_pain_past_treat_history)))
              {
                  /* whitelisting validation for covid detail questions field start */

                   foreach ($chronic_pain_past_treat_history as $key => $value)
                    {
                      if(isset($value['sym_id']) && !empty($value['sym_id']))
                      {
                        // whitelisting validation for cancer symptom assessment
                        $cond = $this->ChiefCompliantMedication->find('all')->where(['medication_disease' => 'chronic pain medicine','id' => $value['sym_id']])->toArray();
                        if(empty($cond)) {

                            $this->Flash->error(__('Could not be saved test. Please try again.'));
                            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                        }
                        // whitelisting validation for shots history field end
                        if(isset($value['sym_id']) && isset($value['pain'])){
                          $temp_chronic_pain_past_treat_history[$value['sym_id']] = $value['pain'];
                        }
                      }
                    }


                  //update schedule status
                if(!empty($temp_chronic_pain_past_treat_history)){

                 $temp_chronic_pain_past_treat_history = base64_encode(Security::encrypt(serialize($temp_chronic_pain_past_treat_history),SEC_KEY));

                 $user_detail_update['chronic_pain_past_treat_history'] = $temp_chronic_pain_past_treat_history;
               }
               }
        }


        if($sub_tab_name == 'Opioid overdose risk')
        {
             if(!empty($chronic_pain_opioid_overdose_risk && is_array($chronic_pain_opioid_overdose_risk)))
          {
              /* whitelisting validation for covid detail questions field start */

            foreach ($chronic_pain_opioid_overdose_risk as $ky => $ve) {
              /*if key is more_option string in that case we do not whitelist and for image we do not white list */
             $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();
             if(!empty($tempq)){
              if($tempq['options']){
                $tempq = unserialize($tempq['options']);
                if((is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq))){
                  $this->Flash->error(__('Could not be saved t1. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
              {
                if(!is_numeric($ve))
                {
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());
                }
              }
            }else{
              $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
              //update schedule status

            if(!empty($chronic_pain_opioid_overdose_risk)){

             $chronic_pain_opioid_overdose_risk = base64_encode(Security::encrypt(serialize($chronic_pain_opioid_overdose_risk),SEC_KEY));
           }

           $user_detail_update['chronic_pain_opioid_overdose_risk'] = $chronic_pain_opioid_overdose_risk;
          }
        }


         if($sub_tab_name == 'Opioid risk tool')
        {
             if(!empty($chronic_pain_assessment_ort && is_array($chronic_pain_assessment_ort)))
          {
              /* whitelisting validation for covid detail questions field start */

            foreach ($chronic_pain_assessment_ort as $ky => $ve) {
              /*if key is more_option string in that case we do not whitelist and for image we do not white list */
             $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();
             if(!empty($tempq)){
              if($tempq['options']){
                $tempq = unserialize($tempq['options']);
                if((is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq))){
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
              {
                if(!is_numeric($ve))
                {
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());
                }
              }
            }else{
              $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
              //update schedule status

            if(!empty($chronic_pain_assessment_ort)){

             $chronic_pain_assessment_ort = base64_encode(Security::encrypt(serialize($chronic_pain_assessment_ort),SEC_KEY));
           }

           $user_detail_update['chronic_pain_assessment_ort'] = $chronic_pain_assessment_ort;
          }
        }




          $temp_cronic_painCond = array();
          $visited_sub_tabs = array();
          $chronicPainAssessmentTab = array('0' =>'Pain assessments','1' =>'Treatment history','2' =>'Opioid overdose risk','3' =>'Opioid risk tool');

          if(!empty($user_detail->visited_sub_tabs)){

            $visited_sub_tabs = @unserialize($user_detail->visited_sub_tabs);
          }
          //pr($visited_sub_tabs);die;
          $cond_key = array_search($sub_tab_name, $chronicPainAssessmentTab);

          if($cond_key !== false && isset($chronicPainAssessmentTab[$cond_key+1]))
          {
            $user_detail_update['active_sub_tab'] = $chronicPainAssessmentTab[$cond_key+1];
            $visited_sub_tabs = array_merge($visited_sub_tabs, [$sub_tab_name, $user_detail_update['active_sub_tab']]);
            $visited_sub_tabs = array_unique(array_filter($visited_sub_tabs));
            $user_detail_update['visited_sub_tabs'] = serialize($visited_sub_tabs);
            $user_detail_update['current_tab_number'] = 20;
          }
          else
          {
              $user_detail_update['current_tab_number'] = 18;

          }

        $this->ChiefCompliantUserdetails->query()
        ->update()
        ->set($user_detail_update)
        ->where(['appointment_id' => $apt_id])
        ->execute();


            $input = $this->request->data();

            if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

                $schedule = TableRegistry::get('Schedule');
                $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

                if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

                  if($input['tab_number'] != 5){

                    $schedule_data->status = 2;

                    // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
                     $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);

                    //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                    $schedule->save($schedule_data);
                  }


                }
            }





        return $this->redirect($this->referer());

    }
     // End Pain management

  if($tab_number == 23)
  {


    if(!empty($login_user->shots_history)){

      $login_user->shots_history = @unserialize(Security::decrypt(base64_decode($login_user->shots_history),SEC_KEY));
    }

    if(!empty($login_user->medical_history)){

      $login_user->medical_history = @unserialize(Security::decrypt(base64_decode($login_user->medical_history),SEC_KEY));
    }

    /*if(!empty($login_user->family_history)){

      $login_user->family_history = @unserialize(Security::decrypt(base64_decode($login_user->family_history),SEC_KEY));
    }*/

    if(!empty($login_user->is_currentlysmoking)){

      $login_user->is_currentlysmoking = Security::decrypt(base64_decode($login_user->is_currentlysmoking),SEC_KEY);
    }

    if(!empty($login_user->is_currentlydrinking)){

      $login_user->is_currentlydrinking = Security::decrypt(base64_decode($login_user->is_currentlydrinking),SEC_KEY);
    }

    if(!empty($login_user->current_drink_pack)){

      $login_user->current_drink_pack = Security::decrypt(base64_decode($login_user->current_drink_pack),SEC_KEY);
    }

    if(!empty($login_user->current_smoke_pack)){

      $login_user->current_smoke_pack = Security::decrypt(base64_decode($login_user->current_smoke_pack),SEC_KEY);
    }

    // pr($login_user);
    // pr($this->request->data());die;

    $sub_tab_name = $this->request->getData('sub_tab_name');
    $chronic_dmii_detail = $this->request->getData('chronic_dmii_detail');
    $chronic_htn_detail = $this->request->getData('chronic_htn_detail');
    $chronic_general_detail = $this->request->getData('chronic_general_detail');
    $chronic_cad_detail = $this->request->getData('chronic_cad_detail');
    $chronic_chf_detail = $this->request->getData('chronic_chf_detail');
    $chronic_copd_detail = $this->request->getData('chronic_copd_detail');
    $chronic_asthma_detail = $this->request->getData('chronic_asthma_detail');


    $internal_general_assessment_detail = $this->request->getData('internal_general_assessment_detail');
    $internal_taps1_assessment_detail = $this->request->getData('internal_taps1_assessment_detail');
    $internal_taps2_assessment_detail = $this->request->getData('internal_taps2_assessment_detail');


  // pr($chronic_asthma_detail);die;

    $temp_reading_data = '';
    $user_detail_update = array();
    $medication_data = array();
    $temp_medication_data = '';
    $reading_arr = array(

            0 => "",
            1 => 'Before breakfast',
            2 => 'Before lunch',
            3 => 'Before dinner',
            4 => "Bedtime",
            5 => 'After exercise',
            6 => 'After a meal'
          );

    $peakflow_reading_timing_arr = array(

            'morning' => 'Morning',
            'afternoon' => 'Afternoon'
          );

    $members_options = array(

            1 => 'Father',
            2 => 'Mother',
            3 => 'Paternal grandmother',
            4 => 'Paternal grandfather',
            5 => 'Maternal grandmother',
            6 => 'Maternal grandfather',
            7 => 'Brother',
            8 => 'Sister',
            9 => 'Son',
            10 => 'Daughter'
          );


    $medication_name_id = $this->request->getData('medication_name_name');
    if(!empty($medication_name_id) && is_array($medication_name_id))
    {
      // pr($medication_name_id);
      $medication_name_id = array_filter($medication_name_id) ;
      $medication_name_id = array_unique($medication_name_id);

      $medication_dose = $this->request->getData('medication_dose');
      $medication_how_often = $this->request->getData('medication_how_often');
      if(is_array($medication_how_often))
      $medication_how_often = array_filter($medication_how_often); //remove the empty value from the array
    // pr($medication_how_often); die;
      $medication_how_taken = $this->request->getData('medication_how_taken');

      $i = 0 ;
      foreach ($medication_name_id as $key => $value)
      {
        // $medication_data[$i]['medication_name_id'] = $value;

        // whitelisting validation for medication how often field  start
        if(!empty($medication_how_often) && isset($medication_how_often[$key]) && !array_key_exists($medication_how_often[$key], $length_arr))
          {
           //  pr($medication_how_often); pr($length_arr); die;
           // echo 'hello4gh'; die;
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
          // whitelisting validation for medication how often field  end

        $medication_data[$i]['medication_name_name'] = $value;
        $medication_data[$i]['medication_dose'] = !empty($medication_dose[$key]) ?  $medication_dose[$key] : '';
        $medication_data[$i]['medication_how_often'] = !empty($medication_how_often[$key]) ? $medication_how_often[$key] : '';
        $medication_data[$i]['medication_how_taken'] = !empty($medication_how_taken[$key]) ? $medication_how_taken[$key] : '';
        $i++;
      }
    }

    if($sub_tab_name == 'dmii'){



      if(!empty($chronic_dmii_detail && is_array($chronic_dmii_detail)))
      {

        $chronic_dmii_detail = array_filter($chronic_dmii_detail);
        // whitelisting validation for detail questions field start
        // pr($details_question);  die;
        foreach ($chronic_dmii_detail as $ky => $ve)
        {

          $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

           if(!empty($tempq)){
             if(($tempq['options'] != '')){
               $tempq = unserialize($tempq['options']);
              if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
            else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
            {
                if(!is_numeric($ve))
                {
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());
                }

            }
            else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
            {
              $checkDateFor = $this->General->checkDateFormat($ve);
              if(!$checkDateFor)
              {
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());
              }
            }
          }else{
          //pr($tempq);
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
        }

        //glucose reading data
        $reading_val = $this->request->getData('reading_val');
        $reading_data = array();

        if(!empty($reading_val) && is_array($reading_val))
        {
          // pr($medication_name_id);
          $reading_val = array_filter($reading_val);

          $reading_timing = $this->request->getData('reading_timing');
          $reading_date = $this->request->getData('reading_date');
          if(is_array($reading_timing))
            $reading_timing = array_filter($reading_timing); //remove the empty value from the array

          if(is_array($reading_date))
            $reading_date = array_filter($reading_date); //remove the empty value from the array


          $i = 0 ;
          foreach ($reading_val as $key => $value)
          {

            // whitelisting validation for medication how often field  start
            if(!empty($reading_timing) && isset($reading_timing[$key]) && !array_key_exists($reading_timing[$key], $reading_arr))
              {
               //  pr($medication_how_often); pr($length_arr); die;
               // echo 'hello4gh'; die;
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
              // whitelisting validation for medication how often field  end

            $reading_data[$i]['reading_val'] = $value;
            $reading_data[$i]['reading_timing'] = !empty($reading_timing[$key]) ?  $reading_timing[$key] : '';
            $reading_data[$i]['reading_date'] = !empty($reading_date[$key]) ? $reading_date[$key] : '';
            $i++;
          }
        }

        //save the diabetes (dmii) data in db

        $temp_medication_data = !empty($medication_data) ? base64_encode(Security::encrypt(serialize($medication_data), SEC_KEY)) : "" ;
        $temp_reading_data = !empty($reading_data) ? base64_encode(Security::encrypt(serialize($reading_data), SEC_KEY)) : "" ;
        //question 235 is yes then store the glucose reading otherwise blank the reading detail
        if(!empty($chronic_dmii_detail) && isset($chronic_dmii_detail[235]) && $chronic_dmii_detail[235] == 'No'){

          $temp_reading_data = '';
        }

        if(!empty($chronic_dmii_detail) && isset($chronic_dmii_detail[292]) && $chronic_dmii_detail[292] == 'No'){

          $temp_medication_data = '';
        }
        if(!empty($chronic_dmii_detail)){

          //$chronic_dmii_detail = @unserialize(Security::decrypt(base64_decode($chronic_dmii_detail),SEC_KEY));
           $chronic_dmii_detail = base64_encode(Security::encrypt(serialize($chronic_dmii_detail),SEC_KEY));
        }

        $user_detail_update['chronic_dmii_detail'] = $chronic_dmii_detail;
        $user_detail_update['chronic_dmii_medication'] = $temp_medication_data;
        $user_detail_update['glucose_reading_detail'] = $temp_reading_data;
      }

      if($sub_tab_name == 'cad'){

        if(!empty($chronic_cad_detail && is_array($chronic_cad_detail)))
        {

          $chronic_cad_detail = array_filter($chronic_cad_detail);
          // whitelisting validation for detail questions field start
          // pr($details_question);  die;
          foreach ($chronic_cad_detail as $ky => $ve)
          {
            $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

             if(!empty($tempq)){
               if(($tempq['options'] != '')){
                 $tempq = unserialize($tempq['options']);
                if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
              {
                  if(!is_numeric($ve))
                  {
                    $this->Flash->error(__('Could not be saved. Please try again.'));
                    return $this->redirect($this->referer());
                  }

              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
              {
                $checkDateFor = $this->General->checkDateFormat($ve);
                if(!$checkDateFor)
                {
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());
                }
              }
            }else{
            //pr($tempq);
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
          }
        $temp_medication_data = !empty($medication_data) ? base64_encode(Security::encrypt(serialize($medication_data), SEC_KEY)) : "" ;
        if(!empty($chronic_cad_detail) && isset($chronic_cad_detail[292]) && $chronic_cad_detail[292] == 'No'){

          $temp_medication_data = '';
        }

          if(!empty($chronic_cad_detail)){
             $chronic_cad_detail = base64_encode(Security::encrypt(serialize($chronic_cad_detail),SEC_KEY));
          }


        $user_detail_update['chronic_cad_medication'] = $temp_medication_data;
        $user_detail_update['chronic_cad_detail'] = $chronic_cad_detail;
      }

      if($sub_tab_name == 'chf'){

        if(!empty($chronic_chf_detail && is_array($chronic_chf_detail)))
        {
          $chronic_chf_detail = array_filter($chronic_chf_detail);
          // whitelisting validation for detail questions field start
          // pr($details_question);  die;
          foreach ($chronic_chf_detail as $ky => $ve)
          {

            $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

             if(!empty($tempq)){
               if(($tempq['options'] != '')){
                 $tempq = unserialize($tempq['options']);
                if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
              {
                  if(!is_numeric($ve))
                  {
                    $this->Flash->error(__('Could not be saved. Please try again.'));
                    return $this->redirect($this->referer());
                  }

              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
              {
                $checkDateFor = $this->General->checkDateFormat($ve);
                if(!$checkDateFor)
                {
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());
                }
              }
            }else{
            //pr($tempq);
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
          }
          $temp_medication_data = !empty($medication_data) ? base64_encode(Security::encrypt(serialize($medication_data), SEC_KEY)) : "" ;
          if(!empty($chronic_chf_detail) && isset($chronic_chf_detail[292]) && $chronic_chf_detail[292] == 'No'){

            $temp_medication_data = '';
          }
          if(!empty($chronic_chf_detail)){
             $chronic_chf_detail = base64_encode(Security::encrypt(serialize($chronic_chf_detail),SEC_KEY));
          }


        $user_detail_update['chronic_chf_medication'] = $temp_medication_data;
        $user_detail_update['chronic_chf_detail'] = $chronic_chf_detail;
      }

      if($sub_tab_name == 'copd'){

        if(!empty($chronic_copd_detail && is_array($chronic_copd_detail)))
        {
          $chronic_copd_detail = array_filter($chronic_copd_detail);
          // whitelisting validation for detail questions field start
          // pr($details_question);  die;
          foreach ($chronic_copd_detail as $ky => $ve)
          {

            $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

             if(!empty($tempq)){
               if(($tempq['options'] != '')){
                 $tempq = unserialize($tempq['options']);
                if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
              {
                  if(!is_numeric($ve))
                  {
                    $this->Flash->error(__('Could not be saved. Please try again.'));
                    return $this->redirect($this->referer());
                  }

              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
              {
                $checkDateFor = $this->General->checkDateFormat($ve);
                if(!$checkDateFor)
                {
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());
                }
              }
            }else{
            //pr($tempq);
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
          }

            if(!empty($chronic_copd_detail)){


            //update past medical history pf patient
            if(isset($chronic_copd_detail['268']) && !empty($chronic_copd_detail['268'])){

              $temp_pmh_cond = array();
              if(!empty($login_user->medical_history) && is_array($login_user->medical_history)){

                $temp_pmh_cond = explode(", ",strtolower(implode(", ",array_column($login_user->medical_history, 'name'))));
              }
              $temp_cond = array();

              foreach ($chronic_copd_detail['268'] as $key => $value) {

                $value = strtolower($value);
                if(!in_array($value, $temp_pmh_cond)){

                  $temp_cond[] = array('name' => $value,'year' => '');
                }
              }

              $login_user->medical_history = !empty($login_user->medical_history) && is_array($login_user->medical_history) ? array_merge($login_user->medical_history,$temp_cond) : $temp_cond;
            }

             $chronic_copd_detail = base64_encode(Security::encrypt(serialize($chronic_copd_detail),SEC_KEY));
          }

          $user_detail_update['chronic_copd_detail'] = $chronic_copd_detail;
      }

      if($sub_tab_name == 'asthma'){

        if(!empty($chronic_asthma_detail && is_array($chronic_asthma_detail)))
        {
          // whitelisting validation for detail questions field start
          // pr($chronic_asthma_detail);  die;
          $chronic_asthma_detail = array_filter($chronic_asthma_detail,function($item){

            if($item == ''){

              return false;
            }
            else{

              return true;
            }
          });
         // pr($chronic_asthma_detail);die;
          foreach ($chronic_asthma_detail as $ky => $ve)
          {

            $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();


             if(!empty($tempq)){
              if(($tempq['options'] != '')){
                $tempq = unserialize($tempq['options']);
                if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
              {
                  if(!is_numeric($ve))
                  {
                    $this->Flash->error(__('Could not be saved. Please try again.'));
                    return $this->redirect($this->referer());
                  }

              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
              {
                $checkDateFor = $this->General->checkDateFormat($ve);
                if(!$checkDateFor)
                {
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());
                }
              }
            }else{
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }


            }

            $PneumoniaYear = array();
            for($start_year = date('Y'); $start_year >= 1970 ; $start_year--)
            {
                $PneumoniaYear[$start_year] = $start_year;
            }

            if(!empty($chronic_asthma_detail) && isset($chronic_asthma_detail[316]) && !array_key_exists($chronic_asthma_detail[316], $PneumoniaYear))
            {
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }


          }

          //peak flow reading data
          $reading_val = $this->request->getData('reading_val');

          $reading_data = array();

          if(!empty($reading_val) && is_array($reading_val))
          {
            // pr($medication_name_id);
            $reading_val = array_filter($reading_val);

            $reading_timing = $this->request->getData('reading_timing');
            $reading_date = $this->request->getData('reading_date');
            if(is_array($reading_timing))
              $reading_timing = array_filter($reading_timing); //remove the empty value from the array

            if(is_array($reading_date))
              $reading_date = array_filter($reading_date); //remove the empty value from the array


            $i = 0 ;
            foreach ($reading_val as $key => $value)
            {

              if(!is_numeric($value)){

                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }

              // whitelisting validation for medication how often field  start
              if(!empty($reading_timing) && isset($reading_timing[$key]) && !array_key_exists($reading_timing[$key], $peakflow_reading_timing_arr))
                {
                 //  pr($medication_how_often); pr($length_arr); die;
                 // echo 'hello4gh'; die;
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
                // whitelisting validation for medication how often field  end

              $reading_data[$i]['reading_val'] = $value;
              $reading_data[$i]['reading_timing'] = !empty($reading_timing[$key]) ?  $reading_timing[$key] : '';
              $reading_data[$i]['reading_date'] = !empty($reading_date[$key]) ? $reading_date[$key] : '';
              $i++;
            }
          }

          $reading_data =!empty($reading_data) ? base64_encode(Security::encrypt(serialize($reading_data),SEC_KEY)) : '';
          if(!empty($chronic_asthma_detail) && isset($chronic_asthma_detail[295]) && $chronic_asthma_detail[295] == 'No'){

            $reading_data = '';
          }

          if(!empty($chronic_asthma_detail)){

            //update past medical history pf patient
            if(isset($chronic_asthma_detail['309']) && !empty($chronic_asthma_detail['309'])){

              $temp_pmh_cond = array();
              if(!empty($login_user->medical_history) && is_array($login_user->medical_history)){

                $temp_pmh_cond = explode(", ",strtolower(implode(", ",array_column($login_user->medical_history, 'name'))));
              }
              $temp_cond = array();

              foreach ($chronic_asthma_detail['309'] as $key => $value) {

                $value = strtolower($value);
                if(!in_array($value, $temp_pmh_cond)){

                  $temp_cond[] = array('name' => $value,'year' => '');
                }
              }

              $login_user->medical_history = !empty($login_user->medical_history) && is_array($login_user->medical_history) ? array_merge($login_user->medical_history,$temp_cond) : $temp_cond;
            }

             $chronic_asthma_detail = base64_encode(Security::encrypt(serialize($chronic_asthma_detail),SEC_KEY));
          }

        $user_detail_update['chronic_asthma_detail'] = $chronic_asthma_detail;
        $user_detail_update['peak_flow_reading_detail'] = $reading_data;
      }

      if($sub_tab_name == 'htn'){

        if(!empty($chronic_htn_detail && is_array($chronic_htn_detail)))
        {

          $chronic_htn_detail = array_filter($chronic_htn_detail);
          // whitelisting validation for detail questions field start
          // pr($details_question);  die;
          foreach ($chronic_htn_detail as $ky => $ve)
          {

            $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

             if(!empty($tempq)){
              if(($tempq['options'] != '')){
                $tempq = unserialize($tempq['options']);
                if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
              {
                  if(!is_numeric($ve))
                  {
                    $this->Flash->error(__('Could not be saved. Please try again.'));
                    return $this->redirect($this->referer());
                  }

              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
              {
                $checkDateFor = $this->General->checkDateFormat($ve);
                if(!$checkDateFor)
                {
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());
                }
              }
            }else{
            //pr($tempq);
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
          }

        //bp reading data
        $reading_top_number = $this->request->getData('top_number');
        $reading_data = array();

        if(!empty($reading_top_number) && is_array($reading_top_number))
        {
          // pr($medication_name_id);
          $reading_top_number = array_filter($reading_top_number);

          $reading_timing = $this->request->getData('reading_timing');
          $reading_date = $this->request->getData('reading_date');
          $reading_bottom_number = $this->request->getData('bottom_number');
          if(is_array($reading_timing))
            $reading_timing = array_filter($reading_timing); //remove the empty value from the array

          if(is_array($reading_date))
            $reading_date = array_filter($reading_date); //remove the empty value from the array

          if(is_array($reading_bottom_number))
            $reading_bottom_number = array_filter($reading_bottom_number); //remove the empty value from the array


          $i = 0 ;
          foreach ($reading_top_number as $key => $value)
          {

            // whitelisting validation for medication how often field  start
            if((!empty($reading_timing) && isset($reading_timing[$key]) && !array_key_exists($reading_timing[$key], $reading_arr)) || !isset($reading_bottom_number[$key]) || !isset($reading_date[$key]))
              {
               //  pr($medication_how_often); pr($length_arr); die;
               // echo 'hello4gh'; die;
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
              // whitelisting validation for medication how often field  end

            $reading_data[$i]['top_number'] = $value;
            $reading_data[$i]['bottom_number'] = !empty($reading_bottom_number[$key]) ?  $reading_bottom_number[$key] : '';
            $reading_data[$i]['reading_timing'] = !empty($reading_timing[$key]) ?  $reading_timing[$key] : '';
            $reading_data[$i]['reading_date'] = !empty($reading_date[$key]) ? $reading_date[$key] : '';
            $i++;
          }
        }


        //save the htn data in database
        $temp_medication_data = !empty($medication_data) ? base64_encode(Security::encrypt(serialize($medication_data), SEC_KEY)) : "" ;
        $temp_reading_data = !empty($reading_data) ? base64_encode(Security::encrypt(serialize($reading_data), SEC_KEY)) : "" ;
        //question 235 is yes then store the glucose reading otherwise blank the reading detail
        if(!empty($chronic_htn_detail) && isset($chronic_htn_detail[243]) && $chronic_htn_detail[243] == 'No'){

          $temp_reading_data = '';
        }

        if(!empty($chronic_htn_detail) && isset($chronic_htn_detail[292]) && $chronic_htn_detail[292] == 'No'){

          $temp_medication_data = '';
        }

        if(!empty($chronic_htn_detail)){

          $chronic_htn_detail = base64_encode(Security::encrypt(serialize($chronic_htn_detail),SEC_KEY));
        }

        $user_detail_update['bp_reading_detail'] = $temp_reading_data;
        $user_detail_update['chronic_htn_medication'] = $temp_medication_data;
        $user_detail_update['chronic_htn_detail'] = $chronic_htn_detail;

      }

      if($sub_tab_name == 'general'){

        if(!empty($chronic_general_detail && is_array($chronic_general_detail)))
        {
          $chronic_general_detail = array_filter($chronic_general_detail);
          // whitelisting validation for detail questions field start
          // pr($details_question);  die;
          foreach ($chronic_general_detail as $ky => $ve)
          {

            $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

             if(!empty($tempq)){
               if(($tempq['options'] != '')){
                 $tempq = unserialize($tempq['options']);
                if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                }
              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
              {
                  if(!is_numeric($ve))
                  {
                    $this->Flash->error(__('Could not be saved. Please try again.'));
                    return $this->redirect($this->referer());
                  }

              }
              else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
              {
                $checkDateFor = $this->General->checkDateFormat($ve);
                if(!$checkDateFor)
                {
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());
                }
              }
            }else{
            //pr($tempq);
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
          }

            $PneumoniaYear = array();
            for($start_year = date('Y'); $start_year >= 1970 ; $start_year--)
            {
                $PneumoniaYear[$start_year] = $start_year;
            }

            if(!empty($chronic_general_detail) && isset($chronic_general_detail[316]) && !array_key_exists($chronic_general_detail[316], $PneumoniaYear))
            {
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }


          //update social history of patient.
          if(!empty($chronic_general_detail)){

            if(isset($chronic_general_detail['252'])){

              if(strtolower($chronic_general_detail['252']) == 'yes'){

                $login_user->is_currentlysmoking = 1;

                if(isset($chronic_general_detail['253']) && !empty($chronic_general_detail['253'])){

                  $temp_smoke_pack = $chronic_general_detail['253'] == '3+' ? 3 : $chronic_general_detail['253'];
                  $login_user->current_smoke_pack = ceil($temp_smoke_pack*7);
                  $login_user->current_smoke_pack = $login_user->current_smoke_pack > 10 ? 'morethan10' : $login_user->current_smoke_pack;
                }
              }
              else{

                $login_user->is_currentlysmoking = 0;
                $login_user->current_smoke_pack = '';
              }
            }

            if(isset($chronic_general_detail['254'])){

              if(strtolower($chronic_general_detail['254']) == 'yes'){

                $login_user->is_currentlydrinking = 1;

                if(isset($chronic_general_detail['255']) && !empty($chronic_general_detail['255'])){

                  $login_user->current_drink_pack = $chronic_general_detail['255'] == '10+' ? '10' :$chronic_general_detail['255'];
                }
              }
              else{

                $login_user->is_currentlydrinking = 0;
                $login_user->current_drink_pack = '';
              }
            }

            //update shots history of patient
            if(isset($chronic_general_detail['317']) && strtolower($chronic_general_detail['317']) == 'yes'){

              //fetch the id of flu from database
              $flu_detail = $commonTable->find('all')->where(['cond_type' => 4,'name' => 'flu'])->first();
              if(!empty($flu_detail)){

                $flu_id = (int)$flu_detail['id'];
                if(!empty($flu_id) && is_numeric($flu_id)){

                  $login_user->shots_history = (array)$login_user->shots_history;
                  $login_user->shots_history[$flu_id] = "";
                }

                //$login_user->shots_history[$flu_detail['id']] = '';
              }
            }


          //naveen

          if(!empty($chronic_general_detail)){

          if(isset($chronic_general_detail['317']) && strtolower($chronic_general_detail['317']) == 'yes'){

            //fetch the id of flu from database
            $flu_detail = $commonTable->find('all')->where(['cond_type' => 4,'name' => 'flu'])->first();
            if(!empty($flu_detail)){

              $flu_id = (int)$flu_detail['id'];
              if(!empty($flu_id) && is_numeric($flu_id)){

                $login_user->shots_history = (array)$login_user->shots_history;
                $login_user->shots_history[$flu_id] = "";
              }

              //$login_user->shots_history[$flu_detail['id']] = '';
            }
          }

          if(isset($chronic_general_detail['315']) && strtolower($chronic_general_detail['315']) == 'yes'){

            $pmu_year = "";

            if(isset($chronic_general_detail['316']) && !empty($chronic_general_detail['316'])){

              $pmu_year = $chronic_general_detail['316'];
            }
            if(isset($chronic_general_detail['319']) && !empty($chronic_general_detail['319']) && is_array($chronic_general_detail['319']))
            {
              $pnum_trans = array(

                'pneumococcal conjugate (pcv13)' => 'pneumonia (pcv13)',
                'pneumococcal polysaccharide (ppsv23)' => 'pneumonia (ppsv23)'
              );
              foreach ($chronic_general_detail['319'] as $key => $value) {
                  $value = strtolower($value);
                  if(isset($pnum_trans[$value])){

                      $pmu_detail = $commonTable->find('all')->where(['cond_type' => 4,'name' => $pnum_trans[$value]])->first();
                      if(!empty($pmu_detail)){

                        $pmu_id = (int)$pmu_detail['id'];
                        if(!empty($pmu_id) && is_numeric($pmu_id)){

                          $login_user->shots_history = (array)$login_user->shots_history;
                          $login_user->shots_history[$pmu_id] = $pmu_year;
                        }

                        //$login_user->shots_history[$pmu_detail['id']] = $pmu_year;
                      }
                  }
              }
            }
          }
        }

        $chronic_general_detail = base64_encode(Security::encrypt(serialize($chronic_general_detail),SEC_KEY));
      }

        $user_detail_update['chronic_general_detail'] = $chronic_general_detail;

    }

    //pr($active_sub_tab); die;
      if($active_sub_tab == 'general_tap')
      {
          if(!empty($internal_general_assessment_detail))
          {
            $internal_general_assessment_detail =  base64_encode(Security::encrypt((serialize($internal_general_assessment_detail)), SEC_KEY));
          }

          if(!empty($internal_general_assessment_detail)){

          $this->ChiefCompliantUserdetails->query()
            ->update()
            ->set(['internal_general_assessment_detail' => $internal_general_assessment_detail,'current_tab_number' => 23])
            ->where(['appointment_id' => $apt_id])
            ->execute();
        }
        else
        {
          $tempuser = $this->ChiefCompliantUserdetails->newEntity();
          $tempuser->appointment_id  =  $apt_id ;
          $tempuser->internal_general_assessment_detail  =  $internal_general_assessment_detail;
          $tempuser->current_tab_number  = 23 ;
          $tempuser->current_step_id  =  $step_id ;
          $this->ChiefCompliantUserdetails->save($tempuser);
        }
      }      
      if($active_sub_tab == 'taps1')
      {
            $temp_internal_taps2_ass_detail = '';
            if(!empty($user_detail->internal_taps2_assessment_detail)){

              $temp_internal_taps2_ass_detail = @unserialize(Security::decrypt(base64_decode($user_detail->internal_taps2_assessment_detail),SEC_KEY));
             foreach($internal_taps1_assessment_detail as $key => $value) {
                if($key == 571 && $value == "Never")
                {
                  $toremove = [576,577,578];
                  foreach ($toremove as $k) {
                      unset($temp_internal_taps2_ass_detail[$k]);

                  }
                  
                  // $temp_internal_taps2_ass_detail = array_diff_key($temp_internal_taps2_ass_detail,[576,577,578]);
                  //unset(array(576,577,578));
                }
                else if(($key == 572 && $value == "Never") || ($key == 573 && $value == "Never"))
                {
                  $toremove = [579,580,581,582,583];
                  foreach ($toremove as $k) {
                      unset($temp_internal_taps2_ass_detail[$k]);

                  }
                  // $temp_internal_taps2_ass_detail = array_diff($internal_taps2_assessment_detail,[579,580,581,582,583]);
                  // unset(array(579,580,581,582,583));
                }
                else if($key == 574 && $value == "Never")
                {
                  $toremove = [584,585,586,587,588,589,590,591,592,602,603];
                  foreach ($toremove as $k) {
                      unset($temp_internal_taps2_ass_detail[$k]);

                  }
                  // $temp_internal_taps2_ass_detail = array_diff($temp_internal_taps2_ass_detail,[584,585,586,587,588,589,590,591,592,602,603]);
                  // unset(array(584,585,586,587,588,589,590,591,592,602,603));
                }
                else if($key == 575 && $value == "Never")
                {
                  $toremove = [593,594,595,596,597,598,599,600,601];
                  foreach ($toremove as $k) {
                      unset($temp_internal_taps2_ass_detail[$k]);

                  }
                  // $temp_internal_taps2_ass_detail = array_diff($temp_internal_taps2_ass_detail,[593,594,595,596,597,598,599,600,601]);
                  // unset(array(593,594,595,596,597,598,599,600,601));
                }
            }
          }
          if(!empty($internal_taps1_assessment_detail))
          {
            $internal_taps1_assessment_detail =  base64_encode(Security::encrypt((serialize($internal_taps1_assessment_detail)), SEC_KEY));
          }
          if(!empty($temp_internal_taps2_ass_detail))
          {
            $temp_internal_taps2_ass_detail =  base64_encode(Security::encrypt((serialize($temp_internal_taps2_ass_detail)), SEC_KEY));
          }
          if(!empty($internal_taps1_assessment_detail)){

          $this->ChiefCompliantUserdetails->query()
            ->update()
            ->set(['internal_taps1_assessment_detail' => $internal_taps1_assessment_detail,'internal_taps2_assessment_detail' => $temp_internal_taps2_ass_detail ? $temp_internal_taps2_ass_detail:'','current_tab_number' => 23])
            ->where(['appointment_id' => $apt_id])
            ->execute();
        }
        else
        {
          $tempuser = $this->ChiefCompliantUserdetails->newEntity();
          $tempuser->appointment_id  =  $apt_id ;
          $tempuser->internal_taps1_assessment_detail  =  $internal_taps1_assessment_detail;
          $tempuser->current_tab_number  = 23 ;
          $tempuser->current_step_id  =  $step_id ;
          $this->ChiefCompliantUserdetails->save($tempuser);
        }
      }
      if(!empty($internal_taps1_assessment_detail) && !is_array($internal_taps1_assessment_detail)){

        $old_internal_taps1_assessment_details = @unserialize(Security::decrypt(base64_decode($internal_taps1_assessment_detail),SEC_KEY));
      }
      //pr($old_internal_taps1_assessment_details);die;
      if($active_sub_tab == 'taps2')
      {          
          if(!empty($internal_taps2_assessment_detail))
          {
            $internal_taps2_assessment_detail =  base64_encode(Security::encrypt((serialize($internal_taps2_assessment_detail)), SEC_KEY));
          }

          if(!empty($internal_taps2_assessment_detail)){

          $this->ChiefCompliantUserdetails->query()
            ->update()
            ->set(['internal_taps2_assessment_detail' => $internal_taps2_assessment_detail,'current_tab_number' => 23])
            ->where(['appointment_id' => $apt_id])
            ->execute();
        }
        else
        {
          $tempuser = $this->ChiefCompliantUserdetails->newEntity();
          $tempuser->appointment_id  =  $apt_id ;
          $tempuser->internal_taps2_assessment_detail  =  $internal_taps2_assessment_detail;
          $tempuser->current_tab_number  = 23 ;
          $tempuser->current_step_id  =  $step_id ;
          $this->ChiefCompliantUserdetails->save($tempuser);
        }
      }    

    //logic for next active sub tab and visited sub tabs
    $temp_cronic_cond = array();
    $visited_sub_tabs = array();
    

    if(!empty($user_detail->chronic_condition) && !is_array($user_detail->chronic_condition)){

      $temp_cronic_cond = @unserialize(Security::decrypt(base64_decode($user_detail->chronic_condition),SEC_KEY));
    }    
    $temp_assess_cond = array();
    // if($step_id == 25)
    // {
    //   $temp_assess_cond = array('general_tap','taps1','taps2');
    //   $temp_cronic_cond = array_merge($temp_assess_cond,$temp_cronic_cond);
      
    //   if(!empty($old_internal_taps1_assessment_details))
    //       {
    //         $unique_taps1_val = array_unique($old_internal_taps1_assessment_details);
    //         //pr(count($unique_taps1_val));die;
    //         if(in_array("Never",$unique_taps1_val) && count($unique_taps1_val) == 1)
    //         { 
    //           //die('test');
    //           $temp_cronic_cond = array_diff($temp_cronic_cond,['taps2']);
    //           $temp_cronic_cond = array_values(array_filter($temp_cronic_cond));
    //         }
    //       }
    //     //pr($temp_cronic_cond);die;
    // }
    //pr($temp_cronic_cond);die;
    if(!empty($user_detail->visited_sub_tabs)){

      $visited_sub_tabs = @unserialize($user_detail->visited_sub_tabs);
    }

    if(($temp_key = array_search('other', $temp_cronic_cond)) !== false){

      unset($temp_cronic_cond[$temp_key]);
    }
    if(($temp_key = array_search('none', $temp_cronic_cond)) !== false){

      unset($temp_cronic_cond[$temp_key]);
    }
     //pr($temp_cronic_cond);

    $cond_key = array_search($sub_tab_name, $temp_cronic_cond);
    //pr($cond_key);
    //pr($temp_cronic_cond[$cond_key+1]);die;
    //remove the other condition

    if($cond_key !== false && isset($temp_cronic_cond[$cond_key+1]))
    {
      // die('lkjlk');
      $user_detail_update['active_sub_tab'] = $temp_cronic_cond[$cond_key+1];
      //$visited_sub_tabs = array_push($visited_sub_tabs, $sub_tab_name);
      $visited_sub_tabs = array_merge($visited_sub_tabs, [$sub_tab_name, $user_detail_update['active_sub_tab']]);
      $visited_sub_tabs = array_unique(array_filter($visited_sub_tabs));
      $user_detail_update['visited_sub_tabs'] = serialize($visited_sub_tabs);
      $user_detail_update['current_tab_number'] = 23;
    }
    else{
      $diff_cond = array_diff($temp_cronic_cond, $visited_sub_tabs);
      $diff_int_cond = array_diff($temp_cronic_cond, $temp_assess_cond);
      //pr($diff_int_cond);die;
      //pr($diff_cond);die;
      if((count($temp_cronic_cond) == 1 || empty($diff_cond)) && $user_detail->active_sub_tab != 'general' && !empty($diff_int_cond) && $step_id != 25){
        $user_detail_update['active_sub_tab'] = 'general';
        $visited_sub_tabs = array_merge($visited_sub_tabs, [$sub_tab_name, $user_detail_update['active_sub_tab']]);
        $visited_sub_tabs = array_unique(array_filter($visited_sub_tabs));
        $user_detail_update['visited_sub_tabs'] = serialize($visited_sub_tabs);
        $user_detail_update['current_tab_number'] = 23;
      }
      else{
        $user_detail_update['current_tab_number'] = 3;
        if($step_id == 25)
        {
          $user_detail_update['current_tab_number'] = 28;
        }

      }

    }

    $user_detail_update['no_of_load_3rd_tab'] =  0;
    $user_detail_update['python_file_option_3rd_tab'] = NULL ;
    if(!empty($user_detail)){

      $this->ChiefCompliantUserdetails->query()
        ->update()
        ->set($user_detail_update)
        ->where(['appointment_id' => $apt_id])
        ->execute();
    }

    //update patient data

    $login_user->shots_history = !empty($login_user->shots_history) ? base64_encode(Security::encrypt(serialize($login_user->shots_history),SEC_KEY)) : '';

    $login_user->medical_history = !empty($login_user->medical_history) ? base64_encode(Security::encrypt(serialize($login_user->medical_history),SEC_KEY)) : '';

    if(!empty($login_user->is_currentlysmoking)){

      $login_user->is_currentlysmoking = base64_encode(Security::encrypt($login_user->is_currentlysmoking,SEC_KEY));
    }


    if(!empty($login_user->is_currentlydrinking)){

      $login_user->is_currentlydrinking = base64_encode(Security::encrypt($login_user->is_currentlydrinking,SEC_KEY));
    }


    if(!empty($login_user->current_drink_pack)){

      $login_user->current_drink_pack = base64_encode(Security::encrypt($login_user->current_drink_pack,SEC_KEY));
    }


    if(!empty($login_user->current_smoke_pack)){

      $login_user->current_smoke_pack = base64_encode(Security::encrypt($login_user->current_smoke_pack,SEC_KEY));
    }


    $this->Users->save($login_user);

    //update schedule status
    $input = $this->request->data();

    if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

        $schedule = TableRegistry::get('Schedule');
        $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

        if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

          if($input['tab_number'] != 5){

            $schedule_data->status = 2;

            // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
            if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

            }else{

              $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
            }
            //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
            $schedule->save($schedule_data);
          }


        }
    }

    return $this->redirect($this->referer());
  }

    if($tab_number == 24)
    {

      $chronic_condition = $this->request->getData('chronic_condition');
      // blank assessment tab, associated tab and ROS 
      if(!empty($chronic_condition) && $chronic_condition[0] == 'other')
      { 
        $up_user_detail = array();    
        $up_user_detail['chronic_cad_detail'] = null;
        $up_user_detail['chronic_dmii_detail'] = null;
        $up_user_detail['chronic_chf_detail'] = null;
        $up_user_detail['chronic_copd_detail'] = null;
        $up_user_detail['chronic_htn_detail'] = null;
        $up_user_detail['chronic_asthma_detail'] = null;
        $up_user_detail['chronic_general_detail'] = null;
        $up_user_detail['questionnaire_detail'] = null;
        $up_user_detail['old_python_file_option_3rd_tab'] = null;
        $this->ChiefCompliantUserdetails->query()
        ->update()
        ->set($up_user_detail)
        ->where(['appointment_id' => $apt_id])
        ->execute();
      }
      if(!empty($chronic_condition) && is_array($chronic_condition)){

        sort($chronic_condition);
      }

      //update past medical history of patient
      if(!empty($chronic_condition)){

        if(!empty($login_user->medical_history)){

          $login_user->medical_history = @unserialize(Security::decrypt(base64_decode($login_user->medical_history),SEC_KEY));
        }

        $temp_pmh_cond = array();

        if(!empty($login_user->medical_history) && is_array($login_user->medical_history)){

          $temp_pmh_cond = explode(", ",strtolower(implode(", ",array_column($login_user->medical_history, 'name'))));
        }
          $temp_cond = array();

          $chronicCondition = array('asthma' => 'Asthma','cad' =>'Coronary artery disease','chf' =>'Congestive heart failure','copd' =>'Chronic obstructive pulmonary disease','dmii' =>'Diabetes','htn'=>'Hypertension');

          foreach ($chronic_condition as $key => $value) {

            if(isset($chronicCondition[$value])){

              $temp_cond_name = strtolower($chronicCondition[$value]);

              if(!in_array($temp_cond_name, $temp_pmh_cond)){

                $temp_cond[] = array('name' => $temp_cond_name,'year' => '');
              }
            }
          }

        $login_user->medical_history = !empty($login_user->medical_history) && is_array($login_user->medical_history) ? array_merge($login_user->medical_history,$temp_cond) : $temp_cond;

        $login_user->medical_history = !empty($login_user->medical_history) ? base64_encode(Security::encrypt(serialize($login_user->medical_history),SEC_KEY)) : '';

        $this->Users->save($login_user);
      }


      if(!empty($chronic_condition))
      {
        $chronic_condition =  base64_encode(Security::encrypt((serialize($chronic_condition)), SEC_KEY));
      }

      if(!empty($user_detail)){

      $this->ChiefCompliantUserdetails->query()
        ->update()
        ->set(['chronic_condition' => $chronic_condition,'current_tab_number' => 23,'active_sub_tab' => ''])
        ->where(['appointment_id' => $apt_id])
        ->execute();
    }
    else
    {
      $tempuser = $this->ChiefCompliantUserdetails->newEntity();
      $tempuser->appointment_id  =  $apt_id ;
      $tempuser->chronic_condition  =  $chronic_condition;
      $tempuser->current_tab_number  = 23 ;
      $tempuser->current_step_id  =  $step_id ;
      $this->ChiefCompliantUserdetails->save($tempuser);
    }

     //update schedule status
      $input = $this->request->data();

      if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

        $schedule = TableRegistry::get('Schedule');
        $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

        if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

          if($input['tab_number'] != 5){

            $schedule_data->status = 2;

            // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
            if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

            }else{

              $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
            }
            //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
            $schedule->save($schedule_data);
          }
        }
      }

    return $this->redirect($this->referer());

  }

  if($tab_number == 25)
    {

      //pr($this->request->data());die;

      $cancer_cc_detail = $this->request->getData('cancer_cc_detail');
      $cancer_conditions = '';

      if(!empty($cancer_cc_detail && is_array($cancer_cc_detail)))
      {
        $cancer_cc_detail = array_filter($cancer_cc_detail);
        // whitelisting validation for detail questions field start
        // pr($details_question);  die;
        foreach ($cancer_cc_detail as $ky => $ve)
        {

          $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

           if(!empty($tempq)){
             if(($tempq['options'] != '')){
               $tempq = unserialize($tempq['options']);
              if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
            else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
            {
                if(!is_numeric($ve))
                {
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());
                }

            }
            else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
            {
              $checkDateFor = $this->General->checkDateFormat($ve);
              if(!$checkDateFor)
              {
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());
              }
            }
          }else{
          //pr($tempq);
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }

          //set the cancer conditions

          if(isset($cancer_cc_detail[321]) && !empty($cancer_cc_detail[321])){

            $cancer_conditions = $cancer_cc_detail[321];
            // pr($cancer_conditions);
            if(($skey = array_search("Other", $cancer_conditions, true)) !== false){
              unset($cancer_conditions[$skey]);
              $cancer_conditions = array_merge($cancer_conditions);
            }
          }
        }

        //pr($cancer_conditions);die;
        $medication_name_id = $this->request->getData('medication_name_name');
        $medication_data = array();
        if(!empty($medication_name_id) && is_array($medication_name_id))
        {

          $medication_name_id = array_filter($medication_name_id) ;
          $medication_name_id = array_unique($medication_name_id);

          $medication_dose = $this->request->getData('medication_dose');
          $medication_how_often = $this->request->getData('medication_how_often');
          if(is_array($medication_how_often))
            $medication_how_often = array_filter($medication_how_often); //remove the empty value from the array
          $medication_how_taken = $this->request->getData('medication_how_taken');
          $i = 0 ;
          foreach ($medication_name_id as $key => $value)
          {

            // whitelisting validation for medication how often field  start
            if(!empty($medication_how_often) && isset($medication_how_often[$key]) && !array_key_exists($medication_how_often[$key], $length_arr))
            {
              //  pr($medication_how_often); pr($length_arr); die;
              // echo 'hello4gh'; die;
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
            // whitelisting validation for medication how often field  end
            $medication_data[$i]['medication_name_name'] = $value;
            $medication_data[$i]['medication_dose'] = !empty($medication_dose[$key]) ?  $medication_dose[$key] : '';
            $medication_data[$i]['medication_how_often'] = !empty($medication_how_often[$key]) ? $medication_how_often[$key] : '';
            $medication_data[$i]['medication_how_taken'] = !empty($medication_how_taken[$key]) ? $medication_how_taken[$key] : '';
            $i++;
          }
        }

        $medication_data = !empty($medication_data) ? base64_encode(Security::encrypt(serialize($medication_data), SEC_KEY)) : '';

      if(!empty($cancer_cc_detail))
      {
        $cancer_cc_detail =  base64_encode(Security::encrypt((serialize($cancer_cc_detail)), SEC_KEY));
      }

      if(!empty($cancer_conditions))
      {
        $cancer_conditions =  base64_encode(Security::encrypt((serialize($cancer_conditions)), SEC_KEY));
      }

      if(!empty($user_detail)){

        $this->ChiefCompliantUserdetails->query()
          ->update()
          ->set(['cancer_conditions' => $cancer_conditions, 'cancer_cc_detail' => $cancer_cc_detail,'current_tab_number' => 26,'compliant_medication_detail' => $medication_data,'already_asked_cc_details' => ''])
          ->where(['appointment_id' => $apt_id])
          ->execute();
    }
    else
    {
      $tempuser = $this->ChiefCompliantUserdetails->newEntity();
      $tempuser->appointment_id  =  $apt_id ;
      $tempuser->cancer_conditions  =  $cancer_conditions;
      $tempuser->cancer_cc_detail  =  $cancer_cc_detail;
      $tempuser->compliant_medication_detail  =  $medication_data;
      $tempuser->already_asked_cc_details = '';
      $tempuser->current_tab_number  = 26 ;
      $tempuser->current_step_id  =  $step_id ;
      $this->ChiefCompliantUserdetails->save($tempuser);
    }

     //update schedule status
      $input = $this->request->data();

      if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

        $schedule = TableRegistry::get('Schedule');
        $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

        if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

          if($input['tab_number'] != 5){

            $schedule_data->status = 2;

            // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
            if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

            }else{

              $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
            }
            //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
            $schedule->save($schedule_data);
          }
        }
      }

    return $this->redirect($this->referer());

  }


  if($tab_number == 26)
  {

    //pr($this->request->data());die;
    $cancer_history_detail = $this->request->getData('cancer_history_detail');
    $cur_cancer_chief_compliant = $this->request->getData('cur_cancer_chief_compliant');
    if(!empty($cancer_history_detail && is_array($cancer_history_detail)))
    {
      $cancer_history_detail = array_filter($cancer_history_detail);
      // whitelisting validation for detail questions field start
      // pr($details_question);  die;
      foreach ($cancer_history_detail as $ky => $ve)
      {

        $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

         if(!empty($tempq)){
           if(($tempq['options'] != '')){
             $tempq = unserialize($tempq['options']);
            if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
          else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
          {
              if(!is_numeric($ve))
              {
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());
              }

          }
          else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
          {
            $checkDateFor = $this->General->checkDateFormat($ve);
            if(!$checkDateFor)
            {
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());
            }
          }
        }else{
        //pr($tempq);
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
        }
      }

      //pr($cancer_conditions);die;
      $temp_cur_cancer_chief_compliant = strtolower($cur_cancer_chief_compliant == 'throat cancer (esophageal)' ? "esophageal cancer" : $cur_cancer_chief_compliant);

      if($cur_cancer_chief_compliant == 'throat cancer (esophageal)'){

        $temp_cur_cancer_chief_compliant = "esophageal cancer";
      }
      elseif($cur_cancer_chief_compliant == 'colon-rectal cancer'){

        $temp_cur_cancer_chief_compliant = "colon cancer";
      }
      else{

        $temp_cur_cancer_chief_compliant = $cur_cancer_chief_compliant;
      }

      if(!empty($user_detail->cancer_history_detail)){

        $cancer_disease_history_detail = @unserialize(Security::decrypt(base64_decode($user_detail->cancer_history_detail),SEC_KEY));
        $cancer_disease_history_detail[$temp_cur_cancer_chief_compliant] = $cancer_history_detail;

      }
      else{

        $cancer_disease_history_detail = array($temp_cur_cancer_chief_compliant => $cancer_history_detail);
      }

      if(!empty($cancer_disease_history_detail))
      {
        $cancer_disease_history_detail =  base64_encode(Security::encrypt((serialize($cancer_disease_history_detail)), SEC_KEY));
      }

    // add the current cancer condition in  already_asked_cc_details
    if(empty($user_detail->already_asked_cc_details)){
        $already_asked_cc_details = $cur_cancer_chief_compliant ;
    }
    else{
        $already_asked_cc_details = $user_detail->already_asked_cc_details.','.$cur_cancer_chief_compliant ;
    }

    $temp_already_asked_cc_details = !empty($already_asked_cc_details) ? explode(",", $already_asked_cc_details): array();

    $temp_cancer_conditions = array();
    if(!empty($user_detail) && !empty($user_detail->cancer_conditions)){

      $temp_cancer_conditions = @unserialize(Security::decrypt(base64_decode($user_detail->cancer_conditions), SEC_KEY));

    }

    $rotated_cancer_conditions = array();
    //check the in cancer condition array, breast cancer and throat cancer (esophageal) exist
    //rorate the cancer history tab for breast cancer and throat cancer (esophageal)
    if(is_array($temp_cancer_conditions) && !empty($temp_cancer_conditions)){

      foreach ($temp_cancer_conditions as $key => $value) {
        $value = strtolower($value);
        //if(in_array($value, ['breast cancer','throat cancer (esophageal)','brain cancer','lung cancer',"stomach cancer","kidney cancer",'colon cancer','cervical cancer','ovarian cancer','prostate cancer','uterine cancer','vulvar cancer'])){
        //if(in_array($value, ['breast cancer','throat cancer (esophageal)','brain cancer',"stomach cancer","kidney cancer",'colon cancer','cervical cancer','ovarian cancer','prostate cancer'])){
        if(in_array($value, ['breast cancer','throat cancer (esophageal)','brain cancer','lung cancer',"stomach cancer","kidney cancer",'colon-rectal cancer','cervical cancer','ovarian cancer','prostate cancer','uterine cancer','vulvar cancer','liver cancer','thyroid cancer','vaginal cancer','leukemia','pancreatic cancer'])){

          $rotated_cancer_conditions[] = $value;
        }

      }
    }

    $remaining_cancer_condition = array_diff($rotated_cancer_conditions, $temp_already_asked_cc_details);

    if(count($remaining_cancer_condition) > 0){

      $this->ChiefCompliantUserdetails->query()
        ->update()
        ->set(['cancer_history_detail' => $cancer_disease_history_detail,'already_asked_cc_details' => $already_asked_cc_details])
        ->where(['appointment_id' => $apt_id])
        ->execute();
    }
    else{

      $this->ChiefCompliantUserdetails->query()
        ->update()
        ->set(['cancer_history_detail' => $cancer_disease_history_detail,'current_tab_number' => 27,'already_asked_cc_details' => $already_asked_cc_details])
        ->where(['appointment_id' => $apt_id])
        ->execute();
    }

    /*if(!empty($user_detail)){

      $this->ChiefCompliantUserdetails->query()
        ->update()
        ->set(['cancer_history_detail' => $cancer_history_detail,'current_tab_number' => 27])
        ->where(['appointment_id' => $apt_id])
        ->execute();
  }
  else
  {
    $tempuser = $this->ChiefCompliantUserdetails->newEntity();
    $tempuser->appointment_id  =  $apt_id ;
    $tempuser->cancer_history_detail  =  $cancer_history_detail;
    $tempuser->current_tab_number  = 27;
    $tempuser->current_step_id  =  $step_id ;
    $this->ChiefCompliantUserdetails->save($tempuser);
  }*/

   //update schedule status
    $input = $this->request->data();

    if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

      $schedule = TableRegistry::get('Schedule');
      $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

      if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

        if($input['tab_number'] != 5){

          $schedule_data->status = 2;

          // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
          if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

              $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

          }else{

            $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
          }
          //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
          $schedule->save($schedule_data);
        }
      }
    }

  return $this->redirect($this->referer());

  }


  if($tab_number == 27)
  {

    //pr($this->request->data());die;
    $whitelist_rate_arr = array();
    for($i= 1; $i<=10; $i++){
      $whitelist_rate_arr[] = $i;
    }

    $chemo_whitelist_rate_arr = array();
    for($i= 0; $i<=4; $i++){
      $chemo_whitelist_rate_arr[] = $i;
    }
    $assessment_history = $this->request->getData('assessment_history');
    $life_assessment = $this->request->getData('life_assessment');
    $chemo_assessment = $this->request->getData('chemo_assessment');
    $cancer_covid_question = $this->request->getData('cancer_covid_question');


    $temp_assessment_history = array();
    $temp_life_assessment = array();
    $temp_chemo_assessment = array();
    if(!empty($assessment_history) && is_array($assessment_history))
    {
      foreach ($assessment_history as $key => $value)
      {
        if(isset($value['sym_id']) && !empty($value['sym_id']))
        {
          // whitelisting validation for cancer symptom assessment
          $cond = $commonTable->find('all')->where(['cond_type' => 6,'id' => $value['sym_id']])->toArray();
          if(empty($cond) || (isset($value['rate']) && !in_array($value['rate'], $whitelist_rate_arr))){

              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
          // whitelisting validation for shots history field end
          if(isset($value['sym_id']) && isset($value['rate'])){
            $temp_assessment_history[$value['sym_id']] = $value['rate'];
          }
        }
      }
    }

    if(!empty($life_assessment) && is_array($life_assessment))
    {
      foreach ($life_assessment as $key => $value)
      {

        $cond = $commonTable->find('all')->where(['cond_type' => 7,'id' => $key])->toArray();
        if(empty($cond) || !in_array($value, $whitelist_rate_arr)){

          $this->Flash->error(__('Could not be saved. Please try again.'));
          return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
        }
      }
    }
    //pr($chemo_assessment);die;
    if(!empty($chemo_assessment) && is_array($chemo_assessment))
    {
      foreach ($chemo_assessment as $key => $value)
      {

        $cond = $commonTable->find('all')->where(['cond_type' => 8,'id' => $key])->toArray();
        if(empty($cond) || !in_array($value, $chemo_whitelist_rate_arr)){

          $this->Flash->error(__('Could not be saved. Please try again.'));
          return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
        }
      }
    }



    if(!empty($cancer_covid_question && is_array($cancer_covid_question)))
    {
      $cancer_covid_question = array_filter($cancer_covid_question);
      // whitelisting validation for detail questions field start
      foreach ($cancer_covid_question as $ky => $ve)
      {
        $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

         if(!empty($tempq)){
           if(($tempq['options'] != '')){
             $tempq = unserialize($tempq['options']);
            if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
        }else{
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly
          }
        }
    }

   // pr($temp_chemo_assessment);die;

    $assessment_history = $temp_assessment_history;
    //$life_assessment = $temp_life_assessment;
   // $chemo_assessment = $temp_chemo_assessment;

    $cancer_assessments = array('assessment_history' => $assessment_history,'life_assessment' => $life_assessment,'chemo_assessment' => $chemo_assessment,'cancer_covid_question' =>$cancer_covid_question);


    if(!empty($cancer_assessments))
    {
      $cancer_assessments =  base64_encode(Security::encrypt((serialize($cancer_assessments)), SEC_KEY));
    }

    $current_tab_number = $step_id == 21 ? 4 : 28;

    if(!empty($user_detail)){

      $this->ChiefCompliantUserdetails->query()
        ->update()
        ->set(['cancer_assessments' => $cancer_assessments,'current_tab_number' => $current_tab_number])
        ->where(['appointment_id' => $apt_id])
        ->execute();
  }
  else
  {
    $tempuser = $this->ChiefCompliantUserdetails->newEntity();
    $tempuser->appointment_id  =  $apt_id ;
    $tempuser->cancer_assessments  =  $cancer_assessments;
    $tempuser->current_tab_number  = $current_tab_number;
    $tempuser->current_step_id  =  $step_id ;
    $this->ChiefCompliantUserdetails->save($tempuser);
  }

   //update schedule status
    $input = $this->request->data();

    if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

      $schedule = TableRegistry::get('Schedule');
      $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

      if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

        if($input['tab_number'] != 5){

          $schedule_data->status = 2;

          // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
          if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

              $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

          }else{

            $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
          }
          //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
          $schedule->save($schedule_data);
        }
      }
    }

  return $this->redirect($this->referer());
  }

  if($tab_number == 28)
  {
    //pr($this->request->data()); die;
    $cancer_medical_detail = $this->request->getData('cancer_medical_detail');

    //pr($cancer_medical_detail); die;

    $sym_family_members = $this->request->getData('sym_family_members');
  //  pr($sym_family_members);die;
    //pr($sym_family_members);
    $family_members_disease_detail = $this->request->getData('family_members_disease_detail');
    //pr($family_members_disease_detail);die;
    //pr($family_members_disease_detail);
     //pr($family_members_disease_detail);die;
    // pr($sym_family_members);
    //pr($family_members_disease_detail);

    if(!empty($cancer_medical_detail && is_array($cancer_medical_detail)))
    {
      $cancer_medical_detail = array_filter($cancer_medical_detail);
      // whitelisting validation for detail questions field start
     // pr($cancer_medical_detail);  die;
      foreach ($cancer_medical_detail as $ky => $ve)
      {
        if($ky == 563)
        {
          continue;
        }
        $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

         if(!empty($tempq)){
           if(($tempq['options'] != '')){
             $tempq = unserialize($tempq['options']);
             if(in_array($ky, [626,639]))
                {
                  $tempq = array_flip($tempq);
                }
            if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){
              // pr($tempq);
              // pr($ve);die;
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
          else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
          {
              if(!is_numeric($ve))
              {
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());
              }

          }
          else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
          {
            $checkDateFor = $this->General->checkDateFormat($ve);
            if(!$checkDateFor)
            {
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());
            }
          }
        }else{
        //pr($tempq);
            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
        }
    }


    if(!empty($cancer_medical_detail))
    {
      $family_relation_Key = array('father' =>1, 'mother' =>2, 'maternal GF' =>3, 'paternal GF' =>4, 'maternal GM' =>5, 'paternal GM' =>6, 'brother' =>7, 'sister' =>8, 'son' =>9, 'daughter' =>10, "maternal cousin" =>11, "paternal cousin" =>12, "maternal aunt" =>13,"paternal aunt" =>14,"maternal uncle" =>15,"paternal uncle" =>16);

      $tempArray = array();
      foreach ($cancer_medical_detail as $key => $value) {

        if(in_array($key,[359,360,361,364,365,366,367,368,369]) && $value == 'Yes'){

           $disease_detail =  $this->CommonQuestions->find('all')->where(['id' => $key])->first()->toArray();
           if(!empty($disease_detail) && isset($sym_family_members[$key]) && !empty($sym_family_members[$key])){

              foreach ($sym_family_members[$key] as $fkey => $fvalue) {

                if(isset($family_relation_Key[$fvalue])){

                  $fmk = $family_relation_Key[$fvalue];
                  $tempArray[$fmk]['disease'][] = $disease_detail['question'];
                }
              }
           }
        }
      }


      //manage cancer medication start
      if(!empty($family_members_disease_detail))
      {
        foreach ($family_members_disease_detail as $fmkey => $fmvaludisease) {
          if(isset($family_relation_Key[$fmkey])){

                 $fmk = $family_relation_Key[$fmkey];

                  if(isset($fmvaludisease['disease']) && !empty($fmvaludisease['disease']))
                  {
                    /*foreach($fmvaludisease['disease'] as $diseaseKey => $dieaseVal)
                    {
                        if($dieaseVal == 'Other')
                        {
                          $tempArray[$fmk]['disease'][] = $fmvaludisease['other'];
                        }
                        $tempArray[$fmk]['disease'][] = $dieaseVal;
                    }*/

                    if(isset($fmvaludisease['other']) && !empty($fmvaludisease['other'])){

                      $temp_disease_detail = strtolower(implode(", ", $fmvaludisease['disease']));
                      $temp_disease_detail = str_replace("other", $fmvaludisease['other'], $temp_disease_detail);
                      $fmvaludisease['disease'] = explode(", ", $temp_disease_detail);
                    }
                    if(!isset($tempArray[$fmk])){

                      $tempArray[$fmk]['disease'] = [];
                    }
                    $tempArray[$fmk]['disease'] = array_merge($tempArray[$fmk]['disease'],$fmvaludisease['disease']);
                  }
          }
        }
      }

      //pr($tempArray);die;
      //manage cancer medication end

      //manage diabities medication start
      if(!empty($cancer_medical_detail['363'])){

              foreach ($cancer_medical_detail['363'] as $diabitieskey => $diabitiesval) {
                  $disease_detail =  $this->CommonQuestions->find('all')->where(['id' => '363'])->first()->toArray();
                    if(isset($family_relation_Key[$diabitieskey])){
                      $fmk = $family_relation_Key[$diabitieskey];
                      if($diabitiesval == 'Type 1'){
                        $tempArray[$fmk]['disease'][] = 'Diabetes type 1';
                      }else if ($diabitiesval == 'Type 2') {
                        $tempArray[$fmk]['disease'][] = 'Diabetes type 2';
                      }else if ($diabitiesval == 'Not sure') {
                        $tempArray[$fmk]['disease'][] = 'Diabetes';
                      }
                    }
              }
    }
    //manage diabities medication end
    }

    //update surgecal history
    $temp_surgical_history_data = array();

    if(isset($cancer_medical_detail[344]) && !empty($cancer_medical_detail[344]) && $cancer_medical_detail[344] == 'Yes' && isset($cancer_medical_detail[345]) && !empty($cancer_medical_detail[345])){

        $ques_and_345 = strtolower($cancer_medical_detail[345]);
        $sargical_hx = '';
        if($ques_and_345 == 'right ovary'){

            $sargical_hx = 'R oopherectomy';
        }
        elseif($ques_and_345 == 'left ovary'){

           $sargical_hx = 'L oopherectomy';
        }
        elseif($ques_and_345 == 'both ovaries'){

          $sargical_hx = 'bilateral oopherectomy';
        }

        $temp_surgical_history_data[0]['name'] = $sargical_hx;
    }

    if(isset($cancer_medical_detail[346]) && !empty($cancer_medical_detail[346])){

      $temp_surgical_history_data[0]['year'] = $cancer_medical_detail[346];
    }

    $is_uterus_removal = 0;

    if(isset($cancer_medical_detail[347]) && !empty($cancer_medical_detail[347]) && $cancer_medical_detail[347] == 'Yes'){

        $temp_surgical_history_data[1]['name'] = 'Uterus removal (hysterectomy)';
        $is_uterus_removal = 1;
    }

    if(isset($cancer_medical_detail[348]) && !empty($cancer_medical_detail[348])){

      $temp_surgical_history_data[1]['year'] = $cancer_medical_detail[348];
    }

    if(isset($cancer_medical_detail[456]) && !empty($cancer_medical_detail[456]) && $cancer_medical_detail[456] == 'Yes'){

        $temp_surgical_history_data[2]['name'] = 'MEN2';
        $temp_surgical_history_data[2]['year'] = '';
    }

    if(isset($cancer_medical_detail[457]) && !empty($cancer_medical_detail[457]) && $cancer_medical_detail[457] == 'Yes'){

        $temp_surgical_history_data[3]['name'] = 'Medullary thyroid CA';
        $temp_surgical_history_data[3]['year'] = '';
    }

    $surgical_history = [];

    if(isset($login_user['surgical_history']) && !empty($login_user['surgical_history']))
    {
      $surgical_history = unserialize(Security::decrypt(base64_decode($login_user['surgical_history']), SEC_KEY));
    }

    if(!empty($surgical_history)){

      if(!empty($temp_surgical_history_data)){

          foreach ($temp_surgical_history_data as $key => $value) {

            $is_exist = 0;

            foreach ($surgical_history as $k => $v) {

              if(strtolower($value['name']) == strtolower($v['name'])){

                $is_exist = 1;

                if(!empty($value['year']) && empty($v['year'])){

                  $surgical_history[$k]['year'] = $value['year'];
                }

                if(!empty($value['year']) && !empty($v['year']) && $value['year'] != $v['year']){

                  //we have to add the surgery name and year again in array
                  $is_exist = 0;
                }
              }
            }

            if(!$is_exist){

              $surgical_history = array_merge($surgical_history,array($value));
            }
          }
      }
    }
    else{

      $surgical_history = $temp_surgical_history_data;
    }

    if(!empty($surgical_history)){

      $login_user['is_uterus_removal'] = base64_encode(Security::encrypt($is_uterus_removal, SEC_KEY));
    }

    $is_check_surg_his = !empty($surgical_history) ? 1 : 0;
    $login_user['is_check_surg_his'] = base64_encode(Security::encrypt($is_check_surg_his, SEC_KEY));
    $login_user['surgical_history'] = !empty($surgical_history) ? base64_encode(Security::encrypt((serialize($surgical_history)), SEC_KEY)) : "";

    //update medical history
    // $drink_time = 0;
     //pr($cancer_medical_detail[563]);die;
    

    $temp_medical_history_data = [];
    $md_count = 0;
    if(isset($cancer_medical_detail[458]) && !empty($cancer_medical_detail[458])){

      foreach ($cancer_medical_detail[458] as $key => $value) {

        $temp_medical_history_data[$md_count]['name'] = $value;
        $temp_medical_history_data[$md_count]['year'] = '';
        $md_count++;
      }
    }
    $tmp_arr = array();
    if(isset($cancer_medical_detail[563]) && !empty($cancer_medical_detail[563])){

              $cancer_medical_detail[563]['time'] = array_filter($cancer_medical_detail[563]['time']);                   
              array_push($tmp_arr, $cancer_medical_detail[563]);             

              

              $cancer_medical_detail[563] = $tmp_arr[0];
    }
    //pr($cancer_medical_detail);die;
    
    if(isset($cancer_medical_detail[528]) && !empty($cancer_medical_detail[528]) && $cancer_medical_detail[528] == 'Yes'){

        $temp_medical_history_data[$md_count]['name'] = isset($cancer_medical_detail[548]) && $cancer_medical_detail[548] != "Not sure"? "Diabetes (".$cancer_medical_detail[548].")" : 'Diabetes';
        $temp_medical_history_data[$md_count]['year'] = '';
        $md_count++;
    }
    else
    {
      $cancer_medical_detail[528] = "No";
    }
    if(isset($cancer_medical_detail[529]) && !empty($cancer_medical_detail[529]) && $cancer_medical_detail[529] == 'Yes'){

        $temp_medical_history_data[$md_count]['name'] = "Heart attacks";
        $temp_medical_history_data[$md_count]['year'] = '';
        $md_count++;
    }
    else
    {
      $cancer_medical_detail[529] = "No";
    }
    if(isset($cancer_medical_detail[530]) && !empty($cancer_medical_detail[530]) && $cancer_medical_detail[530] == 'Yes'){

        $temp_medical_history_data[$md_count]['name'] = "Strokes";
        $temp_medical_history_data[$md_count]['year'] = '';
        $md_count++;
    }
    else
    {
      $cancer_medical_detail[530] = "No";
    }
    if(isset($cancer_medical_detail[531]) && !empty($cancer_medical_detail[531]) && $cancer_medical_detail[531] == 'Yes'){

        $temp_medical_history_data[$md_count]['name'] = "History of blood clots";
        $temp_medical_history_data[$md_count]['year'] = '';
        $md_count++;
    }
    else
    {
      $cancer_medical_detail[531] = "No";
    }
    if(isset($cancer_medical_detail[532]) && !empty($cancer_medical_detail[532]) && $cancer_medical_detail[532] == 'Yes'){

        $temp_medical_history_data[$md_count]['name'] = "Tuberculosis (TB) infection";
        $temp_medical_history_data[$md_count]['year'] = '';
        $md_count++;
    }
    else
    {
      $cancer_medical_detail[532] = "No";
    }
    if(isset($cancer_medical_detail[533]) && !empty($cancer_medical_detail[533]) && $cancer_medical_detail[533] == 'Yes'){

        $temp_medical_history_data[$md_count]['name'] = "Drug resistant staph infection (MRSA) infections";
        $temp_medical_history_data[$md_count]['year'] = '';
        $md_count++;
    }
    else
    {
      $cancer_medical_detail[533] = "No";
    }
    if(isset($cancer_medical_detail[534]) && !empty($cancer_medical_detail[534]) && $cancer_medical_detail[534] == 'Yes'){

        $temp_medical_history_data[$md_count]['name'] = "Vancomycin-resistant enterococcus (VRE) infection";
        $temp_medical_history_data[$md_count]['year'] = '';
        $md_count++;
    }
    else
    {
      $cancer_medical_detail[534] = "No";
    }
    if(isset($cancer_medical_detail[535]) && !empty($cancer_medical_detail[535]) && $cancer_medical_detail[535] == 'Yes'){

        $temp_medical_history_data[$md_count]['name'] = "C-diff infection";
        $temp_medical_history_data[$md_count]['year'] = '';
        $md_count++;
    }
    else
    {
      $cancer_medical_detail[535] = "No";
    }
    if(isset($cancer_medical_detail[536]) && !empty($cancer_medical_detail[536]) && $cancer_medical_detail[536] == 'Yes'){

        $temp_medical_history_data[$md_count]['name'] = "History of fluid around your lungs (Pleural effusion)";
        $temp_medical_history_data[$md_count]['year'] = '';
        $md_count++;
    }
    else
    {
      $cancer_medical_detail[536] = "No";
    }
    if(isset($cancer_medical_detail[537]) && !empty($cancer_medical_detail[537]) && $cancer_medical_detail[537] == 'Yes'){

        $temp_medical_history_data[$md_count]['name'] = "History of fluid around your heart (Pericardial effusion)";
        $temp_medical_history_data[$md_count]['year'] = '';
        $md_count++;
    }
    else
    {
      $cancer_medical_detail[537] = "No";
    }
    // End user table
    $medical_history = [];

    if(isset($login_user['medical_history']) && !empty($login_user['medical_history']))
    {
      $medical_history = unserialize(Security::decrypt(base64_decode($login_user['medical_history']), SEC_KEY));
    }


    if(!empty($medical_history)){

      if(!empty($temp_medical_history_data)){

          foreach ($temp_medical_history_data as $key => $value) {

            $is_exist = 0;

            foreach ($medical_history as $k => $v) {

              if(strtolower($value['name']) == strtolower($v['name']) && empty($v['year'])){

                $is_exist = 1;
              }
            }

            if(!$is_exist){

              $medical_history = array_merge($medical_history,array($value));
            }
          }
      }
    }
    else{

      $medical_history = $temp_medical_history_data;
    }

    $is_check_med_his = !empty($medical_history) ? 1 : 0;
    $login_user['is_check_med_his'] = base64_encode(Security::encrypt($is_check_med_his, SEC_KEY));
    $login_user['medical_history'] = !empty($medical_history) ? base64_encode(Security::encrypt((serialize($medical_history)), SEC_KEY)) : "";

    if(isset($login_user['family_history']) && !empty($login_user['family_history']))
    {
        $savedfamilyhistory = unserialize(Security::decrypt(base64_decode($login_user['family_history']), SEC_KEY));
        if(!empty($savedfamilyhistory))
        {
          /*$mergeFamilyMember = array_merge($savedfamilyhistory,$tempArray);
          $familyMemberDuplicacy = array();
          if(!empty($mergeFamilyMember))
          {
            $j = 0;
            foreach($mergeFamilyMember as $fKey => $fval)
            {
              if(in_array($fval['name'], $check_for_unique_family_name)) continue;
              $check_for_unique_family_name[] = $fval['name'];
              $familyMemberDuplicacy[$j]['name'] = $fval['name'];
              $familyMemberDuplicacy[$j]['disease'] = $fval['disease'];
              $familyMemberDuplicacy[$j]['alive_status'] = 1;
              $j++;
            }
          }*/

          foreach ($savedfamilyhistory as $key => $value) {

            $fm_disease_arr = !empty($value['disease']) ? explode(",", $value['disease']) : [];
            if(isset($tempArray[$value['name']])){

                $tempArray[$value['name']]['disease'] = array_merge($tempArray[$value['name']]['disease'],$fm_disease_arr);
            }
            else{

              $tempArray[$value['name']]['disease'] = $fm_disease_arr;
            }

            if(isset($value['alive_status'])){

              $tempArray[$value['name']]['alive_status'] = $value['alive_status'];
            }

            if(isset($value['decease_year'])){

              $tempArray[$value['name']]['decease_year'] = $value['decease_year'];
            }

            if(isset($value['cause_of_death'])){

              $tempArray[$value['name']]['cause_of_death'] = $value['cause_of_death'];
            }
          }
        }
    }

    //manage array to save data in edit medical history form, family history tab

    $family_history_arr = array();

    if(!empty($tempArray)){
      $counter = 0;
      foreach ($tempArray as $key => $value) {

        $family_history_arr[$counter]['name'] = $key;
        if(isset($value['disease']) && !empty($value['disease'])){

          $temp_disease = array_unique($value['disease']);
          $family_history_arr[$counter]['disease'] = is_array($temp_disease) ? implode(",", $temp_disease): $temp_disease;
        }
        else{
          $family_history_arr[$counter]['disease'] = "";
        }

        if(isset($value['alive_status'])){

          $family_history_arr[$counter]['alive_status'] = $value['alive_status'];
        }

        if(isset($value['decease_year'])){

          $family_history_arr[$counter]['decease_year'] = $value['decease_year'];
        }

        if(isset($value['cause_of_death'])){

          $family_history_arr[$counter]['cause_of_death'] = $value['cause_of_death'];
        }

        $counter++;
      }
    }
// pr($tempArray);die;

    if(!empty($cancer_medical_detail))
    {
      // pr($cancer_medical_detail);die;
       //update edit medical history

      if(!empty($login_user->is_currentlysmoking)){

        $login_user->is_currentlysmoking = Security::decrypt(base64_decode($login_user->is_currentlysmoking),SEC_KEY);
      }

      if(!empty($login_user->is_currentlydrinking)){

        $login_user->is_currentlydrinking = Security::decrypt(base64_decode($login_user->is_currentlydrinking),SEC_KEY);
      }
      if(!empty($login_user->is_pastsmoking)){

        $login_user->is_pastsmoking = Security::decrypt(base64_decode($login_user->is_pastsmoking),SEC_KEY);
      }

      if(!empty($login_user->is_pastdrinking)){

        $login_user->is_pastdrinking = Security::decrypt(base64_decode($login_user->is_pastdrinking),SEC_KEY);
      }

      if(!empty($login_user->current_drink_pack)){

        $login_user->current_drink_pack = Security::decrypt(base64_decode($login_user->current_drink_pack),SEC_KEY);
      }

      if(!empty($login_user->current_smoke_pack)){

        $login_user->current_smoke_pack = Security::decrypt(base64_decode($login_user->current_smoke_pack),SEC_KEY);
      }

      if(isset($cancer_medical_detail[349]) && !empty($cancer_medical_detail[349])){

        $que_ans_349 = strtolower($cancer_medical_detail[349]);
        $login_user->current_smoke_pack = '';
        if($que_ans_349 == 'yes'){

          $login_user->is_currentlysmoking = 1;
        }
        else{

          $login_user->is_currentlysmoking = 0;
        }
      }

      if(isset($cancer_medical_detail[350]) && !empty($cancer_medical_detail[350])){

        $login_user->current_smoke_pack = $cancer_medical_detail[350];
      }

      if(isset($cancer_medical_detail[351]) && !empty($cancer_medical_detail[351])){

        $que_ans_349 = strtolower($cancer_medical_detail[351]);
        $login_user->current_drink_pack = '';
        if($que_ans_349 == 'yes'){

          $login_user->is_currentlydrinking = 1;
        }
        else{

          $login_user->is_currentlydrinking = 0;
        }
      }

      if(isset($cancer_medical_detail[352]) && !empty($cancer_medical_detail[352])){

        $login_user->current_drink_pack = $cancer_medical_detail[352];
      }

      // Internal medicine module
      if(isset($cancer_medical_detail[564]) && !empty($cancer_medical_detail[564])){

        $que_ans_564 = strtolower($cancer_medical_detail[564]);
        if($que_ans_564 == 'yes'){

          $login_user->is_currentlysmoking = 1;
        }
        else{

          $login_user->is_currentlysmoking = 0;
        }
      }

      if(isset($cancer_medical_detail[566]) && !empty($cancer_medical_detail[566])){

        $que_ans_566 = strtolower($cancer_medical_detail[566]);
        if($que_ans_566 == 'yes'){

          $login_user->is_pastsmoking = 1;
        }
        else{

          $login_user->is_pastsmoking = 0;
        }
      }

      if(isset($cancer_medical_detail[608]) && !empty($cancer_medical_detail[608])){

        $que_ans_608 = strtolower($cancer_medical_detail[608]);
        if($que_ans_608 == 'yes'){

          $login_user->is_currentlydrinking = 1;
        }
        else{

          $login_user->is_currentlydrinking = 0;
        }
      }

      if(isset($cancer_medical_detail[609]) && !empty($cancer_medical_detail[609])){

        $que_ans_609 = strtolower($cancer_medical_detail[609]);
        if($que_ans_609 == 'yes'){

          $login_user->is_pastdrinking = 1;
        }
        else{

          $login_user->is_pastdrinking = 0;
        }
      }
      // end 
      if(!empty($login_user->is_currentlysmoking)){

        $login_user->is_currentlysmoking = base64_encode(Security::encrypt($login_user->is_currentlysmoking,SEC_KEY));
      }
      if(!empty($login_user->is_currentlydrinking)){

        $login_user->is_currentlydrinking = base64_encode(Security::encrypt($login_user->is_currentlydrinking,SEC_KEY));
      }
      if(!empty($login_user->current_drink_pack)){

        $login_user->current_drink_pack = base64_encode(Security::encrypt($login_user->current_drink_pack,SEC_KEY));
      }
      if(!empty($login_user->current_smoke_pack)){

        $login_user->current_smoke_pack = base64_encode(Security::encrypt($login_user->current_smoke_pack,SEC_KEY));
      }

      if(!empty($login_user->is_pastsmoking)){

        $login_user->is_pastsmoking = base64_encode(Security::encrypt($login_user->is_pastsmoking,SEC_KEY));
      }
      if(!empty($login_user->is_pastdrinking)){

        $login_user->is_pastdrinking = base64_encode(Security::encrypt($login_user->is_pastdrinking,SEC_KEY));
      }

      $login_user->family_history = !empty($family_history_arr) ? base64_encode(Security::encrypt((serialize($family_history_arr)), SEC_KEY)) : '';
      if(empty($savedfamilyhistory) && !empty($family_history_arr))
      {
        $login_user->is_family_his = base64_encode(Security::encrypt(1, SEC_KEY));
      }


      $this->Users->save($login_user);

      $cancer_medical_detail =  base64_encode(Security::encrypt((serialize($cancer_medical_detail)), SEC_KEY));
    }

    if(!empty($sym_family_members))
    {
      $sym_family_members =  base64_encode(Security::encrypt((serialize($sym_family_members)), SEC_KEY));
    }

    $family_members_disease_detail = !empty($family_members_disease_detail) ? base64_encode(Security::encrypt((serialize($family_members_disease_detail)), SEC_KEY)) :"";

    // Add allergy history for internal medication module
        $allergy_history = $this->request->getData('allergy_history');        
        $is_check_allergy_his = $this->request->getData('is_check_allergy_his');
        if($is_check_allergy_his != '' || $allergy_history != '')
        {
            if(is_numeric($is_check_allergy_his) && in_array($is_check_allergy_his, array(0,1))){
              $data_arr['is_check_allergy_his'] = base64_encode(Security::encrypt($is_check_allergy_his, SEC_KEY));
            }

            if($is_check_allergy_his != 1){
              $allergy_history = array(); // empty the array if user did not checked yes for the allergy history existance related question
            }
            if(is_numeric($this->request->getData('is_latex_allergy')) && in_array($this->request->getData('is_latex_allergy'), array(0,1))){

              $data_arr['is_latex_allergy'] = base64_encode(Security::encrypt($this->request->getData('is_latex_allergy'), SEC_KEY));
            }

            $tempar = array();
            if(!empty($allergy_history))
            {

              foreach ($allergy_history as $key => $value)
              {
                if(empty($value['name'])) continue ; // escape if allergy name is empty
                $tempar[] = $value ;
              }
              if(!empty($tempar)){

              $data_arr['allergy_history'] = base64_encode(Security::encrypt((serialize($tempar)), SEC_KEY));
              }
            }
            else
            {
              $data_arr['allergy_history'] = '';
            }
            $check_emh_field_view['checkallergy'] = 1;
            $data_arr['check_emh_field_view'] = serialize($check_emh_field_view);

            $user_table->patchEntity($user_data, $data_arr);
            $user_table->save($user_data);
        }
        // if($user_table->save($user_data)){
        //   $this->ChiefCompliantUserdetails->query()
        //       ->update()
        //       ->set(['current_tab_number' => 28])
        //       ->where(['appointment_id' => $apt_id])
        //       ->execute();
        //       return $this->redirect($this->referer());
        // }
        // else{

        //   $this->Flash->error(__('Could not be saved. Please try again.'));
        // }
    // End allergy history
    if($step_id == 25)
    {
      $current_tab_number = 4;
    }
    elseif($step_id == 26)
    {
      $current_tab_number = 16;
    }
    else{
      $current_tab_number = 4;
    }

    if(!empty($user_detail)){

      $this->ChiefCompliantUserdetails->query()
        ->update()
        ->set(['cancer_medical_detail' => $cancer_medical_detail,'cancer_family_members' => $sym_family_members,'family_members_cancer_disease_detail' => $family_members_disease_detail,'current_tab_number' => $current_tab_number])
        ->where(['appointment_id' => $apt_id])
        ->execute();
  }
  else
  {
    $tempuser = $this->ChiefCompliantUserdetails->newEntity();
    $tempuser->appointment_id  =  $apt_id ;
    $tempuser->cancer_medical_detail  =  $cancer_medical_detail;
    $tempuser->cancer_family_members  =  $sym_family_members;
    $tempuser->family_members_cancer_disease_detail  =  $family_members_disease_detail;
    $tempuser->current_tab_number  = 4;
    $tempuser->current_step_id  =  $step_id;
    $this->ChiefCompliantUserdetails->save($tempuser);
  }

   //update schedule status
    $input = $this->request->data();

    if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

      $schedule = TableRegistry::get('Schedule');
      $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

      if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

        if($input['tab_number'] != 5){

          $schedule_data->status = 2;

          // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
          if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

              $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

          }else{

            $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
          }
          //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
          $schedule->save($schedule_data);
        }
      }
    }

  return $this->redirect($this->referer());

  }

  if($tab_number == 29)
  {
    $pre_op_post_op = $this->request->getData('pre_op_post_op');

    if(!empty($pre_op_post_op && is_array($pre_op_post_op)))
    {

          // whitelisting validation for covid detail questions field start
          //pr($focused_story);

          foreach ($pre_op_post_op as $ky => $ve) {

            if(!is_numeric($ky)) continue; // if key is more_option string in that case we do not whitelist and for image we do not white list


           $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

           if(!empty($tempq)){
            if($tempq['options']){
              $tempq = unserialize($tempq['options']);

              if((is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq))){
                $this->Flash->error(__('Could not be saved t1. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
            else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
            {
                if(!is_numeric($ve))
                {
                  $this->Flash->error(__('Could not be saved t2. Please try again.'));
                  return $this->redirect($this->referer());
                }
            }
          }else{
              $this->Flash->error(__('Could not be saved t3. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }

            if(!empty($pre_op_post_op))
            $pre_op_post_op =  base64_encode(Security::encrypt(serialize($pre_op_post_op), SEC_KEY));  //  serialize($details_question);

           if(!empty($user_detail)){

             $this->ChiefCompliantUserdetails->query()
               ->update()
               ->set(['pre_op_post_op' => $pre_op_post_op,'current_tab_number' => 4])
               ->where(['appointment_id' => $apt_id])
               ->execute();
           }
           else
           {
             $tempuser = $this->ChiefCompliantUserdetails->newEntity();
             $tempuser->appointment_id  =  $apt_id;
             $tempuser->pre_op_post_op  =  $pre_op_post_op;
             $tempuser->current_tab_number  = 4;
             $tempuser->current_step_id  =  $step_id;
             $this->ChiefCompliantUserdetails->save($tempuser);
           }

            //update schedule status
            $input = $this->request->data();

              if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

              $schedule = TableRegistry::get('Schedule');
              $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

              if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

                if($input['tab_number'] != 5){
                  $schedule_data->status = 2;
                    $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
                  $schedule->save($schedule_data);
                }
              }
          }
          return $this->redirect($this->referer());
    }
    else{
          $this->Flash->error(__('Data could not be saved, Please try again.'));
        }

  }


  if($tab_number == 30)
    {

      //pr($this->request->data());die;

      $followup_general_detail = $this->request->getData('followup_general_detail');

      if(!empty($followup_general_detail && is_array($followup_general_detail)))
      {
        $followup_general_detail = array_filter($followup_general_detail);
        // whitelisting validation for detail questions field start
        // pr($details_question);  die;
        foreach ($followup_general_detail as $ky => $ve)
        {

          $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

           if(!empty($tempq)){
             if(($tempq['options'] != '')){
               $tempq = unserialize($tempq['options']);
              if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
            else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
            {
                if(!is_numeric($ve))
                {
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());
                }

            }
            else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
            {
              $checkDateFor = $this->General->checkDateFormat($ve);
              if(!$checkDateFor)
              {
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());
              }
            }
          }else{
          //pr($tempq);
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
        }

        $symtomsArray = array();
        $symtomsArray[] = $this->request->getData('main_chief_compliant_id');
        if(is_array($this->request->getData('chief_compliant_id'))){

          $symtomsArray = array_merge($symtomsArray,$this->request->getData('chief_compliant_id'));
        }

        $symtomsArray = array_filter($symtomsArray);
        $symtomsArray = array_unique($symtomsArray) ;
        $symtomsArray = $this->checkSynonyms($symtomsArray);

        if(!empty($symtomsArray)){

          foreach ($symtomsArray as $key => $value) {

            if(strtolower(trim($value)) == strtolower(trim($this->request->data['main_chief_compliant_id']))){

                unset($symtomsArray[$key]);
                break;
            }
          }
        }

        $chief_compliant_id = $symtomsArray;
        $compliant_symptom_ids = '';
        $symptom_from_tab1 = array();
        if(!empty($chief_compliant_id) && is_array($chief_compliant_id))
        {
          $chief_compliant_id = array_filter($chief_compliant_id);
          $chief_compliant_id = array_unique($chief_compliant_id);

          // for orthopedic module and orthopedic spine module the symptom compliant from tab 1 that are in database will be concatenated in mian chief compliant
          $temp_cc_id = '';

          if($apt_id_data->specialization_id == 3 || $apt_id_data->specialization_id == 4 || $apt_id_data->specialization_id == 7)
          {
              $query = $this->ChiefCompliants->find('list', [
                                          'keyField' => 'id',
                                          'valueField' => 'name'
                                      ])->where(['specialization_id' => $apt_id_data->specialization_id]);
              $chief_compliant_arr = $query->toArray();
              $i = 1;
              foreach ($chief_compliant_id as $key => $value)
              {
                  $chief_compliant_arr =    array_map(
                          function($item)  {
                              // will remove extra white space and make it in lowercase
                              return strtolower(preg_replace('/\s+/', '', $item)) ;
                          },
                          $chief_compliant_arr
                      );
                  if($tk = array_search(strtolower(preg_replace('/\s+/', '', $value)), $chief_compliant_arr))
                  {

                    //store the cc for detail tab when detail question is given.
                    $check_temp_cc_detail = $this->ChiefCompliants->find('all')->where(['id'=>$tk])->first();
                    if(!empty($check_temp_cc_detail) && !empty($check_temp_cc_detail->default_compliant_detail_ids)){

                      if($i == 3){

                        break;
                      }
                      $temp_cc_id .=  ','.$tk;
                      unset($chief_compliant_id[$key]);
                      $i++;
                    }
                  }
              }
            }
            else
            {

              $query = $this->ChiefCompliants->find('list', [
                                          'keyField' => 'id',
                                          'valueField' => 'name'
                                      ]);
              $chief_compliant_arr = $query->toArray();
              $i = 1;
              foreach ($chief_compliant_id as $key => $value) {
                $chief_compliant_arr =    array_map(
                          function($item)  {
                              // will remove extra white space and make it in lowercase
                              return strtolower(preg_replace('/\s+/', '', $item)) ;
                          },
                          $chief_compliant_arr
                      );

                if($tk = array_search(strtolower(preg_replace('/\s+/', '', $value)), $chief_compliant_arr))
                {
                  //pr($tk);die;
                  //store the cc for detail tab when detail question is given.
                  $check_temp_cc_detail = $this->ChiefCompliants->find('all')->where(['id'=>$tk])->first();
                  if(!empty($check_temp_cc_detail) && !empty($check_temp_cc_detail->default_compliant_detail_ids)){

                    if($i == 3){

                      break;
                    }
                    $temp_cc_id .=  ','.$tk;
                    unset($chief_compliant_id[$key]);
                    $i++;
                  }
                }
              }
            }
            // pr($temp_cc_id);
            // pr($chief_compliant_id);

            if(!empty($chief_compliant_id) && is_array($chief_compliant_id))
              //$symptom_from_tab1 = base64_encode(Security::encrypt((serialize($chief_compliant_id)), SEC_KEY));
              $symptom_from_tab1 = $chief_compliant_id;
            }
            $main_chief_compliant_id = $this->request->getData('main_chief_compliant_id');
            // main chief complaint id now changed to text field  start

            $random_chief_compliant = ''; // used when user enter other chief complaint that is not in database

            if(!empty($main_chief_compliant_id))
            {

              $query = $this->ChiefCompliants->find('list', [
                                  'keyField' => 'id',
                                  'valueField' => function ($e) {
                                                          return strtolower(preg_replace('/\s+/', '', $e->name));
                                                      }
                              ]);

              // for orhthopedic and orthopedic spine module we are getting related chief complaint as there are common chief complaint in both module
              if($apt_id_data->specialization_id == 3 || $apt_id_data->specialization_id == 4 || $apt_id_data->specialization_id == 7)
              {
                $query = $this->ChiefCompliants->find('list', [
                                  'keyField' => 'id',
                                  'valueField' => function ($e) {
                                                          return strtolower(preg_replace('/\s+/', '', $e->name));
                                                      }
                              ])->where(['specialization_id' => $apt_id_data->specialization_id ]);
              }

              $temp_cc_arr = $query->toArray();
              $tk = array_search(strtolower(preg_replace('/\s+/', '', $main_chief_compliant_id)), $temp_cc_arr) ;

              if($tk)
              {
                $main_chief_compliant_id = $tk ;
              }
              else
              {
                $random_chief_compliant = $main_chief_compliant_id;
                $main_chief_compliant_id = '';
              }
            }

            // main chief complaint id now changed to text field  end
            if(!empty($temp_cc_id))
            {
              $main_chief_compliant_id = trim($main_chief_compliant_id.''.$temp_cc_id,','); // concatenate the symptoms id  to main chief compliant
            }

          $chief_compliant_id = $main_chief_compliant_id;
          $chief_compliant_id  = base64_encode(Security::encrypt($chief_compliant_id, SEC_KEY));
          $chief_compliant_length =  $this->request->getData('chief_compliant_length');



        //pr($cancer_conditions);die;
        $medication_name_id = $this->request->getData('medication_name_name');
        $medication_data = array();
        if(!empty($medication_name_id) && is_array($medication_name_id))
        {

          $medication_name_id = array_filter($medication_name_id) ;
          $medication_name_id = array_unique($medication_name_id);

          $medication_dose = $this->request->getData('medication_dose');
          $medication_how_often = $this->request->getData('medication_how_often');
          if(is_array($medication_how_often))
            $medication_how_often = array_filter($medication_how_often); //remove the empty value from the array
          $medication_how_taken = $this->request->getData('medication_how_taken');
          $i = 0 ;
          foreach ($medication_name_id as $key => $value)
          {

            // whitelisting validation for medication how often field  start
            if(!empty($medication_how_often) && isset($medication_how_often[$key]) && !array_key_exists($medication_how_often[$key], $length_arr))
            {
              //  pr($medication_how_often); pr($length_arr); die;
              // echo 'hello4gh'; die;
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
            // whitelisting validation for medication how often field  end
            $medication_data[$i]['medication_name_name'] = $value;
            $medication_data[$i]['medication_dose'] = !empty($medication_dose[$key]) ?  $medication_dose[$key] : '';
            $medication_data[$i]['medication_how_often'] = !empty($medication_how_often[$key]) ? $medication_how_often[$key] : '';
            $medication_data[$i]['medication_how_taken'] = !empty($medication_how_taken[$key]) ? $medication_how_taken[$key] : '';
            $i++;
          }
        }

        $medication_data = !empty($medication_data) ? base64_encode(Security::encrypt(serialize($medication_data), SEC_KEY)) : '';

      if(!empty($followup_general_detail))
      {
        $followup_general_detail =  base64_encode(Security::encrypt((serialize($followup_general_detail)), SEC_KEY));
      }

      if(!empty($user_detail)){

        $this->ChiefCompliantUserdetails->query()
          ->update()
          ->set(['cancer_followup_general_detail' => $followup_general_detail,'chief_compliant_id' => $chief_compliant_id,'compliant_length' =>$chief_compliant_length, 'current_tab_number' => 31,'compliant_medication_detail' => $medication_data])
          ->where(['appointment_id' => $apt_id])
          ->execute();
    }
    else
    {
      $tempuser = $this->ChiefCompliantUserdetails->newEntity();
      $tempuser->appointment_id  =  $apt_id ;
      $tempuser->cancer_followup_general_detail  =  $followup_general_detail;
      $tempuser->compliant_medication_detail  =  $medication_data;
      $tempuser->current_tab_number  = 31;
      $tempuser->current_step_id  =  $step_id ;
      $this->ChiefCompliantUserdetails->save($tempuser);
    }

     //update schedule status
      $input = $this->request->data();

      if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

        $schedule = TableRegistry::get('Schedule');
        $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

        if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

          if($input['tab_number'] != 5){

            $schedule_data->status = 2;

            // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
            if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

            }else{

              $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
            }
            //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
            $schedule->save($schedule_data);
          }
        }
      }

    return $this->redirect($this->referer());

  }

  if($tab_number == 31)
  {

      $followup_medical_history_detail = $this->request->getData('followup_medical_history_detail');


      $medical_history = $this->request->getData('medical_history');
      $surgical_history = $this->request->getData('surgical_history');
      $allergy_history = $this->request->getData('allergy_history');


      $start_year = 1930;
      $curyear = date("Y");
      $year_whitelist_arr = array();
      for($curyear ; $curyear>= $start_year ; $curyear--){
        $year_whitelist_arr[] = $curyear ;
      }
      $year_whitelist_arr[] = ''; $year_whitelist_arr[] = 1;




      if(!empty($followup_medical_history_detail && is_array($followup_medical_history_detail)))
      {
        $followup_medical_history_detail = array_filter($followup_medical_history_detail);
        // whitelisting validation for detail questions field start
        // pr($details_question);  die;
        foreach ($followup_medical_history_detail as $ky => $ve)
        {

          $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

           if(!empty($tempq)){
             if(($tempq['options'] != '')){
               $tempq = unserialize($tempq['options']);
              if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
            else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
            {
                if(!is_numeric($ve))
                {
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());
                }

            }
            else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
            {
              $checkDateFor = $this->General->checkDateFormat($ve);
              if(!$checkDateFor)
              {
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());
              }
            }
          }else{
          //pr($tempq);
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
        }




        $tempar = array();
        $data_arr = array();
        $i = 0 ;
        if(!empty($medical_history['name']) && !empty(array_filter($medical_history['name'])))
        {

          foreach ($medical_history['name'] as $key => $value)
          {

            if(empty($medical_history['name'][$key])) continue ; // escape if name is empty

            // whitelisting validation for medical history year field start
            if(!in_array($medical_history['year'][$key], $year_whitelist_arr) ){
              $this->Flash->error(__('Could not be saved . Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
            // whitelisting validation for medical history year field end
            $tempar[$i]['name'] = $medical_history['name'][$key] ;
            $tempar[$i]['year'] = $medical_history['year'][$key] ;
            $i++ ;
          }
        }
        if(!empty($tempar))
        {
          $data_arr['medical_history'] = $tempar ;
        }
        else {
          $data_arr['medical_history'] = '';
        }


        //surgical history

        $tempar = array();
        $i = 0 ;
        if(!empty($surgical_history['name']) && !empty(array_filter($surgical_history['name'])))
        {
          foreach ($surgical_history['name'] as $key => $value)
          {

            if(empty($surgical_history['name'][$key])) continue ;  // escape if name is empty

          // whitelisting validation for surgical history year field start
            if(!in_array($surgical_history['year'][$key], $year_whitelist_arr) ){
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
        // whitelisting validation for surgical history year field end
              $tempar[$i]['name'] = $surgical_history['name'][$key] ;
              $tempar[$i]['year'] = $surgical_history['year'][$key] ;
              $i++ ;
          }
        }
        if(!empty($tempar)){
        $data_arr['surgical_history'] = $tempar;
        }


        //Allergies
        $tempar = array();
      	if(!empty($allergy_history))
      	{
	        foreach ($allergy_history as $key => $value)
	        {
	          if(empty($value['name'])) continue ; // escape if allergy name is empty
	          $tempar[] = $value ;
	        }
        	if(!empty($tempar)){

  				$data_arr['allergy_history'] = $tempar;
        	}
        }
  		  else
  		  {
    		  $data_arr['allergy_history'] = '' ;
 		    }

        if(!empty($followup_medical_history_detail))
        {
          //$data_arr['followup_medical_history_detail'] =  base64_encode(Security::encrypt((serialize($followup_medical_history_detail)), SEC_KEY));
          $data_arr['followup_medical_history_detail'] =  $followup_medical_history_detail;
        }


        if(!empty($data_arr))
        {
            $followup_medical_history_detail = base64_encode(Security::encrypt((serialize($data_arr)), SEC_KEY));
        }

        $editMedicalHistory = array();
        $user_table = TableRegistry::get('Users');
        $user_data = $user_table->get($login_user['id']);




        if(isset($data_arr['followup_medical_history_detail']['476']))
        {
           $is_check_med_his = $data_arr['followup_medical_history_detail']['476'] == 'Yes'? 1: 0;
           $editMedicalHistory['is_check_med_his'] = base64_encode(Security::encrypt($is_check_med_his, SEC_KEY));
          if($user_data['medical_history'] != '')
          {
              $temp = unserialize(Security::decrypt(base64_decode($user_data['medical_history']), SEC_KEY)) ;
              if(!empty($temp) && !empty($data_arr['medical_history'])){
              $mergeOldMedicalData = array_merge($temp,$data_arr['medical_history']);
              $editMedicalHistory['medical_history'] = base64_encode(Security::encrypt((serialize($mergeOldMedicalData)), SEC_KEY));
              }

          }
          else {
            $editMedicalHistory['medical_history'] = base64_encode(Security::encrypt((serialize($data_arr['medical_history'])), SEC_KEY));
          }
        }

        if(isset($data_arr['followup_medical_history_detail']['477']))
        {
          $is_check_surg_his = $data_arr['followup_medical_history_detail']['477'] == 'Yes'? 1: 0;
          $editMedicalHistory['is_check_surg_his'] = base64_encode(Security::encrypt($is_check_surg_his, SEC_KEY));

          if($user_data['surgical_history'] != '')
          {
            $temp = unserialize(Security::decrypt(base64_decode($user_data['surgical_history']), SEC_KEY));
            if(!empty($temp) && !empty($data_arr['surgical_history'])){
            $mergeOldSurgicalData = array_merge($temp,$data_arr['surgical_history']);

            $editMedicalHistory['surgical_history'] = base64_encode(Security::encrypt((serialize($mergeOldSurgicalData)), SEC_KEY));
            }
          }
          else {
            $editMedicalHistory['surgical_history'] = !empty($data_arr['surgical_history'])?base64_encode(Security::encrypt((serialize($data_arr['surgical_history'])), SEC_KEY)):'';
          }
        }


        if(isset($data_arr['followup_medical_history_detail']['497']))
        {
          $is_check_allergy_his = $data_arr['followup_medical_history_detail']['497'] == 'Yes'? 1: 0;
          $editMedicalHistory['is_check_allergy_his'] = base64_encode(Security::encrypt($is_check_allergy_his, SEC_KEY));
          if($user_data['allergy_history'] != '')
          {
            $temp = unserialize(Security::decrypt(base64_decode($user_data['allergy_history']), SEC_KEY));
            if(!empty($temp) && !empty($data_arr['allergy_history'])){
            $mergeOldAllergyData = array_merge($temp,$data_arr['allergy_history']);

            $editMedicalHistory['allergy_history'] = base64_encode(Security::encrypt((serialize($mergeOldAllergyData)), SEC_KEY));
            }
          }
          else
          {
            $editMedicalHistory['allergy_history'] = base64_encode(Security::encrypt((serialize($data_arr['allergy_history'])), SEC_KEY));
          }
        }


         $user_table->patchEntity($user_data, $editMedicalHistory);
          if(!$user_table->save($user_data)){
              $this->Flash->error(__('Could not be saved. Please try again.'));
          }

        $this->ChiefCompliantUserdetails->query()
          ->update()
          ->set(['followup_medical_history_detail' => $followup_medical_history_detail,'current_tab_number' => 27])
          ->where(['appointment_id' => $apt_id])
          ->execute();

        return $this->redirect($this->referer());
    }


    /*if($tab_number == 32)
    {

      //pr($this->request->data());die;
      $whitelist_rate_arr = array();
      for($i= 1; $i<=10; $i++){
        $whitelist_rate_arr[] = $i;
      }

      $chemo_whitelist_rate_arr = array();
      for($i= 0; $i<=4; $i++){
        $chemo_whitelist_rate_arr[] = $i;
      }
      $assessment_history = $this->request->getData('assessment_history');
      $life_assessment = $this->request->getData('life_assessment');
      $chemo_assessment = $this->request->getData('chemo_assessment');


      $temp_assessment_history = array();
      $temp_life_assessment = array();
      $temp_chemo_assessment = array();
      if(!empty($assessment_history) && is_array($assessment_history))
      {
        foreach ($assessment_history as $key => $value)
        {
          if(isset($value['sym_id']) && !empty($value['sym_id']))
          {
            // whitelisting validation for cancer symptom assessment
            $cond = $commonTable->find('all')->where(['cond_type' => 6,'id' => $value['sym_id']])->toArray();
            if(empty($cond) || (isset($value['rate']) && !in_array($value['rate'], $whitelist_rate_arr))){

                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
            // whitelisting validation for shots history field end
            if(isset($value['sym_id']) && isset($value['rate'])){
              $temp_assessment_history[$value['sym_id']] = $value['rate'];
            }
          }
        }
      }

      if(!empty($life_assessment) && is_array($life_assessment))
      {
        foreach ($life_assessment as $key => $value)
        {

          $cond = $commonTable->find('all')->where(['cond_type' => 7,'id' => $key])->toArray();
          if(empty($cond) || !in_array($value, $whitelist_rate_arr)){

            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
        }
      }
      //pr($chemo_assessment);die;
      if(!empty($chemo_assessment) && is_array($chemo_assessment))
      {
        foreach ($chemo_assessment as $key => $value)
        {

          $cond = $commonTable->find('all')->where(['cond_type' => 8,'id' => $key])->toArray();
          if(empty($cond) || !in_array($value, $chemo_whitelist_rate_arr)){

            $this->Flash->error(__('Could not be saved. Please try again.'));
            return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
          }
        }
      }

     // pr($temp_chemo_assessment);die;

      $assessment_history = $temp_assessment_history;
      //$life_assessment = $temp_life_assessment;
     // $chemo_assessment = $temp_chemo_assessment;

      $cancer_assessments = array('assessment_history' => $assessment_history,'life_assessment' => $life_assessment,'chemo_assessment' => $chemo_assessment);

      //pr($cancer_assessments);die;

      if(!empty($cancer_assessments))
      {
        $followup_cancer_assessments =  base64_encode(Security::encrypt((serialize($cancer_assessments)), SEC_KEY));
      }

      if(!empty($user_detail)){

        $this->ChiefCompliantUserdetails->query()
          ->update()
          ->set(['followup_assessment' => $followup_cancer_assessments,'current_tab_number' => 4])
          ->where(['appointment_id' => $apt_id])
          ->execute();
    }
    else
    {
      $tempuser = $this->ChiefCompliantUserdetails->newEntity();
      $tempuser->appointment_id  =  $apt_id ;
      $tempuser->followup_assessment  =  $followup_cancer_assessments;
      $tempuser->current_tab_number  = $current_tab_number;
      $tempuser->current_step_id  =  $step_id ;
      $this->ChiefCompliantUserdetails->save($tempuser);
    }

     //update schedule status
      $input = $this->request->data();

      if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

        $schedule = TableRegistry::get('Schedule');
        $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

        if(!empty($schedule_data) && isset($input['tab_number']) && $input['step_id']){

          if($input['tab_number'] != 5){

            $schedule_data->status = 2;

            // FOR FOLLOW UP MODULE IN GI SEND FOLLOWUP STEP ID TO TRACK PROGESS STATUS
            if(!empty($user_detail->follow_up_step_id) && $input['step_id'] == 12){

                $schedule_data->stage = $this->getUserProgress($user_detail->follow_up_step_id,$input['tab_number']);

            }else{

              $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
            }
            //$schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
            $schedule->save($schedule_data);
          }
        }
      }

    return $this->redirect($this->referer());
    }*/


    if($tab_number == 33){
      $input = $this->request->data();
      $hospital_er_detail = $this->request->getData('hospital_er_detail');
      if(!empty($hospital_er_detail && is_array($hospital_er_detail)))
      {
        $hospital_er_detail = array_filter($hospital_er_detail);
        // whitelisting validation for detail questions field start
         //pr($input);  die;
        foreach ($hospital_er_detail as $ky => $ve)
        {

          $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

           if(!empty($tempq)){
             if(($tempq['options'] != '')){
               $tempq = unserialize($tempq['options']);
              if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
            else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
            {
                if(!is_numeric($ve))
                {
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());
                }

            }
            else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
            {
              $checkDateFor = $this->General->checkDateFormat($ve);
              if(!$checkDateFor)
              {
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());
              }
            }
          }else{
          //pr($tempq);
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
        }
        //pr($hospital_er_detail);die;
        $hospital_er_detail = !empty($hospital_er_detail) ? base64_encode(Security::encrypt((serialize($hospital_er_detail)), SEC_KEY)) : "";

        if(!empty($user_detail)){

         $this->ChiefCompliantUserdetails->query()
            ->update()
            ->set(['hospital_er_detail' => $hospital_er_detail,'current_tab_number' => 4])
            ->where(['appointment_id' => $apt_id])
            ->execute();
      }
      else
      {
        $tempuser = $this->ChiefCompliantUserdetails->newEntity();
        $tempuser->appointment_id  =  $apt_id ;
        $tempuser->hospital_er_detail = $hospital_er_detail ;
        $tempuser->current_tab_number  =  4;
        $tempuser->current_step_id  =  $step_id;
        $this->ChiefCompliantUserdetails->save($tempuser);

      }
        //update schedule status
      $input = $this->request->data();

      if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

          $schedule = TableRegistry::get('Schedule');
          $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

          if(!empty($schedule_data) && isset($input['tab_number']) && isset($input['step_id'])){

            if($input['tab_number'] != 5){

              $schedule_data->status = 2;
              $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
              $schedule->save($schedule_data);
            }

          }
      }
                // Add a Medication
                $medication_name_id = $this->request->getData('medication_name_name');
                //pr($medication_name_id); die;
                $medication_data = array();
                if(!empty($medication_name_id) && is_array($medication_name_id)){
                    // pr($medication_name_id);
                    $medication_name_id = array_filter($medication_name_id) ;
                    $medication_name_id = array_unique($medication_name_id);

                    $medication_dose = $this->request->getData('medication_dose');
                    $medication_how_often = $this->request->getData('medication_how_often');
                    if(is_array($medication_how_often))
                    $medication_how_often = array_filter($medication_how_often); //remove the empty value from the array
                  // pr($medication_how_often); die;
                    $medication_how_taken = $this->request->getData('medication_how_taken');

                    $i = 0 ;
                foreach ($medication_name_id as $key => $value) {
                // whitelisting validation for medication how often field  start
                    if(!empty($medication_how_often) && isset($medication_how_often[$key]) && !array_key_exists($medication_how_often[$key], $length_arr))
                      {
                        $this->Flash->error(__('Could not be saved. Please try again.'));
                        return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
                      }
                   // whitelisting validation for medication how often field  end




                    $medication_data[$i]['medication_name_name'] = $value;
                    $medication_data[$i]['medication_dose'] = !empty($medication_dose[$key]) ?  $medication_dose[$key] : '';
                    $medication_data[$i]['medication_how_often'] = !empty($medication_how_often[$key]) ? $medication_how_often[$key] : '';
                    $medication_data[$i]['medication_how_taken'] = !empty($medication_how_taken[$key]) ? $medication_how_taken[$key] : '';
                        $i++;
                }


                }
                if($step_id == 22){
                    if(!empty($medication_data) && is_array($medication_data)){

                      foreach ($medication_data as $key => $value) {

                        if(isset($value['medication_name_name']) && in_array(trim($value['medication_name_name']), $show_dast_padt_medication_list)){

                          $update_user_appointment_detail['current_tab_number'] = 4;
                          //$update_user_appointment_detail[''] = '';
                          break;
                        }
                      }

                      $update_user_appointment_detail['compliant_medication_detail'] = base64_encode(Security::encrypt(serialize($medication_data), SEC_KEY));

                    }

                  }
                  if(!empty($update_user_appointment_detail))
                  {
                  $this->ChiefCompliantUserdetails->query()
                                    ->update()
                                    ->set($update_user_appointment_detail)
                                    ->where(['appointment_id' => $apt_id])
                                    ->execute();
                                } else {

                                  $tempuser = $this->ChiefCompliantUserdetails->newEntity();
                                  $tempuser->appointment_id  =  $apt_id ;
                                  $tempuser->questionnaire_detail  =  isset($question_symptom) ? $question_symptom :'' ;
                                  $tempuser->current_tab_number  =  4 ;
                                  $tempuser->current_step_id  =  $step_id ;

                        if($step_id == 4 && !empty($medication_data)) {

                          // $tempuser->compliant_medication_detail = serialize($medication_data);
                if(!empty($medication_data) && is_array($medication_data)){

                  foreach ($medication_data as $key => $value) {

                        if(isset($value['medication_name_name']) && in_array(trim($value['medication_name_name']), $show_dast_padt_medication_list)){

                          $tempuser->current_tab_number  = 4;
                          //$update_user_appointment_detail[''] = '';
                          break;
                        }
                      }
                    $tempuser->compliant_medication_detail = base64_encode(Security::encrypt(serialize($medication_data), SEC_KEY));
                  }

                  if($tempuser->current_tab_number == 5){

                      $tempuser->medication_refill_extra_details = null;
                    }

                          $tempuser->medication_side_effects = $medication_side_effects;
                          $tempuser->med_refill_medication_side_effects_radio = $medication_side_effect_radio;


                        }
        //pr($tempuser);die;
                  $this->ChiefCompliantUserdetails->save($tempuser);

                }

      // End

        return $this->redirect($this->referer());
    }

    if($tab_number == 34){
      $input = $this->request->data();
      $chief_complaint_psychiatry = $this->request->getData('chief_complaint_psychiatry');
      if(!empty($chief_complaint_psychiatry && is_array($chief_complaint_psychiatry)))
      {
        $chief_complaint_psychiatry = array_filter($chief_complaint_psychiatry);
        // whitelisting validation for detail questions field start
         //pr($input);  die;
        foreach ($chief_complaint_psychiatry as $ky => $ve)
        {

          $tempq =  $this->CommonQuestions->find('all')->where(['id' => $ky])->first()->toArray();

           if(!empty($tempq)){
             if(($tempq['options'] != '')){
               $tempq = unserialize($tempq['options']);
              if( (is_array($ve) ? !empty(array_diff($ve, $tempq)) : !in_array($ve, $tempq) )){

                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
              }
            }
            else if(isset($tempq['data_type']) && $tempq['data_type'] == 2)
            {
                if(!is_numeric($ve))
                {
                  $this->Flash->error(__('Could not be saved. Please try again.'));
                  return $this->redirect($this->referer());
                }

            }
            else if(isset($tempq['data_type']) && $tempq['data_type'] == 3)
            {
              $checkDateFor = $this->General->checkDateFormat($ve);
              if(!$checkDateFor)
              {
                $this->Flash->error(__('Could not be saved. Please try again.'));
                return $this->redirect($this->referer());
              }
            }
          }else{
          //pr($tempq);
              $this->Flash->error(__('Could not be saved. Please try again.'));
              return $this->redirect($this->referer());  // if whitlist validation failed we will directly redirect it back without saving data
            }
          }
        }
        //pr($hospital_er_detail);die;
        $chief_complaint_psychiatry = !empty($chief_complaint_psychiatry) ? base64_encode(Security::encrypt((serialize($chief_complaint_psychiatry)), SEC_KEY)) : "";

        if(!empty($user_detail)){

         $this->ChiefCompliantUserdetails->query()
            ->update()
            ->set(['chief_complaint_psychiatry' => $chief_complaint_psychiatry,'current_tab_number' => 5])
            ->where(['appointment_id' => $apt_id])
            ->execute();
      }
      else
      {
        $tempuser = $this->ChiefCompliantUserdetails->newEntity();
        $tempuser->appointment_id  =  $apt_id ;
        $tempuser->chief_complaint_psychiatry = $chief_complaint_psychiatry ;
        $tempuser->current_tab_number  =  5;
        $tempuser->current_step_id  =  $step_id;
        $this->ChiefCompliantUserdetails->save($tempuser);

      }
        //update schedule status
      $input = $this->request->data();

      if(isset($apt_id_data['schedule_id']) && !empty($apt_id_data['schedule_id']) && isset($input['tab_number']) && !empty($input['tab_number'])){

          $schedule = TableRegistry::get('Schedule');
          $schedule_data = $schedule->find('all')->where(['id' =>$apt_id_data['schedule_id']])->first();

          if(!empty($schedule_data) && isset($input['tab_number']) && isset($input['step_id'])){

            if($input['tab_number'] != 5){

              $schedule_data->status = 2;
              $schedule_data->stage = $this->getUserProgress($input['step_id'],$input['tab_number']);
              $schedule->save($schedule_data);
            }

          }
      }
                  if(!empty($update_user_appointment_detail))
                  {
                  $this->ChiefCompliantUserdetails->query()
                                    ->update()
                                    ->set($update_user_appointment_detail)
                                    ->where(['appointment_id' => $apt_id])
                                    ->execute();
                                } else {

                                  $tempuser = $this->ChiefCompliantUserdetails->newEntity();
                                  $tempuser->appointment_id  =  $apt_id ;
                                  $tempuser->questionnaire_detail  =  isset($question_symptom) ? $question_symptom :'' ;
                                  $tempuser->current_tab_number  =  5 ;
                                  $tempuser->current_step_id  =  $step_id ;

                        if($step_id == 4 && !empty($medication_data)) {

                          // $tempuser->compliant_medication_detail = serialize($medication_data);
                if(!empty($medication_data) && is_array($medication_data)){

                  foreach ($medication_data as $key => $value) {

                        if(isset($value['medication_name_name']) && in_array(trim($value['medication_name_name']), $show_dast_padt_medication_list)){

                          $tempuser->current_tab_number  = 4;
                          //$update_user_appointment_detail[''] = '';
                          break;
                        }
                      }
                    $tempuser->compliant_medication_detail = base64_encode(Security::encrypt(serialize($medication_data), SEC_KEY));
                  }

                  if($tempuser->current_tab_number == 5){

                      $tempuser->medication_refill_extra_details = null;
                    }

                          $tempuser->medication_side_effects = $medication_side_effects;
                          $tempuser->med_refill_medication_side_effects_radio = $medication_side_effect_radio;


                        }
        //pr($tempuser);die;
                  $this->ChiefCompliantUserdetails->save($tempuser);

                }

      // End

        return $this->redirect($this->referer());
    }

}

    //pr($user_detail);die;

    //15-07-2019

    /*$default_med_chiefcom = $this->ChiefCompliants->find('list', [
        'keyField' => 'id',
        'valueField' => 'default_medication_ids'
    ])->where(['default_medication_ids  IS NOT' => null, 'default_medication_ids  IS NOT' => '' ]);*/

    $default_med_chiefcom = $this->ChiefCompliants->find('list', [
        'keyField' => 'id',
        'valueField' => 'default_medication_ids'
    ]);
    $default_med_chiefcom = $default_med_chiefcom->toArray();
 //pr($default_med_chiefcom); die;

  $commonTable = TableRegistry::get('common_conditions');
    $allergy_reaction_cond = $commonTable->find('list', [
                        'keyField' => 'id',
                        'valueField' => 'name'
                    ])->where(['cond_type' => 5])->toArray();

    $medication_side_effects = $allergy_reaction_cond;

// pr($default_symptoms_id->all()); die;
      $womantable = TableRegistry::get('women_specific');
      $womandata = $womantable->find()->where(['user_id' => $login_user['id']])->first();

    if(!empty($womandata->papsmear_month))
     $womandata->papsmear_month = Security::decrypt( base64_decode($womandata->papsmear_month), SEC_KEY);
         if(!empty($womandata->papsmear_year))
     $womandata->papsmear_year = Security::decrypt( base64_decode($womandata->papsmear_year), SEC_KEY);

if(!empty($login_user['gender']))
$login_user['gender'] = Security::decrypt( base64_decode($login_user['gender']), SEC_KEY);


// **********************************old data process start for edit tab start********************
    // user_detail_old variable will hold the  old data  of the user to auto fill in the input
    $user_detail_old = $this->Appointments->find('all')->contain(['Doctors', 'Organizations', 'Specializations', 'Users', 'ChiefCompliantUserdetails'])->where(['Appointments.is_shown' => 1, 'Appointments.id' => $apt_id])->first();

    // pr($user_detail); die;

        $this->loadModel('StepDetails');
        $this->loadModel('ChiefCompliants');
        $this->loadModel('ChiefCompliantQuestionnaire');
        $this->loadModel('ChiefCompliantDetails');
        $this->loadModel('ChiefCompliantMedication');
        //$this->loadModel('CommonConditions');


// pr($user_detail_old); die;

            if(!empty($user_detail_old->chief_compliant_userdetail)){
                if(!empty($user_detail_old->chief_compliant_userdetail->current_step_id)){

                    $user_detail_old->chief_compliant_userdetail->current_step_id = $this->StepDetails->find('all')->where(['id' => $user_detail_old->chief_compliant_userdetail->current_step_id])->first();


                }
if(!empty($user_detail_old->chief_compliant_userdetail->chief_compliant_id)) {
$user_detail_old->chief_compliant_userdetail->chief_compliant_id = Security::decrypt( base64_decode($user_detail_old->chief_compliant_userdetail->chief_compliant_id), SEC_KEY);

// $user_detail_old->chief_compliant_userdetail->chief_compliant_id = 22;
// pr(explode(',', $user_detail_old->chief_compliant_userdetail->chief_compliant_id)  );die;
$oldccid = explode(',', $user_detail_old->chief_compliant_userdetail->chief_compliant_id) ;  // explode because for orthopedic and spine module we save multiple cc id with comma
                 $user_detail_old->chief_compliant_userdetail->chief_compliant_id = $this->ChiefCompliants->find('all')->where(['id' => $oldccid[0]])->first();
                unset($oldccid[0]) ;
                // pr($oldccid); die;
if(!empty($oldccid))
  $user_detail_old->chief_compliant_userdetail->sub_chief_compliant_id = $this->ChiefCompliants->find('all')->where(['id IN' => $oldccid])->all();
// pr($user_detail_old->chief_compliant_userdetail->sub_chief_compliant_id); die ;

               }
// pr($user_detail_old->chief_compliant_userdetail->chief_compliant_id); die;
                 if(!empty($user_detail_old->chief_compliant_userdetail->compliant_symptom_ids))
                 {
                    $user_detail_old->chief_compliant_userdetail->compliant_symptom_ids = explode(',', $user_detail_old->chief_compliant_userdetail->compliant_symptom_ids);

                    $user_detail_old->chief_compliant_userdetail->compliant_symptom_ids =  $this->ChiefCompliants->find('all')->where(['id IN' => $user_detail_old->chief_compliant_userdetail->compliant_symptom_ids])->all();
                }

// pr($user_detail_old->chief_compliant_userdetail->compliant_symptom_ids); die;
                $user_detail_old->chief_compliant_userdetail->compliant_length = $user_detail_old->chief_compliant_userdetail->compliant_length;

                if(!empty($user_detail_old->chief_compliant_userdetail->compliant_medication_detail)){
                 $user_detail_old->chief_compliant_userdetail->compliant_medication_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->compliant_medication_detail), SEC_KEY)) ;

                }

                if(!empty($user_detail_old->chief_compliant_userdetail->chief_compliant_symptoms)){
                    // $user_detail_old->chief_compliant_userdetail->chief_compliant_symptoms = unserialize($user_detail_old->chief_compliant_userdetail->chief_compliant_symptoms) ;

 $user_detail_old->chief_compliant_userdetail->chief_compliant_symptoms = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chief_compliant_symptoms), SEC_KEY)) ;

                    // pr($user_detail_old->chief_compliant_symptoms) ;
                    foreach($user_detail_old->chief_compliant_userdetail->chief_compliant_symptoms as $key => $value){

                        foreach($value as $k =>$v) {
    $user_detail_old->chief_compliant_userdetail->chief_compliant_symptoms[$key][$k] = $this->ChiefCompliants->find('all')->where(['id' => $v])->first();
                        }

                    }
                }
// pr($user_detail_old->chief_compliant_userdetail->chief_compliant_symptoms); die;
                if(!empty($user_detail_old->chief_compliant_userdetail->questionnaire_detail)){

  $user_detail_old->chief_compliant_userdetail->questionnaire_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->questionnaire_detail), SEC_KEY)) ;



                }

//other detail question answer
if(!empty($user_detail_old->chief_compliant_userdetail->chief_compliant_other_details)){

   $user_detail_old->chief_compliant_userdetail->chief_compliant_other_details = unserialize((Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chief_compliant_other_details), SEC_KEY)));

  // pr($user_detail_old->chief_compliant_userdetail->chief_compliant_other_details);die;

   if(!empty($user_detail_old->chief_compliant_userdetail->chief_compliant_other_details)){

      foreach($user_detail_old->chief_compliant_userdetail->chief_compliant_other_details as $key => $val){


          $temp = $this->ChiefCompliantOtherDetails->find('all')->where(['id'=> $key ])->first();
          $tempar[$key]['question_id'] = $temp->id ;
          $tempar[$key]['question'] = $temp->question ;
          $tempar[$key]['answer'] = $val;
         // $i++;

      }
      //pr($tempar);die;
      $user_detail_old->chief_compliant_userdetail->chief_compliant_other_details = $tempar;
     // pr( $user_detail_old->chief_compliant_userdetail->chief_compliant_other_details);die;
   }
 }
// psychiatry detail
 // if(!empty($user_detail_old->chief_compliant_userdetail->chief_complaint_psychiatry)){

 //   $user_detail_old->chief_compliant_userdetail->chief_complaint_psychiatry = unserialize((Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chief_complaint_psychiatry), SEC_KEY)));

 //   if(!empty($user_detail_old->chief_compliant_userdetail->chief_complaint_psychiatry)){

 //      foreach($user_detail_old->chief_compliant_userdetail->chief_complaint_psychiatry as $key => $val){


 //          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
 //          $tempar[$key]['question_id'] = $temp->id ;
 //          $tempar[$key]['question'] = $temp->question ;
 //          $tempar[$key]['answer'] = $val;
 //         // $i++;

 //      }
 //      //pr($tempar);die;
 //      $user_detail_old->chief_compliant_userdetail->chief_complaint_psychiatry = $tempar;
 //   }
 // }
 // end
 //screening question answer
if(!empty($user_detail_old->chief_compliant_userdetail->screening_questions_detail)){

   $user_detail_old->chief_compliant_userdetail->screening_questions_detail = unserialize((Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->screening_questions_detail), SEC_KEY)));

  // pr($user_detail_old->chief_compliant_userdetail->chief_compliant_other_details);die;


   if(!empty($user_detail_old->chief_compliant_userdetail->screening_questions_detail)){

      foreach($user_detail_old->chief_compliant_userdetail->screening_questions_detail as $key => $val){


          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
          $tempar[$key]['question_id'] = $temp->id ;
          $tempar[$key]['question'] = $temp->question ;
          $tempar[$key]['answer'] = $val;
         // $i++;

      }
      //pr($tempar);die;
      $user_detail_old->chief_compliant_userdetail->screening_questions_detail = $tempar;
     // pr( $user_detail_old->chief_compliant_userdetail->chief_compliant_other_details);die;
   }
 }


 //post checkup question answer
if(!empty($user_detail_old->chief_compliant_userdetail->post_checkup_question_detail)){

   $user_detail_old->chief_compliant_userdetail->post_checkup_question_detail = unserialize((Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->post_checkup_question_detail), SEC_KEY)));

  // pr($user_detail_old->chief_compliant_userdetail->chief_compliant_other_details);die;

   if(!empty($user_detail_old->chief_compliant_userdetail->post_checkup_question_detail)){

      foreach($user_detail_old->chief_compliant_userdetail->post_checkup_question_detail as $key => $val){


          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
          $tempar[$key]['question_id'] = $temp->id ;
          $tempar[$key]['question'] = $temp->question ;
          $tempar[$key]['answer'] = $val;
         // $i++;

      }
      //pr($tempar);die;
      $user_detail_old->chief_compliant_userdetail->post_checkup_question_detail = $tempar;
     // pr( $user_detail_old->chief_compliant_userdetail->chief_compliant_other_details);die;
   }
 }


if(!empty($user_detail_old->chief_compliant_userdetail->pre_op_procedure_detail)){

   $user_detail_old->chief_compliant_userdetail->pre_op_procedure_detail = unserialize((Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->pre_op_procedure_detail), SEC_KEY)));

  // pr($user_detail_old->chief_compliant_userdetail->chief_compliant_other_details);die;

   if(!empty($user_detail_old->chief_compliant_userdetail->pre_op_procedure_detail)){

      foreach($user_detail_old->chief_compliant_userdetail->pre_op_procedure_detail as $key => $val){


          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
          $tempar[$key]['question_id'] = $temp->id ;
          $tempar[$key]['question'] = $temp->question ;
          $tempar[$key]['answer'] = $val;
         // $i++;

      }
      //pr($tempar);die;
      $user_detail_old->chief_compliant_userdetail->pre_op_procedure_detail = $tempar;
     // pr( $user_detail_old->chief_compliant_userdetail->chief_compliant_other_details);die;
   }
 }


 if(!empty($user_detail_old->chief_compliant_userdetail->pre_op_medications_question_detail)){

   $user_detail_old->chief_compliant_userdetail->pre_op_medications_question_detail = unserialize((Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->pre_op_medications_question_detail), SEC_KEY)));

  // pr($user_detail_old->chief_compliant_userdetail->chief_compliant_other_details);die;

   if(!empty($user_detail_old->chief_compliant_userdetail->pre_op_medications_question_detail)){

      foreach($user_detail_old->chief_compliant_userdetail->pre_op_medications_question_detail as $key => $val){


          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
          $tempar[$key]['question_id'] = $temp->id ;
          $tempar[$key]['question'] = $temp->question ;
          $tempar[$key]['answer'] = $val;
         // $i++;

      }
      //pr($tempar);die;
      $user_detail_old->chief_compliant_userdetail->pre_op_medications_question_detail = $tempar;
     // pr( $user_detail_old->chief_compliant_userdetail->chief_compliant_other_details);die;
   }
 }


 //other detail question answer
if(!empty($user_detail_old->chief_compliant_userdetail->general_update_question)){

   $user_detail_old->chief_compliant_userdetail->general_update_question = unserialize((Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->general_update_question), SEC_KEY)));

  //pr($user_detail_old->chief_compliant_userdetail->general_update_question);die;

   if(!empty($user_detail_old->chief_compliant_userdetail->general_update_question)){

      //$i = 0;

      foreach($user_detail_old->chief_compliant_userdetail->general_update_question as $key => $val){


          $temp = $this->PainFollowupQuestionnaires->find('all')->where(['id'=> $key ])->first();
          $tempar[$key]['question_id'] = $temp->id ;
          $tempar[$key]['question'] = $temp->question ;
          $tempar[$key]['answer'] = $val;
         // $i++;

      }
      //pr($tempar);die;
      $user_detail_old->chief_compliant_userdetail->general_update_question = $tempar;
      //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
   }
 }


 if(!empty($user_detail_old->chief_compliant_userdetail->pain_update_question)){

   $user_detail_old->chief_compliant_userdetail->pain_update_question = unserialize((Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->pain_update_question), SEC_KEY)));

  //pr($user_detail_old->chief_compliant_userdetail->general_update_question);die;

   if(!empty($user_detail_old->chief_compliant_userdetail->pain_update_question)){

      //$i = 0;

      foreach($user_detail_old->chief_compliant_userdetail->pain_update_question as $key => $val){


          $temp = $this->PainFollowupQuestionnaires->find('all')->where(['id'=> $key ])->first();
          $tempar[$key]['question_id'] = $temp->id ;
          $tempar[$key]['question'] = $temp->question ;
          $tempar[$key]['answer'] = $val;
         // $i++;

      }
      //pr($tempar);die;
      $user_detail_old->chief_compliant_userdetail->pain_update_question = $tempar;
      //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
   }
 }

if(!empty($user_detail_old->chief_compliant_userdetail->pre_op_medical_condition_detail)){

   $user_detail_old->chief_compliant_userdetail->pre_op_medical_condition_detail = unserialize((Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->pre_op_medical_condition_detail), SEC_KEY)));
 }


 if(!empty($user_detail_old->chief_compliant_userdetail->disease_questions_detail)){

   //$user_detail_old->chief_compliant_userdetail->disease_questions_detail = unserialize((Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->disease_questions_detail), SEC_KEY)));

   $temp_disease_question_detail = unserialize((Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->disease_questions_detail), SEC_KEY)));

   if(!empty($temp_disease_question_detail)){


    foreach ($temp_disease_question_detail as $key => $disease_dtl) {

      if(isset($disease_dtl['disease_detail_question']) && !empty($disease_dtl['disease_detail_question'])){

        $tempar = array();

        foreach ($disease_dtl['disease_detail_question'] as $disease_key => $disease_val) {

          $temp = $this->CommonQuestions->find('all')->where(['id'=> $disease_key ])->first();
          $tempar[$disease_key]['question_id'] = $temp->id ;
          $tempar[$disease_key]['question'] = $temp->question ;
          $tempar[$disease_key]['answer'] = $disease_val;
        }

        $temp_disease_question_detail[$key]['disease_detail_question'] = $tempar;
      }
    }
  }

  $user_detail_old->chief_compliant_userdetail->disease_questions_detail = $temp_disease_question_detail;
 }

 if(!empty($user_detail_old->chief_compliant_userdetail->medication_refill_comm_soapp_details)){

    $user_detail_old->chief_compliant_userdetail->medication_refill_comm_soapp_details = unserialize((Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->medication_refill_comm_soapp_details), SEC_KEY)));

    if(isset($user_detail_old->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp']) && !empty($user_detail_old->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp'])){

      $tempar = array();

      foreach($user_detail_old->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp'] as $key => $val){


          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
          $tempar[$key]['question_id'] = $temp->id ;
          $tempar[$key]['question'] = $temp->question ;
          $tempar[$key]['answer'] = $val;
         // $i++;

      }
      //pr($tempar);die;
      $user_detail_old->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp'] = $tempar;
      //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
   }

   if(isset($user_detail_old->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm']) && !empty($user_detail_old->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm'])){

      $tempar = array();
      foreach($user_detail_old->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm'] as $key => $val){


          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
          $tempar[$key]['question_id'] = $temp->id ;
          $tempar[$key]['question'] = $temp->question ;
          $tempar[$key]['answer'] = $val;
         // $i++;

      }
      //pr($tempar);die;
      $user_detail_old->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm'] = $tempar;
      //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
   }
 }

 if(!empty($user_detail_old->chief_compliant_userdetail->medication_refill_extra_details)){

   $user_detail_old->chief_compliant_userdetail->medication_refill_extra_details = unserialize((Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->medication_refill_extra_details), SEC_KEY)));

  //pr($user_detail_old->chief_compliant_userdetail->general_update_question);die;



   if(isset($user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['dast']) && !empty($user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['dast'])){

      $tempar = array();

      foreach($user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['dast'] as $key => $val){


          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
          $tempar[$key]['question_id'] = $temp->id ;
          $tempar[$key]['question'] = $temp->question ;
          $tempar[$key]['answer'] = $val;
         // $i++;

      }
      //pr($tempar);die;
      $user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['dast'] = $tempar;
      //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
   }

   if(isset($user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['padt']) && !empty($user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['padt'])){

      $tempar = array();

      foreach($user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['padt'] as $key => $val){


          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
          $tempar[$key]['question_id'] = $temp->id ;
          $tempar[$key]['question'] = $temp->question ;
          $tempar[$key]['answer'] = $val;
         // $i++;

      }
      //pr($tempar);die;
      $user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['padt'] = $tempar;
      //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
   }
   if(isset($user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['ort']) && !empty($user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['ort'])){

      $tempar = array();

      foreach($user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['ort'] as $key => $val){


          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
          $tempar[$key]['question_id'] = $temp->id ;
          $tempar[$key]['question'] = $temp->question ;
          $tempar[$key]['answer'] = $val;
         // $i++;

      }
      //pr($tempar);die;
      $user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['ort'] = $tempar;
      // pr( $user_detail_old->chief_compliant_userdetail->medication_refill_extra_details);die;
   }
   // pr($user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['m3']);die;
   if(isset($user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['m3']) && !empty($user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['m3'])){

      $tempar = array();

      foreach($user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['m3'] as $key => $val){


          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
          $tempar[$key]['question_id'] = $temp->id ;
          $tempar[$key]['question'] = $temp->question ;
          $tempar[$key]['answer'] = $val;
         // $i++;

      }
      // pr($tempar);die;
      $user_detail_old->chief_compliant_userdetail->medication_refill_extra_details['m3'] = $tempar;
      //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
   }
 }

 if(!empty($user_detail_old->chief_compliant_userdetail->follow_up_sx_detail)){

   $user_detail_old->chief_compliant_userdetail->follow_up_sx_detail = unserialize((Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->follow_up_sx_detail), SEC_KEY)));

   //pr($user_detail_old->chief_compliant_userdetail->follow_up_sx_detail);die;

   if(!empty($user_detail_old->chief_compliant_userdetail->follow_up_sx_detail)){



      foreach($user_detail_old->chief_compliant_userdetail->follow_up_sx_detail as $key => $value){

        if(!empty($value)){

          $tempar = array();
          foreach($value as $k => $v){

            $temp = $this->CommonQuestions->find('all')->where(['id'=> $k ])->first();
            $tempar[$k]['question_id'] = $temp->id ;
            $tempar[$k]['question'] = $temp->question ;
            $tempar[$k]['answer'] = $v;
          }

          $user_detail_old->chief_compliant_userdetail->follow_up_sx_detail[$key] = $tempar;

        }

      }
      //pr($tempar);die;

     // pr( $user_detail_old->chief_compliant_userdetail->chief_compliant_other_details);die;
   }
 }


 if(!empty($user_detail_old->chief_compliant_userdetail->pre_op_allergies_detail)){

   $user_detail_old->chief_compliant_userdetail->pre_op_allergies_detail = unserialize((Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->pre_op_allergies_detail), SEC_KEY)));
 }

 if(!empty($user_detail_old->chief_compliant_userdetail->disease_name)){

   $user_detail_old->chief_compliant_userdetail->disease_name = explode(',',Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->disease_name), SEC_KEY));
 }



                if(!empty($user_detail_old->chief_compliant_userdetail->chief_compliant_details)){

                // $user_detail_old->chief_compliant_userdetail->chief_compliant_details = unserialize(base64_decode($user_detail_old->chief_compliant_userdetail->chief_compliant_details)) ;  //  unserialize($user_detail_old->chief_compliant_details) ;

   $user_detail_old->chief_compliant_userdetail->chief_compliant_details = unserialize((Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chief_compliant_details), SEC_KEY))) ;




// test
    // test code to sort array based on other array in php
// $customer['address'] = '123 fake st';
// $customer['name'] = 'Tim';
// $customer['dob'] = '12/08/1986';
// $customer['dontSortMe'] = 'this value doesnt need to be sorted';
// $customer['arr'] = array('abc','xyz');

// $properOrderedArray = array_merge(array_flip(array('name', 'dob', 'address', 'arr')), $customer);
// //Or:
// pr($properOrderedArray);
// $properOrderedArray = array_replace(array_flip(array('name', 'dob', 'address')), $customer);

// pr($properOrderedArray); die;

// test
   // pr($user_detail_old->chief_compliant_userdetail->chief_compliant_details['42']);


// below is the code to sort array according to our requirement, we need to sort the question id 42 and 47 according to this sequence - array(43,39,40,41,42)

if(!empty($user_detail_old->chief_compliant_userdetail->chief_compliant_details['42'])){
  $temp   = $user_detail_old->chief_compliant_userdetail->chief_compliant_details['42'];

   $ordered = array();
    foreach (array(43,39,40,41,42) as $key) {
        if (array_key_exists($key, $temp)) {
            $ordered[$key] = $temp[$key];
            unset($temp[$key]);
        }
    }
  $temp = $ordered + $temp;
$user_detail_old->chief_compliant_userdetail->chief_compliant_details['42'] =  $temp;
$temp = '';
}
if(!empty($user_detail_old->chief_compliant_userdetail->chief_compliant_details['47'])){
  $temp   = $user_detail_old->chief_compliant_userdetail->chief_compliant_details['47'];

   $ordered = array();
    foreach (array(43,39,40,41,42) as $key) {
        if (array_key_exists($key, $temp)) {
            $ordered[$key] = $temp[$key];
            unset($temp[$key]);
        }
    }
  $temp = $ordered + $temp;
$user_detail_old->chief_compliant_userdetail->chief_compliant_details['47'] =  $temp;
$temp = '';
}
   // pr($user_detail_old->chief_compliant_userdetail->chief_compliant_details['42']); die;

                    $tempar = array();
             $more_options = array();
             // echo 'hello';
             // pr($user_detail_old->chief_compliant_userdetail->chief_compliant_details);die;
                    foreach ($user_detail_old->chief_compliant_userdetail->chief_compliant_details as $key => $value) {
                               $i = 0 ;
                        foreach ($value as $k => $v) {


                if(!is_numeric($k) && $k == 'more_option'){
                    $more_options[$key] = $v ;
                    unset($value['more_option']);
                    continue;
                }


    $temp = $this->ChiefCompliantDetails->find('all')->where(['id'=> $k ])->first();
    $tempcc = $this->ChiefCompliants->find('all')->where(['id'=> $key ])->first();
        $tempar[$key]['cc_data'] = $tempcc ;
                            $tempar[$key][$i]['question_id'] = $temp->id ;
                            $tempar[$key][$i]['question'] = $temp->question ;
                            $tempar[$key][$i]['answer'] = $v ;
                            $i++;
                        }


                    }
  $user_detail_old->chief_compliant_userdetail->more_options = $more_options ;
                    $user_detail_old->chief_compliant_userdetail->chief_compliant_details = $tempar ;

        // pr($user_detail_old->chief_compliant_details); die;

                }
if(!empty($user_detail_old->chief_compliant_userdetail->if_more_recent_papsmear))
 $user_detail_old->chief_compliant_userdetail->if_more_recent_papsmear = Security::decrypt( base64_decode($user_detail_old->chief_compliant_userdetail->if_more_recent_papsmear), SEC_KEY) ;

if(!empty($user_detail_old->chief_compliant_userdetail->is_curently_pregnant))
 $user_detail_old->chief_compliant_userdetail->is_curently_pregnant = Security::decrypt( base64_decode($user_detail_old->chief_compliant_userdetail->is_curently_pregnant), SEC_KEY) ;

if(!empty($user_detail_old->chief_compliant_userdetail->currently_pregnant_week))
 $user_detail_old->chief_compliant_userdetail->currently_pregnant_week = Security::decrypt( base64_decode($user_detail_old->chief_compliant_userdetail->currently_pregnant_week), SEC_KEY) ;

if(!empty($user_detail_old->chief_compliant_userdetail->currently_pregnant_days))
 $user_detail_old->chief_compliant_userdetail->currently_pregnant_days = Security::decrypt( base64_decode($user_detail_old->chief_compliant_userdetail->currently_pregnant_days), SEC_KEY) ;

if(!empty($user_detail_old->chief_compliant_userdetail->currently_pregnant_complication))
 $user_detail_old->chief_compliant_userdetail->currently_pregnant_complication = Security::decrypt( base64_decode($user_detail_old->chief_compliant_userdetail->currently_pregnant_complication), SEC_KEY) ;


if(!empty($user_detail_old->chief_compliant_userdetail->old_python_file_option_3rd_tab))
 $user_detail_old->chief_compliant_userdetail->old_python_file_option_3rd_tab = unserialize(Security::decrypt( base64_decode($user_detail_old->chief_compliant_userdetail->old_python_file_option_3rd_tab), SEC_KEY))  ;





  if(!empty($user_detail_old->chief_compliant_userdetail->covid_detail)){

    $user_detail_old->chief_compliant_userdetail->covid_detail = unserialize(Security::decrypt( base64_decode($user_detail_old->chief_compliant_userdetail->covid_detail), SEC_KEY))  ;

    //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
     $tempar = array();
    foreach($user_detail_old->chief_compliant_userdetail->covid_detail as $key => $value){

        if(!empty($value)){



          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
          $tempar[$key]['question_id'] = $temp->id ;
          $tempar[$key]['question'] = $temp->question ;
          $tempar[$key]['answer'] = $value;


        }

      }

      $user_detail_old->chief_compliant_userdetail->covid_detail = $tempar;
    //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
  }

  if(!empty($user_detail_old->chief_compliant_userdetail->phq_9_detail)){

    $user_detail_old->chief_compliant_userdetail->phq_9_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->phq_9_detail), SEC_KEY)) ;
  }


  /** Start get old Data for focused history */

    if(!empty($user_detail_old->chief_compliant_userdetail->focused_history_detail)){

    $user_detail_old->chief_compliant_userdetail->focused_history_detail = unserialize(Security::decrypt( base64_decode($user_detail_old->chief_compliant_userdetail->focused_history_detail), SEC_KEY))  ;

    //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
    $tempar = array();
    foreach($user_detail_old->chief_compliant_userdetail->focused_history_detail as $key => $value){

        if(!empty($value)){

          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
          $tempar[$key]['question_id'] = $temp->id ;
          $tempar[$key]['question'] = $temp->question ;
          $tempar[$key]['answer'] = $value;

        }

      }

      $user_detail_old->chief_compliant_userdetail->focused_history_detail = $tempar;
    //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
  }

  if(!empty($user_detail_old->chief_compliant_userdetail->chronic_condition)){
   $user_detail_old->chief_compliant_userdetail->chronic_condition = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chronic_condition), SEC_KEY)) ;

  }


  if(!empty($user_detail_old->chief_compliant_userdetail->chronic_dmii_detail)){
   $user_detail_old->chief_compliant_userdetail->chronic_dmii_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chronic_dmii_detail), SEC_KEY)) ;

  }

  if(!empty($user_detail_old->chief_compliant_userdetail->chronic_dmii_medication)){
    $user_detail_old->chief_compliant_userdetail->chronic_dmii_medication = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chronic_dmii_medication), SEC_KEY)) ;

  }

  if(!empty($user_detail_old->chief_compliant_userdetail->glucose_reading_detail)){
    $user_detail_old->chief_compliant_userdetail->glucose_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->glucose_reading_detail), SEC_KEY)) ;

  }

  if(!empty($user_detail_old->chief_compliant_userdetail->chronic_htn_detail)){
    $user_detail_old->chief_compliant_userdetail->chronic_htn_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chronic_htn_detail), SEC_KEY)) ;

  }

  if(!empty($user_detail_old->chief_compliant_userdetail->chronic_htn_medication)){
    $user_detail_old->chief_compliant_userdetail->chronic_htn_medication = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chronic_htn_medication), SEC_KEY)) ;

  }

  if(!empty($user_detail_old->chief_compliant_userdetail->bp_reading_detail)){
    $user_detail_old->chief_compliant_userdetail->bp_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->bp_reading_detail), SEC_KEY)) ;
  }

  if(!empty($user_detail_old->chief_compliant_userdetail->chronic_chf_medication)){
    $user_detail_old->chief_compliant_userdetail->chronic_chf_medication = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chronic_chf_medication), SEC_KEY)) ;

  }

  if(!empty($user_detail_old->chief_compliant_userdetail->chronic_cad_medication)){
    $user_detail_old->chief_compliant_userdetail->chronic_cad_medication = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chronic_cad_medication), SEC_KEY)) ;

  }

  if(!empty($user_detail_old->chief_compliant_userdetail->chronic_copd_medication)){
    $user_detail_old->chief_compliant_userdetail->chronic_copd_medication = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chronic_copd_medication), SEC_KEY)) ;

  }

  if(!empty($user_detail_old->chief_compliant_userdetail->chronic_general_detail)){
    $user_detail_old->chief_compliant_userdetail->chronic_general_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chronic_general_detail), SEC_KEY)) ;

  }

  if(!empty($user_detail_old->chief_compliant_userdetail->chronic_cad_detail)){
    $user_detail_old->chief_compliant_userdetail->chronic_cad_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chronic_cad_detail), SEC_KEY)) ;

  }

  if(!empty($user_detail_old->chief_compliant_userdetail->chronic_chf_detail)){
    $user_detail_old->chief_compliant_userdetail->chronic_chf_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chronic_chf_detail), SEC_KEY)) ;

  }

  if(!empty($user_detail_old->chief_compliant_userdetail->chronic_copd_detail)){
    $user_detail_old->chief_compliant_userdetail->chronic_copd_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chronic_copd_detail), SEC_KEY)) ;

  }

  if(!empty($user_detail_old->chief_compliant_userdetail->chronic_asthma_detail)){
    $user_detail_old->chief_compliant_userdetail->chronic_asthma_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->chronic_asthma_detail), SEC_KEY)) ;
  }

  if(!empty($user_detail_old->chief_compliant_userdetail->peak_flow_reading_detail)){
    $user_detail_old->chief_compliant_userdetail->peak_flow_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->peak_flow_reading_detail), SEC_KEY)) ;
  }

  if(!empty($user_detail_old->chief_compliant_userdetail->cancer_cc_detail)){
    $user_detail_old->chief_compliant_userdetail->cancer_cc_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->cancer_cc_detail), SEC_KEY)) ;
  }

  if(!empty($user_detail_old->chief_compliant_userdetail->cancer_conditions)){
    $user_detail_old->chief_compliant_userdetail->cancer_conditions = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->cancer_conditions), SEC_KEY)) ;
  }

  if(!empty($user_detail_old->chief_compliant_userdetail->cancer_history_detail)){
    $user_detail_old->chief_compliant_userdetail->cancer_history_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->cancer_history_detail), SEC_KEY)) ;
  }

  if(!empty($user_detail_old->chief_compliant_userdetail->cancer_assessments)){
    $user_detail_old->chief_compliant_userdetail->cancer_assessments = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->cancer_assessments), SEC_KEY)) ;
  }

  if(!empty($user_detail_old->chief_compliant_userdetail->cancer_medical_detail)){
    $user_detail_old->chief_compliant_userdetail->cancer_medical_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->cancer_medical_detail), SEC_KEY)) ;
  }

  if(!empty($user_detail_old->chief_compliant_userdetail->cancer_family_members)){
    $user_detail_old->chief_compliant_userdetail->cancer_family_members = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->cancer_family_members), SEC_KEY)) ;
  }

  if(!empty($user_detail_old->chief_compliant_userdetail->family_members_cancer_disease_detail)){
    $user_detail_old->chief_compliant_userdetail->family_members_cancer_disease_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->family_members_cancer_disease_detail), SEC_KEY)) ;
  }

  if(!empty($user_detail_old->chief_compliant_userdetail->pre_op_post_op)){
    $user_detail_old->chief_compliant_userdetail->pre_op_post_op = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->pre_op_post_op), SEC_KEY)) ;
  }

  if(!empty($user_detail_old->chief_compliant_userdetail->cancer_followup_general_detail)){
    $user_detail_old->chief_compliant_userdetail->cancer_followup_general_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->cancer_followup_general_detail), SEC_KEY)) ;
  }

  if(!empty($user_detail_old->chief_compliant_userdetail->followup_medical_history_detail)){
    $user_detail_old->chief_compliant_userdetail->followup_medical_history_detail = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->followup_medical_history_detail), SEC_KEY)) ;
  }

  /*if(!empty($user_detail_old->chief_compliant_userdetail->followup_assessment)){
    $user_detail_old->chief_compliant_userdetail->followup_assessment = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->followup_assessment), SEC_KEY)) ;
  }*/



// arranging data in such a manner that it will be easy to accessable
if(!empty($user_detail_old->chief_compliant_userdetail->chief_compliant_details)){
  $old_chief_compliant_details = $user_detail_old->chief_compliant_userdetail->chief_compliant_details;

    $temp_old_chief_compliant_details = array();
  foreach ($old_chief_compliant_details as $kd => $vd) {

    $tempary = array();
     foreach ($vd as $kd1 => $vd1) {


      if($kd1 === 'cc_data'){
        $tempary[$kd1] = $vd1;
      } else{

        $tempary[$vd1['question_id']] = $vd1 ;
      }
     }
     $temp_old_chief_compliant_details[$kd] = $tempary ;
  }
  $user_detail_old->chief_compliant_userdetail->chief_compliant_details = $temp_old_chief_compliant_details;
}


//logic for show the tab 16

if($step_id == 4 && !empty($user_detail_old->chief_compliant_userdetail->compliant_medication_detail)){

    foreach ($user_detail_old->chief_compliant_userdetail->compliant_medication_detail as $key => $value) {
   // var_dump(in_array(trim($value['medication_name_name']), $show_dast_padt_medication_list));
      if(isset($value['medication_name_name']) && in_array(trim($value['medication_name_name']), $show_dast_padt_medication_list)){
       // echo 'w';
        $this->set('show_tab_16',1);
        break;
      }
      else{

        $this->set('show_tab_16',0);
      }
    }
}


//logic for tab 18
/*if($user_detail_old->chief_compliant_userdetail->current_step_id->id == 1){

  $show_tab_18 = 0;
  //get all the user symptoms that selected in tab number 1
  $temp_user_symptom_from_tab1 = array();

  if(!empty($user_detail_old->chief_compliant_userdetail->symptom_from_tab1)){

    $old_symptom_from_tab1 = unserialize(Security::decrypt(base64_decode($user_detail_old->chief_compliant_userdetail->symptom_from_tab1),SEC_KEY));

    if(!empty($old_symptom_from_tab1)){

      $all_cc_detail = $this->ChiefCompliants->find('list',['keyField' => 'id','valueField' => 'name'])->toArray();

      foreach ($old_symptom_from_tab1 as $skey => $svalue) {

          $svalue = trim($svalue);
          if(in_array($svalue, $all_cc_detail)){

             $temp_user_symptom_from_tab1[] =  array_search($svalue, $all_cc_detail);
          }
      }
    }

  }


  if(!empty($user_detail_old->chief_compliant_userdetail->sub_chief_compliant_id) && !empty($user_detail_old->chief_compliant_userdetail->sub_chief_compliant_id)){

      foreach ($user_detail_old->chief_compliant_userdetail->sub_chief_compliant_id as $key => $value) {

         $temp_user_symptom_from_tab1[] =  $value->id;
      }
  }

  if(!empty($user_detail_old->chief_compliant_userdetail->chief_compliant_id->id)){

    $temp_user_symptom_from_tab1[] = $user_detail_old->chief_compliant_userdetail->chief_compliant_id->id;
  }

  //check covid-19 tab show or not
  //we check all current user sysmptom
  $temp_current_tab_number = 3;
  if(!empty($temp_user_symptom_from_tab1)){

    foreach ($temp_user_symptom_from_tab1 as $sym_key => $sym_value) {

      if(array_key_exists($sym_value, $show_covid_19_symptom_list)){
        $show_tab_18 = 1;
        break;
      }
    }
  }

  $this->set('show_tab_18',$show_tab_18);
}*/


}


      $this->set(compact('chief_compliant','chief_compliant_symptoms_tab1', 'chief_compliant_medication', 'length_arr', 'tab_number', 'apt_id', 'how_it_taken_arr', 'protection_methods' , 'detail_question_id', 'default_symptoms_id', 'compliant_questin', 'next_steps', 'default_med_chiefcom', 'login_user', 'step_id', 'medication_side_effects', 'apt_id_data', 'womandata', 'tab_3_load_2_time', 'python_symptom_output', 'user_detail', 'user_detail_old','uid','schedule_id','other_detail_question_id','general_update_questions','pain_update_questions','screening_questions','post_checkup_question','procedure_detail_question','common_medical_cond','pre_op_medications_question','common_allergies_cond','follow_up_step_id','common_diseases','disease_detail_question_id','base_line_symptoms','alarm_symptoms','comm_drug_question','dast_drug_question','soapp_drug_question','padt_drug_question','ort_drug_question','m3_drug_question','follow_up_question','covid_questions','phq_9_questions','cronic_pain_assessment_questions','cronic_pain_assessment_tmb_question','cronic_pain_assessment_thc_question','cronic_pain_assessment_thp_question','cronic_pain_opioid_overdose_risk_question','cronic_pain_assessment_ort_question','cronic_pain_assessment_conditions','focusStory_question','active_sub_tab','chronicCondition','choronic_cad_question','choronic_chf_question','choronic_copd_question','choronic_dmii_question','choronic_htn_question','choronic_general_question','choronic_asthma_question','cancer_cc_question','cancer_history_question','cancer_assessments','cancer_life_quality_assessments','cancer_chemo_assessments','cancer_mh_question','cancer_covid_question','preop_postop_questions','cancer_followup_general_question','cancer_followup_medical_history_question','hospital_er_question','internal_medication_question','common_allergy_cond','user_data','internal_general_assessment_question','internal_taps1_assessment_question','internal_taps2_assessment_question','psychiatry_question'));




  }

  public function prepare_user_detial_data_for_render($user_detail = null )
  {

    $this->Doctors = $this->loadModel('Doctors');
    $this->CommonConditions = $this->loadModel('CommonConditions');
    $this->loadModel('Diseases');
    $this->loadModel('Symptoms');
    $this->loadModel('CommonQuestions');
    $commonTable = TableRegistry::get('common_conditions');

    if(isset($user_detail->current_step_id) && !empty($user_detail->current_step_id)){

      $user_detail->current_step_id = $this->StepDetails->find('all')->where(['id' => $user_detail->current_step_id])->first();

    }

    if(isset($user_detail->appointment_id) && !empty($user_detail->appointment_id)){

      $user_detail->appointment_id = $this->Appointments->find('all')->where(['id' => $user_detail->appointment_id])->first();

    }

    if(isset($user_detail->appointment_id) && !empty($user_detail->appointment_id) && isset($user_detail->appointment_id->doctor_id) && !empty($user_detail->appointment_id->doctor_id))
    {

      $user_detail->appointment_id->doctor_id = $this->Doctors->find('all')->where(['id' => $user_detail->appointment_id->doctor_id])->first();

    }


    if(isset($user_detail->appointment_id) && !empty($user_detail->appointment_id) && isset($user_detail->appointment_id->organization_id) && !empty($user_detail->appointment_id->organization_id)){

        $user_detail->appointment_id->organization_id = $this->Organizations->find('all')->where(['id' => $user_detail->appointment_id->organization_id])->first();

    }

    if(isset($user_detail->chief_compliant_id) && !empty($user_detail->chief_compliant_id)){

      //$user_detail->chief_compliant_id = $this->ChiefCompliants->find('all')->where(['id' => $user_detail->chief_compliant_id])->first();

      $user_detail->chief_compliant_id = Security::decrypt(base64_decode($user_detail->chief_compliant_id), SEC_KEY);
      $cc_ids = explode(",", $user_detail->chief_compliant_id);
      $temp_cc = array_flip(array_filter($cc_ids));

      $temp_chief_compliant_id = $this->ChiefCompliants->find('list',[
                              'keyField' => 'id',
                              'valueField' => 'name'])->where(['id IN' => $cc_ids])->toArray();

      if(!empty($temp_chief_compliant_id)){

        //unset the cc key when cc not in database
          $unsaved_cc = array_diff_key($temp_cc, $temp_chief_compliant_id);
          if(!empty($unsaved_cc)){

              foreach ($unsaved_cc as $ukey => $uvalue) {

                  if(isset($temp_cc[$ukey])){

                    unset($temp_cc[$ukey]);
                  }
              }
          }

        foreach ($temp_chief_compliant_id as $cc_key => $cc_value) {

          if(isset($temp_cc[$cc_key])){

            $temp_cc[$cc_key] = $cc_value;
          }
        }

        $temp_cc = implode(", ", $temp_cc);
      }


      if(!empty($temp_cc)){
      $user_detail->all_cc_detail_name = rtrim($temp_cc,', ');
      }
     // pr($temp_chief_compliant_id);die;
      $user_detail->chief_compliant_id = $this->ChiefCompliants->find('all')->where(['id IN' => $cc_ids])->first();
    }

    if(isset($user_detail->compliant_symptom_ids) && !empty($user_detail->compliant_symptom_ids))
    {
      $user_detail->compliant_symptom_ids = explode(',', $user_detail->compliant_symptom_ids);
      $user_detail->compliant_symptom_ids =  $this->ChiefCompliants->find('all')->where(['id IN' => $user_detail->compliant_symptom_ids])->all();
    }

    if(isset($user_detail->compliant_length) && !empty($user_detail->compliant_length)){

      $user_detail->compliant_length = $user_detail->compliant_length;
    }

    if(isset($user_detail->compliant_medication_detail) && !empty($user_detail->compliant_medication_detail)){

        $user_detail->compliant_medication_detail = unserialize(Security::decrypt(base64_decode($user_detail->compliant_medication_detail), SEC_KEY)) ;

       // pr($user_detail->compliant_medication_detail);
       /*  // commented on 18-12-18 as medication name is saved at the place of id
       foreach ($user_detail->compliant_medication_detail as $key => $value) {

          $user_detail->compliant_medication_detail[$key]['medication_name_id'] =  $this->ChiefCompliantMedication->find('all')->where(['id' => $value['medication_name_id']])->first();


       }
       */

    }


    if(isset($user_detail->chief_compliant_symptoms) && !empty($user_detail->chief_compliant_symptoms))
    {

      $user_detail->chief_compliant_symptoms = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_symptoms), SEC_KEY)) ;

      foreach($user_detail->chief_compliant_symptoms as $key => $value){
        foreach($value as $k =>$v) {
          $user_detail->chief_compliant_symptoms[$key][$k] = $this->ChiefCompliants->find('all')->where(['id' => $v])->first();
        }

      }
    }

    if(isset($user_detail->questionnaire_detail) && !empty($user_detail->questionnaire_detail))
    {

      $user_detail->questionnaire_detail = unserialize(Security::decrypt(base64_decode($user_detail->questionnaire_detail), SEC_KEY));

      foreach($user_detail->questionnaire_detail as $key => $value){

        foreach($value as $k =>$v) {

          $user_detail->questionnaire_detail[$key][$k] = $this->ChiefCompliantQuestionnaire->find('all')->where(['id' => $v])->first();
        }
      }
    }

    if(isset($user_detail->chief_compliant_details) && !empty($user_detail->chief_compliant_details)){

      $user_detail->chief_compliant_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_details), SEC_KEY))) ;
      $tempar = array();
      $more_options = array();
      // pr($user_detail->chief_compliant_details); die;
      foreach ($user_detail->chief_compliant_details as $key => $value)
      {
        $i = 0 ;
        foreach ($value as $k => $v)
        {
          if(!is_numeric($k) && $k == 'more_option'){
              $more_options[$key] = $v ;
              unset($value['more_option']);
              continue;
          }
          $temp = $this->ChiefCompliantDetails->find('all')->where(['id'=> $k ])->first();
          $tempcc = $this->ChiefCompliants->find('all')->where(['id'=> $key ])->first();
          $tempar[$key]['cc_data'] = $tempcc ;
          $tempar[$key][$i]['question_id'] = $temp->id ;
          $tempar[$key][$i]['question'] = $temp->question ;
          $tempar[$key][$i]['hpi_element'] = $temp->cpt_hpi_element_type;
          $tempar[$key][$i]['answer'] = $v ;
          $i++;
        }
      }
      $user_detail->more_options = $more_options ;
      $user_detail->chief_compliant_details = $tempar ;

    }

    if(isset($user_detail->chief_compliant_other_details) && !empty($user_detail->chief_compliant_other_details))
    {
      $user_detail->chief_compliant_other_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_other_details), SEC_KEY))) ;

      $tempar = array();
      $i = 0;
      foreach ($user_detail->chief_compliant_other_details as $key => $value)
      {
        $temp = $this->ChiefCompliantOtherDetails->find('all')->where(['id'=> $key ])->first();
        $tempar[$i]['question_id'] = $temp->id ;
        $tempar[$i]['question'] = $temp->question ;
        $tempar[$i]['answer'] = $value ;
        $i++;
      }
      $user_detail->chief_compliant_other_details = $tempar;

    }

    if(isset($user_detail->screening_questions_detail) && !empty($user_detail->screening_questions_detail))
    {
      $user_detail->screening_questions_detail = unserialize((Security::decrypt(base64_decode($user_detail->screening_questions_detail), SEC_KEY))) ;

      $tempar = array();
      $i = 0;
      foreach ($user_detail->screening_questions_detail as $key => $value)
      {
        $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
        $tempar[$i]['question_id'] = $temp->id ;
        $tempar[$i]['question'] = $temp->question ;
        $tempar[$i]['answer'] = $value ;
        $i++;
      }
      $user_detail->screening_questions_detail = $tempar;

    }

    if(isset($user_detail->post_checkup_question_detail) && !empty($user_detail->post_checkup_question_detail))
    {
      $user_detail->post_checkup_question_detail = unserialize((Security::decrypt(base64_decode($user_detail->post_checkup_question_detail), SEC_KEY))) ;

      $tempar = array();
      $i = 0;
      foreach ($user_detail->post_checkup_question_detail as $key => $value)
      {
        $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
        $tempar[$i]['question_id'] = $temp->id ;
        $tempar[$i]['question'] = $temp->question ;
        $tempar[$i]['answer'] = $value ;
        $i++;
      }
      $user_detail->post_checkup_question_detail = $tempar;

    }

    if(isset($user_detail->pre_op_procedure_detail) && !empty($user_detail->pre_op_procedure_detail))
    {
      $user_detail->pre_op_procedure_detail = unserialize((Security::decrypt(base64_decode($user_detail->pre_op_procedure_detail), SEC_KEY))) ;

      $tempar = array();
      $i = 0;
      foreach ($user_detail->pre_op_procedure_detail as $key => $value)
      {
        $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
        $tempar[$i]['question_id'] = $temp->id ;
        $tempar[$i]['question'] = $temp->question ;
        $tempar[$i]['answer'] = $value ;
        $i++;
      }
      $user_detail->pre_op_procedure_detail = $tempar;

    }

    if(isset($user_detail->pre_op_medications_question_detail) && !empty($user_detail->pre_op_medications_question_detail))
    {
      $user_detail->pre_op_medications_question_detail = unserialize((Security::decrypt(base64_decode($user_detail->pre_op_medications_question_detail), SEC_KEY))) ;

      $tempar = array();
      $i = 0;
      foreach ($user_detail->pre_op_medications_question_detail as $key => $value)
      {
        $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
        $tempar[$i]['question_id'] = $temp->id ;
        $tempar[$i]['question'] = $temp->question ;
        $tempar[$i]['answer'] = $value ;
        $i++;
      }
      $user_detail->pre_op_medications_question_detail = $tempar;

    }



    if(isset($user_detail->pain_update_question) && !empty($user_detail->pain_update_question))
    {

      $user_detail->pain_update_question = unserialize((Security::decrypt(base64_decode($user_detail->pain_update_question), SEC_KEY))) ;

      $tempar = array();
      $i = 0;
      foreach ($user_detail->pain_update_question as $key => $value)
      {

        $temp = $this->PainFollowupQuestionnaires->find('all')->where(['id'=> $key ])->first();
        $tempar[$i]['question_id'] = $temp->id ;
        $tempar[$i]['question'] = $temp->question ;
        $tempar[$i]['answer'] = $value ;
        $i++;
      }
      $user_detail->pain_update_question = $tempar;

    }


    if(isset($user_detail->general_update_question) && !empty($user_detail->general_update_question))
    {

      $user_detail->general_update_question = unserialize((Security::decrypt(base64_decode($user_detail->general_update_question), SEC_KEY))) ;

      $tempar = array();
      $i = 0;
      foreach ($user_detail->general_update_question as $key => $value)
      {


        $temp = $this->PainFollowupQuestionnaires->find('all')->where(['id'=> $key ])->first();
        $tempar[$i]['question_id'] = $temp->id ;
        $tempar[$i]['question'] = $temp->question ;
        $tempar[$i]['answer'] = $value ;
        $i++;
      }
      $user_detail->general_update_question = $tempar;

    }


    if(isset($user_detail->pre_op_medical_condition_detail) && !empty($user_detail->pre_op_medical_condition_detail))
    {

      $user_detail->pre_op_medical_condition_detail = unserialize((Security::decrypt(base64_decode($user_detail->pre_op_medical_condition_detail), SEC_KEY))) ;

      $tempar = array();
      $i = 0;
      foreach ($user_detail->pre_op_medical_condition_detail as $key => $value)
      {


        $temp = $this->CommonConditions->find('all')->where(['id'=> $key ])->first();
        $tempar[$i]['condition_id'] = $temp->id ;
        $tempar[$i]['condition_name'] = $temp->name ;
        $tempar[$i]['medical_name'] = $temp->medical_name ;
        $tempar[$i]['answer'] = $value['name'] ;
        $tempar[$i]['year'] = $value['year'] ;
        $i++;
      }
      $user_detail->pre_op_medical_condition_detail = $tempar;

    }

    if(isset($user_detail->pre_op_allergies_detail) && !empty($user_detail->pre_op_allergies_detail))
    {

      $user_detail->pre_op_allergies_detail = unserialize((Security::decrypt(base64_decode($user_detail->pre_op_allergies_detail), SEC_KEY))) ;

      $tempar = array();
      $i = 0;
      foreach ($user_detail->pre_op_allergies_detail as $key => $value)
      {


        $temp = $this->CommonConditions->find('all')->where(['id'=> $key ])->first();
        $tempar[$i]['condition_id'] = $temp->id ;
        $tempar[$i]['condition_name'] = $temp->name ;
        $tempar[$i]['medical_name'] = $temp->medical_name ;
        $tempar[$i]['answer'] = $value['name'] ;
        $tempar[$i]['reaction'] = $value['reaction'] ;
        $i++;
      }
      $user_detail->pre_op_allergies_detail = $tempar;

    }

    if(isset($user_detail->disease_name) && !empty($user_detail->disease_name)){

      $user_detail->disease_name = Security::decrypt(base64_decode($user_detail->disease_name), SEC_KEY);
    }

    if(isset($user_detail->general_update_provider_info) && !empty($user_detail->general_update_provider_info)){

      $user_detail->general_update_provider_info =  unserialize((Security::decrypt(base64_decode($user_detail->general_update_provider_info), SEC_KEY))) ;
    }

    if(isset($user_detail->general_update_procedure_detail) && !empty($user_detail->general_update_procedure_detail)){

      $user_detail->general_update_procedure_detail =  unserialize((Security::decrypt(base64_decode($user_detail->general_update_procedure_detail), SEC_KEY))) ;
    }

     if(isset($user_detail->disease_questions_detail) && !empty($user_detail->disease_questions_detail)){

          $user_detail->disease_questions_detail =  unserialize((Security::decrypt(base64_decode($user_detail->disease_questions_detail), SEC_KEY))) ;

          if(!empty($user_detail->disease_questions_detail)){

            $temparr = array();

            foreach ($user_detail->disease_questions_detail as $key => $value) {

              $disease = $this->Diseases->find('all')->where(['id'=> $key])->first();
              if(!empty($disease)){


               $user_detail->disease_questions_detail[$key]['disease'] =  $disease;
              }

              //set question details
              if(!empty($value['disease_detail_question'])){

                $temparr = array();
                $i = 0;
                foreach ($value['disease_detail_question'] as $q_key => $que) {

                  $question = $this->CommonQuestions->find('all')->where(['id' => $q_key])->first();

                  if(!empty($question)){

                    $temparr[$i]['question_id'] = $question->id ;
                    $temparr[$i]['question'] = $question->question ;
                    $temparr[$i]['answer'] = $que ;
                    $i++;
                  }

                }

                $user_detail->disease_questions_detail[$key]['disease_detail_question'] = $temparr;
              }

              //set detail of alarm sysmptoms
              if(!empty($value['alarm_sysmptom'])){

                $temparr = array();
                $i = 0;

                foreach ($value['alarm_sysmptom'] as $asysmpt_key => $asysmpt_value) {

                  $alarm_sysmptom = $this->Symptoms->find('all')->where(['id'=> $asysmpt_key])->first();

                  if(!empty($alarm_sysmptom)){

                    $temparr[$i]['id'] = $alarm_sysmptom->id;
                    $temparr[$i]['name'] = $alarm_sysmptom->symptom;
                    $temparr[$i]['medical_name'] = $alarm_sysmptom->medical_name;
                    $temparr[$i]['answer'] = $asysmpt_value['answer'];
                    $i++;

                  }
                }

                  $user_detail->disease_questions_detail[$key]['alarm_sysmptom'] = $temparr;
              }

              //set detail of base line sysmptoms
              if(!empty($value['baseline_sysmptom'])){

                $temparr = array();
                $i = 0;

                foreach ($value['baseline_sysmptom'] as $bsysmpt_key => $bsysmpt_value) {

                  $baseline_sysmptom = $this->Symptoms->find('all')->where(['id'=> $bsysmpt_key])->first();

                  if(!empty($baseline_sysmptom)){

                    $temparr[$i]['id'] = $baseline_sysmptom->id;
                    $temparr[$i]['name'] = $baseline_sysmptom->symptom;
                    $temparr[$i]['medical_name'] = $baseline_sysmptom->medical_name;
                    $temparr[$i]['answer'] = $bsysmpt_value['answer'];
                    $temparr[$i]['scale'] = $bsysmpt_value['scale'];
                    $i++;

                  }
                }

                  $user_detail->disease_questions_detail[$key]['baseline_sysmptom'] = $temparr;
              }
            }
          }
        }

        if(!empty($user_detail->medication_refill_comm_soapp_details)){

          $user_detail->medication_refill_comm_soapp_details = unserialize((Security::decrypt(base64_decode($user_detail->medication_refill_comm_soapp_details), SEC_KEY)));

            if(isset($user_detail->medication_refill_comm_soapp_details['soapp']) && !empty($user_detail->medication_refill_comm_soapp_details['soapp'])){
              $tempar = array();
              foreach($user_detail->medication_refill_comm_soapp_details['soapp'] as $key => $val){


                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $val;
                 // $i++;

              }
              //pr($tempar);die;
              $user_detail->medication_refill_comm_soapp_details['soapp'] = $tempar;
              //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
           }

           if(isset($user_detail->medication_refill_comm_soapp_details['comm']) && !empty($user_detail->medication_refill_comm_soapp_details['comm'])){
              $tempar = array();
              foreach($user_detail->medication_refill_comm_soapp_details['comm'] as $key => $val){


                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $val;
                 // $i++;

              }
              //pr($tempar);die;
              $user_detail->medication_refill_comm_soapp_details['comm'] = $tempar;
              //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
           }
        }

      if(!empty($user_detail->medication_refill_extra_details))
      {

         $user_detail->medication_refill_extra_details = unserialize((Security::decrypt(base64_decode($user_detail->medication_refill_extra_details), SEC_KEY)));

        // pr($user_detail->medication_refill_extra_details);

        //pr($user_detail_old->chief_compliant_userdetail->general_update_question);die;



         if(isset($user_detail->medication_refill_extra_details['dast']) && !empty($user_detail->medication_refill_extra_details['dast'])){
            $tempar = array();
            foreach($user_detail->medication_refill_extra_details['dast'] as $key => $val){


                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $val;
               // $i++;

            }
            //pr($tempar);die;
            $user_detail->medication_refill_extra_details['dast'] = $tempar;
            //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
         }

         if(isset($user_detail->medication_refill_extra_details['padt']) && !empty($user_detail->medication_refill_extra_details['padt'])){
            $tempar = array();
            foreach($user_detail->medication_refill_extra_details['padt'] as $key => $val){


                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $val;
               // $i++;

            }
            //pr($tempar);die;
            $user_detail->medication_refill_extra_details['padt'] = $tempar;
            //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
         }
         if(isset($user_detail->medication_refill_extra_details['ort']) && !empty($user_detail->medication_refill_extra_details['ort'])){
            $tempar = array();
            foreach($user_detail->medication_refill_extra_details['ort'] as $key => $val){


                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $val;
               // $i++;

            }
            //pr($tempar);die;
            $user_detail->medication_refill_extra_details['ort'] = $tempar;
            //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
         }
         if(isset($user_detail->medication_refill_extra_details['m3']) && !empty($user_detail->medication_refill_extra_details['m3'])){
            $tempar = array();
            foreach($user_detail->medication_refill_extra_details['m3'] as $key => $val){


                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $val;
               // $i++;

            }
            //pr($tempar);die;
            $user_detail->medication_refill_extra_details['m3'] = $tempar;
            //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
         }


       }


       if(!empty($user_detail->follow_up_sx_detail)){

         $user_detail->follow_up_sx_detail = unserialize((Security::decrypt(base64_decode($user_detail->follow_up_sx_detail), SEC_KEY)));

         //pr($user_detail_old->chief_compliant_userdetail->follow_up_sx_detail);die;

         if(!empty($user_detail->follow_up_sx_detail)){



            foreach($user_detail->follow_up_sx_detail as $key => $value){

              if(!empty($value)){

                $tempar = array();
                foreach($value as $k => $v){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $k ])->first();
                  $tempcc = $this->ChiefCompliants->find('all')->where(['id'=> $key ])->first();
                  $tempar['cc_data'] = $tempcc ;
                  $tempar[$k]['question_id'] = $temp->id ;
                  $tempar[$k]['question'] = $temp->question ;
                  $tempar[$k]['answer'] = $v;
                }
                $user_detail->follow_up_sx_detail[$key] = $tempar;

              }

            }
         }
       }

        if(!empty($user_detail->symptom_from_tab1)){

         $temp_symptom_from_tab1 = unserialize((Security::decrypt(base64_decode($user_detail->symptom_from_tab1), SEC_KEY)));

         if(!empty($temp_symptom_from_tab1)){

            $temp_cc = implode(", ", $temp_symptom_from_tab1);
            $user_detail->all_cc_detail_name = $user_detail->all_cc_detail_name.', '.$temp_cc;
         }

       }

        if(!empty($user_detail->covid_detail)){

            $user_detail->covid_detail = unserialize(Security::decrypt( base64_decode($user_detail->covid_detail), SEC_KEY))  ;

            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
             $tempar = array();
            foreach($user_detail->covid_detail as $key => $value){

                if(!empty($value)){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;


                }

              }
              $user_detail->covid_detail = $tempar;
            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
        }

        if(!empty($user_detail->phq_9_detail)){

            $user_detail->phq_9_detail = unserialize(Security::decrypt( base64_decode($user_detail->phq_9_detail), SEC_KEY))  ;

            //pr($user_detail->phq_9_detail);die;
             $tempar = array();
            foreach($user_detail->phq_9_detail as $key => $value){

                //if(!empty($value)){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;


               // }

              }
              $user_detail->phq_9_detail = $tempar;
            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
        }

        if(!empty($user_detail->focused_history_detail))
        {

          $user_detail->focused_history_detail = unserialize(Security::decrypt( base64_decode($user_detail->focused_history_detail), SEC_KEY))  ;
          $tempar = array();
          foreach($user_detail->focused_history_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $value;

              }

            }

            $user_detail->focused_history_detail = $tempar;
        }

        if(!empty($user_detail->chronic_dmii_detail))
        {
          $i = 0;
          $user_detail->chronic_dmii_detail = unserialize(Security::decrypt( base64_decode($user_detail->chronic_dmii_detail), SEC_KEY))  ;
          $tempar = array();
          $i = 0;
          foreach($user_detail->chronic_dmii_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;


              }

            }

            $user_detail->chronic_dmii_detail = $tempar;
        }

        if(!empty($user_detail->chronic_htn_detail))
        {
          $i = 0;
          $user_detail->chronic_htn_detail = unserialize(Security::decrypt( base64_decode($user_detail->chronic_htn_detail), SEC_KEY))  ;
          $tempar = array();
          $i = 0;
          foreach($user_detail->chronic_htn_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;
              }

            }

            $user_detail->chronic_htn_detail = $tempar;
        }

        if(!empty($user_detail->chronic_cad_detail))
        {
          $i = 0;
          $user_detail->chronic_cad_detail = unserialize(Security::decrypt( base64_decode($user_detail->chronic_cad_detail), SEC_KEY))  ;
          $tempar = array();
           $i = 0;
          foreach($user_detail->chronic_cad_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;

              }

            }

            $user_detail->chronic_cad_detail = $tempar;
        }

        if(!empty($user_detail->is_chief_complaint_doctor))
        {
          $i = 0;
          $user_detail->is_chief_complaint_doctor = unserialize(Security::decrypt( base64_decode($user_detail->is_chief_complaint_doctor), SEC_KEY));
          $tempar = array();
           $i = 0;
          foreach($user_detail->is_chief_complaint_doctor as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;

              }

            }

            $user_detail->is_chief_complaint_doctor = $tempar;
        }
        if(!empty($user_detail->chief_complaint_psychiatry))
        {
          $i = 0;
          $user_detail->chief_complaint_psychiatry = unserialize(Security::decrypt( base64_decode($user_detail->chief_complaint_psychiatry), SEC_KEY));
          $tempar = array();
           $i = 0;
          foreach($user_detail->chief_complaint_psychiatry as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;

              }

            }

            $user_detail->chief_complaint_psychiatry = $tempar;
        }
        if(!empty($user_detail->internal_general_assessment_detail))
        {
          $i = 0;
          $user_detail->internal_general_assessment_detail = unserialize(Security::decrypt( base64_decode($user_detail->internal_general_assessment_detail), SEC_KEY))  ;
          $tempar = array();
           $i = 0;
          foreach($user_detail->internal_general_assessment_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;

              }

            }

            $user_detail->internal_general_assessment_detail = $tempar;
        }
        if(!empty($user_detail->internal_taps1_assessment_detail))
        {
          $i = 0;
          $user_detail->internal_taps1_assessment_detail = unserialize(Security::decrypt( base64_decode($user_detail->internal_taps1_assessment_detail), SEC_KEY))  ;
          $tempar = array();
           $i = 0;
          foreach($user_detail->internal_taps1_assessment_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;

              }

            }

            $user_detail->internal_taps1_assessment_detail = $tempar;
        }
        if(!empty($user_detail->internal_taps2_assessment_detail))
        {
          $i = 0;
          $user_detail->internal_taps2_assessment_detail = unserialize(Security::decrypt( base64_decode($user_detail->internal_taps2_assessment_detail), SEC_KEY))  ;
          $tempar = array();
           $i = 0;
          foreach($user_detail->internal_taps2_assessment_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;

              }

            }

            $user_detail->internal_taps2_assessment_detail = $tempar;
        }


        if(!empty($user_detail->chronic_chf_detail))
        {
          $i = 0;
          $user_detail->chronic_chf_detail = unserialize(Security::decrypt( base64_decode($user_detail->chronic_chf_detail), SEC_KEY))  ;
          $tempar = array();
           $i = 0;
          foreach($user_detail->chronic_chf_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;

                $i++;

              }

            }

            $user_detail->chronic_chf_detail = $tempar;
        }

        if(!empty($user_detail->chronic_copd_detail))
        {

          $user_detail->chronic_copd_detail = unserialize(Security::decrypt( base64_decode($user_detail->chronic_copd_detail), SEC_KEY))  ;
          $tempar = array();
           $i = 0;
          foreach($user_detail->chronic_copd_detail as $key => $value){

              if(!empty($value)){
                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;

                $i++;

              }

            }

            $user_detail->chronic_copd_detail = $tempar;
        }

        if(!empty($user_detail->chronic_asthma_detail))
        {

          $user_detail->chronic_asthma_detail = unserialize(Security::decrypt( base64_decode($user_detail->chronic_asthma_detail), SEC_KEY))  ;
          $tempar = array();
           $i = 0;
          foreach($user_detail->chronic_asthma_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;
              }

            }

            $user_detail->chronic_asthma_detail = $tempar;
        }


        if(!empty($user_detail->chronic_general_detail))
        {

          $user_detail->chronic_general_detail = unserialize(Security::decrypt( base64_decode($user_detail->chronic_general_detail), SEC_KEY))  ;
          $tempar = array();
           $i = 0;

          foreach($user_detail->chronic_general_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;

                $i++;

              }

            }

            $user_detail->chronic_general_detail = $tempar;
        }
        // Pain management
        if(!empty($user_detail->chronic_pain_assessment_tmb)){

            $user_detail->chronic_pain_assessment_tmb = unserialize(Security::decrypt( base64_decode($user_detail->chronic_pain_assessment_tmb), SEC_KEY))  ;

            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
             $tempar = array();
            foreach($user_detail->chronic_pain_assessment_tmb as $key => $value){

                if(!empty($value)){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;


                }

              }
              $user_detail->chronic_pain_assessment_tmb = $tempar;
            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
        }
        if(!empty($user_detail->chronic_pain_treatment_history)){

            $user_detail->chronic_pain_treatment_history = unserialize(Security::decrypt( base64_decode($user_detail->chronic_pain_treatment_history), SEC_KEY))  ;

            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
             $tempar = array();
            foreach($user_detail->chronic_pain_treatment_history as $key => $value){

                if(!empty($value)){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;


                }

              }
              $user_detail->chronic_pain_treatment_history = $tempar;
            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
        }
        if(!empty($user_detail->chronic_pain_opioid_overdose_risk)){

            $user_detail->chronic_pain_opioid_overdose_risk = unserialize(Security::decrypt( base64_decode($user_detail->chronic_pain_opioid_overdose_risk), SEC_KEY))  ;

            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
             $tempar = array();
            foreach($user_detail->chronic_pain_opioid_overdose_risk as $key => $value){

                if(!empty($value)){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;


                }

              }
              $user_detail->chronic_pain_opioid_overdose_risk = $tempar;
            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
        }
        if(!empty($user_detail->chronic_pain_assessment_ort)){

            $user_detail->chronic_pain_assessment_ort = unserialize(Security::decrypt( base64_decode($user_detail->chronic_pain_assessment_ort), SEC_KEY));

            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
             $tempar = array();
            foreach($user_detail->chronic_pain_assessment_ort as $key => $value){

                if(!empty($value)){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;


                }

              }
              $user_detail->chronic_pain_assessment_ort = $tempar;
            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
        }
        if(isset($user_detail->chronic_pain_assessment_pmh) && !empty($user_detail->chronic_pain_assessment_pmh))
        {

          $user_detail->chronic_pain_assessment_pmh = unserialize((Security::decrypt(base64_decode($user_detail->chronic_pain_assessment_pmh), SEC_KEY))) ;

          $tempar = array();
          $i = 0;
          foreach ($user_detail->chronic_pain_assessment_pmh as $key => $value)
          {
            $temp = $this->CommonConditions->find('all')->where(['id'=> $key ])->first();
            $tempar[$i]['condition_id'] = $temp->id ;
            $tempar[$i]['condition_name'] = $temp->name ;
            $tempar[$i]['medical_name'] = $temp->medical_name ;
            $tempar[$i]['date'] = $value;
            $i++;
          }
          $user_detail->chronic_pain_assessment_pmh = $tempar;
        }
        // Pain Management

        if(!empty($user_detail->chronic_condition)){

          $user_detail->chronic_condition = unserialize(Security::decrypt(base64_decode($user_detail->chronic_condition), SEC_KEY)) ;
        }

        if(isset($user_detail->chronic_dmii_medication) && !empty($user_detail->chronic_dmii_medication))
        {

          $user_detail->chronic_dmii_medication = unserialize(Security::decrypt(base64_decode($user_detail->chronic_dmii_medication), SEC_KEY)) ;
        }

        if(isset($user_detail->chronic_cad_medication) && !empty($user_detail->chronic_cad_medication))
        {

          $user_detail->chronic_cad_medication = unserialize(Security::decrypt(base64_decode($user_detail->chronic_cad_medication), SEC_KEY)) ;
        }

        if(isset($user_detail->chronic_chf_medication) && !empty($user_detail->chronic_chf_medication))
        {

          $user_detail->chronic_chf_medication = unserialize(Security::decrypt(base64_decode($user_detail->chronic_chf_medication), SEC_KEY)) ;
        }

        if(isset($user_detail->chronic_htn_medication) && !empty($user_detail->chronic_htn_medication))
        {

          $user_detail->chronic_htn_medication = unserialize(Security::decrypt(base64_decode($user_detail->chronic_htn_medication), SEC_KEY)) ;
        }

        if(isset($user_detail->glucose_reading_detail) && !empty($user_detail->glucose_reading_detail))
        {

          $user_detail->glucose_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail->glucose_reading_detail), SEC_KEY)) ;
        }

        if(isset($user_detail->bp_reading_detail) && !empty($user_detail->bp_reading_detail))
        {

          $user_detail->bp_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail->bp_reading_detail), SEC_KEY)) ;
        }

        if(isset($user_detail->peak_flow_reading_detail) && !empty($user_detail->peak_flow_reading_detail))
        {

          $user_detail->peak_flow_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail->peak_flow_reading_detail), SEC_KEY)) ;
        }


         /**naveen**/

        if(!empty($user_detail->cancer_cc_detail))
        {

          $user_detail->cancer_cc_detail = unserialize(Security::decrypt( base64_decode($user_detail->cancer_cc_detail), SEC_KEY))  ;
          $tempar = array();
           $i = 0;
          foreach($user_detail->cancer_cc_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;
              }
            }
            $user_detail->cancer_cc_detail = $tempar;
        }

        if(!empty($user_detail->cancer_history_detail))
        {
          $user_detail->cancer_history_detail = unserialize(Security::decrypt( base64_decode($user_detail->cancer_history_detail), SEC_KEY))  ;

          $tempar = array();
          foreach($user_detail->cancer_history_detail as $key => $value){

              if(!empty($value) && is_array($value)){

                $i = 0;
                foreach ($value as $k => $v) {
                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $k])->first();
                  $tempar[$key][$i]['question_id'] = $temp->id ;
                  $tempar[$key][$i]['question'] = $temp->question ;
                  $tempar[$key][$i]['answer'] = $v;
                  $i++;
                }
              }
            }
            $user_detail->cancer_history_detail = $tempar;
        }
        if(!empty($user_detail->cancer_family_members))
        {
          $user_detail->cancer_family_members = unserialize(Security::decrypt( base64_decode($user_detail->cancer_family_members), SEC_KEY))  ;
        }

        if(!empty($user_detail->family_members_cancer_disease_detail))
        {
          $user_detail->family_members_cancer_disease_detail = unserialize(Security::decrypt( base64_decode($user_detail->family_members_cancer_disease_detail), SEC_KEY))  ;
        }

        if(!empty($user_detail->cancer_medical_detail))
        {
          $user_detail->cancer_medical_detail = unserialize(Security::decrypt( base64_decode($user_detail->cancer_medical_detail), SEC_KEY))  ;
          $tempar = array();
           $i = 0;
          foreach($user_detail->cancer_medical_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;
              }
            }
            $user_detail->cancer_medical_detail = $tempar;
        }


        if(!empty($user_detail->cancer_assessments))
        {

          $user_detail->cancer_assessments = unserialize(Security::decrypt( base64_decode($user_detail->cancer_assessments), SEC_KEY))  ;
          //pr($user_detail->cancer_assessments);
          $assessment_history = array();
          $life_assessment = array();
          $chemo_assessment = array();

          if(!empty($user_detail->cancer_assessments['assessment_history']))
          {
            $i = 0;
          foreach($user_detail->cancer_assessments['assessment_history'] as $key => $value){

              if(!empty($value)){

                $temp = $commonTable->find('all')->where(['id'=> $key])->first();
                $assessment_history[$i]['symtoms_id'] = $temp->id ;
                $assessment_history[$i]['name'] = $temp->name ;
                $assessment_history[$i]['answer'] = $value;
                $i++;
              }
            }
          }

          if(!empty($user_detail->cancer_assessments['life_assessment']))
          {
            $j = 0;
          foreach($user_detail->cancer_assessments['life_assessment'] as $key => $value){

              if(!empty($value)){

                $temp = $commonTable->find('all')->where(['id'=> $key])->first();
                $life_assessment[$j]['symtoms_id'] = $temp->id ;
                $life_assessment[$j]['name'] = $temp->name ;
                $life_assessment[$j]['answer'] = $value;
                $j++;
              }
            }
           }

           if(!empty($user_detail->cancer_assessments['chemo_assessment']))
          {
            $j = 0;
          foreach($user_detail->cancer_assessments['chemo_assessment'] as $key => $value){

              if(!empty($value)){

                $temp = $commonTable->find('all')->where(['id'=> $key])->first();
                $chemo_assessment[$j]['symtoms_id'] = $temp->id ;
                $chemo_assessment[$j]['name'] = $temp->name ;
                $chemo_assessment[$j]['answer'] = $value;
                $j++;
              }
            }
          }


           if(!empty($user_detail->cancer_assessments['cancer_covid_question'])){

            $user_detail->cancer_covid_question = $user_detail->cancer_assessments['cancer_covid_question'];

            //pr($user_detail->phq_9_detail);die;
             $tempar = array();
            foreach($user_detail->cancer_covid_question as $key => $value){

                //if(!empty($value)){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;


               // }

              }
              $user_detail->cancer_covid_question = $tempar;
            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
        }



           $cancer_assessments = array('assessment_history' => $assessment_history,'life_assessment' => $life_assessment,'chemo_assessment' => $chemo_assessment,'cancer_covid_question' =>$user_detail->cancer_covid_question);
              if(!empty($cancer_assessments))
              {
                $user_detail->cancer_assessments = $cancer_assessments;
              }
        }


        /*if(!empty($user_detail->followup_assessment))
        {

          $user_detail->followup_assessment = unserialize(Security::decrypt( base64_decode($user_detail->followup_assessment), SEC_KEY))  ;
          //pr($user_detail->cancer_assessments);
          $assessment_history = array();
          $life_assessment = array();
          $chemo_assessment = array();

          if(!empty($user_detail->followup_assessment['assessment_history']))
          {
            $i = 0;
          foreach($user_detail->followup_assessment['assessment_history'] as $key => $value){

              if(!empty($value)){

                $temp = $commonTable->find('all')->where(['id'=> $key])->first();
                $assessment_history[$i]['symtoms_id'] = $temp->id ;
                $assessment_history[$i]['name'] = $temp->name ;
                $assessment_history[$i]['answer'] = $value;
                $i++;
              }
            }
          }

          if(!empty($user_detail->followup_assessment['life_assessment']))
          {
            $j = 0;
          foreach($user_detail->followup_assessment['life_assessment'] as $key => $value){

              if(!empty($value)){

                $temp = $commonTable->find('all')->where(['id'=> $key])->first();
                $life_assessment[$j]['symtoms_id'] = $temp->id ;
                $life_assessment[$j]['name'] = $temp->name ;
                $life_assessment[$j]['answer'] = $value;
                $j++;
              }
            }
           }

           if(!empty($user_detail->followup_assessment['chemo_assessment']))
          {
            $j = 0;
          foreach($user_detail->followup_assessment['chemo_assessment'] as $key => $value){

              if(!empty($value)){

                $temp = $commonTable->find('all')->where(['id'=> $key])->first();
                $chemo_assessment[$j]['symtoms_id'] = $temp->id ;
                $chemo_assessment[$j]['name'] = $temp->name ;
                $chemo_assessment[$j]['answer'] = $value;
                $j++;
              }
            }
           }

           $followup_assessment = array('assessment_history' => $assessment_history,'life_assessment' => $life_assessment,'chemo_assessment' => $chemo_assessment);
              if(!empty($followup_assessment))
              {
                $user_detail->followup_assessment = $followup_assessment;
              }
        }*/


        if(!empty($user_detail->pre_op_post_op)){

            $user_detail->pre_op_post_op = unserialize(Security::decrypt( base64_decode($user_detail->pre_op_post_op), SEC_KEY))  ;

            //pr($user_detail->phq_9_detail);die;
             $tempar = array();
            foreach($user_detail->pre_op_post_op as $key => $value){

                //if(!empty($value)){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;


               // }

              }
              $user_detail->pre_op_post_op = $tempar;
            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
        }

        if(!empty($user_detail->cancer_followup_general_detail)){

            $user_detail->cancer_followup_general_detail = unserialize(Security::decrypt( base64_decode($user_detail->cancer_followup_general_detail), SEC_KEY))  ;

            //pr($user_detail->phq_9_detail);die;
             $tempar = array();
            foreach($user_detail->cancer_followup_general_detail as $key => $value){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;
              }
              $user_detail->cancer_followup_general_detail = $tempar;
        }

        if(!empty($user_detail->followup_medical_history_detail)){

            $user_detail->followup_medical_history_detail = unserialize(Security::decrypt( base64_decode($user_detail->followup_medical_history_detail), SEC_KEY))  ;

            //pr($user_detail->phq_9_detail);die;
             $tempar = array();
             foreach($user_detail->followup_medical_history_detail['followup_medical_history_detail'] as $key => $value){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;
              }
              if(!empty($user_detail->followup_medical_history_detail['medical_history']))
              {
                $tempar['medical_history'] = $user_detail->followup_medical_history_detail['medical_history'];
              }
              if(!empty($user_detail->followup_medical_history_detail['surgical_history']))
              {
                $tempar['surgical_history'] = $user_detail->followup_medical_history_detail['surgical_history'];
              }
              if(!empty($user_detail->followup_medical_history_detail['allergy_history']))
              {
                $tempar['allergy_history'] = $user_detail->followup_medical_history_detail['allergy_history'];
              }

              $user_detail->followup_medical_history_detail = $tempar;
        }

        /*naveen */


  //pr($user_detail);die;

//pr($user_detail->medication_refill_extra_details);die;
    return $user_detail ;


   }


// this function is for Follow up round only and it compare the previous chief compliant detial and current chief complaint detail of the patient

 public function compare_prev_recent_cc_detial_for_followup($user_detail = null, $prev_visit_user_detail = null){
// pr($user_detail);
// pr($prev_visit_user_detail);
// die;


$img_backpain_detial_q_arr = array(
'c4' => 'Neck pain (Cervical (c4-5))',
'c7' => 'Neck pain (Cervical (c7))',
'c6' => 'Neck pain (Cervical (c6))',
't1' => 'Upper back pain (Thoracic (t1))',
't2' => 'Upper back pain (Thoracic (t2))',
't3' => 'Upper back pain (Thoracic (t3))',
't4' => 'Upper back pain (Thoracic (t4))',
't5' => 'Upper back pain (Thoracic (t5))',
't6' => 'Upper back pain (Thoracic (t6))',
't7' => 'Upper back pain (Thoracic (t7))',
't8' => 'Upper back pain (Thoracic (t8))',
't9' => 'Upper back pain (Thoracic (t9))',
't10' => 'Upper back pain (Thoracic (t10))',
't11' => 'Upper back pain (Thoracic (t11))',
't12' => 'Upper back pain (Thoracic (t12))',
'l1' => 'Low back pain (Lumbar (l1))',
'l2' => 'Low back pain (Lumbar (l2))',
'l3' => 'Low back pain (Lumbar (l3))',
'l4' => 'Low back pain (Lumbar (l4))',
'l5' => 'Low back pain (Lumbar (l5))',
's1' => 'Low back pain (Sacral (s1))',
's2-3' =>  'Low back pain (Sacral (s2-3))',
'right1' =>  'Neck pain',
'right2' =>  'Neck pain',
'right3' => 'Upper back pain (Suprascapular (right))',
'right4' => 'Upper back pain (Interscapular (right))',
'right5' => 'Upper back pain (Scapular (right))',
'right6' => 'Upper back pain (Infrascapular (right))',
'right7' => 'Low back pain (Infrascapular (right))',
'right8' => 'Low back pain',
'right9' => 'Buttock pain (right)',
'right10' => 'Shoulder pain (Infrascapular (right))',
'right11' => 'Shoulder pain (Scapular (right))',
'right12' => 'Shoulder pain (Scapular (right))',
'right13' =>  'Shoulder pain',
'right14' =>  'Shoulder pain (Scapular (right))',
'right15' => 'Shoulder pain (Posterior deltoid (right))',
'right16' => 'Shoulder pain (Suprascapular (right))',
'left1' =>  'Neck pain',
'left2' => 'Neck pain (Suprascapular (left))',
'left3' => 'Upper back pain (Suprascapular (left))',
'left4' => 'Upper back pain (Interscapular (left))',
'left5' =>  'Upper back pain (Scapular (left))',
'left6' => 'Upper back pain (Infrascapular (left))',
'left7' => 'Low back pain (Infrascapular (left))',
'left8' => 'Low back pain',
'left9' => 'Buttock pain (left)',
'left10' => 'Shoulder pain (Infrascapular (left))',
'left11' => 'Shoulder pain (Interscapular (left))',
'left12' => 'Shoulder pain (Scapular (left))',
'left13' =>  'Shoulder pain (Scapular (left))',
'left14' => 'Shoulder pain (left)',
'left15' =>  'Shoulder pain (Posterior deltoid (left))',
'left16' =>  'Shoulder pain (Suprascapular (left))',
);




/* // these array not used according to new design
// following array is used in  for image realted question array(case 43)

$img_backpain_loc = array('topleft' => 'Shoulder pain (left)', 'topmid' => 'Cervical', 'topright' => 'Shoulder pain(right)', 'mid' => 'Upper back pain', 'midbottom' => 'Low back pain', 'bottomleft' => 'Buttockpain(left)',  'bottomright' => 'Buttockpain(right)');

$img_backpain_detail = array('topleft' => array('Suprascapular (left)', 'Posterior deltoid (left)'), 'topmid' => array('Cervical'), 'topright' => array('Posterior deltoid (right)', 'Suprascapular (right)'), 'mid' => array('Interscapular (left)', 'Scapular (left)', 'Scapular (right)', 'Interscapular (right)', 'Thoracic'), 'midbottom' => array('Infrascapular (left)', 'Sacral', 'Lumbar', 'Infrascapular (right)'), 'bottomleft' => array(), 'bottomright' => array() );

*/


      $prev_ccd = $prev_visit_user_detail->chief_compliant_details;
      $recent_ccd = $user_detail->chief_compliant_details;

if(is_array($prev_ccd)){  // this block will replace the key of this array as question id so that we can use that in the coming block
$temp_prev_ccd = array();
  foreach ($prev_ccd as $key => $value) {
    if(is_array($value)){
      foreach ($value as $k1 => $v1) {
         if(is_numeric($k1)){
            $temp_prev_ccd[$key][$v1['question_id']] = $v1;
         }else if(is_string($k1)){
            $temp_prev_ccd[$key][$k1] = $v1 ;
         }
      }

    }

  }

}

// pr($prev_ccd); echo '*****************';
// pr($temp_prev_ccd); die;

$prev_ccd = $temp_prev_ccd ;

// echo '****************************';
//   pr($prev_ccd);
//   echo '***************************';
//   pr($recent_ccd); die;
  $prev_recent_ccd = array();

  // get the prev and recent cc detials int the same array for comparison
  foreach ($recent_ccd as $key => $value) {

    // $prev_recent_ccd[$key] = $value ;
    if(is_array($value)){
      foreach ($value as $k1 => $v1) {

        if(is_numeric($k1)){
           // pr($v1); die;
          // $prev_recent_ccd[$key][$k1]['prev_answer'] = isset($prev_ccd[$key][$k1]['answer']) ? $prev_ccd[$key][$k1]['answer'] : '' ;
$prev_recent_ccd[$key][$v1['question_id']]['question_id'] = $v1['question_id'] ;
$prev_recent_ccd[$key][$v1['question_id']]['answer'] = $v1['answer'] ;
$prev_recent_ccd[$key][$v1['question_id']]['prev_answer'] = isset($prev_ccd[$key][$v1['question_id']]['answer']) ? $prev_ccd[$key][$v1['question_id']]['answer'] : '' ;
        }else {
          $prev_recent_ccd[$key][$k1] = $v1;

        }

      }
    }

  }
// echo 'hello';
//   pr($prev_recent_ccd); die;




// start
// pr($user_detail); die;
$recent_more_options = $user_detail->more_options ;
$prev_more_options = $prev_visit_user_detail->more_options ;

// Hi John, I compiled a summary for you
// I see that you want to see your doctor for a cough.
// The cough started 7 days ago.
$all_cc_name = '' ;
$layman_summar = '' ;
$case_19_34_35 = '';
// $all_cc_name = $user_detail->chief_compliant_id->name ;
// pr($all_cc_name);
// pr($user_detail->chief_compliant_details); die;
if(!empty($prev_recent_ccd) && is_array($prev_recent_ccd)){

// pr($user_detail->chief_compliant_details);die;
// You didn't try medication.
// Since then, it has improved.
// These things made it better: test.
// These things made it worse: testing.
// It occurred most often during the noon.

  foreach ($prev_recent_ccd as $key => $value) {

    $case_15_how_many_days = '';

    foreach ($value as $k => $singlelevel) {


      // pr($key); pr($k); die;
// pr($k); pr($singlelevel); die;
      // pr($k);
      // pr($singlelevel);
      if(is_string($k) && $k == 'cc_data'){

        $all_cc_name .=  $singlelevel->name.', '; // collect all cc
        // pr($all_cc_name); die;
  // $layman_summar .= " The following is for the chief complaint of ".strtolower($singlelevel->name).': ' ;

        if($user_detail->chief_compliant_id->id != $key){
            // $layman_summar .= " The following is for the chief complaint of ".strtolower($singlelevel->name).': ' ;


 // The patient is also presenting with whateverchiefcomplaint for howevermany days.
 $layman_summar .= 'The patient is also presenting with '.strtolower($singlelevel->name).' . ' ;

          }else{
            $layman_summar .= ' ';  // for adding space
          }


      } else {

// switch case start
// pr($singlelevel); die;

    switch ($singlelevel['question_id']) {
        case 1:
        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;
         $layman_summar .= "Patient localizes the pain to the ".strtolower($singlelevel['answer']).strtolower($prev_answer).'. ' ;
            break;
        case 2:
        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

             $layman_summar .= "The pain felt ".strtolower($singlelevel['answer']).$prev_answer.'. ';
            break;
        case 4:
     //[ALLEV] makes it better. [AGGR] makes it worse.
        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;


        // "better_factors" => "The following made it better: ", "worse_factors" => "The following made it worse: "
            // $ques_ans_4 = "The following made it better: ".$singlelevel['answer'].''.$prev_answer;
    // The patient states that the pain is better with exercise and worse with leaning over.

        // $ques_ans_4 = $singlelevel['answer'].''.$prev_answer.' makes it better';
        $ques_ans_4 = 'The patient states that the pain is better with '.strtolower($singlelevel['answer']).''.strtolower($prev_answer);
          if(!empty($ques_ans_5)){
            $layman_summar .= $ques_ans_4.''.$ques_ans_5.'. ';
            $ques_ans_4 = ''; $ques_ans_5 = '';
          }
            break;

        case 5:

        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

            // $ques_ans_5 = "The following made it worse: ".$singlelevel['answer'].''.$prev_answer;
 // The patient states that the pain is better with exercise and worse with leaning over.

        // $ques_ans_5 = $singlelevel['answer'].''.$prev_answer.'  makes it worse';

        $ques_ans_5 = ' and worse with '.strtolower($singlelevel['answer']).''.strtolower($prev_answer);

          if(!empty($ques_ans_4)){
            $layman_summar .= $ques_ans_4.''.$ques_ans_5.'. ';
            $ques_ans_4 = ''; $ques_ans_5 = '';
          }
            break;
        case 6:
       // pr($singlelevel);die;

        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;


           $layman_summar .= "It occurred most often: ".strtolower($singlelevel['answer']).''.strtolower($prev_answer).'. ';
            break;
        case 7:


        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;


          $layman_summar .= "The usual duration is ".$singlelevel['answer'].''.$prev_answer." minutes. ";
            break;
        case 8:

        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;
          $layman_summar .= "It occurs ".$singlelevel['answer'].''.$prev_answer." times in a day. ";
            break;
        case 9:

        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;
           $layman_summar .= stripos($singlelevel['answer'], 'about') !== false ?  "It feels about the same all day. ".''.$prev_answer  :  "It was worst during the: ".$singlelevel['answer'].''.$prev_answer.". " ;
            break;
        case 10:
// "rest_severity" => "Out of 10, the rest pain severity is ", "worst_severity" => "Out of 10, the worst pain severity is "


        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

          // $ques_ans_10 = "Out of 10, the best pain severity is ".$singlelevel['answer'].''.$prev_answer;
$ques_ans_10 = $singlelevel['answer'].''.$prev_answer;
          if(!empty($ques_ans_11)){
             // $layman_summar .= $ques_ans_10.'. '.$ques_ans_11.'. ';
$layman_summar .= "Out of 10, the pain at its best is a ".$ques_ans_10.", and a ".$ques_ans_11." at its worst. ";

             $ques_ans_10 = '' ; $ques_ans_11 = '' ;
          }
            break;
        case 11:

        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

          $ques_ans_11 = $singlelevel['answer'].''.$prev_answer;
          if(!empty($ques_ans_10)){
             // $layman_summar .= $ques_ans_10.'. '.$ques_ans_11.'. ';
$layman_summar .= "Out of 10, the pain at its best is a ".$ques_ans_10.", and a ".$ques_ans_11." at its worst. ";
             $ques_ans_10 = '' ; $ques_ans_11 = '' ;
          }
            break;
        case 12:


        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;


            $layman_summar .=  "The pain felt ".strtolower($singlelevel['answer']).''.strtolower($prev_answer).". " ;
            break;
        case 13:



        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.($singlelevel['prev_answer'] == 'Yes' ? "Patient tried medication "  : "Patient didn't try medication").')' ) ;


// "any_medication" => ["tried_medication" => array("yes" => "Patient tried medication", "no" => "Patient didn't try medication"), "medication_improvement" => array("yes" => "Since then, it has improved", "no" => "Since then, it hasn't improved")]
          $ques_ans_13 =   $singlelevel['answer'] == 'Yes' ? "Patient tried medication".$prev_answer."."  : "Patient didn't try medication".$prev_answer."." ;
          if(!empty($ques_ans_14)){
             $layman_summar .= $ques_ans_13.' '.$ques_ans_14.'. ';
             $ques_ans_13 = '' ; $ques_ans_14 = '' ;

          }
            break;
        case 14:


        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.($singlelevel['prev_answer'] == 'Yes' ? "it has improved"  : "it hasn't improved").')' ) ;



          $ques_ans_14 =  $singlelevel['answer'] == 'Yes' ? " Since then, it has improved".$prev_answer."."  : " Since then, it hasn't improved".$prev_answer."." ;
          if(!empty($ques_ans_13)){
             $layman_summar .= $ques_ans_13.''.$ques_ans_14.'. ';
             $ques_ans_13 = '' ; $ques_ans_14 = '' ;
          }
          break;
        case 15:


        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

        // below line commented on 22-03-19 as not required according to client
           // $layman_summar .=  "The symptom has lasted for: ".$singlelevel['answer'].''.$prev_answer.". " ;

           $case_15_how_many_days = $singlelevel['answer'];

           break;
        case 16:
// "Patient feels pain in " left/right/both " hand" (hands for both), "if_both": "left hand is worse"/"right hand is worse"/"both hands hurt about the same"


        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.(stripos($singlelevel['prev_answer'], 'both') !== FALSE ? 'bilateral' : $singlelevel['prev_answer'].'hand').')' ) ;



           $ques_ans_16 = "Patient feels pain in ".(stripos($singlelevel['answer'], 'both') !== FALSE ? 'bilateral' : $singlelevel['answer'].'hand').''.$prev_answer ;
           if(!empty($ques_ans_17)){
              $layman_summar .= $ques_ans_16.', '.$ques_ans_17.'. ';
              $ques_ans_16 = ''; $ques_ans_17 = '';
           }
           break;
        case 17:
// echo 'hello';
// pr($singlelevel);

        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;


if(stripos($singlelevel['answer'], 'left') !== FALSE) $ques_ans_17 =  'and the left hand is worse'.$prev_answer;
if(stripos($singlelevel['answer'], 'right') !== FALSE) $ques_ans_17 =  'and the right hand is worse'.$prev_answer;
if(stripos($singlelevel['answer'], 'about') !== FALSE) $ques_ans_17 =  'and the bilateral hurt about the same'.$prev_answer;

           if(!empty($ques_ans_16)){
              $layman_summar .= $ques_ans_16.' '.$ques_ans_17.'. ';
              $ques_ans_16 = ''; $ques_ans_17 = '';
           }
           break;
        case 18:





        // "The pain is on the " back/palm/both " and " thumb side/small finger side/both


// {"palm":"palmar surface", "back":"dorsal surface", "thumb side": "radial-sided", "small finger side": "ulnar-sided" } #both for back and palm would be "palmar and dorsal surface", both for thumb-side and small finger side would be "diffuse"
        // layman technical convesrsion
  $translate_case18 = array("palm"=>"palmar surface", "back"=>"dorsal surface", "thumb side" => "radial-sided", "small finger side"=> "ulnar-sided") ;




    $prev_answer = '';
    $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.(stripos($singlelevel['prev_answer'], 'both') !== FALSE ? 'palmar and dorsal surface' : (!empty($translate_case18[strtolower($singlelevel['prev_answer'])]) ? $translate_case18[strtolower($singlelevel['prev_answer'])] : $singlelevel['prev_answer'] )).')' ) ;


// below line is copied from below and pasted above for translation purpose
// (stripos($singlelevel['prev_answer'], 'both') !== FALSE ? 'palmar and dorsal surface' : (!empty($translate_case18[strtolower($singlelevel['prev_answer'])]) ? $translate_case18[strtolower($singlelevel['prev_answer'])] : $singlelevel['prev_answer'] ))


    // above translation related code is taken from the below code

   $first_case18 = (stripos($singlelevel['answer'], 'both') !== FALSE ? 'palmar and dorsal surface'.$prev_answer : (!empty($translate_case18[strtolower($singlelevel['answer'])]) ? $translate_case18[strtolower($singlelevel['answer'])].''.$prev_answer : $singlelevel['answer'].''.$prev_answer ));

// $recent_more_options
// $prev_more_options

        $prev_answer = '';

        $prev_answer = empty($prev_more_options[$key][18]) ? '' : ( $recent_more_options[$key][18] == $prev_more_options[$key][18] ? ' (no change)' : ' (from '.(!empty($prev_more_options[$key][18])  ? (stripos($prev_more_options[$key][18], 'both') !== FALSE  ? 'diffuse' : (!empty($translate_case18[strtolower($prev_more_options[$key][18])]) ? $translate_case18[strtolower($prev_more_options[$key][18])] : $prev_more_options[$key][18] ) ) : '').')' ) ;
        // in above code translation related code taken from below

// (!empty($prev_more_options[$key][18])  ? (stripos($prev_more_options[$key][18], 'both') !== FALSE  ? 'diffuse' : (!empty($translate_case18[strtolower($prev_more_options[$key][18])]) ? $translate_case18[strtolower($prev_more_options[$key][18])] : $prev_more_options[$key][18] ) ) : '')


   $second_case18 =(!empty($recent_more_options[$key][18])  ? (stripos($recent_more_options[$key][18], 'both') !== FALSE  ? 'diffuse'.$prev_answer : (!empty($translate_case18[strtolower($recent_more_options[$key][18])]) ? $translate_case18[strtolower($recent_more_options[$key][18])].''.$prev_answer : $recent_more_options[$key][18].''.$prev_answer ) ) : '');


        $layman_summar .=  "The pain is on the ".$first_case18.' and '.$second_case18.'. ' ;
           break;

        case 21:
 // "Patient has stiffness in " right/left/both/neither " hand and " right/left/both/neither " wrist"



    $prev_answer = '';
    $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.(stripos($singlelevel['prev_answer'], 'both') !== FALSE ? 'bilateral' : strtolower($singlelevel['prev_answer']). " hand").')' ) ;




           $ques_ans_21 =  "Patient has stiffness in " .(stripos($singlelevel['answer'], 'both') !== FALSE ? 'bilateral' : strtolower($singlelevel['answer']). " hand").''.$prev_answer;
            if(!empty($ques_ans_22)){
                $layman_summar .= $ques_ans_21.''.$ques_ans_22.'. ';
                $ques_ans_21 = ''; $ques_ans_22 = '';
            }
           break;
        case 22:
         // and " right/left/both/neither " wrist"



        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.(strtolower($singlelevel['prev_answer'])." ".(stripos($singlelevel['prev_answer'], 'both') !== FALSE ? 'wrists' : 'wrist')).')' ) ;



           $ques_ans_22 =  " and ".strtolower($singlelevel['answer'])." ".(stripos($singlelevel['answer'], 'both') !== FALSE ? 'wrists' : 'wrist').''.$prev_answer ;
             if(!empty($ques_ans_21)){
               $layman_summar .= $ques_ans_21.''.$ques_ans_22.'. ';
                $ques_ans_21 = ''; $ques_ans_22 = '';
             }

           break;
        case 23:
           // "The feeling is " on the palm/on the back/on the both/not on the hand " and " on the thumb/on the index finger/on the middle finger/on the ring finger/on the little finger/not on the fingers (or a combination of thumb/index/middle/ring/little fingers) "and " palm side forearm/back hand side forearm/not on the forearm


// {"thumb": "first digit", "index": "second digit", "middle": "third digit", "ring": "fourth digit", "little": "fifth digit", "palm":"palmar surface", "back":"dorsal surface"} #both for back and palm would be "palmar and dorsal surface"


        $translate_case23 = array("thumb"=> "first digit", "index"=> "second digit", "middle"=> "third digit", "ring"=> "fourth digit", "little"=> "fifth digit");
// pr($singlelevel['answer']);
        if(is_array($singlelevel['answer'])){
          foreach ($singlelevel['answer'] as $k19 => $v19) {
  $singlelevel['answer'][$k19] = !empty($translate_case23[strtolower($v19)]) ? $translate_case23[strtolower($v19)] : $v19 ;
          }


$singlelevel['answer'] = implode(', ', $singlelevel['answer']) ;



 $prev_answer = '';

 if(is_array($singlelevel['prev_answer'])){

          foreach ($singlelevel['prev_answer'] as $k19 => $v19) {
  $singlelevel['prev_answer'][$k19] = !empty($translate_case23[strtolower($v19)]) ? $translate_case23[strtolower($v19)] : $v19 ;
          }


$singlelevel['prev_answer'] = implode(', ', $singlelevel['prev_answer']) ;


        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;


 }



        }

        $ques_ans_23 = stripos($singlelevel['answer'], ',') !== false ? " and on the ".$singlelevel['answer']." fingers ".$prev_answer : (stripos($singlelevel['answer'], 'not') !== false ?  " and ".strtolower($singlelevel['answer']).''.strtolower($prev_answer).' ' :  " and on the ".strtolower($singlelevel['answer'])." finger ".$prev_answer  );

            // $ques_ans_23 = (is_array($singlelevel['answer']) ? " and on the ".implode(', ', $singlelevel['answer'])." fingers " : (stripos($singlelevel['answer'], 'not') !== false ? " and ".strtolower($singlelevel['answer']) : " and on the ".$singlelevel['answer']." finger " ));


            // .'' .(is_array($singlelevel['answer']) && count($singlelevel['answer'])> 1 ? ' fingers ' : ' finger ' );




              if(!empty($ques_ans_24) && !empty($ques_ans_25)){
                $layman_summar .= $ques_ans_24.''.$ques_ans_23.''.$ques_ans_25.'. ';
                $ques_ans_24 = ''; $ques_ans_23 = ''; $ques_ans_25 = '';
              }
           break;
        case 24:
           // "The feeling is " on the palm/on the back/on the both/not on the hand


  $translate_case24 = array("palm"=>"palmar surface", "back"=>"dorsal surface") ;



        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.(stripos($singlelevel['prev_answer'], 'both') !== FALSE ? 'palmar and dorsal surface' : (!empty($translate_case24[strtolower($singlelevel['prev_answer'])]) ? $translate_case24[strtolower($singlelevel['prev_answer'])] : (stripos($singlelevel['prev_answer'], 'not') !== FALSE ? strtolower($singlelevel['prev_answer']) : strtolower($singlelevel['prev_answer'])) )).')' ) ;


        // translation related code used in above code is copied from below code



   $first_case24 = (stripos($singlelevel['answer'], 'both') !== FALSE ? 'palmar and dorsal surface' : (!empty($translate_case24[strtolower($singlelevel['answer'])]) ? $translate_case24[strtolower($singlelevel['answer'])] : $singlelevel['answer'] ));

$first_case24 = (stripos($first_case24, 'not') !== FALSE ? "The feeling is  ".strtolower($first_case24) : "The feeling is on the ".strtolower($first_case24)).''.$prev_answer ;
          $ques_ans_24 = $first_case24  ;

               if(!empty($ques_ans_23) && !empty($ques_ans_25)){
                $layman_summar .= $ques_ans_24.''.$ques_ans_23.''.$ques_ans_25.'. ';
                $ques_ans_24 = ''; $ques_ans_23 = ''; $ques_ans_25 = '';
               }
           break;
        case 25:



        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

          // "and " palm side forearm/back hand side forearm/not on the forearm
          $ques_ans_25 = "and ".strtolower($singlelevel['answer']).''.$prev_answer ;
               if(!empty($ques_ans_23) && !empty($ques_ans_24)){
                $layman_summar .= $ques_ans_24.''.$ques_ans_23.''.$ques_ans_25.'. ';
                $ques_ans_24 = ''; $ques_ans_23 = ''; $ques_ans_25 = '';
               }
           break;

        case 27:
 // "There was no trauma/accident"/"There was trauma/accident and this happened: "
// now client need as below line
// The patient experienced trauma/accident associated with whatevertrauma.
        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.(!empty($singlelevel['prev_answer']) ? "The patient experienced trauma/accident associated with ".$singlelevel['prev_answer'] : "There was no trauma/accident").')' ) ;




           $layman_summar .=  (!empty($singlelevel['answer']) ? "The patient experienced trauma/accident associated with ".$singlelevel['answer'] : "There was no trauma/accident").$prev_answer.'. ' ;
           break;
        case 28:



        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;


          $ques_ans_28 = "The pain is described as ".$singlelevel['answer'].''.$prev_answer.", " ;

             if(!empty($ques_ans_29) && !empty($ques_ans_30)){
               $layman_summar .= $ques_ans_28.''.$ques_ans_29.''.$ques_ans_30.'. ';
               $ques_ans_28 = '' ; $ques_ans_29 = '' ; $ques_ans_30 = '' ;
             }

 // "The pain is " aching/burning/throbbing/shooting ", " constant/comes and goes " and " is the worst in the morning/is the worst in the afternoon/is the worst in the night/about the same all day


           break;
        case 29:




        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;


          $ques_ans_29 = $singlelevel['answer'].''.$prev_answer ;

             if(!empty($ques_ans_28) && !empty($ques_ans_30)){
               $layman_summar .= $ques_ans_28.''.$ques_ans_29.''.$ques_ans_30.'. ';
               $ques_ans_28 = '' ; $ques_ans_29 = '' ; $ques_ans_30 = '' ;
               // $layman_summar .= $ques_ans_28.''.$ques_ans_29.''.$ques_ans_30.'. ';
             }
           break;
        case 30:



        $prev_answer = '';

$singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);

        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.(stripos($singlelevel['prev_answer'], 'about') !== FALSE ? 'about the same all day' : $singlelevel['prev_answer']).')' ) ;


$singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);
          $ques_ans_30 = (stripos($singlelevel['answer'], 'about') !== FALSE ? ' and is about the same all day' : " and is the worst in the ". $singlelevel['answer']).''.$prev_answer ;

             if(!empty($ques_ans_28) && !empty($ques_ans_29)){
               // $layman_summar .= $ques_ans_28.''.$ques_ans_29.''.$ques_ans_30.'. ';
               $layman_summar .= $ques_ans_28.''.$ques_ans_29.''.$ques_ans_30.'. ';
               $ques_ans_28 = '' ; $ques_ans_29 = '' ; $ques_ans_30 = '' ;
             }
           break;
        case 31:


        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;


           $layman_summar .=  "The pain onset was: ".$singlelevel['answer'].''.$prev_answer.'. ' ;

           break;
        case 19:
// "The pain is on the " back/front/joints(knuckle/middle joint/finger-tip joint)/whole finger " in the " thumb/index/middle/ring/little (or multiple) " finger"/" fingers".

// {"thumb": "first digit", "index": "second digit", "middle": "third digit", "ring": "fourth digit", "little": "fifth digit"}
        $translate_case19 = array("thumb"=> "first digit", "index"=> "second digit", "middle"=> "third digit", "ring"=> "fourth digit", "little"=> "fifth digit");
// pr($singlelevel['answer']);
        if(is_array($singlelevel['answer'])){
          foreach ($singlelevel['answer'] as $k19 => $v19) {
  $singlelevel['answer'][$k19] = !empty($translate_case19[strtolower($v19)]) ? $translate_case19[strtolower($v19)] : $v19 ;
          }



        if(is_array($singlelevel['prev_answer'])){
          foreach ($singlelevel['prev_answer'] as $k19 => $v19) {
  $singlelevel['prev_answer'][$k19] = !empty($translate_case19[strtolower($v19)]) ? $translate_case19[strtolower($v19)] : $v19 ;
          }


        }


        }


        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.((is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']). (is_array($singlelevel['prev_answer']) && count($singlelevel['prev_answer']) > 1 ? ' fingers' : ' finger')).')' ) ;

          // code above is copied from below code


// pr($singlelevel['answer']); die;
            $ques_ans_19 =  " in the ".(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']). (is_array($singlelevel['answer']) && count($singlelevel['answer']) > 1 ? ' fingers' : ' finger'). ''. $prev_answer ;
            if(!empty($ques_ans_34)){

                $case_19_34_35 .= ' The pain is on the '.(stripos($ques_ans_34, 'joint') !== FALSE ? $ques_ans_34.' (***)' : $ques_ans_34).$ques_ans_19.'. ';
                $ques_ans_34 = '';  $ques_ans_19 = '' ;

            }
           break;
        case 34:
 // The pain is on the " back/front/joints(knuckle/middle joint/finger-tip joint)/whole finger


        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



           $ques_ans_34 = $singlelevel['answer'].''.$prev_answer ;
            if( !empty($ques_ans_19)){

                 $case_19_34_35 .= ' The pain is on the '.(stripos($ques_ans_34, 'joint') !== FALSE ? $ques_ans_34.' (***)' : $ques_ans_34).$ques_ans_19.'. ';
                $ques_ans_34 = '';  $ques_ans_19 = '' ;

            }

           break;
        case 35:
         // and " right/left/both/neither " wrist"


        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



           $ques_ans_35 =  $singlelevel['answer'].''.$prev_answer ;
             $case_19_34_35 = str_replace('***', $ques_ans_35, $case_19_34_35) ;
             // pr($case_19_34_35); die;
           break;


        case 36:

        // below code is formatting realted task for subquesiton's answer
        if(is_array($singlelevel['answer'])){
          $temp_36_ar = array();
          foreach ($singlelevel['answer'] as $k36 => $v36) {
              $t36 = explode('-', $v36);
             // $temp_36_ar[] = !empty($t36[1]) ? $t36[0].' ('.(stripos($t36[1], 'both') !== false ? 'bilateral' : $t36[1] ).')' : $t36[0] ;

             $temp_36_ar[] = !empty($t36[1]) ? (stripos($t36[1], 'both') !== false ? 'bilateral '. $t36[0] : $t36[1].' '. str_ireplace('feet', 'foot', rtrim($t36[0],'s')) ) : $t36[0] ;
          }
          $singlelevel['answer'] = $temp_36_ar ;
        }
        if(is_array($singlelevel['prev_answer'])){
          $temp_36_ar = array();
          foreach ($singlelevel['prev_answer'] as $k36 => $v36) {
              $t36 = explode('-', $v36);
             // $temp_36_ar[] = !empty($t36[1]) ? $t36[0].' ('.(stripos($t36[1], 'both') !== false ? 'bilateral' : $t36[1] ).')' : $t36[0] ;
             $temp_36_ar[] = !empty($t36[1]) ? (stripos($t36[1], 'both') !== false ? 'bilateral '. $t36[0] : $t36[1].' '. str_ireplace('feet', 'foot', rtrim($t36[0],'s')) ) : $t36[0] ;
          }
          $singlelevel['prev_answer'] = $temp_36_ar ;
        }


        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.strtolower(implode(', ', $singlelevel['prev_answer'])).')' ) ;
      $layman_summar .=  "The patient feels numbness in the ".strtolower(implode(', ', $singlelevel['answer'])).''.strtolower($prev_answer).'. ' ;
           break;
        case 37:

        // below code is formatting realted task for subquesiton's answer
        if(is_array($singlelevel['answer'])){
          $temp_36_ar = array();
          foreach ($singlelevel['answer'] as $k36 => $v36) {
              $t36 = explode('-', $v36);
             // $temp_36_ar[] = !empty($t36[1]) ? $t36[0].' ('.(stripos($t36[1], 'both') !== false ? 'bilateral' : $t36[1] ).')' : $t36[0] ;
             $temp_36_ar[] = !empty($t36[1]) ? (stripos($t36[1], 'both') !== false ? 'bilateral '. $t36[0] : $t36[1].' '.str_ireplace('feet', 'foot', rtrim($t36[0],'s')) ) : $t36[0] ;
          }
          $singlelevel['answer'] = $temp_36_ar ;
        }
        if(is_array($singlelevel['prev_answer'])){
          $temp_36_ar = array();
          foreach ($singlelevel['prev_answer'] as $k36 => $v36) {
              $t36 = explode('-', $v36);
             // $temp_36_ar[] = !empty($t36[1]) ? $t36[0].' ('.(stripos($t36[1], 'both') !== false ? 'bilateral' : $t36[1] ).')' : $t36[0] ;
             $temp_36_ar[] = !empty($t36[1]) ? (stripos($t36[1], 'both') !== false ? 'bilateral '. $t36[0] : $t36[1].' '.str_ireplace('feet', 'foot', rtrim($t36[0],'s')) ) : $t36[0] ;
          }
          $singlelevel['prev_answer'] = $temp_36_ar ;
        }



        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.strtolower(implode(', ', $singlelevel['prev_answer'])).')' ) ;


     $layman_summar .=  "The patient feels tingling in the ".strtolower(implode(', ', $singlelevel['answer'])).''.strtolower($prev_answer).'. ' ;

           break;
        case 38:

        // below code is formatting realted task for subquesiton's answer
        if(is_array($singlelevel['answer'])){
          $temp_36_ar = array();
          foreach ($singlelevel['answer'] as $k36 => $v36) {
              $t36 = explode('-', $v36);
             // $temp_36_ar[] = !empty($t36[1]) ? $t36[0].' ('.(stripos($t36[1], 'both') !== false ? 'bilateral' : $t36[1] ).')' : $t36[0] ;
             $temp_36_ar[] = !empty($t36[1]) ? (stripos($t36[1], 'both') !== false ? 'bilateral '. $t36[0] : $t36[1].' '.str_ireplace('feet', 'foot', rtrim($t36[0],'s')) ) : $t36[0] ;
          }
          $singlelevel['answer'] = $temp_36_ar ;
        }
        if(is_array($singlelevel['prev_answer'])){
          $temp_36_ar = array();
          foreach ($singlelevel['prev_answer'] as $k36 => $v36) {
              $t36 = explode('-', $v36);
             // $temp_36_ar[] = !empty($t36[1]) ? $t36[0].' ('.(stripos($t36[1], 'both') !== false ? 'bilateral' : $t36[1] ).')' : $t36[0] ;
             $temp_36_ar[] = !empty($t36[1]) ? (stripos($t36[1], 'both') !== false ? 'bilateral '. $t36[0] : $t36[1].' '.str_ireplace('feet', 'foot', rtrim($t36[0],'s')) ) : $t36[0] ;

          }
          $singlelevel['prev_answer'] = $temp_36_ar ;
        }



        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.strtolower(implode(', ', $singlelevel['prev_answer'])).')' ) ;

           $layman_summar .=  "The patient feels weakness in the ".strtolower(implode(', ', $singlelevel['answer'])).''.strtolower($prev_answer).'. ' ;
           break;
        case 39:

        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.str_ireplace("radiating","radiating**39prev**",strtolower(implode(', ', $singlelevel['prev_answer']))).')' ) ; // str_ireplace for radiating

       // str_ireplace("radiating","radiating**39**",strtolower(implode(', ', $singlelevel['prev_answer']))) ;
        $ques_ans_39 = "The pain is described as ".str_ireplace("radiating","radiating**39**",strtolower(implode(', ', $singlelevel['answer']))).''.strtolower($prev_answer).", " ;

        $ques_ans_39 = stripos($ques_ans_39, 'none') ? "The pain is described as " : $ques_ans_39 ; // In case of "none of the above", we remove the option

             if(!empty($ques_ans_41) && !empty($ques_ans_42)){

if(!empty($ques_ans_40_prev)) $ques_ans_39 = str_ireplace("**39prev**"," (".$ques_ans_40_prev.")",$ques_ans_39) ;
if(!empty($ques_ans_40_new)) $ques_ans_39 = str_ireplace("**39**"," (".$ques_ans_40_new.")",$ques_ans_39) ;
 $ques_ans_39 = str_ireplace("**39prev**","",$ques_ans_39) ;
  $ques_ans_39 = str_ireplace("**39**","",$ques_ans_39) ;

               $layman_summar .= $ques_ans_39.''.$ques_ans_41.''.$ques_ans_42.'. ';
               $ques_ans_39 = '' ; $ques_ans_41 = '' ; $ques_ans_42 = '' ;
             }
           break;

        case 40:

         $ques_ans_40_prev = $singlelevel['prev_answer'];
          $ques_ans_40_new = $singlelevel['answer'];

// pr($ques_ans_40_prev);
// pr($ques_ans_40_new); die;
        break;


        case 41:

        $prev_answer = '';
        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;
          $ques_ans_41 = strtolower($singlelevel['answer']).''.strtolower($prev_answer)  ;

             if(!empty($ques_ans_39) && !empty($ques_ans_42)){

if(!empty($ques_ans_40_prev)) $ques_ans_39 = str_ireplace("**39prev**"," (".$ques_ans_40_prev.")",$ques_ans_39) ;
if(!empty($ques_ans_40_new)) $ques_ans_39 = str_ireplace("**39**"," (".$ques_ans_40_new.")",$ques_ans_39) ;
 $ques_ans_39 = str_ireplace("**39prev**","",$ques_ans_39) ;
  $ques_ans_39 = str_ireplace("**39**","",$ques_ans_39) ;

               $layman_summar .= $ques_ans_39.''.$ques_ans_41.''.$ques_ans_42.'. ';
               $ques_ans_39 = '' ; $ques_ans_41 = '' ; $ques_ans_42 = '' ;
             }
           break;
        case 42:

        $prev_answer = '';
// now we use checkbox instead of radio button
    $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);

        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.(stripos($singlelevel['prev_answer'], 'about') !== FALSE ? 'about the same all day' : $singlelevel['prev_answer']).')' ) ;



    $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);

          $ques_ans_42 = (stripos($singlelevel['answer'], 'about') !== FALSE ? ' and is about the same all day' : " and is the worst in the ". strtolower($singlelevel['answer']) ).''.$prev_answer  ;
             if(!empty($ques_ans_39) && !empty($ques_ans_41)){

if(!empty($ques_ans_40_prev)) $ques_ans_39 = str_ireplace("**39prev**"," (".$ques_ans_40_prev.")",$ques_ans_39) ;
if(!empty($ques_ans_40_new)) $ques_ans_39 = str_ireplace("**39**"," (".$ques_ans_40_new.")",$ques_ans_39) ;
 $ques_ans_39 = str_ireplace("**39prev**","",$ques_ans_39) ;
  $ques_ans_39 = str_ireplace("**39**","",$ques_ans_39) ;

               $layman_summar .= $ques_ans_39.''.$ques_ans_41.''.$ques_ans_42.'. ';
               $ques_ans_39 = '' ; $ques_ans_41 = '' ; $ques_ans_42 = '' ;
             }
           break;

           case 71 :

                        $prev_answer = '';

                            $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);

                            $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                              $layman_summar .= "I have noticed symptoms starting after eating ". $singlelevel['answer'].''.$prev_answer .". ";
                        break;

                    case 72:

                            $prev_answer = '';
                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].' times)' ) ;
                            $layman_summar .= "It has occurred: ".$singlelevel['answer']." times ".$prev_answer.'. ' ;
                            break;

                    case 73:

                            $prev_answer = '';
                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;
                            $layman_summar .= $singlelevel['answer'].$prev_answer.', I having trouble drinking liquids or swallowing solid food. ' ;

                            $question_73 = $singlelevel['answer'];
                            break;

                     case 74:

                            $prev_answer = '';
                            $question_74 = '';
                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;
                            if(isset($question_73) && $question_73 == 'Yes'){
                                if($singlelevel['answer'] == 'Liquids only'){

                                    $question_74 = $prev_answer;

                                }else{

                                     $layman_summar .= $singlelevel['answer'].$prev_answer.' having trouble swallowing. ' ;
                                }
                            }

                            break;

                    case 75:

                        $prev_answer = '';

                            $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);

                            $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                            if(isset($question_74) && $question_74 == 'Liquids only'){

                              $layman_summar .= $singlelevel['answer'].''.$prev_answer ."having trouble swallowing. ";
                            }
                        break;

                    case 76 :

                            $prev_answer = '';
                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                            $question_76 = $singlelevel['answer'].$prev_answer;

                        break;

                    case 77 :

                            $arr = array(

                                0 => 'How often',
                                1 => 'Every day',
                                2 => 'Every other day',
                                3 => 'per week'

                              );

                            $prev_answer = '';
                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$arr[$singlelevel['prev_answer']].')' ) ;
                           // pr($singlelevel['answer']);die;
                            $layman_summar .= $arr[$singlelevel['answer']].$prev_answer." ".(!empty($question_76) ? $question_76 : "")." times go for a number two. ";

                            break;

                    case 78 :

                            $prev_answer = '';
                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;
                            $layman_summar .= $singlelevel['answer'].$prev_answer.' recently traveled out of the country.' ;
                            break;

                    case 79 :

                            $prev_answer = '';
                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;
                            $layman_summar .= $singlelevel['answer'].$prev_answer.' country recently traveled. ' ;
                            break;

                     case 80 :

                        $prev_answer = '';

                            $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);

                            $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                              $layman_summar .= $singlelevel['answer'].''.$prev_answer ." medications recently started. ";
                        break;

                    case 81 :

                        $prev_answer = '';

                            $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);

                            $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                              $layman_summar .= $singlelevel['answer'].''.$prev_answer ." fruits eat. ";
                        break;

                    case 82 :

                            $prev_answer = '';
                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;
                            $layman_summar .= $singlelevel['answer'].$prev_answer.' glasses water dring in a day. ' ;
                            break;

                    case 83:

                        $prev_answer = '';

                            $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);

                            $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                              $layman_summar .= $singlelevel['answer'].''.$prev_answer ." medications recently started. ";
                        break;

                    case 84:

                          $prev_answer = '';
                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                            $layman_summar .= $singlelevel['answer'].$prev_answer.' Times per week notice blood in stool. ' ;
                            break;
                    case 85:

                            $prev_answer = '';
                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                            $layman_summar .= $singlelevel['answer'].$prev_answer.', I have notice bright red streaks of blood on the toilet paper. ' ;
                            break;
                    case 86:

                            $prev_answer = '';
                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                            $layman_summar .= $singlelevel['answer'].$prev_answer.' is the color of stool. ' ;
                            break;

                    case 87:

                        $prev_answer = '';

                            $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);

                            $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                              $layman_summar .= $singlelevel['answer'].''.$prev_answer ." medications recently started. ";
                        break;

                    case 88 :

                            $prev_answer = '';
                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;
                            $layman_summar .= $singlelevel['answer'].$prev_answer.', I was eat at restaurants within 24 hours of symptoms. ' ;
                            break;
                    case 89 :

                            $prev_answer = '';
                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;
                            $question_89 = $singlelevel['answer'].$prev_answer;

                            break;
                    case 90 :

                            $prev_answer = '';

                            $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);

                            $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                            if(isset($question_89)){

                               $layman_summar .= "I was eat ".$question_89." at ".(is_array($singlelevel['answer']) ? implode(", ", $singlelevel['answer']) : $singlelevel['answer']).$prev_answer.". ";
                            }
                            break;

                    case 91 :

                            $prev_answer = '';
                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;
                            $layman_summar .= $singlelevel['answer'].$prev_answer.', I Have been in contact with any sick children within 24 hours of symptoms starting. ' ;
                            break;
                    case 92 :

                            $prev_answer = '';
                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;
                            $layman_summar .= $singlelevel['answer'].$prev_answer.' pregnant. ' ;
                            break;

                     case 146 :

                          $question_146 = array(

                                'worse' => 'aggravate',
                                'better' => 'alleviate',
                                'about the same' => 'same'

                              );

                          $layman_summar .= "Overall, you feels ".$question_146[$singlelevel['answer']]." since your last visit. ";
                          break;
                    case 147 :

                          if(!empty($singlelevel['answer'])){
                              $layman_summar .= ucfirst($singlelevel['answer'])." makes aggravate. ";
                          }
                          break;

                    case 148 :

                          if(!empty($singlelevel['answer'])){

                              $layman_summar .= ucfirst($singlelevel['answer'])." makes alleviate. ";
                            }
                          break;

                    case 149 :

                          $layman_summar .= $singlelevel['answer'].", you have been vomiting. ";
                          break;

                    case 150 :

                          $layman_summar .= $singlelevel['answer']." times you vomited since your last visit. ";
                          break;
                    case 151 :

                          $layman_summar .= $singlelevel['answer'].", you have seen bright red blood. ";
                          break;
                    case 152 :

                          $layman_summar .= $singlelevel['answer'].", you have seen stuff that looks like coffee grounds. ";
                          break;
        case 43:

        $prev_answer = '';
        $temp_str_43 = '';
        // pr($singlelevel); die;
        if(!empty($singlelevel['answer'])){

          if(!empty($singlelevel['prev_answer'])){

            if($singlelevel['answer'] == $singlelevel['prev_answer']){

               $prev_answer = ' (no change)' ;
// $prev_answer_temp_str_43 == $prev_answer;
            }else{


            $singlelevel['prev_answer'] = explode(',', $singlelevel['prev_answer']) ;
             $temp_str_43 = '';
            foreach ($singlelevel['prev_answer'] as $k43 => $v43) {
              $temp_str_43 .= isset($img_backpain_detial_q_arr[$v43]) ? $img_backpain_detial_q_arr[$v43].', ' : "" ;
            }

            $temp_str_43 = rtrim($temp_str_43, ', ');
 // $prev_answer_temp_str_43 = ' (from '.$temp_str_43.')';

$prev_answer_temp_str_43 = $temp_str_43;

            }



          }

            $singlelevel['answer'] = explode(',', $singlelevel['answer']) ;
 $temp_str_43 = '';
            foreach ($singlelevel['answer'] as $k43 => $v43) {
              $temp_str_43 .= isset($img_backpain_detial_q_arr[$v43]) ? $img_backpain_detial_q_arr[$v43].', ' : "" ;
            }

            $temp_str_43 = rtrim($temp_str_43, ', ');

         $current_answer_temp_str_43 = $temp_str_43;
         // pr($prev_answer);
         // pr($singlelevel['answer']); die;


//**************************** code start for redundancy removal for prev answer start

// pr($prev_answer_temp_str_43); die;
if(!empty($prev_answer_temp_str_43)){
$temp_str_43 = $prev_answer_temp_str_43;
$temp_summar = '';

$ttemp = array();
if(stripos($temp_str_43, 'Neck pain') !== false ){
    $temp_summar .= 'Neck pain (';
  if(stripos($temp_str_43, 'Cervical') !== false ){
    // $temp_summar .= ' (Cervical (' ;
    if(stripos($temp_str_43, 'c4-5') !== false ){ $ttemp[] = 'C4'; $ttemp[] = 'C5'; }
    if(stripos($temp_str_43, 'c7') !== false ){ $ttemp[] = 'C7'; }
    if(stripos($temp_str_43, 'c6') !== false ){ $ttemp[] = 'C6'; }

sort($ttemp);


if(count(array_intersect($ttemp, array('C4','C5','C6','C7'))) == 4){
    $ttemp = 'C4-7';
}elseif(count(array_intersect($ttemp, array('C4','C5','C6'))) == 3){
$remain_ar = array_diff($ttemp, array('C4','C5','C6'));
 $ttemp = empty($remain_ar) ? 'C4-6' : 'C4-6, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('C4','C5'))) == 2){
$remain_ar = array_diff($ttemp, array('C4','C5'));
 $ttemp = empty($remain_ar) ? 'C4-5' : 'C4-5, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('C5','C6','C7'))) == 3){
$remain_ar = array_diff($ttemp, array('C5','C6','C7'));
 $ttemp = empty($remain_ar) ? 'C5-7' : 'C5-7, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('C5','C6'))) == 2){
$remain_ar = array_diff($ttemp, array('C5','C6'));
 $ttemp = empty($remain_ar) ? 'C5-6' : 'C5-6, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('C6','C7'))) == 2){
$remain_ar = array_diff($ttemp, array('C6','C7'));
 $ttemp = empty($remain_ar) ? 'C6-7' : 'C6-7, '.implode(', ', $remain_ar);
}else{

 $ttemp = implode(', ', $ttemp);

}
// pr($ttemp); die;
     $ttemp = rtrim($ttemp, ', ');
     // $temp_summar .= $ttemp.'), ';
     $temp_summar .= $ttemp.', ';
     $ttemp = '';
  }

   if(stripos($temp_str_43, 'Neck pain (Suprascapular (left))') !== false ){ $temp_summar .= 'Suprascapular (left)' ; }
    $temp_summar = rtrim($temp_summar, ', ');
   $temp_summar .= '), ';

}
if(stripos($temp_str_43, 'Upper back pain') !== false ){
    $temp_summar .= 'Upper back pain (' ;
  if(stripos($temp_str_43, 'Thoracic') !== false ){
      // $temp_summar .= ' (Thoracic(';
      $ttemp = array();
      if(stripos($temp_str_43, 't1') !== false ) $ttemp[] = 'T1';if(stripos($temp_str_43, 't2') !== false ) $ttemp[] = 'T2';if(stripos($temp_str_43, 't3') !== false ) $ttemp[] = 'T3';if(stripos($temp_str_43, 't4') !== false ) $ttemp[] = 'T4';if(stripos($temp_str_43, 't5') !== false ) $ttemp[] = 'T5';if(stripos($temp_str_43, 't6') !== false ) $ttemp[] = 'T6';if(stripos($temp_str_43, 't7') !== false ) $ttemp[] = 'T7';if(stripos($temp_str_43, 't8') !== false ) $ttemp[] = 'T8';if(stripos($temp_str_43, 't9') !== false ) $ttemp[] = 'T9';if(stripos($temp_str_43, 't10') !== false ) $ttemp[] = 'T10';if(stripos($temp_str_43, 't11') !== false ) $ttemp[] = 'T11';if(stripos($temp_str_43, 't12') !== false ) $ttemp[] = 'T12';

$tttemp = array();
foreach ($ttemp as $kt1 => $vt1) {
  $tttemp[] = (int) filter_var($vt1, FILTER_SANITIZE_NUMBER_INT);
}
sort($tttemp);
$ftemp = 'T';
// pr($tttemp); die;
// $tttemp= array('1','3','5','7','8','9','11','12');

foreach ($tttemp as $kt2 => $vt2) {
  if(!isset($prev_vt2)){  // for first element
      if(isset($tttemp[$kt2+1]) && ($tttemp[$kt2+1]-1 == $vt2)){ // if range after first element
         $ftemp .= $vt2.'-';
      }else{
         $ftemp .= $vt2.', ';
      }
  }elseif(($prev_vt2+1) != $vt2){  // if range completed

    if(!empty($start_vt2) && ($start_vt2 == $prev_vt2)){ // for alone element (not range)
       $ftemp .= 'T'.$prev_vt2.', ';

    }elseif(!empty($start_vt2)){  // for range
     $ftemp .=  substr($ftemp, -1) == 'T' ? '' : 'T';
       $ftemp .= $start_vt2.'-'.$prev_vt2.', ';
    }elseif((empty($start_vt2) && !empty($prev_vt2)) && (strpos($ftemp, '-') !== false)){ // if range after first element
      $ftemp .= $prev_vt2.', ';
    }
    if(!isset($tttemp[$kt2+1]))   $ftemp .= 'T'.$vt2;

      $start_vt2 = $vt2 ;
  }else{  // if iterateing through range

    if(!isset($tttemp[$kt2+1])){  // for last element
      if(empty($start_vt2)){  // for subsequest element range from first to last
          $ftemp .= $vt2;
      }else{
          $ftemp .= 'T'.$start_vt2.'-'.$vt2;
      }

    }

  }
  $prev_vt2 = $vt2;
}
// echo 'hi';
// pr($ftemp); die;
$ttemp = strtoupper($ftemp) ; // $ftemp;
      if(!empty($ttemp)){
        $ttemp = rtrim($ttemp, ', ');
         // $temp_summar .= $ttemp.'), ';
        $temp_summar .= $ttemp.', ';
          $ttemp = '';
           }

   }

   if((stripos($temp_str_43, 'Upper back pain (Suprascapular (right))') !== false ) && (stripos($temp_str_43, 'Upper back pain (Suprascapular (left))') !== false )){
      $temp_summar .= 'Suprascapular (bilateral), ' ;
   }else {
    if(stripos($temp_str_43, 'Upper back pain (Suprascapular (right))') !== false ){ $temp_summar .= 'Suprascapular (right), ' ; }
    if(stripos($temp_str_43, 'Upper back pain (Suprascapular (left))') !== false ){ $temp_summar .= 'Suprascapular (left), ' ; }
   }


  if((stripos($temp_str_43, 'Upper back pain (Interscapular (right))') !== false ) && (stripos($temp_str_43, 'Upper back pain (Interscapular (left))') !== false )){
      $temp_summar .= 'Interscapular (bilateral), ' ;
  }else{
     if(stripos($temp_str_43, 'Upper back pain (Interscapular (right))') !== false ){ $temp_summar .= 'Interscapular (right), ' ; }
     if(stripos($temp_str_43, 'Upper back pain (Interscapular (left))') !== false ){ $temp_summar .= 'Interscapular (left), ' ; }
  }


  if((stripos($temp_str_43, 'Upper back pain (Scapular (right))') !== false )  && (stripos($temp_str_43, 'Upper back pain (Scapular (left))') !== false )){
    $temp_summar .= 'Scapular (bilateral), ' ;
  }else{
    if(stripos($temp_str_43, 'Upper back pain (Scapular (right))') !== false ){ $temp_summar .= 'Scapular (right), ' ; }
    if(stripos($temp_str_43, 'Upper back pain (Scapular (left))') !== false ){ $temp_summar .= 'Scapular (left), ' ; }
  }


  if((stripos($temp_str_43, 'Upper back pain (Infrascapular (right))') !== false ) && (stripos($temp_str_43, 'Upper back pain (Infrascapular (left))') !== false )){
    $temp_summar .= 'Infrascapular (bilateral), ' ;
  }else{

    if(stripos($temp_str_43, 'Upper back pain (Infrascapular (right))') !== false ){ $temp_summar .= 'Infrascapular (right), ' ; }
    if(stripos($temp_str_43, 'Upper back pain (Infrascapular (left))') !== false ){ $temp_summar .= 'Infrascapular (left), ' ; }

  }


  $temp_summar = rtrim($temp_summar, ', ');
  $temp_summar .= '), ';
 }


if(stripos($temp_str_43, 'Low back pain') !== false ){

  $temp_summar .= 'Low back pain (' ;
  if(stripos($temp_str_43, 'Lumbar') !== false ){
     // $temp_summar .= ' (Lumbar (' ;
     $ttemp = array();
     if(stripos($temp_str_43, 'l1') !== false ) $ttemp[] = 'L1';if(stripos($temp_str_43, 'l2') !== false ) $ttemp[] = 'L2';if(stripos($temp_str_43, 'l3') !== false ) $ttemp[] = 'L3';if(stripos($temp_str_43, 'l4') !== false ) $ttemp[] = 'L4';if(stripos($temp_str_43, 'l5') !== false ) $ttemp[] = 'L5';

sort($ttemp);
// $ttemp = array('L4','L2','L5');
if(count(array_intersect($ttemp, array('L1','L2','L3','L4','L5'))) == 5){
    $ttemp = 'L1-5';
}elseif(count(array_intersect($ttemp, array('L1','L2','L3','L4'))) == 4){
   $remain_ar = array_diff($ttemp, array('L1','L2','L3','L4'));
   $ttemp = empty($remain_ar) ? 'L1-4' : 'L1-4, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L1','L2','L3'))) == 3){
   $remain_ar = array_diff($ttemp, array('L1','L2','L3'));
   $ttemp = empty($remain_ar) ? 'L1-3' : 'L1-3, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L1','L2'))) == 2){
   $remain_ar = array_diff($ttemp, array('L1','L2'));
   $ttemp = empty($remain_ar) ? 'L1-2' : 'L1-2, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L2','L3','L4','L5'))) == 4){
   $remain_ar = array_diff($ttemp, array('L2','L3','L4','L5'));
   $ttemp = empty($remain_ar) ? 'L2-5' : 'L2-5, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L2','L3','L4'))) == 3){
   $remain_ar = array_diff($ttemp, array('L2','L3','L4'));
   $ttemp = empty($remain_ar) ? 'L2-4' : 'L2-4, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L2','L3'))) == 2){
   $remain_ar = array_diff($ttemp, array('L2','L3'));
   $ttemp = empty($remain_ar) ? 'L2-3' : 'L2-3, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L3','L4','L5'))) == 3){
   $remain_ar = array_diff($ttemp, array('L3','L4','L5'));
   $ttemp = empty($remain_ar) ? 'L3-5' : 'L3-5, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L3','L4'))) == 2){
   $remain_ar = array_diff($ttemp, array('L3','L4'));
   $ttemp = empty($remain_ar) ? 'L3-4' : 'L3-4, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L4','L5'))) == 2){
   $remain_ar = array_diff($ttemp, array('L4','L5'));
   $ttemp = empty($remain_ar) ? 'L4-5' : 'L4-5, '.implode(', ', $remain_ar);
}else{
   $ttemp = implode(', ', $ttemp);

}

// pr($ttemp); die;

     if(!empty($ttemp)){
      $ttemp = rtrim($ttemp, ', ');
       // $temp_summar .= $ttemp.'), ';
      $temp_summar .= $ttemp.', ';
       $ttemp = ''; }

  }

  if(stripos($temp_str_43, 'Sacral') !== false ){
     // $temp_summar .= '(Sacral (' ;
     $ttemp = array();
    if(stripos($temp_str_43, 's1') !== false ) $ttemp[] = 'S1';if(stripos($temp_str_43, 's2-3') !== false ){  $ttemp[] = 'S2';  $ttemp[] = 'S3';}
sort($ttemp);

if(count(array_intersect($ttemp, array('S1','S2','S3'))) == 3){
    $ttemp = 'S1-3';
}elseif(count(array_intersect($ttemp, array('S1','S2'))) == 2){
$remain_ar = array_diff($ttemp, array('S1','S2'));
 $ttemp = empty($remain_ar) ? 'S1-2' : 'S1-2, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('S2','S3'))) == 2){
$remain_ar = array_diff($ttemp, array('S2','S3'));
 $ttemp = empty($remain_ar) ? 'S2-3' : 'S2-3, '.implode(', ', $remain_ar);

}else{
   $ttemp = implode(', ', $ttemp);
}
// pr($ttemp); die;
     if(!empty($ttemp)){
      $ttemp = rtrim($ttemp, ', ');
      // $temp_summar .= $ttemp.')), ';
       $temp_summar .= $ttemp.', ';
      $ttemp = ''; }

  }

  if((stripos($temp_str_43, 'Low back pain (Infrascapular (right))') !== false ) && (stripos($temp_str_43, 'Low back pain (Infrascapular (left))') !== false )){
     $temp_summar .= 'Infrascapular (bilateral), ' ;
  }else{
    if(stripos($temp_str_43, 'Low back pain (Infrascapular (right))') !== false ){ $temp_summar .= 'Infrascapular (right), ' ; }
    if(stripos($temp_str_43, 'Low back pain (Infrascapular (left))') !== false ){ $temp_summar .= 'Infrascapular (left), ' ; }
  }


  $temp_summar = rtrim($temp_summar, ', ');

  $temp_summar .= '), ';


}

  if((stripos($temp_str_43, 'Buttock pain (right)') !== false ) && (stripos($temp_str_43, 'Buttock pain (left)') !== false )){
    $temp_summar .= 'Buttock pain (bilateral), ' ;
  }else{
      if(stripos($temp_str_43, 'Buttock pain (right)') !== false ){ $temp_summar .= 'Buttock pain (right), ' ; }
      if(stripos($temp_str_43, 'Buttock pain (left)') !== false ){ $temp_summar .= 'Buttock pain (left), ' ; }
  }




if(stripos($temp_str_43, 'Shoulder pain') !== false ){

  $temp_summar .= 'Shoulder pain (' ;

if(stripos($temp_str_43, 'Shoulder pain (Infrascapular (right))') !== false  && stripos($temp_str_43, 'Shoulder pain (Infrascapular (left))') !== false ){
   $temp_summar .= 'Infrascapular (bilateral), ' ;
}else{
  if(stripos($temp_str_43, 'Shoulder pain (Infrascapular (right))') !== false ){ $temp_summar .= 'Infrascapular (right), ' ; }

  if(stripos($temp_str_43, 'Shoulder pain (Infrascapular (left))') !== false ){ $temp_summar .= 'Infrascapular (left), ' ; }
}

if(stripos($temp_str_43, 'Shoulder pain (Scapular (right))') !== false  && stripos($temp_str_43, 'Shoulder pain (Scapular (left))') !== false ){
  $temp_summar .= 'Scapular (bilateral), ' ;
}else{

  if(stripos($temp_str_43, 'Shoulder pain (Scapular (right))') !== false ){ $temp_summar .= 'Scapular (right), ' ; }
  if(stripos($temp_str_43, 'Shoulder pain (Scapular (left))') !== false ){ $temp_summar .= 'Scapular (left), ' ; }
}

if(stripos($temp_str_43, '(Posterior deltoid (right))') !== false && stripos($temp_str_43, 'Posterior deltoid (left)') !== false ){
   $temp_summar .= 'Posterior deltoid (bilateral), ' ;
}else{
  if(stripos($temp_str_43, '(Posterior deltoid (right))') !== false ){ $temp_summar .= 'Posterior deltoid (right), ' ; }

  if(stripos($temp_str_43, 'Posterior deltoid (left)') !== false ){ $temp_summar .= 'Posterior deltoid (left), ' ; }
}

if(stripos($temp_str_43, 'Shoulder pain (Suprascapular (right))') !== false && stripos($temp_str_43, 'Shoulder pain (Suprascapular (left))') !== false ){
   $temp_summar .= 'Suprascapular (bilateral), ' ;
}else{

  if(stripos($temp_str_43, 'Shoulder pain (Suprascapular (right))') !== false ){ $temp_summar .= 'Suprascapular (right), ' ; }

  if(stripos($temp_str_43, 'Shoulder pain (Suprascapular (left))') !== false ){ $temp_summar .= 'Suprascapular (left), ' ; }

}

  // if(stripos($temp_str_43, 'Shoulder pain (Interscapular (left))') !== false ){ $temp_summar .= 'Interscapular (left), ' ; }  // we commented this because we think  Interscapular (left)  is in Upper back pain



  $temp_summar = rtrim($temp_summar, ', ');

  $temp_summar .= '), ';

}

$temp_summar = rtrim($temp_summar, ', ');
$prev_answer_temp_str_43 = ' (from '.$temp_summar.')';

}else {
 $prev_answer_temp_str_43 =  $prev_answer ;  // if not set assign (no change )

}
// pr($temp_str_43); die;
// echo 'hello';
// pr($temp_summar); die;

//**************************** code start for redundancy removal for prev answer end

//**************************** code start for redundancy removal for current answer start

// both above and below code are same


$temp_str_43 = $current_answer_temp_str_43;
$temp_summar = '';
$ttemp = array();

if(stripos($temp_str_43, 'Neck pain') !== false ){
    $temp_summar .= 'Neck pain (';
  if(stripos($temp_str_43, 'Cervical') !== false ){
    // $temp_summar .= ' (Cervical (' ;
    if(stripos($temp_str_43, 'c4-5') !== false ){ $ttemp[] = 'C4'; $ttemp[] = 'C5'; }
    if(stripos($temp_str_43, 'c7') !== false ){ $ttemp[] = 'C7'; }
    if(stripos($temp_str_43, 'c6') !== false ){ $ttemp[] = 'C6'; }

sort($ttemp);


if(count(array_intersect($ttemp, array('C4','C5','C6','C7'))) == 4){
    $ttemp = 'C4-7';
}elseif(count(array_intersect($ttemp, array('C4','C5','C6'))) == 3){
$remain_ar = array_diff($ttemp, array('C4','C5','C6'));
 $ttemp = empty($remain_ar) ? 'C4-6' : 'C4-6, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('C4','C5'))) == 2){
$remain_ar = array_diff($ttemp, array('C4','C5'));
 $ttemp = empty($remain_ar) ? 'C4-5' : 'C4-5, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('C5','C6','C7'))) == 3){
$remain_ar = array_diff($ttemp, array('C5','C6','C7'));
 $ttemp = empty($remain_ar) ? 'C5-7' : 'C5-7, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('C5','C6'))) == 2){
$remain_ar = array_diff($ttemp, array('C5','C6'));
 $ttemp = empty($remain_ar) ? 'C5-6' : 'C5-6, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('C6','C7'))) == 2){
$remain_ar = array_diff($ttemp, array('C6','C7'));
 $ttemp = empty($remain_ar) ? 'C6-7' : 'C6-7, '.implode(', ', $remain_ar);
}else{

 $ttemp = implode(', ', $ttemp);

}
// pr($ttemp); die;
     $ttemp = rtrim($ttemp, ', ');
     // $temp_summar .= $ttemp.'), ';
     $temp_summar .= $ttemp.', ';
     $ttemp = '';
  }

   if(stripos($temp_str_43, 'Neck pain (Suprascapular (left))') !== false ){ $temp_summar .= 'Suprascapular (left)' ; }
    $temp_summar = rtrim($temp_summar, ', ');
   $temp_summar .= '), ';

}
if(stripos($temp_str_43, 'Upper back pain') !== false ){
    $temp_summar .= 'Upper back pain (' ;
  if(stripos($temp_str_43, 'Thoracic') !== false ){
      // $temp_summar .= ' (Thoracic(';
      $ttemp = array();
      if(stripos($temp_str_43, 't1') !== false ) $ttemp[] = 'T1';if(stripos($temp_str_43, 't2') !== false ) $ttemp[] = 'T2';if(stripos($temp_str_43, 't3') !== false ) $ttemp[] = 'T3';if(stripos($temp_str_43, 't4') !== false ) $ttemp[] = 'T4';if(stripos($temp_str_43, 't5') !== false ) $ttemp[] = 'T5';if(stripos($temp_str_43, 't6') !== false ) $ttemp[] = 'T6';if(stripos($temp_str_43, 't7') !== false ) $ttemp[] = 'T7';if(stripos($temp_str_43, 't8') !== false ) $ttemp[] = 'T8';if(stripos($temp_str_43, 't9') !== false ) $ttemp[] = 'T9';if(stripos($temp_str_43, 't10') !== false ) $ttemp[] = 'T10';if(stripos($temp_str_43, 't11') !== false ) $ttemp[] = 'T11';if(stripos($temp_str_43, 't12') !== false ) $ttemp[] = 'T12';

$tttemp = array();
foreach ($ttemp as $kt1 => $vt1) {
  $tttemp[] = (int) filter_var($vt1, FILTER_SANITIZE_NUMBER_INT);
}
sort($tttemp);
$ftemp = 'T';
// pr($tttemp); die;
// $tttemp= array('1','3','5','7','8','9','11','12');

foreach ($tttemp as $kt2 => $vt2) {
  if(!isset($prev_vt2)){  // for first element
      if(isset($tttemp[$kt2+1]) && ($tttemp[$kt2+1]-1 == $vt2)){ // if range after first element
         $ftemp .= $vt2.'-';
      }else{
         $ftemp .= $vt2.', ';
      }
  }elseif(($prev_vt2+1) != $vt2){  // if range completed

    if(!empty($start_vt2) && ($start_vt2 == $prev_vt2)){ // for alone element (not range)
       $ftemp .= 'T'.$prev_vt2.', ';

    }elseif(!empty($start_vt2)){  // for range
     $ftemp .=  substr($ftemp, -1) == 'T' ? '' : 'T';
       $ftemp .= $start_vt2.'-'.$prev_vt2.', ';
    }elseif((empty($start_vt2) && !empty($prev_vt2)) && (strpos($ftemp, '-') !== false)){ // if range after first element
      $ftemp .= $prev_vt2.', ';
    }
    if(!isset($tttemp[$kt2+1]))   $ftemp .= 'T'.$vt2;

      $start_vt2 = $vt2 ;
  }else{  // if iterateing through range

    if(!isset($tttemp[$kt2+1])){  // for last element
      if(empty($start_vt2)){  // for subsequest element range from first to last
          $ftemp .= $vt2;
      }else{
          $ftemp .= 'T'.$start_vt2.'-'.$vt2;
      }

    }

  }
  $prev_vt2 = $vt2;
}
// echo 'hi';
// pr($ftemp); die;
$ttemp = strtoupper($ftemp) ; // $ftemp;

      if(!empty($ttemp)){
        $ttemp = rtrim($ttemp, ', ');
         // $temp_summar .= $ttemp.'), ';
        $temp_summar .= $ttemp.', ';
          $ttemp = '';
           }

   }

   if((stripos($temp_str_43, 'Upper back pain (Suprascapular (right))') !== false ) && (stripos($temp_str_43, 'Upper back pain (Suprascapular (left))') !== false )){
      $temp_summar .= 'Suprascapular (bilateral), ' ;
   }else {
    if(stripos($temp_str_43, 'Upper back pain (Suprascapular (right))') !== false ){ $temp_summar .= 'Suprascapular (right), ' ; }
    if(stripos($temp_str_43, 'Upper back pain (Suprascapular (left))') !== false ){ $temp_summar .= 'Suprascapular (left), ' ; }
   }


  if((stripos($temp_str_43, 'Upper back pain (Interscapular (right))') !== false ) && (stripos($temp_str_43, 'Upper back pain (Interscapular (left))') !== false )){
      $temp_summar .= 'Interscapular (bilateral), ' ;
  }else{
     if(stripos($temp_str_43, 'Upper back pain (Interscapular (right))') !== false ){ $temp_summar .= 'Interscapular (right), ' ; }
     if(stripos($temp_str_43, 'Upper back pain (Interscapular (left))') !== false ){ $temp_summar .= 'Interscapular (left), ' ; }
  }


  if((stripos($temp_str_43, 'Upper back pain (Scapular (right))') !== false )  && (stripos($temp_str_43, 'Upper back pain (Scapular (left))') !== false )){
    $temp_summar .= 'Scapular (bilateral), ' ;
  }else{
    if(stripos($temp_str_43, 'Upper back pain (Scapular (right))') !== false ){ $temp_summar .= 'Scapular (right), ' ; }
    if(stripos($temp_str_43, 'Upper back pain (Scapular (left))') !== false ){ $temp_summar .= 'Scapular (left), ' ; }
  }


  if((stripos($temp_str_43, 'Upper back pain (Infrascapular (right))') !== false ) && (stripos($temp_str_43, 'Upper back pain (Infrascapular (left))') !== false )){
    $temp_summar .= 'Infrascapular (bilateral), ' ;
  }else{

    if(stripos($temp_str_43, 'Upper back pain (Infrascapular (right))') !== false ){ $temp_summar .= 'Infrascapular (right), ' ; }
    if(stripos($temp_str_43, 'Upper back pain (Infrascapular (left))') !== false ){ $temp_summar .= 'Infrascapular (left), ' ; }

  }


  $temp_summar = rtrim($temp_summar, ', ');
  $temp_summar .= '), ';
 }


if(stripos($temp_str_43, 'Low back pain') !== false ){

  $temp_summar .= 'Low back pain (' ;
  if(stripos($temp_str_43, 'Lumbar') !== false ){
     // $temp_summar .= ' (Lumbar (' ;
     $ttemp = array();
     if(stripos($temp_str_43, 'l1') !== false ) $ttemp[] = 'L1';if(stripos($temp_str_43, 'l2') !== false ) $ttemp[] = 'L2';if(stripos($temp_str_43, 'l3') !== false ) $ttemp[] = 'L3';if(stripos($temp_str_43, 'l4') !== false ) $ttemp[] = 'L4';if(stripos($temp_str_43, 'l5') !== false ) $ttemp[] = 'L5';

sort($ttemp);
// $ttemp = array('L4','L2','L5');
if(count(array_intersect($ttemp, array('L1','L2','L3','L4','L5'))) == 5){
    $ttemp = 'L1-5';
}elseif(count(array_intersect($ttemp, array('L1','L2','L3','L4'))) == 4){
   $remain_ar = array_diff($ttemp, array('L1','L2','L3','L4'));
   $ttemp = empty($remain_ar) ? 'L1-4' : 'L1-4, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L1','L2','L3'))) == 3){
   $remain_ar = array_diff($ttemp, array('L1','L2','L3'));
   $ttemp = empty($remain_ar) ? 'L1-3' : 'L1-3, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L1','L2'))) == 2){
   $remain_ar = array_diff($ttemp, array('L1','L2'));
   $ttemp = empty($remain_ar) ? 'L1-2' : 'L1-2, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L2','L3','L4','L5'))) == 4){
   $remain_ar = array_diff($ttemp, array('L2','L3','L4','L5'));
   $ttemp = empty($remain_ar) ? 'L2-5' : 'L2-5, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L2','L3','L4'))) == 3){
   $remain_ar = array_diff($ttemp, array('L2','L3','L4'));
   $ttemp = empty($remain_ar) ? 'L2-4' : 'L2-4, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L2','L3'))) == 2){
   $remain_ar = array_diff($ttemp, array('L2','L3'));
   $ttemp = empty($remain_ar) ? 'L2-3' : 'L2-3, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L3','L4','L5'))) == 3){
   $remain_ar = array_diff($ttemp, array('L3','L4','L5'));
   $ttemp = empty($remain_ar) ? 'L3-5' : 'L3-5, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L3','L4'))) == 2){
   $remain_ar = array_diff($ttemp, array('L3','L4'));
   $ttemp = empty($remain_ar) ? 'L3-4' : 'L3-4, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L4','L5'))) == 2){
   $remain_ar = array_diff($ttemp, array('L4','L5'));
   $ttemp = empty($remain_ar) ? 'L4-5' : 'L4-5, '.implode(', ', $remain_ar);
}else{
   $ttemp = implode(', ', $ttemp);

}

// pr($ttemp); die;

     if(!empty($ttemp)){
      $ttemp = rtrim($ttemp, ', ');
       // $temp_summar .= $ttemp.'), ';
      $temp_summar .= $ttemp.', ';
       $ttemp = ''; }

  }

  if(stripos($temp_str_43, 'Sacral') !== false ){
     // $temp_summar .= '(Sacral (' ;
     $ttemp = array();
    if(stripos($temp_str_43, 's1') !== false ) $ttemp[] = 'S1';if(stripos($temp_str_43, 's2-3') !== false ){  $ttemp[] = 'S2';  $ttemp[] = 'S3';}
sort($ttemp);

if(count(array_intersect($ttemp, array('S1','S2','S3'))) == 3){
    $ttemp = 'S1-3';
}elseif(count(array_intersect($ttemp, array('S1','S2'))) == 2){
$remain_ar = array_diff($ttemp, array('S1','S2'));
 $ttemp = empty($remain_ar) ? 'S1-2' : 'S1-2, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('S2','S3'))) == 2){
$remain_ar = array_diff($ttemp, array('S2','S3'));
 $ttemp = empty($remain_ar) ? 'S2-3' : 'S2-3, '.implode(', ', $remain_ar);

}else{
   $ttemp = implode(', ', $ttemp);
}
// pr($ttemp); die;
     if(!empty($ttemp)){
      $ttemp = rtrim($ttemp, ', ');
      // $temp_summar .= $ttemp.')), ';
       $temp_summar .= $ttemp.', ';
      $ttemp = ''; }

  }

  if((stripos($temp_str_43, 'Low back pain (Infrascapular (right))') !== false ) && (stripos($temp_str_43, 'Low back pain (Infrascapular (left))') !== false )){
     $temp_summar .= 'Infrascapular (bilateral), ' ;
  }else{
    if(stripos($temp_str_43, 'Low back pain (Infrascapular (right))') !== false ){ $temp_summar .= 'Infrascapular (right), ' ; }
    if(stripos($temp_str_43, 'Low back pain (Infrascapular (left))') !== false ){ $temp_summar .= 'Infrascapular (left), ' ; }
  }


  $temp_summar = rtrim($temp_summar, ', ');

  $temp_summar .= '), ';


}

  if((stripos($temp_str_43, 'Buttock pain (right)') !== false ) && (stripos($temp_str_43, 'Buttock pain (left)') !== false )){
    $temp_summar .= 'Buttock pain (bilateral), ' ;
  }else{
      if(stripos($temp_str_43, 'Buttock pain (right)') !== false ){ $temp_summar .= 'Buttock pain (right), ' ; }
      if(stripos($temp_str_43, 'Buttock pain (left)') !== false ){ $temp_summar .= 'Buttock pain (left), ' ; }
  }




if(stripos($temp_str_43, 'Shoulder pain') !== false ){

  $temp_summar .= 'Shoulder pain (' ;

if(stripos($temp_str_43, 'Shoulder pain (Infrascapular (right))') !== false  && stripos($temp_str_43, 'Shoulder pain (Infrascapular (left))') !== false ){
   $temp_summar .= 'Infrascapular (bilateral), ' ;
}else{
  if(stripos($temp_str_43, 'Shoulder pain (Infrascapular (right))') !== false ){ $temp_summar .= 'Infrascapular (right), ' ; }

  if(stripos($temp_str_43, 'Shoulder pain (Infrascapular (left))') !== false ){ $temp_summar .= 'Infrascapular (left), ' ; }
}

if(stripos($temp_str_43, 'Shoulder pain (Scapular (right))') !== false  && stripos($temp_str_43, 'Shoulder pain (Scapular (left))') !== false ){
  $temp_summar .= 'Scapular (bilateral), ' ;
}else{

  if(stripos($temp_str_43, 'Shoulder pain (Scapular (right))') !== false ){ $temp_summar .= 'Scapular (right), ' ; }
  if(stripos($temp_str_43, 'Shoulder pain (Scapular (left))') !== false ){ $temp_summar .= 'Scapular (left), ' ; }
}

if(stripos($temp_str_43, '(Posterior deltoid (right))') !== false && stripos($temp_str_43, 'Posterior deltoid (left)') !== false ){
   $temp_summar .= 'Posterior deltoid (bilateral), ' ;
}else{
  if(stripos($temp_str_43, '(Posterior deltoid (right))') !== false ){ $temp_summar .= 'Posterior deltoid (right), ' ; }

  if(stripos($temp_str_43, 'Posterior deltoid (left)') !== false ){ $temp_summar .= 'Posterior deltoid (left), ' ; }
}

if(stripos($temp_str_43, 'Shoulder pain (Suprascapular (right))') !== false && stripos($temp_str_43, 'Shoulder pain (Suprascapular (left))') !== false ){
   $temp_summar .= 'Suprascapular (bilateral), ' ;
}else{

  if(stripos($temp_str_43, 'Shoulder pain (Suprascapular (right))') !== false ){ $temp_summar .= 'Suprascapular (right), ' ; }

  if(stripos($temp_str_43, 'Shoulder pain (Suprascapular (left))') !== false ){ $temp_summar .= 'Suprascapular (left), ' ; }

}

  // if(stripos($temp_str_43, 'Shoulder pain (Interscapular (left))') !== false ){ $temp_summar .= 'Interscapular (left), ' ; }  // we commented this because we think  Interscapular (left)  is in Upper back pain



  $temp_summar = rtrim($temp_summar, ', ');

  $temp_summar .= '), ';

}

$current_answer_temp_str_43 = $temp_summar;
 // pr($temp_str_43); die;
// echo 'hello';
// pr($temp_summar); die;
$prev_answer_temp_str_43 = rtrim($prev_answer_temp_str_43, ', ');
 $current_answer_temp_str_43 = rtrim($current_answer_temp_str_43, ', ');

//**************************** code start for redundancy removal for current answer end


// pr($current_answer_temp_str_43); die;


           // $layman_summar .=  "The location is at: ".$current_answer_temp_str_43.''.$prev_answer_temp_str_43.". " ;

 $layman_summar .=  "The pain is localized to the ".$current_answer_temp_str_43.''.$prev_answer_temp_str_43.". " ;


        }

        /* //  code commented as these code are not used according to new image design
        // pr($singlelevel['answer']); pr($singlelevel['prev_answer']);
          if(is_array($singlelevel['answer'])){

            if(is_array($singlelevel['prev_answer'])){

            if($singlelevel['answer'] == $singlelevel['prev_answer'] ){

              $prev_answer = ' (no change)' ;

            }else{
              // pr($singlelevel['prev_answer']);
            foreach ($singlelevel['prev_answer'] as $k42 => $v42) {
              $singlelevel['prev_answer'][$k42] = isset($img_backpain_loc[$v42]) ? $img_backpain_loc[$v42] : '' ;
            }

           // pr($singlelevel['prev_answer']);  die;

              $prev_answer = ' (from '.strtolower(implode(', ', $singlelevel['prev_answer'])).')';

            }
          }

          // pr($prev_answer); die;

            foreach ($singlelevel['answer'] as $k42 => $v42) {
              $singlelevel['answer'][$k42] = isset($img_backpain_loc[$v42]) ? $img_backpain_loc[$v42] : '' ;
            }
        $layman_summar .=  "The location is at: ".strtolower(implode(', ', $singlelevel['answer'])).''.strtolower($prev_answer).". " ;
          } else{

        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;
        $layman_summar .=  "The location is at: ".strtolower($singlelevel['answer']).''.strtolower($prev_answer).". " ;
          }


          */
           break;




    }

// switch case end


      }
      // pr($k);
      // pr($singlelevel); die;
    }
$case_19_34_35 = str_replace('***', '', $case_19_34_35) ;  // if case 35 is empty then remove ***
    $layman_summar = $layman_summar.''.$case_19_34_35;  // for case 19, 34,35 , we concatenate outside loop because case 35 is optional
    $case_19_34_35 = '';



$layman_summar = str_replace('*case_15_how_many_days*', $case_15_how_many_days, $layman_summar) ;
$case_15_how_many_days = '';

  }

}

return array('layman_summar' => $layman_summar, 'all_cc_name' => $all_cc_name) ;

// end








 }  // followup compare cc detial function end


// prepare question in layman summary

public function prepare_question_layman($user_detail = null ,$gender = null){



// this array used for case 43 for image related question

$img_backpain_detial_q_arr = array(
'c4' => 'Neck pain (Cervical (c4-5))',
'c7' => 'Neck pain (Cervical (c7))',
'c6' => 'Neck pain (Cervical (c6))',
't1' => 'Upper back pain (Thoracic (t1))',
't2' => 'Upper back pain (Thoracic (t2))',
't3' => 'Upper back pain (Thoracic (t3))',
't4' => 'Upper back pain (Thoracic (t4))',
't5' => 'Upper back pain (Thoracic (t5))',
't6' => 'Upper back pain (Thoracic (t6))',
't7' => 'Upper back pain (Thoracic (t7))',
't8' => 'Upper back pain (Thoracic (t8))',
't9' => 'Upper back pain (Thoracic (t9))',
't10' => 'Upper back pain (Thoracic (t10))',
't11' => 'Upper back pain (Thoracic (t11))',
't12' => 'Upper back pain (Thoracic (t12))',
'l1' => 'Low back pain (Lumbar (l1))',
'l2' => 'Low back pain (Lumbar (l2))',
'l3' => 'Low back pain (Lumbar (l3))',
'l4' => 'Low back pain (Lumbar (l4))',
'l5' => 'Low back pain (Lumbar (l5))',
's1' => 'Low back pain (Sacral (s1))',
's2-3' =>  'Low back pain (Sacral (s2-3))',
'right1' =>  'Neck pain',
'right2' =>  'Neck pain',
'right3' => 'Upper back pain (Suprascapular (right))',
'right4' => 'Upper back pain (Interscapular (right))',
'right5' => 'Upper back pain (Scapular (right))',
'right6' => 'Upper back pain (Infrascapular (right))',
'right7' => 'Low back pain (Infrascapular (right))',
'right8' => 'Low back pain',
'right9' => 'Buttock pain (right)',
'right10' => 'Shoulder pain (Infrascapular (right))',
'right11' => 'Shoulder pain (Scapular (right))',
'right12' => 'Shoulder pain (Scapular (right))',
'right13' =>  'Shoulder pain',
'right14' =>  'Shoulder pain (Scapular (right))',
'right15' => 'Shoulder pain (Posterior deltoid (right))',
'right16' => 'Shoulder pain (Suprascapular (right))',
'left1' =>  'Neck pain',
'left2' => 'Neck pain (Suprascapular (left))',
'left3' => 'Upper back pain (Suprascapular (left))',
'left4' => 'Upper back pain (Interscapular (left))',
'left5' =>  'Upper back pain (Scapular (left))',
'left6' => 'Upper back pain (Infrascapular (left))',
'left7' => 'Low back pain (Infrascapular (left))',
'left8' => 'Low back pain',
'left9' => 'Buttock pain (left)',
'left10' => 'Shoulder pain (Infrascapular (left))',
'left11' => 'Shoulder pain (Interscapular (left))',
'left12' => 'Shoulder pain (Scapular (left))',
'left13' =>  'Shoulder pain (Scapular (left))',
'left14' => 'Shoulder pain (left)',
'left15' =>  'Shoulder pain (Posterior deltoid (left))',
'left16' =>  'Shoulder pain (Suprascapular (left))',
);



$sorted_body_field_array = array
(
    2 => 'c4',
    3 => 'c6',
    4 => 'c7',
    5 => 'l1',
    6 => 'l2',
    7 => 'l3',
    8 => 'l4',
    9 => 'l5',
    10 => 'left1',
    11 => 'left2',
    12 => 'left3',
    13 => 'left4',
    14 => 'left5',
    15 => 'left6',
    16 => 'left7',
    17 => 'left8',
    18 => 'left9',
    19 => 'left10',
    20 => 'left11',
    21 => 'left12',
    22 => 'left13',
    23 => 'left14',
    24 => 'left15',
    25 => 'left16',
    26 => 'right1',
    27 => 'right2',
    28 => 'right3',
    29 => 'right4',
    30 => 'right5',
    31 => 'right6',
    32 => 'right7',
    33 => 'right8',
    34 => 'right9',
    35 => 'right10',
    36 => 'right11',
    37 => 'right12',
    38 => 'right13',
    39 => 'right14',
    40 => 'right15',
    41 => 'right16',
    42 => 's1',
    43 => 's2-3',
    44 => 't1',
    45 => 't2',
    46 => 't3',
    47 => 't4',
    48 => 't5',
    49 => 't6',
    50 => 't7',
    51 => 't8',
    52 => 't9',
    53 => 't10',
    54 => 't11',
    55 => 't12',
);

// this array used for question 102 for man
$img_abdominal_man_pain_detial_q_arr =  array(
  'mid1' => 'Epigastrium',

  'l-top1' => 'Right upper quadrant(RUQ) Hypochondria(Right)',
  'mid2' => 'Right upper quadrant(RUQ) Epigastrium',
  'l-top2' => 'Right upper quadrant(RUQ) Lumbar (right)',
  'mid4' => 'Right upper quadrant(RUQ) Umbilical',
  'mid6' => 'Right upper quadrant(RUQ) Periumbilical',


  'mid3' => 'Left upper quadrant (LUQ) Epigastrium',
  'r-top1' => 'Left upper quadrant (LUQ) Hypochondria (left)',
  'mid5' => 'Left upper quadrant (LUQ) Umbilical',
  'r-top2' => 'Left upper quadrant (LUQ) Lumbar (left)',
  'mid7' => 'Left upper quadrant (LUQ) Periumbilical',

  'mid9' => 'Right lower quadrant (RLQ) Periumbilical',
  'l-top3' => 'Right lower quadrant (RLQ) Lumbar (right)',
  'l-top3' => 'Right lower quadrant (RLQ) Lumbar (right)',
  'mid8' => 'Right lower quadrant (RLQ) Umbilical',
  'l-bottom' =>'Right lower quadrant (RLQ) Iliac (right)',
   'mid12' => 'Right lower quadrant (RLQ) Hypogastrium',

  'mid10' => 'Left lower quadrant (LLQ) Periumbilical',
  'r-top3' => 'Left lower quadrant (LLQ) Lumbar (left)',
  'mid11' => 'Left lower quadrant (LLQ) Umbilical',
  'mid13' => 'Left lower quadrant (LLQ) Hypogastrium',
  'r-bottom' => 'Left lower quadrant (LLQ) Iliac (left)'
);


//this array used for question 102 for female
$img_abdominal_female_pain_detial_q_arr =  array(
  'mid1' => 'Epigastrium',

  'l1' => 'Right upper quadrant(RUQ) Hypochondria (right)',
  'mid2' => 'Right upper quadrant(RUQ) Epigastrium',
  'l2' => 'Right upper quadrant(RUQ) Lumbar (right)',
  'mid4' => 'Right upper quadrant(RUQ) Umbilical',
  'mid6' => 'Right upper quadrant(RUQ) Periumbilical',


  'mid3' => 'Left upper quadrant (LUQ) Epigastrium',
  'r1' => 'Left upper quadrant (LUQ) Hypochondria (left)',
  'mid5' => 'Left upper quadrant (LUQ) Umbilical',
  'r2' => 'Left upper quadrant (LUQ) Lumbar (left)',
  'mid7' => 'Left upper quadrant (LUQ) Periumbilical',

  'l3' => 'Right lower quadrant (RLQ) Lumbar (right)',
  'l4' => 'Right lower quadrant (RLQ) Iliac (right)',
  'mid8' => 'Right lower quadrant (RLQ) Umbilical',
  'mid10' => 'Right lower quadrant (RLQ) Periumbilical',
  //'l-bottom' =>'Right lower quadrant (RLQ) Iliac (right)',
   'mid12' => 'Right lower quadrant (RLQ) Hypogastrium',

  'mid11' => 'Left lower quadrant (LLQ) Periumbilical',
  'mid9' => 'Left lower quadrant (LLQ) Umbilical',
  'r3' => 'Left lower quadrant (LLQ) Lumbar (left)',
  'mid13' => 'Left lower quadrant (LLQ) Hypogastrium',
  'r4' => 'Left lower quadrant (LLQ) Iliac (left)'
);


//this array is used for question 103 for man

$img_chest_man_pain_detial_q_arr = array(
  //Right chest
  'right-top1' => 'clavicular (right)',
  'left-chest' => 'Pectoral (right)',
  'left-bottom-left' => 'Inframammary (right)',
  'left-bottom-right' => 'Inframammary (right)',
  'left-nipple' => 'right nipple',
    //Left chest
  'right-bottom-left' => 'Inframammary (left)',
  'right-bottom-right' => 'Inframammary (left)',
  'right-chest' => 'Pectoral (left)',
  'right-top' => 'clavicular (left)',
  'right-nipple' => 'left nipple',
    //Breastbone
  'mid-bottom' => 'Xiphoid process',
  'mid-mid' => 'Substernal',
  'mid-top' => 'Manubrium of sternum'
);


//this array is used for question 103 for female

$img_chest_female_pain_detial_q_arr = array(
//right chest
'left1' => 'clavicular (right)',
'left2' => 'Pectoral (right)',

//left chest
'right1' => 'clavicular (left)',
'right2' => 'Pectoral (left)',

//breastbone
'mid1' => 'Manubrium (of sternum)',
'mid2' => 'substernal',
'mid3' => 'Xiphoid process',

//right breast
'left3' => 'Right upper quadrant',
'left4' => 'Left upper quadrant',
'left6' => 'Right lower quadrant',
'left5' => 'Left lower quadrant',
'left9' => 'Right inframammary region',
'left7' => 'Right nipple',
'left8' => 'Right aereola',

//left breast
'right4' => 'Left upper quadrant',
'right3' => 'Right upper quadrant',
'right6' => 'Left lower quadrant',
'right5' => 'Right lower quadrant',
'right9' => 'Left inframammary region',
'right8' => 'Left nipple',
'right7' => 'Left aereola',

);



/* // these array not used according to new image design

// following array is used in  for image realted question array(case 43)

$img_backpain_loc = array('topleft' => 'Shoulder pain (left)', 'topmid' => 'Cervical', 'topright' => 'Shoulder pain(right)', 'mid' => 'Upper back pain', 'midbottom' => 'Low back pain', 'bottomleft' => 'Buttockpain(left)',  'bottomright' => 'Buttockpain(right)');

$img_backpain_detail = array('topleft' => array('Suprascapular (left)', 'Posterior deltoid (left)'), 'topmid' => array('Cervical'), 'topright' => array('Posterior deltoid (right)', 'Suprascapular (right)'), 'mid' => array('Interscapular (left)', 'Scapular (left)', 'Scapular (right)', 'Interscapular (right)', 'Thoracic'), 'midbottom' => array('Infrascapular (left)', 'Sacral', 'Lumbar', 'Infrascapular (right)'), 'bottomleft' => array(), 'bottomright' => array() );

*/


// pr($user_detail); die;
  // for follow up detail question will be compared with previous visit details of the patient
  //if(isset($user_detail->current_step_id->id) && $user_detail->current_step_id->id == 6){
  if(isset($user_detail->current_step_id->id) && ($user_detail->current_step_id->id == 6) ||($user_detail->current_step_id->id == 12 && isset($user_detail->follow_up_step_id) && $user_detail->follow_up_step_id == 1)){

      $prev_visit_user_detail =  $this->ChiefCompliantUserdetails->find('all')->where(['id' => $user_detail->followup_parent_id])->first();
      $prev_visit_user_detail = $this->prepare_user_detial_data_for_render($prev_visit_user_detail);
      $followup_compare_result = $this->compare_prev_recent_cc_detial_for_followup($user_detail, $prev_visit_user_detail);
      return $followup_compare_result ;
      // pr($followup_compare_result); die;
  }

// start
 //pr($this->Auth->user()['gender']); die;
$more_options = $user_detail->more_options ;

// Hi John, I compiled a summary for you
// I see that you want to see your doctor for a cough.
// The cough started 7 days ago.
$all_cc_name = '' ;
$layman_summar = '' ;
$case_19_34_35 = '';
$cur_cc_name = "";
//$gender = 0;
if(!empty($gender) && !in_array($gender,array(0,1,2))){

  $gender = Security::decrypt(base64_decode($gender) , SEC_KEY);

}
//pr($gender);die;

// $all_cc_name = $user_detail->chief_compliant_id->name ;
// pr($all_cc_name);
// pr($user_detail->chief_compliant_details); die;
if(!empty($user_detail->chief_compliant_details) && is_array($user_detail->chief_compliant_details)){


// pr($user_detail->chief_compliant_details);die;
// You didn't try medication.
// Since then, it has improved.
// These things made it better: test.
// These things made it worse: testing.
// It occurred most often during the noon.

  foreach ($user_detail->chief_compliant_details as $key => $value) {

     //pr($value); die;
   // $case_15_how_many_days = '';

    $case_15_how_many_days = (isset($user_detail->chief_compliant_details->compliant_length) && !empty($user_detail->chief_compliant_details->compliant_length)) ? $user_detail->chief_compliant_details->compliant_length :"" ;

    foreach ($value as $k => $singlelevel) {
      // pr($key); pr($k); die;
// pr($k); pr($singlelevel); die;
      // pr($k);
      // pr($singlelevel);
      if(is_string($k) && $k == 'cc_data'){

        $all_cc_name .=  $singlelevel->name.', ';
        $cur_cc_name =  $singlelevel->name;// collect all cc
        // pr($all_cc_name); die;
        // According to client requirement below if code will run only if the current chief compliant is not the main chief complaint
        if($user_detail->chief_compliant_id->id != $key){
            // $layman_summar .= " The following is for the chief complaint of ".strtolower($singlelevel->name).': ' ;

 // The patient is also presenting with whateverchiefcomplaint for howevermany days.
 //$layman_summar .= 'The patient is also presenting with '.strtolower($singlelevel->name).' . ' ;
        $layman_summar .= 'The patient is also presenting with '.strtolower($singlelevel->name).' for '.$case_15_how_many_days.". " ;


          }else{
            $layman_summar .= ' ';  // for adding space
          }

      } else {

// switch case start
// pr($k); pr($singlelevel); die;

    switch ($singlelevel['question_id']) {
        case 1:
         $layman_summar .= "Patient localizes the pain to the ".strtolower($singlelevel['answer']).'. ' ;
            break;
        case 2:
             $layman_summar .= "The pain felt ".strtolower(implode(", ", $singlelevel['answer'])).'. ';
            break;
        case 4:
        // "better_factors" => "The following made it better: ", "worse_factors" => "The following made it worse: "

        //[ALLEV] makes it better. [AGGR] makes it worse.

            // $ques_ans_4 = "The following made it better: ".$singlelevel['answer'];
        // The patient states that the pain is better with exercise and worse with leaning over.

        // $ques_ans_4 = $singlelevel['answer']." makes it better";

        $ques_ans_4 = 'The patient states that the pain is better with '.strtolower($singlelevel['answer']);
          if(!empty($ques_ans_5)){
            $layman_summar .= $ques_ans_4.''.$ques_ans_5.'. ';
            $ques_ans_4 = ''; $ques_ans_5 = '';
          }
            break;

        case 5:
            // $ques_ans_5 = "The following made it worse: ".$singlelevel['answer'];
     // The patient states that the pain is better with exercise and worse with leaning over.

        // $ques_ans_5 = $singlelevel['answer']." makes it worse";
        $ques_ans_5 = ' and worse with '.strtolower($singlelevel['answer']);


          if(!empty($ques_ans_4)){
            $layman_summar .= $ques_ans_4.''.$ques_ans_5.'. ';
            $ques_ans_4 = ''; $ques_ans_5 = '';
          }
            break;
        case 6:
           $layman_summar .= "It occurred most often: ".strtolower($singlelevel['answer']).'. ';
            break;
        case 7:
          $layman_summar .= "The usual duration is ".$singlelevel['answer']." minutes. ";
            break;
        case 8:
          $layman_summar .= "It occurs ".$singlelevel['answer']." times in a day. ";
            break;
        case 9:

           $layman_summar .= stripos($singlelevel['answer'], 'about') !== false ?  "It feels about the same all day. "  :  "It was worst during the: ".$singlelevel['answer'].". " ;
            break;
        case 10:
// "rest_severity" => "Out of 10, the rest pain severity is ", "worst_severity" => "Out of 10, the worst pain severity is "
        // “Out of 10, the pain at its best is a X, and a X at its worst."
          // $ques_ans_10 = "Out of 10, the best pain severity is ".$singlelevel['answer'];
          $ques_ans_10 = $singlelevel['answer'];
          if(!empty($ques_ans_11)){

$layman_summar .= "Out of 10, the pain at its best is a ".$ques_ans_10.", and a ".$ques_ans_11." at its worst. ";

             // $layman_summar .= $ques_ans_10.'. '.$ques_ans_11.'. ';
             $ques_ans_10 = '' ; $ques_ans_11 = '' ;
          }
            break;
        case 11:

          $ques_ans_11 = $singlelevel['answer'];
          if(!empty($ques_ans_10)){
            $layman_summar .= "Out of 10, the pain at its best is a ".$ques_ans_10.", and a ".$ques_ans_11." at its worst. ";
             // $layman_summar .= $ques_ans_10.'. '.$ques_ans_11.'. ';
             $ques_ans_10 = '' ; $ques_ans_11 = '' ;
          }
            break;
        case 12:
            $layman_summar .=  "The pain felt ".(is_array($singlelevel['answer']) ? strtolower(implode(", ", $singlelevel['answer'])) : strtolower($singlelevel['answer'])) .". " ;
            break;
        case 13:

// "any_medication" => ["tried_medication" => array("yes" => "Patient tried medication", "no" => "Patient didn't try medication"), "medication_improvement" => array("yes" => "Since then, it has improved", "no" => "Since then, it hasn't improved")]
          $ques_ans_13 =   $singlelevel['answer'] == 'Yes' ? "Patient tried medication."  : "Patient didn't try medication." ;
          if(!empty($ques_ans_14)){
             $layman_summar .= $ques_ans_13.''.$ques_ans_14.'. ';
             $ques_ans_13 = '' ; $ques_ans_14 = '' ;

          }
            break;
        case 14:

          $ques_ans_14 =  $singlelevel['answer'] == 'Yes' ? " and since then, the pain has improved."  : " and since then, the pain hasn't improved." ;
          if(!empty($ques_ans_13)){
             $layman_summar .= $ques_ans_13.''.$ques_ans_14.'. ';
             $ques_ans_13 = '' ; $ques_ans_14 = '' ;
          }
          break;
        case 15:
           // $layman_summar .=  "The symptom has lasted for: ".$singlelevel['answer'].". " ;
            $case_15_how_many_days = $singlelevel['answer'] ;
           break;
        case 16:
// "Patient feels pain in " left/right/both " hand" (hands for both), "if_both": "left hand is worse"/"right hand is worse"/"both hands hurt about the same"
           $ques_ans_16 = "Patient feels pain in ".(stripos($singlelevel['answer'], 'both') !== FALSE ? 'bilateral' : $singlelevel['answer'].'hand') ;
           if(!empty($ques_ans_17)){
              $layman_summar .= $ques_ans_16.', '.$ques_ans_17.'. ';
              $ques_ans_16 = ''; $ques_ans_17 = '';
           }
           break;
        case 17:

if(stripos($singlelevel['answer'], 'left') !== FALSE) $ques_ans_17 =  'and the left hand is worse';
if(stripos($singlelevel['answer'], 'right') !== FALSE) $ques_ans_17 =  'and the right hand is worse';
if(stripos($singlelevel['answer'], 'about') !== FALSE) $ques_ans_17 =  'and the bilateral hurt about the same';
           if(!empty($ques_ans_16)){
              $layman_summar .= $ques_ans_16.' '.$ques_ans_17.'. ';
              $ques_ans_16 = ''; $ques_ans_17 = '';
           }

           break;
        case 18:
        // "The pain is on the " back/palm/both " and " thumb side/small finger side/both


// {"palm":"palmar surface", "back":"dorsal surface", "thumb side": "radial-sided", "small finger side": "ulnar-sided" } #both for back and palm would be "palmar and dorsal surface", both for thumb-side and small finger side would be "diffuse"
        // layman technical convesrsion
  $translate_case18 = array("palm"=>"palmar surface", "back"=>"dorsal surface", "thumb side" => "radial-sided", "small finger side"=> "ulnar-sided") ;

   $first_case18 = (stripos($singlelevel['answer'], 'both') !== FALSE ? 'palmar and dorsal surface' : (!empty($translate_case18[strtolower($singlelevel['answer'])]) ? $translate_case18[strtolower($singlelevel['answer'])] : $singlelevel['answer'] ));


   $second_case18 =(!empty($more_options[$key][18])  ? (stripos($more_options[$key][18], 'both') !== FALSE  ? 'diffuse' : (!empty($translate_case18[strtolower($more_options[$key][18])]) ? $translate_case18[strtolower($more_options[$key][18])] : $more_options[$key][18] ) ) : '');


        $layman_summar .=  "The pain is on the ".$first_case18.' and '.$second_case18.'. ' ;
           break;
        case 21:
 // "Patient has stiffness in " right/left/both/neither " hand and " right/left/both/neither " wrist"

           $ques_ans_21 =  "Patient has stiffness in " .(stripos($singlelevel['answer'], 'both') !== FALSE ? 'bilateral' : strtolower($singlelevel['answer']). " hand");
            if(!empty($ques_ans_22)){
                $layman_summar .= $ques_ans_21.''.$ques_ans_22.'. ';
                $ques_ans_21 = ''; $ques_ans_22 = '';
            }

           break;
        case 22:
         // and " right/left/both/neither " wrist"
           $ques_ans_22 =  " and ".strtolower($singlelevel['answer'])." ".(stripos($singlelevel['answer'], 'both') !== FALSE ? 'wrists' : 'wrist') ;
             if(!empty($ques_ans_21)){
               $layman_summar .= $ques_ans_21.''.$ques_ans_22.'. ';
                $ques_ans_21 = ''; $ques_ans_22 = '';
             }

           break;
        case 23:
           // "The feeling is " on the palm/on the back/on the both/not on the hand " and " on the thumb/on the index finger/on the middle finger/on the ring finger/on the little finger/not on the fingers (or a combination of thumb/index/middle/ring/little fingers) "and " palm side forearm/back hand side forearm/not on the forearm


// {"thumb": "first digit", "index": "second digit", "middle": "third digit", "ring": "fourth digit", "little": "fifth digit", "palm":"palmar surface", "back":"dorsal surface"} #both for back and palm would be "palmar and dorsal surface"


        $translate_case23 = array("thumb"=> "first digit", "index"=> "second digit", "middle"=> "third digit", "ring"=> "fourth digit", "little"=> "fifth digit");
// pr($singlelevel['answer']);
        if(is_array($singlelevel['answer'])){
          foreach ($singlelevel['answer'] as $k19 => $v19) {
  $singlelevel['answer'][$k19] = !empty($translate_case23[strtolower($v19)]) ? $translate_case23[strtolower($v19)] : $v19 ;
          }


$singlelevel['answer'] = implode(', ', $singlelevel['answer']) ;

        }

        $ques_ans_23 = stripos($singlelevel['answer'], ',') !== false ? " and on the ".$singlelevel['answer']." fingers " : (stripos($singlelevel['answer'], 'not') !== false ?  " and ".strtolower($singlelevel['answer']).' ' :  " and on the ".strtolower($singlelevel['answer'])." finger "  );

            // $ques_ans_23 = (is_array($singlelevel['answer']) ? " and on the ".implode(', ', $singlelevel['answer'])." fingers " : (stripos($singlelevel['answer'], 'not') !== false ? " and ".strtolower($singlelevel['answer']) : " and on the ".$singlelevel['answer']." finger " ));


            // .'' .(is_array($singlelevel['answer']) && count($singlelevel['answer'])> 1 ? ' fingers ' : ' finger ' );




              if(!empty($ques_ans_24) && !empty($ques_ans_25)){
                $layman_summar .= $ques_ans_24.''.$ques_ans_23.''.$ques_ans_25.'. ';
                $ques_ans_24 = ''; $ques_ans_23 = ''; $ques_ans_25 = '';
              }
           break;
        case 24:
           // "The feeling is " on the palm/on the back/on the both/not on the hand


  $translate_case24 = array("palm"=>"palmar surface", "back"=>"dorsal surface") ;

   $first_case24 = (stripos($singlelevel['answer'], 'both') !== FALSE ? 'palmar and dorsal surface' : (!empty($translate_case24[strtolower($singlelevel['answer'])]) ? $translate_case24[strtolower($singlelevel['answer'])] : $singlelevel['answer'] ));

$first_case24 = (stripos($first_case24, 'not') !== FALSE ? "The feeling is  ".strtolower($first_case24) : "The feeling is on the ".strtolower($first_case24)) ;
          $ques_ans_24 = $first_case24  ;

               if(!empty($ques_ans_23) && !empty($ques_ans_25)){
                $layman_summar .= $ques_ans_24.''.$ques_ans_23.''.$ques_ans_25.'. ';
                $ques_ans_24 = ''; $ques_ans_23 = ''; $ques_ans_25 = '';
               }
           break;
        case 25:
          // "and " palm side forearm/back hand side forearm/not on the forearm
          $ques_ans_25 = "and ".strtolower($singlelevel['answer']) ;
               if(!empty($ques_ans_23) && !empty($ques_ans_24)){
                $layman_summar .= $ques_ans_24.''.$ques_ans_23.''.$ques_ans_25.'. ';
                $ques_ans_24 = ''; $ques_ans_23 = ''; $ques_ans_25 = '';
               }
           break;

        case 27:
 // "There was no trauma/accident"/"There was trauma/accident and this happened: "
           $layman_summar .=  (!empty($singlelevel['answer']) ? "The patient experienced trauma/accident associated with ".$singlelevel['answer'] : "There was no trauma/accident").'. ' ;

           break;
        case 28:
          $ques_ans_28 = "The pain is described as ".$singlelevel['answer'].", " ;

             if(!empty($ques_ans_29) && !empty($ques_ans_30)){
               $layman_summar .= $ques_ans_28.''.$ques_ans_29.''.$ques_ans_30.'. ';
               $ques_ans_28 = '' ; $ques_ans_29 = '' ; $ques_ans_30 = '' ;
             }

 // "The pain is " aching/burning/throbbing/shooting ", " constant/comes and goes " and " is the worst in the morning/is the worst in the afternoon/is the worst in the night/about the same all day


           break;
        case 29:

          $ques_ans_29 = $singlelevel['answer'] ;

             if(!empty($ques_ans_28) && !empty($ques_ans_30)){
               $layman_summar .= $ques_ans_28.''.$ques_ans_29.''.$ques_ans_30.'. ';
               $ques_ans_28 = '' ; $ques_ans_29 = '' ; $ques_ans_30 = '' ;
               // $layman_summar .= $ques_ans_28.''.$ques_ans_29.''.$ques_ans_30.'. ';
             }

           break;
        case 30:

        //  commented as now we use checkbox instead of radio button
          // $ques_ans_30 = (stripos($singlelevel['answer'], 'about') !== FALSE ? ' and is about the same all day' : " and is the worst in the ". $singlelevel['answer']) ;

$singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);

          $ques_ans_30 = (stripos($singlelevel['answer'], 'about') !== FALSE ? ' and is about the same all day' : " and is the worst in the ". $singlelevel['answer']) ;

             if(!empty($ques_ans_28) && !empty($ques_ans_29)){
               // $layman_summar .= $ques_ans_28.''.$ques_ans_29.''.$ques_ans_30.'. ';
               $layman_summar .= $ques_ans_28.''.$ques_ans_29.''.$ques_ans_30.'. ';
               $ques_ans_28 = '' ; $ques_ans_29 = '' ; $ques_ans_30 = '' ;
             }
           break;
        case 31:
           $layman_summar .=  "The pain onset was: ".$singlelevel['answer'].'. ' ;

           break;
        case 19:
// "The pain is on the " back/front/joints(knuckle/middle joint/finger-tip joint)/whole finger " in the " thumb/index/middle/ring/little (or multiple) " finger"/" fingers".

// {"thumb": "first digit", "index": "second digit", "middle": "third digit", "ring": "fourth digit", "little": "fifth digit"}
        $translate_case19 = array("thumb"=> "first digit", "index"=> "second digit", "middle"=> "third digit", "ring"=> "fourth digit", "little"=> "fifth digit");
// pr($singlelevel['answer']);
        if(is_array($singlelevel['answer'])){
          foreach ($singlelevel['answer'] as $k19 => $v19) {
  $singlelevel['answer'][$k19] = !empty($translate_case19[strtolower($v19)]) ? $translate_case19[strtolower($v19)] : $v19 ;
          }
        }
// pr($singlelevel['answer']); die;
            $ques_ans_19 =  " in the ".(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']). (is_array($singlelevel['answer']) && count($singlelevel['answer']) > 1 ? ' fingers' : ' finger') ;
            if(!empty($ques_ans_34)){

                $case_19_34_35 .= ' The pain is on the '.(stripos($ques_ans_34, 'joint') !== FALSE ? $ques_ans_34.' (***)' : $ques_ans_34).$ques_ans_19.'. ';
                $ques_ans_34 = '';  $ques_ans_19 = '' ;

            }

           break;
        case 34:
 // The pain is on the " back/front/joints(knuckle/middle joint/finger-tip joint)/whole finger
           $ques_ans_34 = $singlelevel['answer'] ;
            if( !empty($ques_ans_19)){

                 $case_19_34_35 .= ' The pain is on the '.(stripos($ques_ans_34, 'joint') !== FALSE ? $ques_ans_34.' (***)' : $ques_ans_34).$ques_ans_19.'. ';
                $ques_ans_34 = '';  $ques_ans_19 = '' ;

            }

           break;
        case 35:
         // and " right/left/both/neither " wrist"
           $ques_ans_35 =  $singlelevel['answer'] ;
             $case_19_34_35 = str_replace('***', $ques_ans_35, $case_19_34_35) ;
             // pr($case_19_34_35); die;
           break;

        case 36:
// pr($singlelevel['answer']);
        // below is the formatting realted code
        if(is_array($singlelevel['answer'])){
          $temp_36_ar = array();
          foreach ($singlelevel['answer'] as $k36 => $v36) {
              $t36 = explode('-', $v36);
             // $temp_36_ar[] = !empty($t36[1]) ? $t36[0].' ('.(stripos($t36[1], 'both') !== false ? 'bilateral' : $t36[1] ).')' : $t36[0] ;

// (stripos($t36[1], 'both') !== false ? 'bilateral '. $t36[0] : $t36[1].' '.rtrim($t36[0],'s') )
             $temp_36_ar[] = !empty($t36[1]) ? (stripos($t36[1], 'both') !== false ? 'bilateral '. $t36[0] : $t36[1].' '.str_ireplace('feet', 'foot', rtrim($t36[0],'s')) ) : $t36[0] ;
          }
          $singlelevel['answer'] = $temp_36_ar ;
        }
// pr($singlelevel['answer']); die ;
      $layman_summar .=  "The patient feels numbness in the ".strtolower(implode(', ', $singlelevel['answer'])).'. ' ;
           break;
        case 37:

        // below is the formatting realted code
        if(is_array($singlelevel['answer'])){
          $temp_36_ar = array();
          foreach ($singlelevel['answer'] as $k36 => $v36) {
              $t36 = explode('-', $v36);
             // $temp_36_ar[] = !empty($t36[1]) ? $t36[0].' ('.(stripos($t36[1], 'both') !== false ? 'bilateral' : $t36[1] ).')' : $t36[0] ;
             $temp_36_ar[] = !empty($t36[1]) ? (stripos($t36[1], 'both') !== false ? 'bilateral '. $t36[0] : $t36[1].' '.str_ireplace('feet', 'foot', rtrim($t36[0],'s')) ) : $t36[0] ;
          }
          $singlelevel['answer'] = $temp_36_ar ;
        }

     $layman_summar .=  "The patient feels tingling in the ".strtolower(implode(', ', $singlelevel['answer'])).'. ' ;

           break;
        case 38:

        // below is the formatting realted code
        if(is_array($singlelevel['answer'])){
          $temp_36_ar = array();
          foreach ($singlelevel['answer'] as $k36 => $v36) {
              $t36 = explode('-', $v36);
             // $temp_36_ar[] = !empty($t36[1]) ? $t36[0].' ('.(stripos($t36[1], 'both') !== false ? 'bilateral' : $t36[1] ).')' : $t36[0] ;
             $temp_36_ar[] = !empty($t36[1]) ? (stripos($t36[1], 'both') !== false ? 'bilateral '. $t36[0] : $t36[1].' '.str_ireplace('feet', 'foot', rtrim($t36[0],'s')) ) : $t36[0] ;
          }
          $singlelevel['answer'] = $temp_36_ar ;
        }

           $layman_summar .=  "The patient feels weakness in the ".strtolower(implode(', ', $singlelevel['answer'])).'. ' ;
           break;
        case 39:

        $ques_ans_39 = "The pain is described as ".strtolower(implode(', ', $singlelevel['answer'])).", " ;

        $ques_ans_39 = stripos($ques_ans_39, 'none') ? "The pain is described as " : $ques_ans_39 ; // In case of "none of the above", we remove the option

             if(!empty($ques_ans_41) && !empty($ques_ans_42)){
if(!empty($ques_ans_40)) $ques_ans_39 = str_ireplace("radiating","radiating (".$ques_ans_40.")",$ques_ans_39) ;

               $layman_summar .= $ques_ans_39.''.$ques_ans_41.''.$ques_ans_42.'. ';
               $ques_ans_39 = '' ; $ques_ans_41 = '' ; $ques_ans_42 = '' ;


             }
           break;

        case 40:

        $ques_ans_40 = $singlelevel['answer'] ;  // in case of radiating this will not be empty

//              if(!empty($ques_ans_39) && !empty($ques_ans_41) && !empty($ques_ans_42)){
// if(!empty($ques_ans_40)) $ques_ans_39 = str_ireplace("radiating","radiating(".$ques_ans_40.")",$ques_ans_39)

//                $layman_summar .= $ques_ans_39.''.$ques_ans_41.''.$ques_ans_42.'. ';
//                $ques_ans_39 = '' ; $ques_ans_41 = '' ; $ques_ans_42 = '' ;
//              }

           break;


        case 41:

          $ques_ans_41 = strtolower($singlelevel['answer'])  ;

             if(!empty($ques_ans_39) && !empty($ques_ans_42)){
if(!empty($ques_ans_40)) $ques_ans_39 = str_ireplace("radiating","radiating (".$ques_ans_40.")",$ques_ans_39);

               $layman_summar .= $ques_ans_39.''.$ques_ans_41.''.$ques_ans_42.'. ';
               $ques_ans_39 = '' ; $ques_ans_41 = '' ; $ques_ans_42 = '' ;
             }
           break;

        case 42:

 // now input type is checkbox
$singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);

          $ques_ans_42 = (stripos($singlelevel['answer'], 'about') !== FALSE ? ' and is about the same all day' : " and is the worst in the ". strtolower($singlelevel['answer']) ) ;
             if(!empty($ques_ans_39) && !empty($ques_ans_41)){
if(!empty($ques_ans_40)) $ques_ans_39 = str_ireplace("radiating","radiating (".$ques_ans_40.")",$ques_ans_39);

               $layman_summar .= $ques_ans_39.''.$ques_ans_41.''.$ques_ans_42.'. ';
               $ques_ans_39 = '' ; $ques_ans_41 = '' ; $ques_ans_42 = '' ;
             }
           break;

           case 44:
             $layman_summar .=  "I go to bed at each night: ".(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']).". ";
           break;

        case 45:
             $layman_summar .=  "I am take to fall asleep: ".(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer'])." minutes. " ;
           break;
        case 46:
             $layman_summar .=  "I am get sleep in each night: ".(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer'])." hours. " ;
           break;
        case 47:
             $layman_summar .=  "Leave the TV on or use your phone while in bed: ".(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']).". " ;
           break;
        case 48:
             $layman_summar .=  "I am take in the middle of the night: ".(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer'])." trips. " ;
           break;
        case 49:
             $layman_summar .=  "Feel rested when wake up in the morning: ".(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']).". " ;
           break;
        case 50:
             $layman_summar .=  "Take naps during the day: ".(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']).". " ;
           break;
        case 51:
             $layman_summar .=  "I am take naps per day: ".(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']).". " ;
           break;
        case 52:
             $layman_summar .=  "I am work each week: ".(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer'])." hours. " ;
           break;
        case 53:
             $layman_summar .=  "Take exercise: ".(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']).". " ;
           break;
        case 54:
             $layman_summar .=  "Exercise time: ".(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']).". " ;
           break;
         case 55:

            $question_ans_55 = is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer'];
           break;

         case 56:
             $layman_summar .= "The pain is described as ".strtolower(implode(", ", $singlelevel['answer']));
             if(isset($question_ans_55) && !empty($question_ans_55)){

                $layman_summar .= " that ".$question_ans_55.". ";
             }else{

              $layman_summar .= ". ";
             }
            break;

          case 57:
              if($singlelevel['answer'] == 'Yes'){

                $layman_summar .=  "Patient says the pain radiates to the ".(is_array($value[10]['answer']) ? strtolower(implode(', ', $value[10]['answer'])) :strtolower($value[10]['answer'])).". " ;
              }else{

                 $layman_summar .=  "Patient denies radiation. " ;
              }

           break;
        case 59:

              $arr = array(

                '' => 'How many times',
                '1' => 'Per hour',
                '2' => 'Per day',
                '3' => 'Per week',
                '4' => 'Per month'
                );

            $layman_summar .= ucfirst($arr[$singlelevel['answer']]).' feel the chest pain. ';

            break;
         case 60:

             $arr = array(

                '' => 'How long each episode',
                '1' => 'Seconds',
                '2' => 'Minutes',
                '3' => 'Hours',
                '4' => 'days'
                );

            $layman_summar .= ucfirst($arr[$singlelevel['answer']]).' long last episode. ';

            break;
        case 61:

          $layman_summar .= ucfirst($singlelevel['answer']).' makes it worse. ';

            break;
        case 62:

            $layman_summar .= ucfirst($singlelevel['answer']).' makes it better. ';

            break;
        case 63:

          //$layman_summar .= ucfirst($singlelevel['answer']).', I have been to the ER or stayed in the hospital for the chest pain. ';
          $question_63 = $singlelevel['answer'];

          $layman_summar .= $singlelevel['answer'] == 'Yes' ? 'Patient has been to the ER or stayed in the hospital for chest pain':'Patient has not been to the ER or stayed in the hospital for chest pain';

            break;
        case 64:

          /*if(!empty($singlelevel['answer'])){
            $layman_summar .= ucfirst($singlelevel['answer']).' times go to the ER or stayed in the hospital for the chest pain. ';
          }*/

          if(!empty($singlelevel['answer']) && isset($question_63) && $question_63 == 'Yes'){

            $layman_summar .= ' '.ucfirst($singlelevel['answer']).' times since his last office visit. ';
          }
          else{
            $layman_summar .= '. ';
          }

            break;
        case 65:

          /*if(!empty($singlelevel['answer'])){
            $layman_summar .= 'I have go to the ER or stayed in the hospital for the chest pain: '.$singlelevel['answer'].'. ';
          }*/

           $question_65 = '';
          if(!empty($singlelevel['answer'])){
            $question_65 = $singlelevel['answer'];
          }

            break;
        case 66:

          $arr = array(
              '' => 'How long stay',
              "1" => '<24 hours',
              "2" => '1 day',
              "3" => '2 days',
              "4" => '3 days',
              "5" => '4 days',
              "6" => '5 days',
              "7" => '6 days',
              "8" => '1 week',
              "9" => '2 weeks',
              "10" => '3 weeks'
              );
          /*if(!empty($singlelevel['answer'])){

            $layman_summar .= 'Stay in the hospital for the chest pain: '.$arr[$singlelevel['answer']].'. ';
          }*/

          $question_66 = '';
          if(!empty($singlelevel['answer'])){

            $question_66 .= $arr[$singlelevel['answer']];
          }

            break;

        case 67:

            /*if(!empty($singlelevel['answer'])){
              $layman_summar .= ucfirst($singlelevel['answer']).' hospital or ER for chest pain. ';
            }*/

            if(!empty($singlelevel['answer'])){
              $layman_summar .= "Patient initially went to ".ucfirst($singlelevel['answer']).' ER or hospital';
            }

            if(isset($question_65) && !empty($question_65)){

               $layman_summar .= ' on '.$question_65;
            }

            if(isset($question_66) && !empty($question_66)){

                $layman_summar .= ' and stayed for '.$question_66;
            }
            $layman_summar .= '. ';

            break;

        case 68:

            if(!empty($singlelevel['answer'])){
              $layman_summar .= ucfirst($singlelevel['answer']).', I have done procedures like a heart catherization, stent placement, or open heart bypass surgery. ';
            }

            break;

         case 69:


            $layman_summar .= 'Flights of stairs can climb without stopping: '.$singlelevel['answer'].'. ';

            break;
        case 70:

            $layman_summar .= 'Noticed the symptom each day: '.$singlelevel['answer'].' times. ';

            break;
         case 71:
           // print_r($singlelevel['answer']);die;
            $layman_summar .= 'The patient notices the symptoms after eating '.(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']).'. ';

            break;
        case 72:
          $layman_summar .= "It has occurred: ".$singlelevel['answer']." times. ";
          break;

         case 73:

            $question_73 = $singlelevel['answer'];
            $layman_summar .= ucfirst($singlelevel['answer']).", I having trouble drinking liquids or swallowing solid food. ";
            break;

         case 74:

          if(isset($question_73) && $question_73 == 'Yes'){
            if($singlelevel['answer'] == 'Liquids only'){

              $layman_summar .= (is_array($value[$k+1]['answer'])? ucfirst(implode(', ',$value[$k+1]['answer'])): ucfirst($value[$k+1]['answer']))." having trouble swallowing. ";

            }else{

               $layman_summar .= ucfirst($singlelevel['answer'])." having trouble swallowing. ";
            }
          }

          break;

        case 76:

          $arr = array(

            0 => 'How often',
            1 => 'Every day',
            2 => 'Every other day',
            3 => 'per week'

          );

          $layman_summar .= ucfirst($arr[$value[$k+1]['answer']])." ".$singlelevel['answer']." times go for a number two. ";
          break;

        case 78:


          $layman_summar .= ucfirst($singlelevel['answer'])." recently traveled out of the country. ";
          break;

        case 79:


          $layman_summar .= ucfirst($singlelevel['answer'])." country recently traveled. ";
          break;

        case 80:


          $layman_summar .= (is_array($singlelevel['answer']) ? ucfirst(implode(", ", $singlelevel['answer'])) : ucfirst($singlelevel['answer']))." medications recently started. ";
          break;

        case 81:


          $layman_summar .= (is_array($singlelevel['answer']) ? ucfirst(implode(", ", $singlelevel['answer'])) : ucfirst($singlelevel['answer']))." fruits eat. ";
          break;

        case 82:


          $layman_summar .= (is_array($singlelevel['answer']) ? ucfirst(implode(", ", $singlelevel['answer'])) : ucfirst($singlelevel['answer']))." glasses water dring in a day. ";
          break;

        case 83:


          $layman_summar .=(is_array($singlelevel['answer']) ? ucfirst(implode(", ", $singlelevel['answer'])) : ucfirst($singlelevel['answer']))." medications recently started. ";
          break;

        case 84:


          $layman_summar .= (is_array($singlelevel['answer']) ? ucfirst(implode(", ", $singlelevel['answer'])) : ucfirst($singlelevel['answer']))." Times per week notice blood in stool. ";
          break;

        case 85:


          $layman_summar .= (is_array($singlelevel['answer']) ? ucfirst(implode(", ", $singlelevel['answer'])) : ucfirst($singlelevel['answer'])).", I have notice bright red streaks of blood on the toilet paper. ";
          break;

        case 86:


          $layman_summar .= (is_array($singlelevel['answer']) ? ucfirst(implode(", ", $singlelevel['answer'])) : ucfirst($singlelevel['answer']))." is the color of stool. ";
          break;

         case 87:


          $layman_summar .= (is_array($singlelevel['answer']) ? ucfirst(implode(", ", $singlelevel['answer'])) : ucfirst($singlelevel['answer']))." medications recently started. ";
          break;

        case 88:


          $layman_summar .= (is_array($singlelevel['answer']) ? ucfirst(implode(", ", $singlelevel['answer'])) : ucfirst($singlelevel['answer'])).", I was eat at restaurants within 24 hours of symptoms. ";
          break;

        case 89:

          $layman_summar .= "I was eat ".(is_array($value[$k+1]['answer']) ? implode(", ", $value[$k+1]['answer']) : $value[$k+1]['answer'])." at ".(is_array($singlelevel['answer']) ? implode(", ", $singlelevel['answer']) : $singlelevel['answer']).". ";
          break;

         case 91:

          $layman_summar .= (is_array($singlelevel['answer']) ? ucfirst(implode(", ", $singlelevel['answer'])) : ucfirst($singlelevel['answer'])).", I Have been in contact with any sick children within 24 hours of symptoms starting. ";
          break;

        case 92:

          $layman_summar .= (is_array($singlelevel['answer']) ? ucfirst(implode(", ", $singlelevel['answer'])) : ucfirst($singlelevel['answer']))." pregnant. ";
          break;

         case 93:

             $layman_summar .= "It feels ".strtolower(implode(", ", $singlelevel['answer'])).'. ';
            break;

        case 94:
            // echo '<pre>';
            // print_r($singlelevel['answer']);die;
             $layman_summar .= "Radiating: ".implode(", ", $singlelevel['answer']).'. ';
            break;

        case 95:
            // echo '<pre>';
            // print_r($singlelevel['answer']);die;
             $layman_summar .= "Pain travel: ".implode(", ", $singlelevel['answer']).'. ';
            break;

        case 96:
          $question_ans_96 = is_array($singlelevel['answer']) ? implode(", ", $singlelevel['answer']): $singlelevel['answer'];
            break;
        case 97:

              $arr = array(

                '' => 'How many times',
                '1' => 'Per hour',
                '2' => 'Per day',
                '3' => 'Per week',
                '4' => 'Per month'
                );

            //$layman_summar .= $singlelevel['answer'].' times '.$arr[$value[$k+1]['answer']].' feel the chest pain. ';
            $layman_summar .= 'It occurs about '.$singlelevel['answer'].' times '.$arr[$value[$k+1]['answer']];

              if(isset($question_ans_96) && !empty($question_ans_96)){

                $layman_summar .= ',most often '.$question_ans_96.". ";
              }
              else{

                $layman_summar .= ". ";
              }

            break;
         case 99:

             $arr = array(

                '' => 'How long each episode',
                '1' => 'Seconds',
                '2' => 'Minutes',
                '3' => 'Hours',
                '4' => 'days'
                );

            $layman_summar .= 'Episodes last '.ucfirst($singlelevel['answer']).' '.$arr[$value[$k+1]['answer']].' long. ';

            break;
          case 101:

             $layman_summar .= "It feels ".strtolower(implode(", ", $singlelevel['answer'])).'. ';
            break;

          case 102:

          $temp_str_102 = '';

          if(!empty($singlelevel['answer'])){
          $singlelevel['answer'] = explode(',', $singlelevel['answer']) ;

          $ruq_s = 'Right upper quadrant (RUQ(';
          $rlq_s = 'Right lower quadrant (RLQ(';
          $luq_s = 'Left upper quadrant (LUQ(';
          $llq_s = 'Left lower quadrant (LLQ(';

          if($gender == 1){

            $ruq = array('l-top1','mid2','l-top2','mid4','mid6');
            $luq = array('mid3','r-top1','mid5','r-top2','mid7');
            $rlq = array('mid9','l-top3','l-top3','mid8','l-bottom','mid12');
            $llq = array('mid10','r-top3','mid11','mid13','r-bottom');

            foreach ($singlelevel['answer'] as $k102 => $v102) {

              $temp_val = isset($img_abdominal_man_pain_detial_q_arr[$v102]) ? $img_abdominal_man_pain_detial_q_arr[$v102] : "" ;

              if(in_array($v102, $ruq)){

                $ruq_s .= substr($temp_val,strpos($temp_val,'(RUQ)')+6).', ';

              }
              elseif(in_array($v102, $rlq)){

                $rlq_s .= substr($temp_val,strpos($temp_val,'(RLQ)')+6).', ';
              }
              elseif (in_array($v102, $luq)) {

                $luq_s .= substr($temp_val,strpos($temp_val,'(LUQ)')+6).', ';
               // echo $luq_s.'<br>';
              }
              elseif (in_array($v102, $llq)) {

                $llq_s .= substr($temp_val,strpos($temp_val,'(LLQ)')+6).', ';

              }else{

                $temp_str_102 .= isset($img_abdominal_man_pain_detial_q_arr[$v102]) ? $img_abdominal_man_pain_detial_q_arr[$v102].', ' : "" ;

              }


            }
          }
          if($gender == 0){

            $ruq = array('l1','mid2','l2','mid4','mid6');
            $luq = array('mid3','r1','mid5','r2','mid7');
            $rlq = array('l3','l4','mid8','mid10','mid12');
            $llq = array('mid11','mid9','r3','mid13','r4');

            foreach ($singlelevel['answer'] as $k102 => $v102) {

              $temp_val = isset($img_abdominal_female_pain_detial_q_arr[$v102]) ? $img_abdominal_female_pain_detial_q_arr[$v102] : "" ;

              if(in_array($v102, $ruq)){

                $ruq_s .= substr($temp_val,strpos($temp_val,'(RUQ)')+6).', ';

              }
              elseif(in_array($v102, $rlq)){

                $rlq_s .= substr($temp_val,strpos($temp_val,'(RLQ)')+6).', ';
              }
              elseif (in_array($v102, $luq)) {

                $luq_s .= substr($temp_val,strpos($temp_val,'(LUQ)')+6).', ';
               // echo $luq_s.'<br>';
              }
              elseif (in_array($v102, $llq)) {

                $llq_s .= substr($temp_val,strpos($temp_val,'(LLQ)')+6).', ';

              }else{

                $temp_str_102 .= isset($img_abdominal_female_pain_detial_q_arr[$v102]) ? $img_abdominal_female_pain_detial_q_arr[$v102].', ' : "" ;

              }


            }
          }



          //$temp_str_102 = rtrim($temp_str_102, ', ');

          if(strlen($ruq_s) > 26){

            $ruq_s = rtrim($ruq_s,', ');
            $temp_str_102 .= $ruq_s.')), ';
          }

          if(strlen($rlq_s) > 26){

            $rlq_s = rtrim($rlq_s,', ');
            $temp_str_102 .= $rlq_s.')), ';
          }

          if(strlen($llq_s) > 25){

            $llq_s = rtrim($llq_s,', ');
            $temp_str_102 .= $llq_s.')), ';
          }

          if(strlen($luq_s) > 25){

            $luq_s = rtrim($luq_s,', ');
            $temp_str_102 .= $luq_s.')), ';
          }


          $temp_str_102 = rtrim($temp_str_102, ', ');
          //echo $ruq_s.'<br>'.$rlq_s.'<br>'.$llq_s.'<br>'.$luq_s.'<br>';

           $layman_summar .=  "Patient localizes the pain to the ".$temp_str_102.". " ;
        }

        break;

      case 103:

            $temp_str_103 = '';

            if(!empty($singlelevel['answer'])){

              $singlelevel['answer'] = explode(',', $singlelevel['answer']) ;

              if(in_array('left-bottom-left',$singlelevel['answer'])){

                $key = array_search('left-bottom-left', $singlelevel['answer']);
                $singlelevel['answer'][$key] = 'left-bottom-right';
              }

              if(in_array('right-bottom-left',$singlelevel['answer'])){

                $key = array_search('right-bottom-left', $singlelevel['answer']);
                $singlelevel['answer'][$key] = 'right-bottom-right';
              }

              $right_chest_s = 'Right chest(';
              $left_chest_s = 'Left chest(';
              $breastbone_s = 'Breastbone(';
              $right_breast_s = 'Right breast(';
              $left_breast_s = 'Left breast(';

              $right_chest_len = strlen($right_chest_s);
              $left_chest_len = strlen($left_chest_s);

              $breastbone_len = strlen($breastbone_s);
              $right_breast_len = strlen($right_breast_s);
              $left_breast_len = strlen($left_breast_s);

              if($gender == 1){

                $breastbone = array('mid-bottom','mid-mid','mid-top');
                $left_chest = array('right-bottom-left','right-bottom-right','right-chest','right-top','right-nipple');
                $right_chest = array('right-top1','left-chest','left-bottom-left','left-bottom-right','left-nipple');

                $answer = array_unique($singlelevel['answer']);

                foreach ($answer as $key => $ans) {

                  $temp_val = isset($img_chest_man_pain_detial_q_arr[$ans]) ? $img_chest_man_pain_detial_q_arr[$ans] : "" ;

                    if(in_array($ans, $breastbone) && !empty($temp_val)){

                        $breastbone_s .= $temp_val.', ';

                     }
                     elseif(in_array($ans, $left_chest) && !empty($temp_val)){

                        $left_chest_s .= $temp_val.', ';
                     }
                    elseif (in_array($ans, $right_chest) && !empty($temp_val)) {

                        $right_chest_s .= $temp_val.', ';
                       // echo $luq_s.'<br>';
                    }
                }
              }

              if($gender == 0){

                $right_chest = array('left1','left2');
                $left_chest = array('right1','right2');

                $right_breast = array('left9','left3','left4','left6','left5','left7','left8');
                $left_breast = array('right3','right4','right5','right6','right8','right7','right9');

                $breastbone = array('mid1','mid2','mid3');

                  $answer = array_unique($singlelevel['answer']);

                  foreach ($answer as $key => $ans) {

                    $temp_val = isset($img_chest_female_pain_detial_q_arr[$ans]) ? $img_chest_female_pain_detial_q_arr[$ans] : "" ;

                      if(in_array($ans, $breastbone) && !empty($temp_val)){

                          $breastbone_s .= $temp_val.', ';

                       }
                       elseif(in_array($ans, $left_chest) && !empty($temp_val)){

                          $left_chest_s .= $temp_val.', ';
                       }
                      elseif (in_array($ans, $right_chest) && !empty($temp_val)) {

                          $right_chest_s .= $temp_val.', ';
                         // echo $luq_s.'<br>';
                      }
                      elseif(in_array($ans, $right_breast) && !empty($temp_val)){

                          $right_breast_s .= $temp_val.', ';
                       }
                      elseif (in_array($ans, $left_breast) && !empty($temp_val)) {

                          $left_breast_s .= $temp_val.', ';
                         // echo $luq_s.'<br>';
                      }
                  }
                }

              if(strlen($right_chest_s) > $right_chest_len){

                  $right_chest_s = rtrim($right_chest_s,', ');
                  $temp_str_103 .= $right_chest_s.'), ';
              }

              if(strlen($left_chest_s) > $left_chest_len){

                  $left_chest_s = rtrim($left_chest_s,', ');
                  $temp_str_103 .= $left_chest_s.'), ';
              }

              if(strlen($breastbone_s) > $breastbone_len){

                $breastbone_s = rtrim($breastbone_s,', ');
                $temp_str_103 .= $breastbone_s.'), ';
              }

              if(strlen($right_breast_s) > $right_breast_len){

                  $right_breast_s = rtrim($right_breast_s,', ');
                  $temp_str_103 .= $right_breast_s.'), ';
              }

              if(strlen($left_breast_s) > $left_breast_len){

                  $left_breast_s = rtrim($left_breast_s,', ');
                  $temp_str_103 .= $left_breast_s.'), ';
              }

              $temp_str_103 = rtrim($temp_str_103, ', ');
                //echo $ruq_s.'<br>'.$rlq_s.'<br>'.$llq_s.'<br>'.$luq_s.'<br>';

              $layman_summar .=  "Patient localizes the pain to the ".$temp_str_103.". " ;
            }

            break;

          case 104:

              $question_104 = array(
                  "" => "",
                  "1" => '1 day',
                  "2" => '2 days',
                  "3" => '3 days',
                  "4" => '4 days',
                  "5" => '5 days',
                  "6" => '6 days',
                  "7" => '7 days',
                  "8" => '8 days',
                  "9" => '9 days',
                  "10" => '10 days',
                  "11" => '11 days',
                  "12" => '12 days',
                  "13" => '13 days',
                  "14" => '2 weeks',
                  "15" => '3 weeks',
                  "16" => '4 weeks',
                  "17" => '5 weeks',
                  "18" => '6 weeks',
                  "19" => '2 months',
                  "20" => '3 months',
                  "21" => '4 months',
                  "22" => '5 months',
                  "23" => '6 months',
                  "24" => '7 months',
                  "25" => '8 months',
                  "26" => '9 months',
                  "27" => '10 months',
                  "28" => '11 months',
                  "29" => '1 year',
                  "30" => '2 years',
                  "31" => '3 years',
                  "32" => '4 years',
                  "33" => '5 years',
                  "34" => '6 years',
                  "35" => '7 years',
                  "36" => '8 years',
                  "38" => '9 years',
                  "39" => '10 years',
                  "40" => '10+ years',
                 );
              if(!empty($value[$k+1]['answer'])){

                $layman_summar .= ucfirst($question_104[$singlelevel['answer']])." long you have been in pain and pain started at ".$value[$k+1]['answer'].". ";

              }else{

                $layman_summar .= ucfirst($question_104[$singlelevel['answer']])." long you have been in pain. ";
              }

              break;
          case 106:

                $question_106 = array(

                  'Left' => 'left',
                  'Right' => 'right',
                  'Both' => 'bilateral'
                 );

                $question_107 = array(

                  'Right more than left' => 'R>L',
                  'Left more than right' => 'L>R',
                  'About the same' => 'L=R'
                 );

                if($singlelevel['answer'] == 'Both'){

                  if($value[$k+1]['question_id'] == 107 && !empty($value[$k+1]['answer'])){

                    $layman_summar .= "You have pain in ".$question_106[$singlelevel['answer']]." foot and ".$question_107[$value[$k+1]['answer']]." foot hurts worse. ";

                  }else{

                    $layman_summar .= "You have pain in ".$question_106[$singlelevel['answer']]." foot. ";

                  }
                }else{

                    $layman_summar .= "You have pain in ".$question_106[$singlelevel['answer']]." foot. ";

                  }

              break;
          case 108:

              $question_108 = array(


                'Bottom of foot' => 'plantar of foot',
                'Back of foot' => 'back of foot',
                'Both top and bottom' => 'all over foot',
                'Front of foot' => 'anterior foot',
                'Heel of foot' => 'posterior foot',
                'Both front and back foot' => 'both front and back foot'

              );

              $ans = '';

              if(!empty($singlelevel['answer']) && is_array($singlelevel['answer'])){

                foreach ($singlelevel['answer'] as $qk => $qval) {

                  $ans .= $question_108[$qval].',';
                }
              }else{

                $ans = $singlelevel['answer'];
              }

              $layman_summar .= "Your foot hurts (front verses back) : ".$ans.". ";

              break;
          case 109:

              $question_109 = array(

                'Side of big toe' => 'medial sided',
                'Small toe side' => 'lateral sided',
                'Both sides of foot' => 'both sides of foot'
              );

               $ans = '';

              if(!empty($singlelevel['answer']) && is_array($singlelevel['answer'])){

                foreach ($singlelevel['answer'] as $qk => $qval) {

                  $ans .= $question_109[$qval].',';
                }
              }else{

                $ans = $singlelevel['answer'];
              }

              $layman_summar .= "Your foot hurts (side) : ".$ans.". ";

              break;

          case 110:

              $ans = "";

              if($singlelevel['answer'] == 'Suddenly'){

                $ans_111 = $value[$k+1]['answer'];

                if(in_array('fall', $ans_111)){

                  $ans_112 = $value[$k+2]['answer'];

                  $layman_summar .= "Pain start :".$singlelevel['answer']." due to ".(is_array($ans_111) ? implode(",", $ans_111) : $ans_111)." and you fall due to ".(is_array($ans_112) ? implode(",", $ans_112) : $ans_112).". ";

                }else{

                  $layman_summar .= "Pain start : ".$singlelevel['answer']." due to ".(is_array($ans_111) ? implode(",", $ans_111) : $ans_111).". ";
                }
              }else{

                $layman_summar .= "Pain start : ".$singlelevel['answer'].". ";
              }

              break;

          case 113:

              $layman_summar .= ucfirst($singlelevel['answer'])." injury happen at work. ";

            break;

          case 114:

              $layman_summar .= (is_array($singlelevel['answer']) ? ucfirst(implode(",", $singlelevel['answer'])) : ucfirst($singlelevel['answer']))." describe your pain. ";

            break;

          case 115:

              $layman_summar .= ucfirst($singlelevel['answer'])." pain is worse than original pain. ";

            break;

        case 116:

              $layman_summar .= ucfirst($singlelevel['answer'])." feel warm to touch. ";

            break;

        case 117:

              if($singlelevel['answer'] == 'Yes'){

                $layman_summar .= ucfirst($singlelevel['answer']).", You have stiffness/pain in other joints : ".(is_array($value[$k+1]['answer']) ? implode(",",$value[$k+1]['answer']) : $value[$k+1]['answer']).". ";

              }else{

                $layman_summar .= ucfirst($singlelevel['answer']).", You have stiffness/pain in other joints. ";

              }

            break;

         case 119:

              $layman_summar .= ucfirst($singlelevel['answer']).", You have abnormal hair/nail growth or sweating. ";

            break;

         case 120:

              $layman_summar .= ucfirst($singlelevel['answer']).", You have swollen feet. ";

            break;

        case 121:

            if($singlelevel['answer'] == 'comes and goes'){

              $layman_summar .= "Your foot pain is described as intermittent. ";

            }
            else{

               $layman_summar .= "Your foot pain is described as ".$singlelevel['answer'].". ";

            }

            break;

          case 122:

              if($singlelevel['answer'] == 'morning'){

                $layman_summar .= "In ".$singlelevel['answer']." your foot pain the worst. ".$value[$k+1]['answer'].", the pain last for more than one hour or less. ";

              }else{

                $layman_summar .= "In ".$singlelevel['answer']." your foot pain the worst. ";
              }

            break;

          case 124:

              $layman_summar .= ucfirst($singlelevel['answer'])." causes your pain to get better. ";

            break;

          case 125:

              $layman_summar .= ucfirst($singlelevel['answer'])." causes your pain to get worse. ";

            break;

          case 126:

              $layman_summar .= ucfirst($singlelevel['answer']).", You have muscle spasms. ";

            break;

          case 127:

                $question_127 = array(

                  'Left' => 'left',
                  'Right' => 'right',
                  'Both' => 'bilateral'
                 );

                $question_128 = array(

                  'Right more than left' => 'R>L',
                  'Left more than right' => 'L>R',
                  'About the same' => 'L=R'
                 );

               if($singlelevel['answer'] == 'Both'){

                  if($value[$k+1]['question_id'] == 128 && !empty($value[$k+1]['answer'])){

                    $layman_summar .= "You have pain in ".$question_127[$singlelevel['answer']]." ankle and ".$question_128[$value[$k+1]['answer']]." ankle hurts worse. ";

                  }else{

                    $layman_summar .= "You have pain in ".$question_127[$singlelevel['answer']]." ankle. ";

                  }
                }else{

                    $layman_summar .= "You have pain in ".$question_127[$singlelevel['answer']]." ankle. ";

                  }

              break;

            case 129:

            //pr($singlelevel);

              $question_129 = array(


                'front of ankle' => 'anterior ankle',
                'back of ankle' => 'posterior ankle',
                'both front and back of ankle' => 'both front and back of ankle'

              );

              $ans = null;

              if(!empty($singlelevel['answer']) && is_array($singlelevel['answer'])){

                foreach ($singlelevel['answer'] as $qk => $qval) {

                  $ans[]= $question_129[$qval];
                }
                 $ans = implode(",", $ans);
              }else{

                $ans = $singlelevel['answer'];
              }

              $layman_summar .= "Your ankle hurts (front verses back) : ".$ans.". ";

              break;

           case 130:

           //pr($singlelevel);

              $question_130 = array(

                "side of big toe" => 'medial sided',
                "small toe side" => 'lateral sided',
                "both sides of ankle" => 'both sides of ankle'
              );

               $ans = null;

              if(!empty($singlelevel['answer']) && is_array($singlelevel['answer'])){

                foreach ($singlelevel['answer'] as $qk => $qval) {

                 // pr($qval);

                  $que = trim($qval);

                  $ans[] = $question_130[$que];
                }

                $ans = implode(",",$ans);
              }else{

                $ans = $singlelevel['answer'];
              }

              //pr($ans);

              $layman_summar .= "Your ankle hurts (side) : ".$ans.". ";

              break;

          case 131:

              $layman_summar .= ucfirst($singlelevel['answer']).", You have swollen ankle. ";

            break;

          case 132:

            if($singlelevel['answer'] == 'comes and goes'){

              $layman_summar .= "Your ankle pain is described as intermittent. ";

            }
            else{

               $layman_summar .= "Your ankle pain is described as ".$singlelevel['answer'].". ";

            }

            break;

        case 133:

              if($singlelevel['answer'] == 'morning'){

                $layman_summar .= "In ".$singlelevel['answer']." your ankle pain the worst. ".$value[$k+1]['answer'].", the pain last for more than one hour or less. ";

              }else{

                $layman_summar .= "In ".$singlelevel['answer']." your ankle pain the worst. ";
              }

            break;

        case 135:

                $question_135 = array(

                  'Left' => 'left',
                  'Right' => 'right',
                  'Both' => 'bilateral'
                 );

                $question_136 = array(

                  'Right more than left' => 'R>L',
                  'Left more than right' => 'L>R',
                  'About the same' => 'L=R'
                 );

               if($singlelevel['answer'] == 'Both'){

                  if($value[$k+1]['question_id'] == 136 && !empty($value[$k+1]['answer'])){

                    $layman_summar .= "You have pain in ".$question_135[$singlelevel['answer']]." hip and ".$question_136[$value[$k+1]['answer']]." hip hurts worse. ";

                  }else{

                    $layman_summar .= "You have pain in ".$question_135[$singlelevel['answer']]." hip. ";

                  }
                }else{

                    $layman_summar .= "You have pain in ".$question_135[$singlelevel['answer']]." hip. ";

                  }

              break;

          case 137:

           //pr($singlelevel);

              $question_136 = array(

                "groin" => 'groin/anterior medial hip',
                "hip" => 'lateral hip',
                "buttock" => 'posterior hip/gluteal'
              );

               $ans = null;

              if(!empty($singlelevel['answer']) && is_array($singlelevel['answer'])){

                foreach ($singlelevel['answer'] as $qk => $qval) {

                 // pr($qval);

                  $que = trim($qval);

                  $ans[] = $question_136[$que];
                }

                $ans = implode(",",$ans);
              }else{

                $ans = $singlelevel['answer'];
              }

              //pr($ans);

              $layman_summar .= "Your hip hurts : ".$ans.". ";

              break;

           case 138:

              $layman_summar .= ucfirst($singlelevel['answer']).", You have hip pain when you stand or put weight on the side of pain. ";

            break;

          case 139:

              $layman_summar .= ucfirst($singlelevel['answer']).", You have pain with direct pressure on pain site. ";

            break;

         case 140:

              $layman_summar .= ucfirst($singlelevel['answer']).", You have swollen hip. ";

            break;

        case 141:

            if($singlelevel['answer'] == 'comes and goes'){

              $layman_summar .= "Your hip pain is described as intermittent. ";

            }
            else{

               $layman_summar .= "Your hip pain is described as ".$singlelevel['answer'].". ";

            }

            break;


         case 142:

              if($singlelevel['answer'] == 'morning'){

                $layman_summar .= "In ".$singlelevel['answer']." your hip pain the worst. ".$value[$k+1]['answer'].", the pain last for more than one hour or less. ";

              }else{

                $layman_summar .= "In ".$singlelevel['answer']." your hip pain the worst. ";
              }

            break;

        case 144:

          if(!empty($value[$k+1]) && isset($value[$k+1]['question_id']) && $value[$k+1]['question_id'] == 145){

             //Out of 10, the pain is a [X] at its best, and a [Y] at its worst.
             $layman_summar .= "Out of 10, the pain is a ".$singlelevel['answer']." at its best, and a ".$value[$k+1]['answer']." at its worst. ";
          }

          break;

        case 146 :

              $question_146 = array(

                'worse' => 'aggravate',
                'better' => 'alleviate',
                'about the same' => 'same'

              );
              $layman_summar .= "Overall, you feels ".$question_146[$singlelevel['answer']]." since your last visit. ";
              break;

        case 147 :

              if(!empty($singlelevel['answer'])){
                  $layman_summar .= ucfirst($singlelevel['answer'])." makes aggravate. ";
              }
              break;

        case 148 :

              if(!empty($singlelevel['answer'])){

                  $layman_summar .= ucfirst($singlelevel['answer'])." makes alleviate. ";
                }
              break;

        case 149 :

              $layman_summar .= $singlelevel['answer'].", You have been vomiting. ";
              break;

        case 150 :

              $layman_summar .= ucfirst($singlelevel['answer'])." times You vomited since your last visit. ";
              break;
        case 151 :

              $layman_summar .= ucfirst($singlelevel['answer']).", You have seen bright red blood. ";
              break;
        case 152 :

              $layman_summar .= ucfirst($singlelevel['answer']).", You have seen stuff that looks like coffee grounds. ";
              break;

        case 153 :

              $layman_summar .= ucfirst($singlelevel['answer'])." side of your head is this on. ";
              break;

        case 154 :

             $layman_summar .= "It occurs ".$singlelevel['answer'].'. ';
             break;
        case 155 :

              $layman_summar .= "Headache is typically located at ".(is_array($singlelevel['answer']) ? implode($singlelevel['answer'], ", "): $singlelevel['answer']).". ";
              break;
        case 156:

        $ques_ans_156 = 'The patient states that the '.$cur_cc_name.' is better with '.strtolower($singlelevel['answer']);
          if(!empty($ques_ans_157)){
            $layman_summar .= $ques_ans_156.''.$ques_ans_157.'. ';
            $ques_ans_156 = ''; $ques_ans_157 = '';
          }
            break;

        case 157:

        $ques_ans_157 = ' and worse with '.strtolower($singlelevel['answer']);


          if(!empty($ques_ans_156)){
            $layman_summar .= $ques_ans_156.''.$ques_ans_157.'. ';
            $ques_ans_156 = ''; $ques_ans_157 = '';
          }

            break;

        case 158:

          $layman_summar .= "The chest pain began ".(is_array($singlelevel['answer']) ? strtolower(implode($singlelevel['answer'], ", ")): strtolower($singlelevel['answer'])).". ";

            break;

        case 159:

          $layman_summar .= $singlelevel['answer'] == 'Yes' ? 'You noticed locking, catching, or feeling like the joint gives out.': "You did not notice locking, catching, or feeling like the joint gives out. ";

            break;


        case 43:

        $temp_str_43 = '' ;
        if(!empty($singlelevel['answer'])){
          $singlelevel['answer'] = explode(',', $singlelevel['answer']) ;


          foreach ($singlelevel['answer'] as $k43 => $v43) {
            $temp_str_43 .= isset($img_backpain_detial_q_arr[$v43]) ? $img_backpain_detial_q_arr[$v43].', ' : "" ;
          }
// pr($singlelevel['answer']);
// pr($temp_str_43); die;

// ************************* Human body option remove redundancy START *********************
$temp_summar = '';
$ttemp = array();
if(stripos($temp_str_43, 'Neck pain') !== false ){
    $temp_summar .= 'Neck pain (';
  if(stripos($temp_str_43, 'Cervical') !== false ){
    // $temp_summar .= ' (Cervical (' ;
    if(stripos($temp_str_43, 'c4-5') !== false ){ $ttemp[] = 'C4'; $ttemp[] = 'C5'; }
    if(stripos($temp_str_43, 'c7') !== false ){ $ttemp[] = 'C7'; }
    if(stripos($temp_str_43, 'c6') !== false ){ $ttemp[] = 'C6'; }

sort($ttemp);


if(count(array_intersect($ttemp, array('C4','C5','C6','C7'))) == 4){
    $ttemp = 'C4-7';
}elseif(count(array_intersect($ttemp, array('C4','C5','C6'))) == 3){
$remain_ar = array_diff($ttemp, array('C4','C5','C6'));
 $ttemp = empty($remain_ar) ? 'C4-6' : 'C4-6, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('C4','C5'))) == 2){
$remain_ar = array_diff($ttemp, array('C4','C5'));
 $ttemp = empty($remain_ar) ? 'C4-5' : 'C4-5, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('C5','C6','C7'))) == 3){
$remain_ar = array_diff($ttemp, array('C5','C6','C7'));
 $ttemp = empty($remain_ar) ? 'C5-7' : 'C5-7, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('C5','C6'))) == 2){
$remain_ar = array_diff($ttemp, array('C5','C6'));
 $ttemp = empty($remain_ar) ? 'C5-6' : 'C5-6, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('C6','C7'))) == 2){
$remain_ar = array_diff($ttemp, array('C6','C7'));
 $ttemp = empty($remain_ar) ? 'C6-7' : 'C6-7, '.implode(', ', $remain_ar);
}else{

 $ttemp = implode(', ', $ttemp);

}
// pr($ttemp); die;
     $ttemp = rtrim($ttemp, ', ');
     // $temp_summar .= $ttemp.'), ';
     $temp_summar .= $ttemp.', ';
     $ttemp = '';
  }

   if(stripos($temp_str_43, 'Neck pain (Suprascapular (left))') !== false ){ $temp_summar .= 'Suprascapular (left)' ; }
    $temp_summar = rtrim($temp_summar, ', ');
   $temp_summar .= '), ';

}
if(stripos($temp_str_43, 'Upper back pain') !== false ){
    $temp_summar .= 'Upper back pain (' ;
  if(stripos($temp_str_43, 'Thoracic') !== false ){
      // $temp_summar .= ' (Thoracic(';
      $ttemp = array();
      if(stripos($temp_str_43, 't1') !== false ) $ttemp[] = 'T1';if(stripos($temp_str_43, 't2') !== false ) $ttemp[] = 'T2';if(stripos($temp_str_43, 't3') !== false ) $ttemp[] = 'T3';if(stripos($temp_str_43, 't4') !== false ) $ttemp[] = 'T4';if(stripos($temp_str_43, 't5') !== false ) $ttemp[] = 'T5';if(stripos($temp_str_43, 't6') !== false ) $ttemp[] = 'T6';if(stripos($temp_str_43, 't7') !== false ) $ttemp[] = 'T7';if(stripos($temp_str_43, 't8') !== false ) $ttemp[] = 'T8';if(stripos($temp_str_43, 't9') !== false ) $ttemp[] = 'T9';if(stripos($temp_str_43, 't10') !== false ) $ttemp[] = 'T10';if(stripos($temp_str_43, 't11') !== false ) $ttemp[] = 'T11';if(stripos($temp_str_43, 't12') !== false ) $ttemp[] = 'T12';

$tttemp = array();
foreach ($ttemp as $kt1 => $vt1) {
  $tttemp[] = (int) filter_var($vt1, FILTER_SANITIZE_NUMBER_INT);
}
sort($tttemp);
$ftemp = 'T';
// pr($tttemp); die;
// $tttemp= array('1','3','5','7','8','9','11','12');

foreach ($tttemp as $kt2 => $vt2) {
  if(!isset($prev_vt2)){  // for first element
      if(isset($tttemp[$kt2+1]) && ($tttemp[$kt2+1]-1 == $vt2)){ // if range after first element
         $ftemp .= $vt2.'-';
      }else{
         $ftemp .= $vt2.', ';
      }
  }elseif(($prev_vt2+1) != $vt2){  // if range completed

    if(!empty($start_vt2) && ($start_vt2 == $prev_vt2)){ // for alone element (not range)
       $ftemp .= 'T'.$prev_vt2.', ';

    }elseif(!empty($start_vt2)){  // for range
     $ftemp .=  substr($ftemp, -1) == 'T' ? '' : 'T';
       $ftemp .= $start_vt2.'-'.$prev_vt2.', ';
    }elseif((empty($start_vt2) && !empty($prev_vt2)) && (strpos($ftemp, '-') !== false)){ // if range after first element
      $ftemp .= $prev_vt2.', ';
    }
    if(!isset($tttemp[$kt2+1]))   $ftemp .= 'T'.$vt2;

      $start_vt2 = $vt2 ;
  }else{  // if iterateing through range

    if(!isset($tttemp[$kt2+1])){  // for last element
      if(empty($start_vt2)){  // for subsequest element range from first to last
          $ftemp .= $vt2;
      }else{
          $ftemp .= 'T'.$start_vt2.'-'.$vt2;
      }

    }

  }
  $prev_vt2 = $vt2;
}
// echo 'hi';
// pr($ftemp); die;
$ttemp = strtoupper($ftemp) ;
      if(!empty($ttemp)){
        $ttemp = rtrim($ttemp, ', ');
         // $temp_summar .= $ttemp.'), ';
        $temp_summar .= $ttemp.', ';
          $ttemp = '';
           }

   }

   if((stripos($temp_str_43, 'Upper back pain (Suprascapular (right))') !== false ) && (stripos($temp_str_43, 'Upper back pain (Suprascapular (left))') !== false )){
      $temp_summar .= 'Suprascapular (bilateral), ' ;
   }else {
    if(stripos($temp_str_43, 'Upper back pain (Suprascapular (right))') !== false ){ $temp_summar .= 'Suprascapular (right), ' ; }
    if(stripos($temp_str_43, 'Upper back pain (Suprascapular (left))') !== false ){ $temp_summar .= 'Suprascapular (left), ' ; }
   }


  if((stripos($temp_str_43, 'Upper back pain (Interscapular (right))') !== false ) && (stripos($temp_str_43, 'Upper back pain (Interscapular (left))') !== false )){
      $temp_summar .= 'Interscapular (bilateral), ' ;
  }else{
     if(stripos($temp_str_43, 'Upper back pain (Interscapular (right))') !== false ){ $temp_summar .= 'Interscapular (right), ' ; }
     if(stripos($temp_str_43, 'Upper back pain (Interscapular (left))') !== false ){ $temp_summar .= 'Interscapular (left), ' ; }
  }


  if((stripos($temp_str_43, 'Upper back pain (Scapular (right))') !== false )  && (stripos($temp_str_43, 'Upper back pain (Scapular (left))') !== false )){
    $temp_summar .= 'Scapular (bilateral), ' ;
  }else{
    if(stripos($temp_str_43, 'Upper back pain (Scapular (right))') !== false ){ $temp_summar .= 'Scapular (right), ' ; }
    if(stripos($temp_str_43, 'Upper back pain (Scapular (left))') !== false ){ $temp_summar .= 'Scapular (left), ' ; }
  }


  if((stripos($temp_str_43, 'Upper back pain (Infrascapular (right))') !== false ) && (stripos($temp_str_43, 'Upper back pain (Infrascapular (left))') !== false )){
    $temp_summar .= 'Infrascapular (bilateral), ' ;
  }else{

    if(stripos($temp_str_43, 'Upper back pain (Infrascapular (right))') !== false ){ $temp_summar .= 'Infrascapular (right), ' ; }
    if(stripos($temp_str_43, 'Upper back pain (Infrascapular (left))') !== false ){ $temp_summar .= 'Infrascapular (left), ' ; }

  }


  $temp_summar = rtrim($temp_summar, ', ');
  $temp_summar .= '), ';
 }


if(stripos($temp_str_43, 'Low back pain') !== false ){

  $temp_summar .= 'Low back pain (' ;
  if(stripos($temp_str_43, 'Lumbar') !== false ){
     // $temp_summar .= ' (Lumbar (' ;
     $ttemp = array();
     if(stripos($temp_str_43, 'l1') !== false ) $ttemp[] = 'L1';if(stripos($temp_str_43, 'l2') !== false ) $ttemp[] = 'L2';if(stripos($temp_str_43, 'l3') !== false ) $ttemp[] = 'L3';if(stripos($temp_str_43, 'l4') !== false ) $ttemp[] = 'L4';if(stripos($temp_str_43, 'l5') !== false ) $ttemp[] = 'L5';

sort($ttemp);
// $ttemp = array('L4','L2','L5');
if(count(array_intersect($ttemp, array('L1','L2','L3','L4','L5'))) == 5){
    $ttemp = 'L1-5';
}elseif(count(array_intersect($ttemp, array('L1','L2','L3','L4'))) == 4){
   $remain_ar = array_diff($ttemp, array('L1','L2','L3','L4'));
   $ttemp = empty($remain_ar) ? 'L1-4' : 'L1-4, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L1','L2','L3'))) == 3){
   $remain_ar = array_diff($ttemp, array('L1','L2','L3'));
   $ttemp = empty($remain_ar) ? 'L1-3' : 'L1-3, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L1','L2'))) == 2){
   $remain_ar = array_diff($ttemp, array('L1','L2'));
   $ttemp = empty($remain_ar) ? 'L1-2' : 'L1-2, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L2','L3','L4','L5'))) == 4){
   $remain_ar = array_diff($ttemp, array('L2','L3','L4','L5'));
   $ttemp = empty($remain_ar) ? 'L2-5' : 'L2-5, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L2','L3','L4'))) == 3){
   $remain_ar = array_diff($ttemp, array('L2','L3','L4'));
   $ttemp = empty($remain_ar) ? 'L2-4' : 'L2-4, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L2','L3'))) == 2){
   $remain_ar = array_diff($ttemp, array('L2','L3'));
   $ttemp = empty($remain_ar) ? 'L2-3' : 'L2-3, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L3','L4','L5'))) == 3){
   $remain_ar = array_diff($ttemp, array('L3','L4','L5'));
   $ttemp = empty($remain_ar) ? 'L3-5' : 'L3-5, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L3','L4'))) == 2){
   $remain_ar = array_diff($ttemp, array('L3','L4'));
   $ttemp = empty($remain_ar) ? 'L3-4' : 'L3-4, '.implode(', ', $remain_ar);
}elseif(count(array_intersect($ttemp, array('L4','L5'))) == 2){
   $remain_ar = array_diff($ttemp, array('L4','L5'));
   $ttemp = empty($remain_ar) ? 'L4-5' : 'L4-5, '.implode(', ', $remain_ar);
}else{
   $ttemp = implode(', ', $ttemp);

}

// pr($ttemp); die;

     if(!empty($ttemp)){
      $ttemp = rtrim($ttemp, ', ');
       // $temp_summar .= $ttemp.'), ';
      $temp_summar .= $ttemp.', ';
       $ttemp = ''; }

  }

  if(stripos($temp_str_43, 'Sacral') !== false ){
     // $temp_summar .= '(Sacral (' ;
     $ttemp = array();
    if(stripos($temp_str_43, 's1') !== false ) $ttemp[] = 'S1';if(stripos($temp_str_43, 's2-3') !== false ){  $ttemp[] = 'S2';  $ttemp[] = 'S3';}
sort($ttemp);

if(count(array_intersect($ttemp, array('S1','S2','S3'))) == 3){
    $ttemp = 'S1-3';
}elseif(count(array_intersect($ttemp, array('S1','S2'))) == 2){
$remain_ar = array_diff($ttemp, array('S1','S2'));
 $ttemp = empty($remain_ar) ? 'S1-2' : 'S1-2, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('S2','S3'))) == 2){
$remain_ar = array_diff($ttemp, array('S2','S3'));
 $ttemp = empty($remain_ar) ? 'S2-3' : 'S2-3, '.implode(', ', $remain_ar);

}else{
   $ttemp = implode(', ', $ttemp);
}
// pr($ttemp); die;
     if(!empty($ttemp)){
      $ttemp = rtrim($ttemp, ', ');
      // $temp_summar .= $ttemp.')), ';
       $temp_summar .= $ttemp.', ';
      $ttemp = ''; }

  }

  if((stripos($temp_str_43, 'Low back pain (Infrascapular (right))') !== false ) && (stripos($temp_str_43, 'Low back pain (Infrascapular (left))') !== false )){
     $temp_summar .= 'Infrascapular (bilateral), ' ;
  }else{
    if(stripos($temp_str_43, 'Low back pain (Infrascapular (right))') !== false ){ $temp_summar .= 'Infrascapular (right), ' ; }
    if(stripos($temp_str_43, 'Low back pain (Infrascapular (left))') !== false ){ $temp_summar .= 'Infrascapular (left), ' ; }
  }


  $temp_summar = rtrim($temp_summar, ', ');

  $temp_summar .= '), ';


}

  if((stripos($temp_str_43, 'Buttock pain (right)') !== false ) && (stripos($temp_str_43, 'Buttock pain (left)') !== false )){
    $temp_summar .= 'Buttock pain (bilateral), ' ;
  }else{
      if(stripos($temp_str_43, 'Buttock pain (right)') !== false ){ $temp_summar .= 'Buttock pain (right), ' ; }
      if(stripos($temp_str_43, 'Buttock pain (left)') !== false ){ $temp_summar .= 'Buttock pain (left), ' ; }
  }




if(stripos($temp_str_43, 'Shoulder pain') !== false ){

  $temp_summar .= 'Shoulder pain (' ;

if(stripos($temp_str_43, 'Shoulder pain (Infrascapular (right))') !== false  && stripos($temp_str_43, 'Shoulder pain (Infrascapular (left))') !== false ){
   $temp_summar .= 'Infrascapular (bilateral), ' ;
}else{
  if(stripos($temp_str_43, 'Shoulder pain (Infrascapular (right))') !== false ){ $temp_summar .= 'Infrascapular (right), ' ; }

  if(stripos($temp_str_43, 'Shoulder pain (Infrascapular (left))') !== false ){ $temp_summar .= 'Infrascapular (left), ' ; }
}

if(stripos($temp_str_43, 'Shoulder pain (Scapular (right))') !== false  && stripos($temp_str_43, 'Shoulder pain (Scapular (left))') !== false ){
  $temp_summar .= 'Scapular (bilateral), ' ;
}else{

  if(stripos($temp_str_43, 'Shoulder pain (Scapular (right))') !== false ){ $temp_summar .= 'Scapular (right), ' ; }
  if(stripos($temp_str_43, 'Shoulder pain (Scapular (left))') !== false ){ $temp_summar .= 'Scapular (left), ' ; }
}

if(stripos($temp_str_43, '(Posterior deltoid (right))') !== false && stripos($temp_str_43, 'Posterior deltoid (left)') !== false ){
   $temp_summar .= 'Posterior deltoid (bilateral), ' ;
}else{
  if(stripos($temp_str_43, '(Posterior deltoid (right))') !== false ){ $temp_summar .= 'Posterior deltoid (right), ' ; }

  if(stripos($temp_str_43, 'Posterior deltoid (left)') !== false ){ $temp_summar .= 'Posterior deltoid (left), ' ; }
}

if(stripos($temp_str_43, 'Shoulder pain (Suprascapular (right))') !== false && stripos($temp_str_43, 'Shoulder pain (Suprascapular (left))') !== false ){
   $temp_summar .= 'Suprascapular (bilateral), ' ;
}else{

  if(stripos($temp_str_43, 'Shoulder pain (Suprascapular (right))') !== false ){ $temp_summar .= 'Suprascapular (right), ' ; }

  if(stripos($temp_str_43, 'Shoulder pain (Suprascapular (left))') !== false ){ $temp_summar .= 'Suprascapular (left), ' ; }

}

  // if(stripos($temp_str_43, 'Shoulder pain (Interscapular (left))') !== false ){ $temp_summar .= 'Interscapular (left), ' ; }  // we commented this because we think  Interscapular (left)  is in Upper back pain



  $temp_summar = rtrim($temp_summar, ', ');

  $temp_summar .= '), ';

}
 // pr($temp_str_43); die;
// echo 'hello';
// pr($temp_summar); die;
// ************************* Human body option remove redundancy END *********************

          $temp_str_43 = rtrim($temp_summar, ', ');

          // $temp_str_43 = strtolower($temp_str_43) ;
          // pr($temp_str_43); die;

// $layman_summar .=  "The location is at: ".$temp_str_43.". " ;

          $layman_summar .=  "The pain is localized to the ".$temp_str_43.". " ;



        }





        /* // code commented as not used now according to new image design
          if(is_array($singlelevel['answer'])){
            foreach ($singlelevel['answer'] as $k43 => $v43) {
              $singlelevel['answer'][$k43] = isset($img_backpain_loc[$v43]) ? $img_backpain_loc[$v43] : '' ;
            }
        $layman_summar .=  "The location is at: ".strtolower(implode(', ', $singlelevel['answer'])).". " ;
          } else{
        $layman_summar .=  "The location is at: ".strtolower($singlelevel['answer']).". " ;
          }


          */
           break;



    }

// switch case end


      }
      // pr($k);
      // pr($singlelevel); die;
    }
$case_19_34_35 = str_replace('***', '', $case_19_34_35) ;  // if case 35 is empty then remove ***
    $layman_summar = $layman_summar.''.$case_19_34_35;  // for case 19, 34,35 , we concatenate outside loop because case 35 is optional
    $case_19_34_35 = '';

// $case_15_how_many_days
$layman_summar = str_replace('*case_15_how_many_days*', $case_15_how_many_days, $layman_summar) ;
$case_15_how_many_days = '';
  }

}
// pr($layman_summar); die;
return array('layman_summar' => $layman_summar, 'all_cc_name' => $all_cc_name) ;

// end




}






    public function ajaxsignup()
    {
        $this->loadModel('Categories');
        $this->loadModel('Users');

        $user = $this->Users->newEntity();
        if ($this->request->is('post'))
        {
            $query = $this->Users->find('all')
    ->where(['email' => $this->request->data['email']]);
            $usersss = $query->count();


            if($usersss == 0)
            {
                $user = $this->Users->patchEntity($user, $this->request->data);
                if ($this->Users->save($user))
                {
                    $username = ucfirst($user->username);
                    $activation_link = "<a href='".SITE_URL.'/users/activate_account/'.base64_encode($user->id)."'>Click here</a>";
                    $EmailTemplates= TableRegistry::get('EmailTemplates');

                    $query = $EmailTemplates->find('all')
                    ->where(['EmailTemplates.slug' => 'user_registration']);

                    $template = $query->first();

                    $mailMessage = str_replace(array('{username}', '{activation_link}'), array($username,$activation_link), $template->description);
                    $configsTable = TableRegistry::get('Sptconfigs');
                    $config = $configsTable->get('7');
                    $reciveemail = $config->value;

                    //$userEmail = $results->email;
                    $userEmail = 'admin@gmail.com';
                    $adminEmail = Configure::read('App.EmailFrom');
                    $email = new Email('default');
                    try {

                        $res = $email->from([ $adminEmail => $adminEmail ])
                                ->emailFormat('html')
                              ->to([$this->request->data['email'] => $this->request->data['email']])
                              ->subject($template->subject)
                              ->send($mailMessage);

                        $sucessarray['status'] = true;
                        $sucessarray['msg'] = 'To verify your email address Please check your email';

                    } catch (Exception $e) {

                        $sucessarray['status'] = false;
                        $sucessarray['msg'] = 'Email not send Please try again later';

                    }


                }
                else
                {
                    $sucessarray['status'] = false;
                    $sucessarray['msg'] = 'Try again';
                }
            }
            else
            {
                    $sucessarray['status'] = false;
                    $sucessarray['msg'] = 'Email already Exist';
            }


        }

        echo json_encode($sucessarray);  die;
        //$country =  json_decode($this->country());
        //$state   =  json_decode($this->state($user->country));
        //$city    =  json_decode($this->city($user->state));
       // $this->set(array('data'=>$user));
     }

    public function signup()
    {

        $titleforlayout = 'Sign Up'  ;
        $this->set('titleforpage', $titleforlayout);
        $this->layout = 'other_pages';
        $this->loadModel('Categories');
        $this->loadModel('Users');
        $session = $this->request->session();
    $session->read('Config.data');

         if(!empty($session->read('Config.data'))){
          $get = $session->read('Config.data');
        if($get['role_id'] == 2){
             $this->redirect(array('controller'=>'users','action'=>'dashboard', 'prefix' => $this->prefix));
             }
             else if($get['role_id'] == 3)
             {
                 $this->redirect(array('controller'=>'users','action'=>'viewer', 'prefix' => $this->prefix));
             }
            else
             {
              $this->redirect(array('controller'=>'users','action'=>'index', 'prefix' => $this->prefix));
             }
          //return $this->redirect(SITE_URL);
        } else{
        $user = $this->Users->newEntity();
        if ($this->request->is('post')) {
            $password = $this->request->data['password'];
            $query = $this->Users->find('all')
    ->where(['email' => $this->request->data['email']]);
            $usersss = $query->count();

            if($usersss == 0)
            {
                $this->request->data['role_id'] = 2 ;
                $user = $this->Users->patchEntity($user, $this->request->data);
                $session->write('UserData',$this->request->data);
                //if ($this->Users->save($user))
                //{
                  //  $this->Flash->error(__('Some thing Wrong please try again.'));

                    //$this->set("mailMessage",'sdfdsf') ;
                    //$this->Email->to = 'pram199011@gmail.com';
                    //$this->Email->subject = 'sdfsd';
                    //$this->Email->from = 'pram199011@gmail.com';
                    //$this->Email->sendAs = 'html';
                    //$this->Email->send('sdfsd');

                            //  return $this->redirect(['action' => 'login']);
                    return $this->redirect(['action' => 'signupsecond', 'prefix' => $this->prefix]);
                //}
            }
            else
            {
                $this->Flash->error(__('Email already Exist'));
                return $this->redirect(['action' => 'signup', 'prefix' => $this->prefix]);
            }


        } }
   //     echo json_encode($sucessarray);  die;
        //$country =  json_decode($this->country());
        //$state   =  json_decode($this->state($user->country));
        //$city    =  json_decode($this->city($user->state));
        $this->set(array('data'=>$user));
    }



    /* public function updateAvatar(){
        $this->autoRender = false;
        $id = $this->Auth->user('id');



        if( $this->request->is(['post','put','ajax']) ){

            $user = $this->Users->find()->select(['id','profile_picture'])->where(['id' => $id])->first();
            $oldName = $user->profile_picture;
            $this->Users->patchEntity( $user, $this->request->data(), ['validate' => 'avatar']);

            if( !$user->errors() ){

                $orgName = $this->request->data['profile_picture']['name'];
                $tmpName = $this->request->data['profile_picture']['tmp_name'];

                $fileName = $this->newFileName( $orgName );

                //$ext = $this->ImageCrop->ext($fileName);
                //$path = WWW_ROOT . 'data' . DS . 'avatar' . DS;
                $path = WWW_ROOT . 'files' . DS . 'users' . DS;

                //$widthArray = ['200','400'];
                //foreach($widthArray as $newWidth){
                //    $this->ImageCrop->compressImage( $ext,$tmpName,$newWidth,$path,$fileName );
                //}
                move_uploaded_file($tmpName,$path.$fileName);

                $path123 = WWW_ROOT . 'files' . DS . 'users' . DS. $fileName;
                $path12345 = WWW_ROOT . 'files' . DS . 'users' . DS. 'small' . DS . $fileName ;
                $path_thumb= WWW_ROOT . 'files' . DS . 'users' . DS. 'thumb' . DS . $fileName ;



                $fff  =  $this->resize_crop_image(400,400,$path123,$path12345,80);
                $fff12  =  $this->resize_crop_image(270,185,$path123,$path_thumb,80);



                $user['profile_picture'] = $fileName;
                if( $this->Users->save($user) ){

                    if( !empty($oldName) ){
                        //foreach( $widthArray as $oldWidh ){
                        //
                        // $fullPath = $path.$oldWidh.'_'.$oldName;
                        // if( file_exists($fullPath) ){
                        //     unlink($fullPath);
                        // }
                        //
                        //}

                        if( file_exists($path.$oldName) ){
                             unlink($path.$oldName);
                        }
                    }

                    $msg = 'Success';
                    $code = 1;
                    $imgName = $fileName;
                }else{
                    $msg = 'Fail to save';
                     $code = 0;
                    $imgName = '';

                }
            }else{

                $errors = $user->errors();

                foreach( $errors as $error ){

                    foreach($error as $a){
                        $msg = $a;
                        if( $a != '' ) break;
                    }
                    //exit;
                }

                 $code = 0;
                $imgName = '';
            }

            $retArray = array(
                              'msg' => $msg,
                              'code' => $code,
                              'imgName' => $imgName
                              );

            $this->response->body(json_encode($retArray));
            return $this->response;
        }

    }*/

  public function updateAvatar()
     {
        $this->autoRender = false;
        $id = $this->Auth->user('id');



        if( $this->request->is(['post','put','ajax']) ){

            $user = $this->Users->find()->select(['id','profile_picture'])->where(['id' => $id])->first();

            $oldName = $user->profile_picture;

            $this->Users->patchEntity( $user, $this->request->data(), ['validate' => false]);

            if( !$user->errors() )
            {

                $orgName = $this->request->data['profile_picture']['name'];
                $tmpName = $this->request->data['profile_picture']['tmp_name'];
                $size = $this->request->data['profile_picture']['size'];
                if($size <= 1000000000 )
    {
                    $fileName = $this->newFileName( $orgName );

                    $path = WWW_ROOT . 'files' . DS . 'users' . DS;

                    move_uploaded_file($tmpName,$path.$fileName);

                    $path123 = WWW_ROOT . 'files' . DS . 'users' . DS. $fileName;
                    $path12345 = WWW_ROOT . 'files' . DS . 'users' . DS. 'small' . DS . $fileName ;
                    $path_thumb= WWW_ROOT . 'files' . DS . 'users' . DS. 'thumb' . DS . $fileName ;

                    $fff  =  $this->resize_crop_image(400,400,$path123,$path12345,80);

                    $fff12  =  $this->resize_crop_image(270,185,$path123,$path_thumb,80);
                    $user['profile_picture'] = $fileName;
                    if( $this->Users->save($user) )
                    {
                        if( !empty($oldName) )
                        {
                            if( file_exists($path.$oldName) ){
                                 unlink($path.$oldName);
                            }
                        }
                        $msg = 'Success';
                        $code = 1;
                        $imgName = $fileName;
                    }
                    else
                    {
                        $msg = 'Fail to save';
                        $code = 0;
                        $imgName = '';

                    }
                }
                else
                {
                    $msg = 'Please upload min 1 mb size image';
                    $code = 0;
                    $imgName = '';
                }

            }else
            {
                $errors = $user->errors();
                foreach( $errors as $error )
                {
                    foreach($error as $a){
                        $msg = $a;
                        if( $a != '' ) break;
                    }
                }
                $code = 0;
                $imgName = '';
            }

            $retArray = array(
                              'msg' => $msg,
                              'code' => $code,
                              'imgName' => $imgName
                              );


            $this->response->body(json_encode($retArray));

            return $this->response;
        }

    }




    public function newFileName($name = null){

        $ImageName = str_replace(' ','-',strtolower($name));
        $ImageName = preg_replace("/\.[^.\s]{3,4}$/", "", $ImageName);

        $image_ext = explode('.',$name);
        $image_ext = strtolower(end($image_ext));
        $unique_id = time();
        $fileName = $ImageName."-".$unique_id.".".$image_ext;
        return $fileName;
   }



    function activate_account($id=null)
    {
        $old_id = $id ;
        $id = base64_decode($id);

        $usersTable = TableRegistry::get('Users');
        $user = $usersTable->get($id);

        $user->status = 1;
        if($usersTable->save($user))
        {
            $this->Flash->success(__('User has activated successfully.'));
            return $this->redirect(['controller'=>'Users','action' => 'login', 'prefix' => $this->prefix]);
        }


    }

      /**
    * @login
    *
    * @throws MethodNotAllowedException
    * @throws NotFoundException
    * @param integer $id
    * @return void
    */

   public function ajaxlogin()
   {
        $this->loadModel('Users');
        $session = $this->request->session();

        if($this->Auth->identify())
        {
           // return $this->redirect(['action' => 'index']);
        }

        if ($this->request->is(['post', 'put']))
        {
            $user = $this->Auth->identify();
            if ($user['role_id']== 2 || $user['role_id']== 3)
            {
                $this->Auth->setUser($user);

                if (!$this->request->data['rememberme'])
                {
                    $this->Cookie->delete('Auth.User');
                }
                $cookie = [
                    'email' => $this->request->data('email'),
                    'password' => $this->request->data('password'),
                    'rememberme' => $this->request->data('rememberme')
                ];
                $this->Cookie->write('Auth.User', $cookie, false, '+1 week');

                $dataList = TableRegistry::get('Users');
                $AdminId = $this->Auth->user('id');
                $users = $dataList->get($AdminId);
                $session->write('Config.data', $users);

                $sucessarray['status'] = true;
                $sucessarray['msg'] = 'sucessfully Login';
            }
            else
            {
                $sucessarray['status'] = false;
                $sucessarray['msg'] = 'User Name And password Invalid';
            }
            echo json_encode($sucessarray); die;
        }

    }


        public function loginolddozen()
        {
            $titleforlayout = 'Login'  ;
            $this->set('titleforpage', $titleforlayout);
            $this->layout = 'other_pages';
            $this->loadModel('Users');
            $this->loadModel('Debates');
            $session = $this->request->session();

            if ($this->request->is(['post', 'put']))
            {
                $user = $this->Auth->identify();

                if ($user['role_id']== 2 || $user['role_id']== 3)
                {
                    if ($user['status'] != 1)
                    {
                        $this->Flash->error(__('Email address is not verified. Open your email inbox and verify your email address'));
                        return $this->redirect(['action' => 'login', 'prefix' => $this->prefix]);
                    }
                    else
                    {
                        $this->Auth->setUser($user);
                        $this->_setCookie();
                        $dataList = TableRegistry::get('Users');
                        $AdminId = $this->Auth->user('id');
                        $users = $dataList->get($AdminId);
                        $users->last_login = new Time();
                        $dataList->save($users);
                        $session->write('Config.data', $users);

                        return $this->redirect(['action' => 'profile', 'prefix' => $this->prefix]);
                    }


                }
                else
                {
                    $this->Flash->error(__('User Name And password Invalid'));
                    return $this->redirect(['action' => 'login', 'prefix' => $this->prefix]);
                }
               // echo json_encode($sucessarray); die;
            }
            else{

                $email = $session->read('Auth.User.email');

                if(!empty($email))
                {

                    return $this->redirect(['action' => 'profile', 'prefix' => $this->prefix]);
                }

                $cookie = $this->Cookie->read('Auth.User');
                $this->set('cookieuser', $cookie);

                //For debates on Login page
                $filters[] = array('status' => 1,'Debates.start_time <=' => new Time(),'Debates.end_time >=' => new Time());
                $query = $this->Debates->find('all')
            ->where($filters)
                ->limit(4)
                ->order('rand()');
                $debateList = $query->all()->toArray();
                $this->set('debateList', $debateList);
            }

    }








    public function ajaxValidateFieldUser()
    {
        /* RECEIVE VALUE */
            $validateValue=$_REQUEST['fieldValue'];
            $validateId=$_REQUEST['fieldId'];

            $validateError= "This username is already taken";
            $validateSuccess= "This username is available";

            $query = $this->Users->find('all')
                //->contain(['UserDetails'])
    ->where(['Users.email' => $validateValue]);
                $users = $query->first();
                //pr($users); die;

                /* RETURN VALUE */
                $arrayToJs = array();
                $arrayToJs[0] = $validateId;
                if(!$users)
                { // validate??
                    $arrayToJs[1] = true;
                    echo json_encode($arrayToJs); die;
                }
                else
                {
                    for($x=0;$x<1000000;$x++)
                    {
                        if($x == 990000)
                        {
                            $arrayToJs[1] = false;
                            echo json_encode($arrayToJs); die;
                        }
                    }

                }

              // echo json_encode($arrayToJs); die;
    }


  public function user_profile_update($id=null){
    $this->autoRender=false;
    $session = $this->request->session();
    $USER    = $session->read('Auth.User');
    $userId = $USER['id'];
    $value = '';
    $type = '';
     if ($this->request->is(['post', 'put'])){
       if(isset($this->request->data['val'])){
      $value = $this->request->data['val'];
       }
       if(isset($this->request->data['type'])){
       $type = $this->request->data['type'];
       }
       if(isset($this->request->data['id'])){
      $userId = $this->request->data['id'];
       }
      $user = $this->Users->get($userId);

      $user->$type = $value;
      // pr($user);
     // pr($this->request->data); die;
      //$user = $this->Users->patchEntity($user, $this->request->data);

      if ($this->Users->save($user))
          {
            $this->Flash->success(__('The user has been Updated.'));
             // return $this->redirect(['action' => $action]);
          }
          else{
          $this->Flash->error(__('Unable to update the user.'));
          }
     }
  }








    /**
    * @states
    *
    * @throws MethodNotAllowedException
    * @throws NotFoundException
    * @param integer $id
    * @return void
    */

    public function state($id = null)
    {


        $responsetype = 'main';
        if(isset($this->request->data['cid'])){
            $id = $this->request->data['cid'];
             $responsetype = 'ajax';
        }

        $this->loadModel('States');
        $query = $this->States->find('list', [
                                    'keyField' => 'id',
                                    'valueField' => 'name'])
                                ->where(['States.country_id' => $id])
                                ->order(['name' => 'ASC']);
        $state = $query->all();

        if($responsetype == 'ajax'){
            echo json_encode($state);
        }else{
            return json_encode($state);
        }
        exit;
    }


    /**
    * @country
    *
    * @throws MethodNotAllowedException
    * @throws NotFoundException
    * @param integer $id
    * @return void
    */

    public function city($id = null)
    {
        $this->loadModel('Cities');
        $responsetype = 'main';

        if(isset($this->request->data['sid'])){
            $id = $this->request->data['sid'];
             $responsetype = 'ajax';
        }

        $query = $this->Cities->find('list', [
            'keyField' => 'id',
            'valueField' => 'name'])
         ->where(['Cities.state_id' => $id])
         ->order(['name' => 'ASC']);
        $city = $query->all();

        if($responsetype == 'ajax'){
            echo json_encode($city);
        }else{
            return json_encode($city);
        }

        exit;
    }


    public function config()
    {
         $this->layout = 'admin';
         $this->loadModel('Sptconfigs');
         if ($this->request->is('post') || $this->request->is('put')) {
      $this->Sptconfig->set($this->request->data);

            $image = $this->request->data['Sptconfig']['value'];
            $id = $this->request->data['Sptconfig']['id'];
           $datat = $this->Sptconfig->findById($id) ;
          //if(!$image)

            $fileDestination = WWW_ROOT.'files/user/linksimages';
            if(!empty($image))
            {

          $options = array('thumbnail'=>array(
              'home'=>array("max_width"=>Configure::read('image.home.max_width'),"max_height"=>Configure::read('image.home.max_height'),"path"=>$fileDestination),
              //'medium'=>array("max_width"=>Configure::read('image.medium.max_width'),"max_height"=>Configure::read('image.medium.max_height'),"path"=>$mediumDestination)
             ));
          $file = $image;
          try
          {
              $output = $this->ImageUploader->upload($file,$fileDestination,$options);
          }
          catch(Exception $e)
          {
              $output = array('bool'=>FALSE,'error_message'=>$e->getMessage());
          }
          if(isset($output['file_name']))
          {
                $this->Sptconfig->updateAll(array('value'=>"'".addslashes($output['file_name'])."'"),array('id'=>$id)) ;
          }
                  if ($output['file_name']) {
                $this->Session->setFlash($datat['Sptconfig']['title'].' has been updated','flash/success');
              } else {
                $this->Session->setFlash($datat['Sptconfig']['title'].' not updated','flash/error');
              }
            }
            else {
                $this->Session->setFlash($datat['Sptconfig']['title'].' not updated','flash/error');
              }

    }
            $query = $this->Sptconfigs->find('all');
            $results = $query->all();
            $data = $results->toArray();
            $this->set('data',$data);
    }




 function resize_crop_image($max_width, $max_height, $source_file, $dst_dir, $quality = 80)
 {

            $imgsize = getimagesize($source_file);
            //return $imgsize; die;
            $width = $imgsize[0];
            $height = $imgsize[1];
            $mime = $imgsize['mime'];

            switch($mime){
             case 'image/gif':
              $image_create = "imagecreatefromgif";
              $image = "imagegif";
              break;

             case 'image/png':
              $image_create = "imagecreatefrompng";
              $image = "imagepng";
              $quality = 7;
              break;

             case 'image/jpeg':
              $image_create = "imagecreatefromjpeg";
              $image = "imagejpeg";
              $quality = 60;
              break;

             default:
              return false;
              break;
            }


   $src_img = $image_create($source_file);

   $width_new = $height * $max_width / $max_height;
   $height_new = $width * $max_height / $max_width;

  $dst_img = imagecreatetruecolor($max_width, $max_height);
  imagealphablending($dst_img, false);
  imagesavealpha($dst_img,true);
  $transparent = imagecolorallocatealpha($dst_img, 255, 255, 255, 127);
  imagefilledrectangle($dst_img, 0, 0, $max_width, $max_height, $transparent);

  //if the new width is greater than the actual width of the image, then the height is too large and the rest cut off, or vice versa
  if($width_new > $width){
   //cut point by height
   $h_point = (($height - $height_new) / 2);
   //copy image
   imagecopyresampled($dst_img, $src_img, 0, 0, 0, $h_point, $max_width, $max_height, $width, $height_new);
  }else{
   //cut point by width
   $w_point = (($width - $width_new) / 2);
   imagecopyresampled($dst_img, $src_img, 0, 0, $w_point, 0, $max_width, $max_height, $width_new, $height);
  }
  //$dst_dir = '/opt/lampp/htdocs/easymanipedi/app/webroot/upload/profile/slider-4.jpg';

  // $image($dst_img, $dst_dir, $quality);

  if($dst_img)imagedestroy($dst_img);
  if($src_img)imagedestroy($src_img);
 }





 /*
 public function playvideo()
  {
     $this->layout='homepage';
     $this->autoRender = false ;
    if($this->request->is("Post")){
    //echo $this->request->data['id'];
    $vid_id = $this->request->data['id'];


     $video = TableRegistry::get('videos');
      $playvideo = $video->find('all')->where(['video_admin_approve'=>1 ,'status'=>1 , 'featured'=>1 ,'id'=>$vid_id])->toArray();

    }
     $this->set(compact('playvideo'));

    }
  */

 public function upload()
 {
  $this->layout='homepage';

  $category3 = TableRegistry::get('categories');
      $cate3 = $category3->find('all')->where(['status'=>1])->order(['created'=>"ASC"])->toArray();
  $allowed_category = array();
    foreach($cate3 as $singlelevel){
      $allowed_category[] = $singlelevel->id;
    }

    $videos3 = TableRegistry::get('videos');
    // $catvideo = $videos3->find('all')->where(['video_admin_approve'=>1 ,'status'=>1 , 'featured'=>1])->toArray();
  $catvideo = $this->Paginator->paginate($videos3->find('all')->where(['video_admin_approve'=>1,   'category_id IN' => $allowed_category ,'status'=>1 ]), [
      'limit' => Configure::read('App.AdminPageLimit'),
      'order'=>['id'=>'desc']
    ]);


    // $catvideo = $videos3->find('all')->where(['video_admin_approve'=>1,   'category_id IN' => $allowed_category ,'status'=>1 ])->toArray();
      $this->set(compact('cate3','catvideo'));

 }





 public function faq()
 {
  $this->layout='homepage';
  $faqs = TableRegistry::get('Faqs');
  $faqs = $faqs->find('all')->where(['status' => 1])->all()->toArray();
  $this->set(compact('faqs'));

 }





// show appointment detial of the patient
    public function showAppoint($id = null){

      $id = base64_decode($this->request->getData('aptid'));
      $this->viewBuilder()->setLayout('ajax');

      $this->loadModel('StepDetails');
      $this->loadModel('ChiefCompliants');
      $this->loadModel('ChiefCompliantQuestionnaire');
      $this->loadModel('ChiefCompliantDetails');
      $this->loadModel('ChiefCompliantMedication');
      $this->loadModel('Appointments');
      $this->loadModel('ChiefCompliantUserdetails');
      $this->loadModel('ChiefCompliantOtherDetails');
      $this->loadModel('PainFollowupQuestionnaires');
      $this->loadModel('Doctors');
      $this->loadModel('Organizations');
      $this->loadModel('CommonQuestions');
      $this->loadModel('CommonConditions');
      $this->loadModel('Diseases');
      $this->loadModel('Symptoms');

      $user_detail = $this->Appointments->find('all')->contain(['Doctors', 'Organizations', 'Specializations', 'Users', 'ChiefCompliantUserdetails'])->where(['Appointments.is_shown' => 1, 'Appointments.id' => $id])->first();

      //pr($user_detail);die;

      if(empty($user_detail)){
        echo 'Not found the detial of this appointment. Try again.';
        die;

      }

      //pr($user_detail);die;
      if(!empty($user_detail->chief_compliant_userdetail)){

        if(!empty($user_detail->chief_compliant_userdetail->current_step_id)){

            $user_detail->chief_compliant_userdetail->current_step_id = $this->StepDetails->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->current_step_id])->first();

        }

        if(!empty($user_detail->chief_compliant_userdetail->appointment_id)){

            $user_detail->chief_compliant_userdetail->appointment_id = $this->Appointments->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->appointment_id])->first();

        }


        if(!empty($user_detail->chief_compliant_userdetail->appointment_id) && isset($user_detail->chief_compliant_userdetail->appointment_id->doctor_id) && !empty($user_detail->chief_compliant_userdetail->appointment_id->doctor_id)){

            $user_detail->chief_compliant_userdetail->appointment_id->doctor_id = $this->Doctors->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->appointment_id->doctor_id])->first();

        }

        if(!empty($user_detail->chief_compliant_userdetail->appointment_id) && isset($user_detail->chief_compliant_userdetail->appointment_id->organization_id) && !empty($user_detail->chief_compliant_userdetail->appointment_id->organization_id)){

            $user_detail->chief_compliant_userdetail->appointment_id->organization_id = $this->Organizations->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->appointment_id->organization_id])->first();

        }

        if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_id)){

          $user_detail->chief_compliant_userdetail->chief_compliant_id = Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_id), SEC_KEY);

          $cc_ids = explode(",", $user_detail->chief_compliant_userdetail->chief_compliant_id);
          $temp_cc = array_flip(array_filter($cc_ids));
          $temp_chief_compliant_id = $this->ChiefCompliants->find('list',[
                              'keyField' => 'id',
                              'valueField' => 'name'])->where(['id IN' => $cc_ids])->toArray();


          if(!empty($temp_chief_compliant_id)){

            //unset the cc key when cc not in database
            $unsaved_cc = array_diff_key($temp_cc, $temp_chief_compliant_id);
            if(!empty($unsaved_cc)){

                foreach ($unsaved_cc as $ukey => $uvalue) {

                    if(isset($temp_cc[$ukey])){

                      unset($temp_cc[$ukey]);
                    }
                }
            }

            foreach ($temp_chief_compliant_id as $cc_key => $cc_value) {

              if(isset($temp_cc[$cc_key])){

                $temp_cc[$cc_key] = $cc_value;
              }
            }
          }
          $temp_cc = implode(", ", $temp_cc);
          $user_detail->chief_compliant_userdetail->all_cc_detail_name = rtrim($temp_cc,', ');

          $user_detail->chief_compliant_userdetail->chief_compliant_id = $this->ChiefCompliants->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->chief_compliant_id])->first();

          //$user_detail->chief_compliant_userdetail->chief_compliant_id = $this->ChiefCompliants->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->chief_compliant_id])->first();
        }



       if(!empty($user_detail->chief_compliant_userdetail->compliant_symptom_ids))
       {
          $user_detail->chief_compliant_userdetail->compliant_symptom_ids = explode(',', $user_detail->chief_compliant_userdetail->compliant_symptom_ids);
          $user_detail->chief_compliant_userdetail->compliant_symptom_ids =  $this->ChiefCompliants->find('all')->where(['id IN' => $user_detail->chief_compliant_userdetail->compliant_symptom_ids])->all();
        }

        $user_detail->chief_compliant_userdetail->compliant_length = $user_detail->chief_compliant_userdetail->compliant_length;

        if(!empty($user_detail->chief_compliant_userdetail->compliant_medication_detail)){

          $user_detail->chief_compliant_userdetail->compliant_medication_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->compliant_medication_detail), SEC_KEY)) ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_symptoms)){

          $user_detail->chief_compliant_userdetail->chief_compliant_symptoms = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_symptoms), SEC_KEY)) ;

            // pr($user_detail->chief_compliant_symptoms) ;
            foreach($user_detail->chief_compliant_userdetail->chief_compliant_symptoms as $key => $value){

              foreach($value as $k =>$v) {

                $user_detail->chief_compliant_userdetail->chief_compliant_symptoms[$key][$k] = $this->ChiefCompliants->find('all')->where(['id' => $v])->first();
              }

            }
        }

        if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail)){

          $user_detail->chief_compliant_userdetail->questionnaire_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->questionnaire_detail), SEC_KEY)) ;

            foreach($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value){

                foreach($value as $k =>$v) {

                  $user_detail->chief_compliant_userdetail->questionnaire_detail[$key][$k] = $this->ChiefCompliantQuestionnaire->find('all')->where(['id' => $v])->first();
                }
            }
        }

        if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_details)){

          $user_detail->chief_compliant_userdetail->chief_compliant_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_details), SEC_KEY))) ;

            $tempar = array();
            $more_options = array();
            $i = 0 ;
            foreach ($user_detail->chief_compliant_userdetail->chief_compliant_details as $key => $value)
            {


              $i = 0 ;
              foreach ($value as $k => $v)
              {


                if(!is_numeric($k) && $k == 'more_option'){
                    $more_options[$key] = $v ;
                    unset($value['more_option']);
                    continue;
                }


                $temp = $this->ChiefCompliantDetails->find('all')->where(['id'=> $k ])->first();
                $tempcc = $this->ChiefCompliants->find('all')->where(['id'=> $key ])->first();
                $tempar[$key]['cc_data'] = $tempcc ;
                $tempar[$key][$i]['question_id'] = $temp->id ;
                $tempar[$key][$i]['question'] = $temp->question ;
                $tempar[$key][$i]['hpi_element'] = $temp->cpt_hpi_element_type;
                $tempar[$key][$i]['answer'] = $v ;
                $i++;
              }
            }

            $user_detail->chief_compliant_userdetail->more_options = $more_options ;
            $user_detail->chief_compliant_userdetail->chief_compliant_details = $tempar ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_other_details)){

          $user_detail->chief_compliant_userdetail->chief_compliant_other_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_other_details), SEC_KEY))) ;

            $tempar = array();
            $i = 0;
            foreach ($user_detail->chief_compliant_userdetail->chief_compliant_other_details as $key => $value)
            {


              $temp = $this->ChiefCompliantOtherDetails->find('all')->where(['id'=> $key ])->first();
              $tempar[$i]['question_id'] = $temp->id ;
              $tempar[$i]['question'] = $temp->question ;
              $tempar[$i]['answer'] = $value;
              $i++;

            }

            $user_detail->chief_compliant_userdetail->chief_compliant_other_details = $tempar ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->pain_update_question))
        {

          $user_detail->chief_compliant_userdetail->pain_update_question = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pain_update_question), SEC_KEY))) ;

          $tempar = array();
          $i = 0;
          foreach ($user_detail->chief_compliant_userdetail->pain_update_question as $key => $value)
          {

            $temp = $this->PainFollowupQuestionnaires->find('all')->where(['id'=> $key ])->first();
            $tempar[$i]['question_id'] = $temp->id ;
            $tempar[$i]['question'] = $temp->question ;
            $tempar[$i]['answer'] = $value ;
            $i++;
          }
          $user_detail->chief_compliant_userdetail->pain_update_question = $tempar;

        }


        if(!empty($user_detail->chief_compliant_userdetail->general_update_question))
        {

          $user_detail->chief_compliant_userdetail->general_update_question = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->general_update_question), SEC_KEY))) ;

          $tempar = array();
          $i = 0;
          foreach ($user_detail->chief_compliant_userdetail->general_update_question as $key => $value)
          {

                $temp = $this->PainFollowupQuestionnaires->find('all')->where(['id'=> $key ])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value ;
                $i++;
          }

         // $user_detail->more_options = $more_options ;
          $user_detail->chief_compliant_userdetail->general_update_question = $tempar;

        }

        if(!empty($user_detail->chief_compliant_userdetail->screening_questions_detail))
        {

          $user_detail->chief_compliant_userdetail->screening_questions_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->screening_questions_detail), SEC_KEY))) ;

          $tempar = array();
          $i = 0;
          foreach ($user_detail->chief_compliant_userdetail->screening_questions_detail as $key => $value)
          {

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value ;
                $i++;
          }

         // $user_detail->more_options = $more_options ;
          $user_detail->chief_compliant_userdetail->screening_questions_detail = $tempar;

        }

        if(!empty($user_detail->chief_compliant_userdetail->post_checkup_question_detail))
        {

          $user_detail->chief_compliant_userdetail->post_checkup_question_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->post_checkup_question_detail), SEC_KEY))) ;

          $tempar = array();
          $i = 0;
          foreach ($user_detail->chief_compliant_userdetail->post_checkup_question_detail as $key => $value)
          {

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value ;
                $i++;
          }

         // $user_detail->more_options = $more_options ;
          $user_detail->chief_compliant_userdetail->post_checkup_question_detail = $tempar;

        }


        if(isset($user_detail->chief_compliant_userdetail->pre_op_procedure_detail) && !empty($user_detail->chief_compliant_userdetail->pre_op_procedure_detail))
        {
          $user_detail->chief_compliant_userdetail->pre_op_procedure_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pre_op_procedure_detail), SEC_KEY))) ;

          $tempar = array();
          $i = 0;
          foreach ($user_detail->chief_compliant_userdetail->pre_op_procedure_detail as $key => $value)
          {
            $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
            $tempar[$i]['question_id'] = $temp->id ;
            $tempar[$i]['question'] = $temp->question ;
            $tempar[$i]['answer'] = $value ;
            $i++;
          }
          $user_detail->chief_compliant_userdetail->pre_op_procedure_detail = $tempar;

        }

        if(isset($user_detail->chief_compliant_userdetail->pre_op_medications_question_detail) && !empty($user_detail->chief_compliant_userdetail->pre_op_medications_question_detail))
        {
          $user_detail->chief_compliant_userdetail->pre_op_medications_question_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pre_op_medications_question_detail), SEC_KEY))) ;

          $tempar = array();
          $i = 0;
          foreach ($user_detail->chief_compliant_userdetail->pre_op_medications_question_detail as $key => $value)
          {
            $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
            $tempar[$i]['question_id'] = $temp->id ;
            $tempar[$i]['question'] = $temp->question ;
            $tempar[$i]['answer'] = $value ;
            $i++;
          }
          $user_detail->chief_compliant_userdetail->pre_op_medications_question_detail = $tempar;

        }

        if(isset($user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail) && !empty($user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail))
        {

          $user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail), SEC_KEY))) ;

          $tempar = array();
          $i = 0;
          foreach ($user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail as $key => $value)
          {


            $temp = $this->CommonConditions->find('all')->where(['id'=> $key ])->first();
            $tempar[$i]['condition_id'] = $temp->id ;
            $tempar[$i]['condition_name'] = $temp->name ;
            $tempar[$i]['medical_name'] = $temp->medical_name ;
            $tempar[$i]['answer'] = $value['name'] ;
            $tempar[$i]['year'] = $value['year'] ;
            $i++;
          }
          $user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail = $tempar;

        }

        if(isset($user_detail->chief_compliant_userdetail->pre_op_allergies_detail) && !empty($user_detail->chief_compliant_userdetail->pre_op_allergies_detail))
        {

          $user_detail->chief_compliant_userdetail->pre_op_allergies_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pre_op_allergies_detail), SEC_KEY))) ;

          $tempar = array();
          $i = 0;
          foreach ($user_detail->chief_compliant_userdetail->pre_op_allergies_detail as $key => $value)
          {


            $temp = $this->CommonConditions->find('all')->where(['id'=> $key ])->first();
            $tempar[$i]['condition_id'] = $temp->id ;
            $tempar[$i]['condition_name'] = $temp->name ;
            $tempar[$i]['medical_name'] = $temp->medical_name ;
            $tempar[$i]['answer'] = $value['name'] ;
            $tempar[$i]['reaction'] = $value['reaction'] ;
            $i++;
          }
          $user_detail->chief_compliant_userdetail->pre_op_allergies_detail = $tempar;

        }


        if(!empty($user_detail->chief_compliant_userdetail->general_update_provider_info)){

          $user_detail->chief_compliant_userdetail->general_update_provider_info =  unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->general_update_provider_info), SEC_KEY))) ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->general_update_procedure_detail)){

          $user_detail->chief_compliant_userdetail->general_update_procedure_detail =  unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->general_update_procedure_detail), SEC_KEY))) ;
        }

        if(isset($user_detail->chief_compliant_userdetail->disease_questions_detail) && !empty($user_detail->chief_compliant_userdetail->disease_questions_detail)){

          $user_detail->chief_compliant_userdetail->disease_questions_detail =  unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->disease_questions_detail), SEC_KEY))) ;

          if(!empty($user_detail->chief_compliant_userdetail->disease_questions_detail)){

            $temparr = array();

            foreach ($user_detail->chief_compliant_userdetail->disease_questions_detail as $key => $value) {

              $disease = $this->Diseases->find('all')->where(['id'=> $key])->first();
              if(!empty($disease)){


               $user_detail->chief_compliant_userdetail->disease_questions_detail[$key]['disease'] =  $disease;
              }

              //set question details
              if(!empty($value['disease_detail_question'])){

                $temparr = array();
                $i = 0;
                foreach ($value['disease_detail_question'] as $q_key => $que) {

                  $question = $this->CommonQuestions->find('all')->where(['id' => $q_key])->first();

                  if(!empty($question)){

                    $temparr[$i]['question_id'] = $question->id ;
                    $temparr[$i]['question'] = $question->question ;
                    $temparr[$i]['answer'] = $que ;
                    $i++;
                  }

                }

                $user_detail->chief_compliant_userdetail->disease_questions_detail[$key]['disease_detail_question'] = $temparr;
              }

              //set detail of alarm sysmptoms
              if(!empty($value['alarm_sysmptom'])){

                $temparr = array();
                $i = 0;

                foreach ($value['alarm_sysmptom'] as $asysmpt_key => $asysmpt_value) {

                  $alarm_sysmptom = $this->Symptoms->find('all')->where(['id'=> $asysmpt_key])->first();

                  if(!empty($alarm_sysmptom)){

                    $temparr[$i]['id'] = $alarm_sysmptom->id;
                    $temparr[$i]['name'] = $alarm_sysmptom->symptom;
                    $temparr[$i]['medical_name'] = $alarm_sysmptom->medical_name;
                    $temparr[$i]['answer'] = $asysmpt_value['answer'];
                    $i++;

                  }
                }

                  $user_detail->chief_compliant_userdetail->disease_questions_detail[$key]['alarm_sysmptom'] = $temparr;
              }

              //set detail of base line sysmptoms
              if(!empty($value['baseline_sysmptom'])){

                $temparr = array();
                $i = 0;

                foreach ($value['baseline_sysmptom'] as $bsysmpt_key => $bsysmpt_value) {

                  $baseline_sysmptom = $this->Symptoms->find('all')->where(['id'=> $bsysmpt_key])->first();

                  if(!empty($baseline_sysmptom)){

                    $temparr[$i]['id'] = $baseline_sysmptom->id;
                    $temparr[$i]['name'] = $baseline_sysmptom->symptom;
                    $temparr[$i]['medical_name'] = $baseline_sysmptom->medical_name;
                    $temparr[$i]['answer'] = $bsysmpt_value['answer'];
                    $temparr[$i]['scale'] = $bsysmpt_value['scale'];
                    $i++;

                  }
                }

                  $user_detail->chief_compliant_userdetail->disease_questions_detail[$key]['baseline_sysmptom'] = $temparr;
              }
            }
          }
        }

        if(!empty($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details))
        {

            $user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details), SEC_KEY)));

            if(isset($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp'])){
                $tempar = array();
                foreach($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp'] as $key => $val){


                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $val;
                   // $i++;

                }
                //pr($tempar);die;
                $user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp'] = $tempar;
                //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
             }

             if(isset($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm'])){
                $tempar = array();
                foreach($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm'] as $key => $val){


                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $val;
                   // $i++;

                }
                //pr($tempar);die;
                $user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm'] = $tempar;
                //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
             }
        }

        if(!empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details))
        {

             $user_detail->chief_compliant_userdetail->medication_refill_extra_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->medication_refill_extra_details), SEC_KEY)));

             if(isset($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast'])){
                $tempar = array();
                foreach($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast'] as $key => $val){


                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $val;
                   // $i++;

                }
                //pr($tempar);die;
                $user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast'] = $tempar;
                //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
             }

             if(isset($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt'])){
                $tempar = array();
                foreach($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt'] as $key => $val){


                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $val;
                   // $i++;

                }
                //pr($tempar);die;
                $user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt'] = $tempar;
                //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
             }
           }


           if(!empty($user_detail->chief_compliant_userdetail->follow_up_sx_detail)){

             $user_detail->chief_compliant_userdetail->follow_up_sx_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->follow_up_sx_detail), SEC_KEY)));

             //pr($user_detail_old->chief_compliant_userdetail->follow_up_sx_detail);die;

             if(!empty($user_detail->chief_compliant_userdetail->follow_up_sx_detail)){



                foreach($user_detail->chief_compliant_userdetail->follow_up_sx_detail as $key => $value){

                  if(!empty($value)){

                    $tempar = array();
                    foreach($value as $k => $v){

                      $temp = $this->CommonQuestions->find('all')->where(['id'=> $k ])->first();
                      $tempcc = $this->ChiefCompliants->find('all')->where(['id'=> $key ])->first();
                      $tempar['cc_data'] = $tempcc ;
                      $tempar[$k]['question_id'] = $temp->id ;
                      $tempar[$k]['question'] = $temp->question ;
                      $tempar[$k]['answer'] = $v;
                    }

                    $user_detail->chief_compliant_userdetail->follow_up_sx_detail[$key] = $tempar;

                  }

                }
             }
           }

          if(!empty($user_detail->chief_compliant_userdetail->symptom_from_tab1)){

              //$user_detail->chief_compliant_userdetail->symptom_from_tab1 = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->symptom_from_tab1), SEC_KEY)));

              $temp_symptom_from_tab1 = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->symptom_from_tab1), SEC_KEY)));

              if(!empty($temp_symptom_from_tab1)){

                  $temp_cc = implode(", ", $temp_symptom_from_tab1);
                  $user_detail->chief_compliant_userdetail->all_cc_detail_name = $user_detail->chief_compliant_userdetail->all_cc_detail_name.', '.$temp_cc;
              }
          }

          if(!empty($user_detail->chief_compliant_userdetail->covid_detail)){

            $user_detail->chief_compliant_userdetail->covid_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->covid_detail), SEC_KEY))  ;

            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
             $tempar = array();
            foreach($user_detail->chief_compliant_userdetail->covid_detail as $key => $value){

                if(!empty($value)){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;


                }

              }
              $user_detail->chief_compliant_userdetail->covid_detail = $tempar;
            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
        }

        if(!empty($user_detail->chief_compliant_userdetail->focused_history_detail)){

            $user_detail->chief_compliant_userdetail->focused_history_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->focused_history_detail), SEC_KEY))  ;

            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
             $tempar = array();
            foreach($user_detail->chief_compliant_userdetail->focused_history_detail as $key => $value){

                if(!empty($value)){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;


                }

              }
              $user_detail->chief_compliant_userdetail->focused_history_detail = $tempar;
            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
        }

        if(!empty($user_detail->chief_compliant_userdetail->phq_9_detail)){

            $user_detail->chief_compliant_userdetail->phq_9_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->phq_9_detail), SEC_KEY))  ;

            //pr($user_detail->phq_9_detail);die;
             $tempar = array();
            foreach($user_detail->chief_compliant_userdetail->phq_9_detail as $key => $value){

                //if(!empty($value)){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;


               // }

              }
              $user_detail->chief_compliant_userdetail->phq_9_detail = $tempar;
            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chronic_dmii_detail))
        {

          $user_detail->chief_compliant_userdetail->chronic_dmii_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_dmii_detail), SEC_KEY))  ;
          $tempar = array();
          $i = 0;
          foreach($user_detail->chief_compliant_userdetail->chronic_dmii_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;

              }

            }

            $user_detail->chief_compliant_userdetail->chronic_dmii_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chronic_htn_detail))
        {

          $user_detail->chief_compliant_userdetail->chronic_htn_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_htn_detail), SEC_KEY))  ;
          $tempar = array();
          $i = 0;
          foreach($user_detail->chief_compliant_userdetail->chronic_htn_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;

              }

            }

            $user_detail->chief_compliant_userdetail->chronic_htn_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chronic_cad_detail))
        {

          $user_detail->chief_compliant_userdetail->chronic_cad_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_cad_detail), SEC_KEY))  ;
          $tempar = array();
          $i = 0;
          foreach($user_detail->chief_compliant_userdetail->chronic_cad_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;
              }

            }

            $user_detail->chief_compliant_userdetail->chronic_cad_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chronic_chf_detail))
        {

          $user_detail->chief_compliant_userdetail->chronic_chf_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_chf_detail), SEC_KEY))  ;
          $tempar = array();
          $i = 0;
          foreach($user_detail->chief_compliant_userdetail->chronic_chf_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;

              }

            }

            $user_detail->chief_compliant_userdetail->chronic_chf_detail = $tempar;
        }


        if(!empty($user_detail->chief_compliant_userdetail->chronic_copd_detail))
        {

          $user_detail->chief_compliant_userdetail->chronic_copd_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_copd_detail), SEC_KEY))  ;
          $tempar = array();
          $i = 0;
          foreach($user_detail->chief_compliant_userdetail->chronic_copd_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;

              }

            }

            $user_detail->chief_compliant_userdetail->chronic_copd_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chronic_asthma_detail))
        {

          $user_detail->chief_compliant_userdetail->chronic_asthma_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_asthma_detail), SEC_KEY))  ;
          $tempar = array();
          $i = 0;
          foreach($user_detail->chief_compliant_userdetail->chronic_asthma_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;

              }

            }

            $user_detail->chief_compliant_userdetail->chronic_asthma_detail = $tempar;
        }


        if(!empty($user_detail->chief_compliant_userdetail->chronic_general_detail))
        {

          $user_detail->chief_compliant_userdetail->chronic_general_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_general_detail), SEC_KEY))  ;
          $tempar = array();
          $i = 0;
          foreach($user_detail->chief_compliant_userdetail->chronic_general_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;

              }

            }

            $user_detail->chief_compliant_userdetail->chronic_general_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chronic_condition)){

          $user_detail->chief_compliant_userdetail->chronic_condition = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_condition), SEC_KEY)) ;
        }


        if(!empty($user_detail->chief_compliant_userdetail->chronic_dmii_medication)){

          $user_detail->chief_compliant_userdetail->chronic_dmii_medication = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_dmii_medication), SEC_KEY)) ;
        }

        if(isset($user_detail->chief_compliant_userdetail->chronic_cad_medication) && !empty($user_detail->chief_compliant_userdetail->chronic_cad_medication))
        {

          $user_detail->chief_compliant_userdetail->chronic_cad_medication = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_cad_medication), SEC_KEY)) ;
        }

        if(isset($user_detail->chief_compliant_userdetail->chronic_chf_medication) && !empty($user_detail->chief_compliant_userdetail->chronic_chf_medication))
        {

          $user_detail->chief_compliant_userdetail->chronic_chf_medication = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_chf_medication), SEC_KEY)) ;
        }

        if(isset($user_detail->chief_compliant_userdetail->chronic_htn_medication) && !empty($user_detail->chief_compliant_userdetail->chronic_htn_medication))
        {

          $user_detail->chief_compliant_userdetail->chronic_htn_medication = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_htn_medication), SEC_KEY)) ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->glucose_reading_detail)){

          $user_detail->chief_compliant_userdetail->glucose_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->glucose_reading_detail), SEC_KEY)) ;
        }

        if(isset($user_detail->chief_compliant_userdetail->bp_reading_detail) && !empty($user_detail->chief_compliant_userdetail->bp_reading_detail))
        {

          $user_detail->chief_compliant_userdetail->bp_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->bp_reading_detail), SEC_KEY)) ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->peak_flow_reading_detail)){

          $user_detail->chief_compliant_userdetail->peak_flow_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->peak_flow_reading_detail), SEC_KEY)) ;
        }

        /* naveen*/
        if(!empty($user_detail->chief_compliant_userdetail->cancer_cc_detail)){
            $user_detail->chief_compliant_userdetail->cancer_cc_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_cc_detail), SEC_KEY));
            $tempar = array();
            foreach($user_detail->chief_compliant_userdetail->cancer_cc_detail as $key => $value){
                if(!empty($value)){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;
                }
              }
              $user_detail->chief_compliant_userdetail->cancer_cc_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->cancer_history_detail))
        {
          $user_detail->chief_compliant_userdetail->cancer_history_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_history_detail), SEC_KEY))  ;

          $tempar = array();
          foreach($user_detail->chief_compliant_userdetail->cancer_history_detail as $key => $value){

              if(!empty($value) && is_array($value)){

                $i = 0;
                foreach ($value as $k => $v) {
                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $k])->first();
                  $tempar[$key][$i]['question_id'] = $temp->id ;
                  $tempar[$key][$i]['question'] = $temp->question ;
                  $tempar[$key][$i]['answer'] = $v;
                  $i++;
                }
              }
            }
            $user_detail->chief_compliant_userdetail->cancer_history_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->cancer_family_members))
        {
          $user_detail->chief_compliant_userdetail->cancer_family_members = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_family_members), SEC_KEY))  ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail))
        {
          $user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail), SEC_KEY))  ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->cancer_medical_detail))
        {
          $i = 0;
          $user_detail->chief_compliant_userdetail->cancer_medical_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_medical_detail), SEC_KEY))  ;

          $tempar = array();
           $i = 0;
          foreach($user_detail->chief_compliant_userdetail->cancer_medical_detail as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;
              }
            }
            $user_detail->chief_compliant_userdetail->cancer_medical_detail = $tempar;
        }


        if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments))
        {
         $user_detail->chief_compliant_userdetail->cancer_assessments = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->cancer_assessments), SEC_KEY))  ;
          //pr($user_detail->chief_compliant_userdetail->cancer_assessments);die;
          $assessment_history = array();
          $life_assessment = array();
          $chemo_assessment = array();

          if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments['assessment_history']))
          {
            $i = 0;
          foreach($user_detail->chief_compliant_userdetail->cancer_assessments['assessment_history'] as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonConditions->find('all')->where(['id'=> $key])->first();
                $assessment_history[$i]['symtoms_id'] = $temp->id ;
                $assessment_history[$i]['name'] = $temp->name ;
                $assessment_history[$i]['answer'] = $value;
                $i++;
              }
            }
          }

          if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments['life_assessment']))
          {
            $j = 0;
          foreach($user_detail->chief_compliant_userdetail->cancer_assessments['life_assessment'] as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonConditions->find('all')->where(['id'=> $key])->first();
                $life_assessment[$j]['symtoms_id'] = $temp->id ;
                $life_assessment[$j]['name'] = $temp->name ;
                $life_assessment[$j]['answer'] = $value;
                $j++;
              }
            }
           }

           if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments['chemo_assessment']))
          {
            $j = 0;
          foreach($user_detail->chief_compliant_userdetail->cancer_assessments['chemo_assessment'] as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonConditions->find('all')->where(['id'=> $key])->first();
                $chemo_assessment[$j]['symtoms_id'] = $temp->id ;
                $chemo_assessment[$j]['name'] = $temp->name ;
                $chemo_assessment[$j]['answer'] = $value;
                $j++;
              }
            }
           }

          if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments['cancer_covid_question'])){

            $user_detail->cancer_covid_question = $user_detail->chief_compliant_userdetail->cancer_assessments['cancer_covid_question'];

            //pr($user_detail->phq_9_detail);die;
             $tempar = array();
            foreach($user_detail->cancer_covid_question as $key => $value){

                //if(!empty($value)){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;


               // }

              }
              $user_detail->cancer_covid_question = $tempar;
            //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
        }

           $cancer_assessments = array('assessment_history' => $assessment_history,'life_assessment' => $life_assessment,'chemo_assessment' => $chemo_assessment,'cancer_covid_question' =>$user_detail->cancer_covid_question);

          // pr($cancer_assessments);die;
              if(!empty($cancer_assessments))
              {
                $user_detail->chief_compliant_userdetail->cancer_assessments = $cancer_assessments;
              }
        }

        if(!empty($user_detail->chief_compliant_userdetail->pre_op_post_op))
        {
          $i = 0;
          $user_detail->chief_compliant_userdetail->pre_op_post_op = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->pre_op_post_op), SEC_KEY))  ;

          $tempar = array();
           $i = 0;
          foreach($user_detail->chief_compliant_userdetail->pre_op_post_op as $key => $value){

              if(!empty($value)){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value;
                $i++;
              }
            }
            $user_detail->chief_compliant_userdetail->pre_op_post_op = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->cancer_followup_general_detail)){

            $user_detail->chief_compliant_userdetail->cancer_followup_general_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_followup_general_detail), SEC_KEY))  ;

            //pr($user_detail->phq_9_detail);die;
             $tempar = array();
            foreach($user_detail->chief_compliant_userdetail->cancer_followup_general_detail as $key => $value){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;
              }
              $user_detail->chief_compliant_userdetail->cancer_followup_general_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->followup_medical_history_detail)){

            $user_detail->chief_compliant_userdetail->followup_medical_history_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->followup_medical_history_detail), SEC_KEY))  ;

            //pr($user_detail->phq_9_detail);die;
             $tempar = array();
             foreach($user_detail->chief_compliant_userdetail->followup_medical_history_detail['followup_medical_history_detail'] as $key => $value){

                  $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                  $tempar[$key]['question_id'] = $temp->id ;
                  $tempar[$key]['question'] = $temp->question ;
                  $tempar[$key]['answer'] = $value;
              }
              if(!empty($user_detail->chief_compliant_userdetail->followup_medical_history_detail['medical_history'])){
              $tempar['medical_history'] = $user_detail->chief_compliant_userdetail->followup_medical_history_detail['medical_history'];
              }
              if(!empty($user_detail->chief_compliant_userdetail->followup_medical_history_detail['surgical_history'])){
              $tempar['surgical_history'] = $user_detail->chief_compliant_userdetail->followup_medical_history_detail['surgical_history'];
              }
              if(!empty($user_detail->chief_compliant_userdetail->followup_medical_history_detail['allergy_history'])){
              $tempar['allergy_history'] = $user_detail->chief_compliant_userdetail->followup_medical_history_detail['allergy_history'];
              }

              $user_detail->chief_compliant_userdetail->followup_medical_history_detail = $tempar;
        }

      }

      $length_arr =  '{"1x a day": "qd", "2x a day": "BID", "3x a day": "TID", "every 4 hours": "q4h", "every 6 hours": "q6h", "every 8 hours": "q8h", "every 12 hours": "q12h", "1x a week": "qwk", "2x a week": "2/wk", "3x a week": "3/wk", "4x a week": "q4wk", "5x a week": "q5wk", "6x a week": "q6wk", "at bedtime": "qhs", "in the morning": "qam", "as needed": "PRN","evening":"qpm"}' ;

    $length_arr = json_decode($length_arr, true);
    $length_arr = array_flip($length_arr);

    if($user_detail->chief_compliant_userdetail->current_step_id->id == 6 || $user_detail->chief_compliant_userdetail->current_step_id->id == 8 || $user_detail->chief_compliant_userdetail->current_step_id->id == 12 || $user_detail->chief_compliant_userdetail->current_step_id->id == 16)
    {

      //die('xcxc');

      $prev_visit_user_detail =  $this->ChiefCompliantUserdetails->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->followup_parent_id])->first();
      $prev_visit_user_detail = $this->prepare_user_detial_data_for_render($prev_visit_user_detail);
      $cur_cc_name = null;

      if(!empty($prev_visit_user_detail) && !empty($prev_visit_user_detail->chief_compliant_details)){

          foreach ($prev_visit_user_detail->chief_compliant_details as $key => $value) {

              if(isset($value['cc_data']['name']) && !empty($value['cc_data']['name'])){

                  $cur_cc_name[] = $value['cc_data']['name'];
              }
          }
      }

      if(!empty($cur_cc_name)){

          $cur_cc_name = implode(",", $cur_cc_name);
      }

     // pr($user_detail);die;
      $this->set(compact('cur_cc_name'));
      $this->set(compact('prev_visit_user_detail'));

    }

    //pr($user_detail);die;

    $this->set(compact('user_detail', 'length_arr'));
  }

    public function myprofile(){
/*
// security encryption example   SEC_KEY
$key = 'wt1U5MACWJFTXGenFoZoiLwQGrLgdbHA';
$value = '123456' ;
$result = Security::encrypt($value, $key);
echo $result ;
echo '<br> hihi' ;
$result = Security::decrypt($result, 'wt1U5MACWJFTXGenFoZoiLwQGrLgdqqq');
echo $result; die;

*/
        $this->viewBuilder()->setLayout('front');
        $loginuserid = $this->Auth->user('id');
        $query = $this->Users->find('all')
          ->where(['Users.id' => $loginuserid]);
            $users = $query->first();

        if($users->password == ''){

          $session = $this->getRequest()->getSession();
          $session->write('validate_myprofile_user', $users['id']);
          return    $this->redirect(array('action'=>'changeprofile', 'prefix' => $this->prefix));
        }

        if ($this->request->is(['patch', 'post', 'put'])) {


        $input_pass = $this->request->getData('password');
            /*$query = $this->Users->find('all')
      ->where(['Users.id' => $loginuserid]);
            $users = $query->first();*/

            $hasher = new DefaultPasswordHasher();
            $verify = $hasher->check($input_pass, $users->password);
            if($verify){

              $session = $this->getRequest()->getSession();
              $session->write('validate_myprofile_user', $users['id']);
              return    $this->redirect(array('action'=>'changeprofile', 'prefix' => $this->prefix));
      // return    $this->redirect(array('action'=>'changeprofile', base64_encode($input_pass)));

            } else {
               $this->Flash->error(__('Password is incorrect, please try again.'));

            }
        }

    }

    public function changeprofile(){
      $loginuserid = $this->Auth->user('id');
        // Set the layout.
        $this->viewBuilder()->setLayout('front');
        $session = $this->getRequest()->getSession();
        $input_pass = $session->read('validate_myprofile_user');

        if($input_pass != $loginuserid){

          return    $this->redirect(array('action'=>'myprofile', 'prefix' => $this->prefix));
         //pr($input_pass); die('dsdsadsa');        // echo 'hello';
        }
        // pr($this->request->getData('input_pass'));
      /*if(!empty($input_pass)){
        $input_pass =  $input_pass;
      }else{
        $input_pass =  $this->request->getData('input_pass');
      }

      if(empty($input_pass)){

        $this->Flash->error(__('Please enter password to change your profile data.'));
        return    $this->redirect(['action' => 'myprofile']);
      } else {
      $input_pass1 = $input_pass ;
      }*/


            $query = $this->Users->find('all')
      ->where(['Users.id' => $loginuserid]);
            $users = $query->first();

            // $hasher = new DefaultPasswordHasher();
            // $verify = $hasher->check($input_pass1, $users->password);

            // if(!$verify){
            //  $this->Flash->error(__('Password is incorrect, please try again.'));
            //    return    $this->redirect(['action' => 'myprofile']);
            // }


        $organizations = $this->Users->get($loginuserid);
        if ($this->request->is(['patch', 'post', 'put'])) {


          if(isset($this->request->data['time']) && $this->request->data['time'] != ''){
          $timemanage = array();
          $timemanage['user_id'] = $loginuserid;
          $timemanage['form_type'] = 'Profile section';
          $timemanage['time'] = isset($this->request->data['time']) ? $this->request->data['time']:'';
          $this->timeManagement($timemanage);
         }

           // pr($this->request->data());die;

            if($input_pass){


          if( empty($this->request->data['password']) ){
            unset($this->request->data['password']);
            unset($this->request->data['confirm_password']);
          }

      if(!empty($this->request->data['dob'])){

        $dob  = explode("-", $this->request->data['dob']);
        $this->request->data['dob'] = $dob[2].'-'.$dob[0].'-'.$dob[1];
      /*$this->request->data['dob'] = Time::createFromFormat(
          'm-d-Y', // 'd-m-Y'
          $this->request->data['dob']
      );*/
      }


            $organizations = $this->Users->patchEntity($organizations, $this->request->getData());

            if(!empty($organizations->first_name))
            $organizations->first_name = base64_encode($this->CryptoSecurity->encrypt($organizations->first_name, SEC_KEY));
            if(!empty($organizations->last_name))
            $organizations->last_name = base64_encode($this->CryptoSecurity->encrypt($organizations->last_name, SEC_KEY));
          if(!empty($organizations->dob))
            $organizations->dob = base64_encode($this->CryptoSecurity->encrypt($organizations->dob, SEC_KEY));



            if ($res = $this->Users->save($organizations)) {
if ($this->Auth->user('id') === $res->id) {
    $data = $res->toArray();
    unset($data['password']);

    $this->Auth->setUser($data);
      $authUser = ($this->Auth->user()) ? ($this->Auth->user()) : [];
       $this->set(compact("authUser"));
}
                  //$session->delete('validate_myprofile_user'); // delete the password from session added in myprofile function
                  $input_pass =  !empty($this->request->getData('password')) ? $this->request->getData('password') : $input_pass ;
                $this->Flash->success(__('Updated successfully.'));
                // return $this->redirect($this->referer());
            } else {

            $this->Flash->error(__('Could not updated. Please, try again.'));
            }


            } else {
               $this->Flash->error(__('Password is incorrect, please try again.'));

            }


        }
        $organizations->password = null ;

        $this->set(compact('organizations', 'input_pass'));



    }



    public function getmedicationsuggestion(){
        // $search_type = $this->request->getQuery('search_type');
        $search_keyword = $this->request->getQuery('search_keyword');
        $condar = array();
        // if(!empty($search_type)){
        //     $condar['cond_type'] = $search_type ;
        // }

        if(!empty($search_keyword)){
            $condar['layman_name LIKE'] = "$search_keyword%" ;
            // $condar['doctor_specific_name LIKE'] = "%$search_keyword%" ;
            // $condar['rxnormid LIKE'] = "%$search_keyword%" ;
            // $condar = array(
            //     'OR' => array(
            //         'layman_name LIKE' =>  "%$search_keyword%" ,
            //         // 'doctor_specific_name LIKE' =>  "%$search_keyword%",
            //         'rxnormid LIKE' =>  "%$search_keyword%"
            //     )
            // );
        }

        $commonTable = TableRegistry::get('chief_compliant_medication');
        // $common_medical_cond = $commonTable->find('list', [
        //                                     'keyField' => 'id',
        //                                     'valueField' =>  function ($row) {
        //                                       if($row['layman_name'] == $row['doctor_specific_name'])
        //                                       {
        //                                       return $row['layman_name'];
        //                                       }
        //                                       else {
        //                                         // return $row['layman_name'] . ' (' . $row['doctor_specific_name'].')';
        //                                       return $row['layman_name'];
        //                                       }
        //                                  }
        //                                 ])->where($condar)->order(['layman_name'=>'ASC'])->toArray();
        $common_medical_cond = $commonTable->find('all')->select(['id','layman_name'])->where($condar)->order(['layman_name'=>'ASC'])->limit(500)->toArray();

       // $common_medical_cond = array_flip($common_medical_cond); // array flipped because we want the name should be key so javascript object sorting works with key
        echo json_encode($common_medical_cond);
        die;
    }


// search for orthopedic module related symptom for main chief compliant
    public function getsymptomsuggestionortho(){
        // $search_type = $this->request->getQuery('search_type');
        $search_keyword = $this->request->getQuery('search_keyword');
        $condar = array();
        // if(!empty($search_type)){
        //     $condar['cond_type'] = $search_type ;
        // }

        if(!empty($search_keyword)){
            $condar['name LIKE'] = "%$search_keyword%" ;

        }
      $condar['specialization_id'] = 3 ; // search for orthopedics only
        $commonTable = TableRegistry::get('chief_compliants');
        $common_medical_cond = $commonTable->find('list', [
                                            'keyField' => 'id',
                                            'valueField' => 'name'
                                        ])->where($condar)->order(['name'=>'ASC'])->toArray();
// pr($common_medical_cond); die;
        echo json_encode($common_medical_cond);
         die;
    }


// search for orthopedic module related symptom for main chief compliant
    public function getsymptomsuggestionorthospine(){
        // $search_type = $this->request->getQuery('search_type');
        $search_keyword = $this->request->getQuery('search_keyword');
        $condar = array();
        // if(!empty($search_type)){
        //     $condar['cond_type'] = $search_type ;
        // }

        if(!empty($search_keyword)){
            $condar['name LIKE'] = "%$search_keyword%" ;

        }
      $condar['specialization_id'] = 4 ; // search for orthopedics spine only
        $commonTable = TableRegistry::get('chief_compliants');
        $common_medical_cond = $commonTable->find('list', [
                                            'keyField' => 'id',
                                            'valueField' => 'name'
                                        ])->where($condar)->order(['name'=>'ASC'])->toArray();
// pr($common_medical_cond); die;
        echo json_encode($common_medical_cond);
         die;
    }




    public function getsymptomsuggestion(){
        // $search_type = $this->request->getQuery('search_type');
        $search_keyword = $this->request->getQuery('search_keyword');
        $condar = array();
        // if(!empty($search_type)){
        //     $condar['cond_type'] = $search_type ;
        // }

        if(!empty($search_keyword)){
            $condar['name LIKE'] = "%$search_keyword%" ;
        }

       $condar['specialization_id !='] = 4 ; // search for general and orthopedic only

        $commonTable = TableRegistry::get('chief_compliants');
        $common_medical_cond = $commonTable->find('list', [
                                            'keyField' => 'id',
                                            'valueField' => 'name'
                                        ])->where($condar)->order(['name'=>'ASC'])->toArray();

        echo json_encode($common_medical_cond);
         die;
    }




   // get common conditions related  suggestion from Edit Medical History

    public function getsuggestion(){
      $search_type = $this->request->getQuery('search_type');
// pr($search_type); die;
      $search_keyword = trim($this->request->getQuery('search_keyword'));
      // var_dump($search_keyword) ; die;
      $condar = array();
      if(!empty($search_type)){
        $condar['cond_type'] = $search_type ;
      }

      if(!empty($search_keyword)){
        $condar['name LIKE'] = "%$search_keyword%" ;
      }

    $commonTable = TableRegistry::get('common_conditions');
    $common_medical_cond = $commonTable->find('list', [
                        'keyField' => 'id',
                        'valueField' => 'name'
                    ])->where($condar)->order(['name'=>'ASC'])->toArray();

    echo json_encode($common_medical_cond);
       die;
    }

// we need separate function for input suggession because in tag input we will check word start with wild card
    public function gettaginputsuggestion(){
      $search_type = $this->request->getQuery('search_type');
// pr($search_type); die;
      $search_keyword = trim($this->request->getQuery('search_keyword'));
      // var_dump($search_keyword) ; die;
      $condar = array();
      if(!empty($search_type)){
        $condar['cond_type'] = $search_type ;
      }

      if(!empty($search_keyword)){
        $condar['name LIKE'] = "%$search_keyword%" ;
      }

    $commonTable = TableRegistry::get('common_conditions');
    $common_medical_cond = $commonTable->find('list', [
                        'keyField' => 'id',
                        'valueField' => 'name'
                    ])->where($condar)->order(['name'=>'ASC'])->toArray();

    echo json_encode($common_medical_cond);
       die;
    }



    public function getspecializationfordoctor(){
        $doc_id = $this->request->getQuery('doc_id');

        $doc_id = base64_decode($doc_id) ;
        // pr($doc_id); die;
        $doctorTable = TableRegistry::get('Doctors');
        $doc_detail = $doctorTable->find('all')->where(['id'=>$doc_id])->first();

        // pr($doc_detail); die;

        if(!empty($doc_detail->specialization_id)){

          $specialization_id  = explode(',', $doc_detail->specialization_id);

        $specializationTable = TableRegistry::get('Specializations');
        $specialization_data = $specializationTable->find('list', [
                            // 'keyField' => 'id',
                          'keyField' =>   function ($row) {
                                  return base64_encode($row['id']) ;
                              },
                            'valueField' => 'name'
                        ])->where(['id IN' => $specialization_id])->toArray();

        echo json_encode($specialization_data);

        }



        die;
    }



    // will send note to MI7 api
    public function sendNoteToApi($id = null , $atp_id = null,$mrn = ""){

      $login_user = $this->Users->find('all')->where(['Users.id' => $id])->first();
        $this->loadModel('WomenSpecific');
      $women_field =  $this->WomenSpecific->find('all')->where(['user_id' => $id ])->first();

      $cc = '';

    if(!empty( $women_field)){
      $womanrec = $women_field;
        if(!empty($womanrec->age_of_first_priod))
         $womanrec->age_of_first_priod = Security::decrypt( base64_decode($womanrec->age_of_first_priod), SEC_KEY);

        if(!empty($womanrec->no_of_pregnency))
         $womanrec->no_of_pregnency = Security::decrypt( base64_decode($womanrec->no_of_pregnency), SEC_KEY);

             if(!empty($womanrec->no_of_miscarriage))
         $womanrec->no_of_miscarriage = Security::decrypt( base64_decode($womanrec->no_of_miscarriage), SEC_KEY);
            if(!empty($womanrec->is_regular_papsmear))
         $womanrec->is_regular_papsmear = Security::decrypt( base64_decode($womanrec->is_regular_papsmear), SEC_KEY);

            if(!empty($womanrec->papsmear_finding))
         $womanrec->papsmear_finding = Security::decrypt( base64_decode($womanrec->papsmear_finding), SEC_KEY);

            if(!empty($womanrec->papsmear_month))
         $womanrec->papsmear_month = Security::decrypt( base64_decode($womanrec->papsmear_month), SEC_KEY);
            if(!empty($womanrec->papsmear_year))
         $womanrec->papsmear_year = Security::decrypt( base64_decode($womanrec->papsmear_year), SEC_KEY);


            if(!empty($womanrec->is_curently_pregnant))
         $womanrec->is_curently_pregnant = Security::decrypt( base64_decode($womanrec->is_curently_pregnant), SEC_KEY);
            if(!empty($womanrec->current_baby_sex))
         $womanrec->current_baby_sex = Security::decrypt( base64_decode($womanrec->current_baby_sex), SEC_KEY);
            if(!empty($womanrec->currently_pregnant_week))
         $womanrec->currently_pregnant_week = Security::decrypt( base64_decode($womanrec->currently_pregnant_week), SEC_KEY);
            if(!empty($womanrec->currently_pregnant_days))
         $womanrec->currently_pregnant_days = Security::decrypt( base64_decode($womanrec->currently_pregnant_days), SEC_KEY);
            if(!empty($womanrec->currently_pregnant_complication))
         $womanrec->currently_pregnant_complication = Security::decrypt( base64_decode($womanrec->currently_pregnant_complication), SEC_KEY);

            if(!empty($womanrec->is_previous_birth))
         $womanrec->is_previous_birth = Security::decrypt( base64_decode($womanrec->is_previous_birth), SEC_KEY);
            if(!empty($womanrec->previous_birth_sex))
         $womanrec->previous_birth_sex = Security::decrypt( base64_decode($womanrec->previous_birth_sex), SEC_KEY);
            if(!empty($womanrec->previous_delivery_method))
         $womanrec->previous_delivery_method = Security::decrypt( base64_decode($womanrec->previous_delivery_method), SEC_KEY);
            if(!empty($womanrec->previos_pregnancy_duration))
         $womanrec->previos_pregnancy_duration = Security::decrypt( base64_decode($womanrec->previos_pregnancy_duration), SEC_KEY);

            if(!empty($womanrec->previous_complication))
         $womanrec->previous_complication = Security::decrypt( base64_decode($womanrec->previous_complication), SEC_KEY);
            if(!empty($womanrec->previous_hospital))
         $womanrec->previous_hospital = Security::decrypt( base64_decode($womanrec->previous_hospital), SEC_KEY);
            if(!empty($womanrec->is_mammogram))
         $womanrec->is_mammogram = Security::decrypt( base64_decode($womanrec->is_mammogram), SEC_KEY);
            if(!empty($womanrec->mammogram_month))
         $womanrec->mammogram_month = Security::decrypt( base64_decode($womanrec->mammogram_month), SEC_KEY);
            if(!empty($womanrec->mammogram_year))
         $womanrec->mammogram_year = Security::decrypt( base64_decode($womanrec->mammogram_year), SEC_KEY);
            if(!empty($womanrec->previous_abnormal_breast_lump))
         $womanrec->previous_abnormal_breast_lump = Security::decrypt( base64_decode($womanrec->previous_abnormal_breast_lump), SEC_KEY);

            if(!empty($womanrec->any_biopsy))
         $womanrec->any_biopsy = Security::decrypt( base64_decode($womanrec->any_biopsy), SEC_KEY);

            if(!empty($womanrec->is_sti_std))
         $womanrec->is_sti_std = Security::decrypt( base64_decode($womanrec->is_sti_std), SEC_KEY);

      $women_field  = $womanrec  ;
     }




// decrypting women specific data end ******************

// decrypting user data start

if(!empty($login_user)){

  $user_data =  $login_user ;

if(!empty($user_data->first_name))
$user_data->first_name = $this->CryptoSecurity->decrypt( base64_decode($user_data->first_name), SEC_KEY);

if(!empty($user_data->last_name))
$user_data->last_name = $this->CryptoSecurity->decrypt( base64_decode($user_data->last_name), SEC_KEY);

if(!empty($user_data->email))
$user_data->email = $this->CryptoSecurity->decrypt( base64_decode($user_data->email), SEC_KEY);

if(!empty($user_data->phone))
$user_data->phone = $this->CryptoSecurity->decrypt( base64_decode($user_data->phone), SEC_KEY);

if(!empty($user_data->dob))
$user_data->dob = $this->CryptoSecurity->decrypt( base64_decode($user_data->dob), SEC_KEY);


if(!empty($user_data->height))
$user_data->height = Security::decrypt( base64_decode($user_data->height), SEC_KEY);

if(!empty($user_data->weight))
$user_data->weight = Security::decrypt( base64_decode($user_data->weight), SEC_KEY);




if(!empty($user_data->address))
$user_data->address = Security::decrypt( base64_decode($user_data->address), SEC_KEY);
if(!empty($user_data->city))
$user_data->city = Security::decrypt( base64_decode($user_data->city), SEC_KEY);
if(!empty($user_data->state))
$user_data->state = Security::decrypt( base64_decode($user_data->state), SEC_KEY);
if(!empty($user_data->zip))
$user_data->zip = Security::decrypt( base64_decode($user_data->zip), SEC_KEY);

if(!empty($user_data->bmi))
$user_data->bmi = Security::decrypt( base64_decode($user_data->bmi), SEC_KEY);


if(!empty($user_data->is_uterus_removal))
$user_data->is_uterus_removal = Security::decrypt( base64_decode($user_data->is_uterus_removal), SEC_KEY);


if(!empty($user_data->is_latex_allergy))
$user_data->is_latex_allergy = Security::decrypt( base64_decode($user_data->is_latex_allergy), SEC_KEY);

if(!empty($user_data->is_retired))
$user_data->is_retired = Security::decrypt( base64_decode($user_data->is_retired), SEC_KEY);

if(!empty($user_data->occupation))
$user_data->occupation = Security::decrypt( base64_decode($user_data->occupation), SEC_KEY);

if(!empty($user_data->marital_status))
$user_data->marital_status = Security::decrypt( base64_decode($user_data->marital_status), SEC_KEY);

if(!empty($user_data->sexual_orientation))
$user_data->sexual_orientation = Security::decrypt( base64_decode($user_data->sexual_orientation), SEC_KEY);

if(!empty($user_data->ethinicity))
$user_data->ethinicity = Security::decrypt( base64_decode($user_data->ethinicity), SEC_KEY);

if(!empty($user_data->current_smoke_pack))
$user_data->current_smoke_pack = Security::decrypt( base64_decode($user_data->current_smoke_pack), SEC_KEY);


if(!empty($user_data->current_smoke_year))
$user_data->current_smoke_year = Security::decrypt( base64_decode($user_data->current_smoke_year), SEC_KEY);

if(!empty($user_data->past_smoke_pack))
$user_data->past_smoke_pack = Security::decrypt( base64_decode($user_data->past_smoke_pack), SEC_KEY);

if(!empty($user_data->past_smoke_year))
$user_data->past_smoke_year = Security::decrypt( base64_decode($user_data->past_smoke_year), SEC_KEY);

if(!empty($user_data->current_drink_pack))
$user_data->current_drink_pack = Security::decrypt( base64_decode($user_data->current_drink_pack), SEC_KEY);

if(!empty($user_data->current_drink_year))
$user_data->current_drink_year = Security::decrypt( base64_decode($user_data->current_drink_year), SEC_KEY);

if(!empty($user_data->past_drink_pack))
$user_data->past_drink_pack = Security::decrypt( base64_decode($user_data->past_drink_pack), SEC_KEY);

if(!empty($user_data->past_drink_year))
$user_data->past_drink_year = Security::decrypt( base64_decode($user_data->past_drink_year), SEC_KEY);

if(!empty($user_data->is_currentlysmoking))
$user_data->is_currentlysmoking = Security::decrypt( base64_decode($user_data->is_currentlysmoking), SEC_KEY);

if(!empty($user_data->is_pastsmoking))
$user_data->is_pastsmoking = Security::decrypt( base64_decode($user_data->is_pastsmoking), SEC_KEY);

if(!empty($user_data->is_currentlydrinking))
$user_data->is_currentlydrinking = Security::decrypt( base64_decode($user_data->is_currentlydrinking), SEC_KEY);

if(!empty($user_data->is_pastdrinking))
$user_data->is_pastdrinking = Security::decrypt( base64_decode($user_data->is_pastdrinking), SEC_KEY);

if(!empty($user_data->is_otherdrug))
$user_data->is_otherdrug = Security::decrypt( base64_decode($user_data->is_otherdrug), SEC_KEY);

if(!empty($user_data->is_otherdrugpast))
$user_data->is_otherdrugpast = Security::decrypt( base64_decode($user_data->is_otherdrugpast), SEC_KEY);


if(!empty($user_data->gender))
$user_data->gender = Security::decrypt( base64_decode($user_data->gender), SEC_KEY);

if(!empty($user_data->pharmacy))
$user_data->pharmacy = Security::decrypt( base64_decode($user_data->pharmacy), SEC_KEY);

   $login_user  = $user_data ;

}


// decrypting user data end




 // decrypting user data and woman data end *****************************






    //$this->set(compact('login_user', 'women_field'));

      // getting data of edit medical history end *****************************

      // getting data of new appointments start ******************************
      $this->loadModel('Appointments') ;
      $id = $atp_id ;
    $user_detail = $this->Appointments->find('all')->contain(['Doctors', 'Organizations', 'Specializations', 'Users', 'ChiefCompliantUserdetails'])->where(['Appointments.is_shown' => 1, 'Appointments.id' => $id])->first();

    //pr($user_detail);

        $this->loadModel('StepDetails');
        $this->loadModel('ChiefCompliants');
        $this->loadModel('ChiefCompliantQuestionnaire');
        $this->loadModel('ChiefCompliantDetails');
        $this->loadModel('ChiefCompliantMedication');
        $this->loadModel('ChiefCompliantOtherDetails');
        $this->loadModel('PainFollowupQuestionnaires');
        $this->loadModel('CommonQuestions');
        $this->loadModel('Diseases');
        $this->loadModel('Symptoms');
        $this->loadModel('CommonConditions');




            if(!empty($user_detail->chief_compliant_userdetail)){
                if(!empty($user_detail->chief_compliant_userdetail->current_step_id)){

                    $user_detail->chief_compliant_userdetail->current_step_id = $this->StepDetails->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->current_step_id])->first();


            }
            if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_id))
            {
              $user_detail->chief_compliant_userdetail->chief_compliant_id = Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_id), SEC_KEY);

              /*$cc_ids = explode(",", $user_detail->chief_compliant_userdetail->chief_compliant_id);
              $temp_cc = array_flip(array_filter($cc_ids));
              $temp_chief_compliant_id = $this->ChiefCompliants->find('list',[
                                    'keyField' => 'id',
                                    'valueField' => 'name'])->where(['id IN' => $cc_ids])->toArray();

              if(!empty($temp_chief_compliant_id)){

                //unset the cc key when cc not in database
                $unsaved_cc = array_diff_key($temp_cc, $temp_chief_compliant_id);
                if(!empty($unsaved_cc)){

                    foreach ($unsaved_cc as $ukey => $uvalue) {

                        if(isset($temp_cc[$ukey])){

                          unset($temp_cc[$ukey]);
                        }
                    }
                }

                foreach ($temp_chief_compliant_id as $cc_key => $cc_value) {

                  if(isset($temp_cc[$cc_key])){

                    $temp_cc[$cc_key] = $cc_value;
                  }
                }

                $temp_cc = implode(", ", $temp_cc);
              }

              $user_detail->chief_compliant_userdetail->all_cc_detail_name = rtrim($temp_cc,', ');*/

              $user_detail->chief_compliant_userdetail->chief_compliant_id = $this->ChiefCompliants->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->chief_compliant_id])->first();
            }
// pr($user_detail->chief_compliant_userdetail->chief_compliant_id); die;
                 if(!empty($user_detail->chief_compliant_userdetail->compliant_symptom_ids))
                 {
                    $user_detail->chief_compliant_userdetail->compliant_symptom_ids = explode(',', $user_detail->chief_compliant_userdetail->compliant_symptom_ids);

                    $user_detail->chief_compliant_userdetail->compliant_symptom_ids =  $this->ChiefCompliants->find('all')->where(['id IN' => $user_detail->chief_compliant_userdetail->compliant_symptom_ids])->all();
                }

// pr($user_detail->chief_compliant_userdetail->compliant_symptom_ids); die;
                $user_detail->chief_compliant_userdetail->compliant_length = $user_detail->chief_compliant_userdetail->compliant_length;

                if(!empty($user_detail->chief_compliant_userdetail->compliant_medication_detail)){
                 $user_detail->chief_compliant_userdetail->compliant_medication_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->compliant_medication_detail), SEC_KEY)) ;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_symptoms))
                {

                  $user_detail->chief_compliant_userdetail->chief_compliant_symptoms = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_symptoms), SEC_KEY)) ;

                    foreach($user_detail->chief_compliant_userdetail->chief_compliant_symptoms as $key => $value){

                        foreach($value as $k =>$v) {
    $user_detail->chief_compliant_userdetail->chief_compliant_symptoms[$key][$k] = $this->ChiefCompliants->find('all')->where(['id' => $v])->first();
                        }

                    }
                }

                if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail)){

                    $user_detail->chief_compliant_userdetail->questionnaire_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->questionnaire_detail), SEC_KEY)) ;

                    foreach($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value){

                        foreach($value as $k =>$v) {
                          $user_detail->chief_compliant_userdetail->questionnaire_detail[$key][$k] = $this->ChiefCompliantQuestionnaire->find('all')->where(['id' => $v])->first();
                        }

                    }
                    // pr($user_detail->questionnaire_detail); die;

                }



                if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_details)){

                // $user_detail->chief_compliant_userdetail->chief_compliant_details = unserialize(base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_details)) ;  //  unserialize($user_detail->chief_compliant_details) ;

   $user_detail->chief_compliant_userdetail->chief_compliant_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_details), SEC_KEY))) ;



// below is the code to sort array according to our requirement, we need to sort the question id 42 and 47 according to this sequence - array(43,39,40,41,42)

if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_details['42'])){
  $temp   = $user_detail->chief_compliant_userdetail->chief_compliant_details['42'];

   $ordered = array();
    foreach (array(43,39,40,41,42) as $key) {
        if (array_key_exists($key, $temp)) {
            $ordered[$key] = $temp[$key];
            unset($temp[$key]);
        }
    }
  $temp = $ordered + $temp;
$user_detail->chief_compliant_userdetail->chief_compliant_details['42'] =  $temp;
$temp = '';
}
if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_details['47'])){
  $temp   = $user_detail->chief_compliant_userdetail->chief_compliant_details['47'];

   $ordered = array();
    foreach (array(43,39,40,41,42) as $key) {
        if (array_key_exists($key, $temp)) {
            $ordered[$key] = $temp[$key];
            unset($temp[$key]);
        }
    }
  $temp = $ordered + $temp;
$user_detail->chief_compliant_userdetail->chief_compliant_details['47'] =  $temp;
$temp = '';
}
   // pr($user_detail->chief_compliant_userdetail->chief_compliant_details['42']); die;

                    $tempar = array();
             $more_options = array();
                    foreach ($user_detail->chief_compliant_userdetail->chief_compliant_details as $key => $value) {
                               $i = 0 ;
                        foreach ($value as $k => $v) {


                if(!is_numeric($k) && $k == 'more_option'){
                    $more_options[$key] = $v ;
                    unset($value['more_option']);
                    continue;
                }


    $temp = $this->ChiefCompliantDetails->find('all')->where(['id'=> $k ])->first();
    $tempcc = $this->ChiefCompliants->find('all')->where(['id'=> $key ])->first();
        $tempar[$key]['cc_data'] = $tempcc ;
                            $tempar[$key][$i]['question_id'] = $temp->id ;
                            $tempar[$key][$i]['question'] = $temp->question ;
                            $tempar[$key][$i]['hpi_element'] = $temp->cpt_hpi_element_type ;
                            $tempar[$key][$i]['answer'] = $v ;
                            $i++;
                        }


                    }
  $user_detail->chief_compliant_userdetail->more_options = $more_options ;
                    $user_detail->chief_compliant_userdetail->chief_compliant_details = $tempar ;

        // pr($user_detail->chief_compliant_details); die;

                }

  if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_other_details)){

       $user_detail->chief_compliant_userdetail->chief_compliant_other_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_other_details), SEC_KEY))) ;
        $tempar = array();
        $i = 0;
        foreach ($user_detail->chief_compliant_userdetail->chief_compliant_other_details as $key => $value) {


            $temp = $this->ChiefCompliantOtherDetails->find('all')->where(['id'=> $key ])->first();

            $tempar[$i]['question_id'] = $temp->id ;
            $tempar[$i]['question'] = $temp->question ;
            $tempar[$i]['answer'] = $value ;
            $i++;
        }

        $user_detail->chief_compliant_userdetail->chief_compliant_other_details = $tempar ;

            // pr($user_detail->chief_compliant_details); die;

    }

    //screening question answer
if(!empty($user_detail->chief_compliant_userdetail->screening_questions_detail)){

   $user_detail->chief_compliant_userdetail->screening_questions_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->screening_questions_detail), SEC_KEY)));

  // pr($user_detail_old->chief_compliant_userdetail->chief_compliant_other_details);die;

   if(!empty($user_detail->chief_compliant_userdetail->screening_questions_detail)){

      $i = 0;
      foreach($user_detail->chief_compliant_userdetail->screening_questions_detail as $key => $val){


          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
          $tempar[$i]['question_id'] = $temp->id ;
          $tempar[$i]['question'] = $temp->question ;
          $tempar[$i]['answer'] = $val;
          $i++;

      }
      //pr($tempar);die;
     $user_detail->chief_compliant_userdetail->screening_questions_detail = $tempar;
     // pr( $user_detail_old->chief_compliant_userdetail->chief_compliant_other_details);die;
   }
 }


  if(!empty($user_detail->chief_compliant_userdetail->post_checkup_question_detail))
  {

     $user_detail->chief_compliant_userdetail->post_checkup_question_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->post_checkup_question_detail), SEC_KEY)));

     if(!empty($user_detail->chief_compliant_userdetail->post_checkup_question_detail)){

          $i = 0;
        foreach($user_detail->chief_compliant_userdetail->post_checkup_question_detail as $key => $val){


            $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
            $tempar[$i]['question_id'] = $temp->id ;
            $tempar[$i]['question'] = $temp->question ;
            $tempar[$i]['answer'] = $val;
            $i++;

        }
        $user_detail->chief_compliant_userdetail->post_checkup_question_detail = $tempar;
     }
  }


 if(!empty($user_detail->chief_compliant_userdetail->pain_update_question))
      {

        $user_detail->chief_compliant_userdetail->pain_update_question = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pain_update_question), SEC_KEY))) ;

        $tempar = array();
        $i = 0;
        foreach ($user_detail->chief_compliant_userdetail->pain_update_question as $key => $value)
        {
           // $i = 0 ;
           // foreach ($value as $k => $v) {


              $temp = $this->PainFollowupQuestionnaires->find('all')->where(['id'=> $key ])->first();
              $tempar[$i]['question_id'] = $temp->id ;
              $tempar[$i]['question'] = $temp->question ;
              $tempar[$i]['answer'] = $value ;
              $i++;
              //$i++;
          //  }


        }

       // $user_detail->more_options = $more_options ;
        $user_detail->chief_compliant_userdetail->pain_update_question = $tempar;

      }

      if(isset($user_detail->chief_compliant_userdetail->pre_op_procedure_detail) && !empty($user_detail->chief_compliant_userdetail->pre_op_procedure_detail))
      {
        $user_detail->chief_compliant_userdetail->pre_op_procedure_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pre_op_procedure_detail), SEC_KEY))) ;

        $tempar = array();
        $i = 0;
        foreach ($user_detail->chief_compliant_userdetail->pre_op_procedure_detail as $key => $value)
        {
          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
          $tempar[$i]['question_id'] = $temp->id ;
          $tempar[$i]['question'] = $temp->question ;
          $tempar[$i]['answer'] = $value ;
          $i++;
        }
        $user_detail->chief_compliant_userdetail->pre_op_procedure_detail = $tempar;

      }


      if(isset($user_detail->chief_compliant_userdetail->pre_op_medications_question_detail) && !empty($user_detail->chief_compliant_userdetail->pre_op_medications_question_detail))
            {
              $user_detail->chief_compliant_userdetail->pre_op_medications_question_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pre_op_medications_question_detail), SEC_KEY))) ;

              $tempar = array();
              $i = 0;
              foreach ($user_detail->chief_compliant_userdetail->pre_op_medications_question_detail as $key => $value)
              {
                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value ;
                $i++;
              }
              $user_detail->chief_compliant_userdetail->pre_op_medications_question_detail = $tempar;
            }



      if(!empty($user_detail->chief_compliant_userdetail->general_update_question))
      {

        $user_detail->chief_compliant_userdetail->general_update_question = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->general_update_question), SEC_KEY))) ;

        $tempar = array();
        $i = 0;
        foreach ($user_detail->chief_compliant_userdetail->general_update_question as $key => $value)
        {
           // $i = 0 ;
           // foreach ($value as $k => $v) {


              $temp = $this->PainFollowupQuestionnaires->find('all')->where(['id'=> $key ])->first();
              $tempar[$i]['question_id'] = $temp->id ;
              $tempar[$i]['question'] = $temp->question ;
              $tempar[$i]['answer'] = $value ;
              $i++;
              //$i++;
          //  }


        }

       // $user_detail->more_options = $more_options ;
        $user_detail->chief_compliant_userdetail->general_update_question = $tempar;

      }

      if(!empty($user_detail->chief_compliant_userdetail->general_update_provider_info)){

        $user_detail->chief_compliant_userdetail->general_update_provider_info =  unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->general_update_provider_info), SEC_KEY))) ;
      }

      if(!empty($user_detail->chief_compliant_userdetail->general_update_procedure_detail)){

        $user_detail->chief_compliant_userdetail->general_update_procedure_detail =  unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->general_update_procedure_detail), SEC_KEY))) ;
      }

      if(isset($user_detail->chief_compliant_userdetail->disease_questions_detail) && !empty($user_detail->chief_compliant_userdetail->disease_questions_detail))
       {

            $user_detail->chief_compliant_userdetail->disease_questions_detail =  unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->disease_questions_detail), SEC_KEY))) ;

            if(!empty($user_detail->chief_compliant_userdetail->disease_questions_detail)){

              $temparr = array();

              foreach ($user_detail->chief_compliant_userdetail->disease_questions_detail as $key => $value) {

                $disease = $this->Diseases->find('all')->where(['id'=> $key])->first();
                if(!empty($disease)){


                 $user_detail->chief_compliant_userdetail->disease_questions_detail[$key]['disease'] =  $disease;
                }

                //set question details
                if(!empty($value['disease_detail_question'])){

                  $temparr = array();
                  $i = 0;
                  foreach ($value['disease_detail_question'] as $q_key => $que) {

                    $question = $this->CommonQuestions->find('all')->where(['id' => $q_key])->first();

                    if(!empty($question)){

                      $temparr[$i]['question_id'] = $question->id ;
                      $temparr[$i]['question'] = $question->question ;
                      $temparr[$i]['answer'] = $que ;
                      $i++;
                    }

                  }

                  $user_detail->chief_compliant_userdetail->disease_questions_detail[$key]['disease_detail_question'] = $temparr;
                }

                //set detail of alarm sysmptoms
                if(!empty($value['alarm_sysmptom'])){

                  $temparr = array();
                  $i = 0;

                  foreach ($value['alarm_sysmptom'] as $asysmpt_key => $asysmpt_value) {

                    $alarm_sysmptom = $this->Symptoms->find('all')->where(['id'=> $asysmpt_key])->first();

                    if(!empty($alarm_sysmptom)){

                      $temparr[$i]['id'] = $alarm_sysmptom->id;
                      $temparr[$i]['name'] = $alarm_sysmptom->symptom;
                      $temparr[$i]['medical_name'] = $alarm_sysmptom->medical_name;
                      $temparr[$i]['answer'] = $asysmpt_value['answer'];
                      $i++;

                    }
                  }

                    $user_detail->chief_compliant_userdetail->disease_questions_detail[$key]['alarm_sysmptom'] = $temparr;
                }

                //set detail of base line sysmptoms
                if(!empty($value['baseline_sysmptom'])){

                  $temparr = array();
                  $i = 0;

                  foreach ($value['baseline_sysmptom'] as $bsysmpt_key => $bsysmpt_value) {

                    $baseline_sysmptom = $this->Symptoms->find('all')->where(['id'=> $bsysmpt_key])->first();

                    if(!empty($baseline_sysmptom)){

                      $temparr[$i]['id'] = $baseline_sysmptom->id;
                      $temparr[$i]['name'] = $baseline_sysmptom->symptom;
                      $temparr[$i]['medical_name'] = $baseline_sysmptom->medical_name;
                      $temparr[$i]['answer'] = $bsysmpt_value['answer'];
                      $temparr[$i]['scale'] = $bsysmpt_value['scale'];
                      $i++;

                    }
                  }

                    $user_detail->chief_compliant_userdetail->disease_questions_detail[$key]['baseline_sysmptom'] = $temparr;
                }
              }
            }
          }
          if(!empty($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details)){

              $user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details), SEC_KEY)));

              if(isset($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp'])){
                    $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp'] as $key => $val){


                        $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                        $tempar[$key]['question_id'] = $temp->id ;
                        $tempar[$key]['question'] = $temp->question ;
                        $tempar[$key]['answer'] = $val;
                       // $i++;

                    }
                    //pr($tempar);die;
                    $user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp'] = $tempar;
                    //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
                 }

                 if(isset($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm'])){
                    $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm'] as $key => $val){


                        $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                        $tempar[$key]['question_id'] = $temp->id ;
                        $tempar[$key]['question'] = $temp->question ;
                        $tempar[$key]['answer'] = $val;
                       // $i++;

                    }
                    //pr($tempar);die;
                    $user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm'] = $tempar;
                    //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
                 }
          }

          if(!empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details))
            {

                 $user_detail->chief_compliant_userdetail->medication_refill_extra_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->medication_refill_extra_details), SEC_KEY)));

                // pr($user_detail->medication_refill_extra_details);

                //pr($user_detail_old->chief_compliant_userdetail->general_update_question);die;



                 if(isset($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast'])){
                    $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast'] as $key => $val){


                        $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                        $tempar[$key]['question_id'] = $temp->id ;
                        $tempar[$key]['question'] = $temp->question ;
                        $tempar[$key]['answer'] = $val;
                       // $i++;

                    }
                    //pr($tempar);die;
                    $user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast'] = $tempar;
                    //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
                 }

                 if(isset($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt'])){
                    $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt'] as $key => $val){


                        $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                        $tempar[$key]['question_id'] = $temp->id ;
                        $tempar[$key]['question'] = $temp->question ;
                        $tempar[$key]['answer'] = $val;
                       // $i++;

                    }
                    //pr($tempar);die;
                    $user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt'] = $tempar;
                    //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;
                 }
               }


              if(!empty($user_detail->chief_compliant_userdetail->symptom_from_tab1)){

                $temp_symptom_from_tab1 = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->symptom_from_tab1), SEC_KEY)));

                if(!empty($temp_symptom_from_tab1)){

                    $temp_cc = implode(", ", $temp_symptom_from_tab1);
                    $user_detail->chief_compliant_userdetail->all_cc_detail_name = $temp_cc;
                }
              }

              if(!empty($user_detail->chief_compliant_userdetail->covid_detail)){

                    $user_detail->chief_compliant_userdetail->covid_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->covid_detail), SEC_KEY))  ;

                    //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->covid_detail as $key => $value){

                        if(!empty($value)){

                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;


                        }

                      }

                      $user_detail->chief_compliant_userdetail->covid_detail = $tempar;
                    //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
              }

              if(!empty($user_detail->chief_compliant_userdetail->phq_9_detail))
              {

                $user_detail->chief_compliant_userdetail->phq_9_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->phq_9_detail), SEC_KEY)));
              }

              if(!empty($user_detail->chief_compliant_userdetail->follow_up_sx_detail)){

                    $user_detail->chief_compliant_userdetail->follow_up_sx_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->follow_up_sx_detail), SEC_KEY)));

                    $tempar = array();
                    foreach ($user_detail->chief_compliant_userdetail->follow_up_sx_detail as $key => $value)
                    {
                        //$i = 0 ;
                        foreach ($value as $k => $v)
                        {
                            $temp = $this->CommonQuestions->find('all')->where(['id'=> $k ])->first();
                            $tempcc = $this->ChiefCompliants->find('all')->where(['id'=> $key ])->first();
                            $tempar[$key]['cc_data'] = $tempcc ;
                            $tempar[$key][$k]['question_id'] = $temp->id ;
                            $tempar[$key][$k]['question'] = $temp->question ;
                            $tempar[$key][$k]['answer'] = $v ;
                            //$i++;
                        }

                    }
                    $user_detail->chief_compliant_userdetail->follow_up_sx_detail = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->focused_history_detail)){

                    $user_detail->chief_compliant_userdetail->focused_history_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->focused_history_detail), SEC_KEY))  ;

                    //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->focused_history_detail as $key => $value){

                        if(!empty($value)){

                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;


                        }

                      }

                      $user_detail->chief_compliant_userdetail->focused_history_detail = $tempar;
                    //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_condition)){

                    $user_detail->chief_compliant_userdetail->chronic_condition = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_condition), SEC_KEY)));
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_dmii_detail))
                {
                    $user_detail->chief_compliant_userdetail->chronic_dmii_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_dmii_detail), SEC_KEY))  ;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_dmii_detail as $key => $value)
                    {
                        if(!empty($value))
                        {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_dmii_detail = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_cad_detail))
                {
                    $user_detail->chief_compliant_userdetail->chronic_cad_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_cad_detail), SEC_KEY))  ;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_cad_detail as $key => $value)
                    {
                        if(!empty($value))
                        {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_cad_detail = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_chf_detail))
                {
                    $user_detail->chief_compliant_userdetail->chronic_chf_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_chf_detail), SEC_KEY))  ;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_chf_detail as $key => $value)
                    {
                        if(!empty($value))
                        {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_chf_detail = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_htn_detail))
                {
                    $user_detail->chief_compliant_userdetail->chronic_htn_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_htn_detail), SEC_KEY))  ;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_htn_detail as $key => $value)
                    {
                        if(!empty($value))
                        {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_htn_detail = $tempar;
                }


                if(!empty($user_detail->chief_compliant_userdetail->chronic_copd_detail))
                {
                    $user_detail->chief_compliant_userdetail->chronic_copd_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_copd_detail), SEC_KEY))  ;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_copd_detail as $key => $value)
                    {
                        if(!empty($value))
                        {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_copd_detail = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_asthma_detail))
                {
                    $user_detail->chief_compliant_userdetail->chronic_asthma_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_asthma_detail), SEC_KEY))  ;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_asthma_detail as $key => $value)
                    {
                        if(!empty($value))
                        {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_asthma_detail = $tempar;
                }


                if(!empty($user_detail->chief_compliant_userdetail->chronic_general_detail))
                {
                    $user_detail->chief_compliant_userdetail->chronic_general_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_general_detail), SEC_KEY))  ;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_general_detail as $key => $value)
                    {
                        if(!empty($value))
                        {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_general_detail = $tempar;
                }



                if(!empty($user_detail->chief_compliant_userdetail->chronic_dmii_medication)){
                  $user_detail->chief_compliant_userdetail->chronic_dmii_medication = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_dmii_medication), SEC_KEY)) ;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_cad_medication)){
                  $user_detail->chief_compliant_userdetail->chronic_cad_medication = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_cad_medication), SEC_KEY)) ;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_chf_medication)){
                  $user_detail->chief_compliant_userdetail->chronic_chf_medication = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_chf_medication), SEC_KEY)) ;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_htn_medication)){
                  $user_detail->chief_compliant_userdetail->chronic_htn_medication = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_htn_medication), SEC_KEY)) ;
                }

                if(!empty($user_detail->chief_compliant_userdetail->glucose_reading_detail)){
                  $user_detail->chief_compliant_userdetail->glucose_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->glucose_reading_detail), SEC_KEY)) ;
                }

                if(!empty($user_detail->chief_compliant_userdetail->bp_reading_detail)){
                  $user_detail->chief_compliant_userdetail->bp_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->bp_reading_detail), SEC_KEY)) ;
                }

                if(!empty($user_detail->chief_compliant_userdetail->peak_flow_reading_detail)){
                  $user_detail->chief_compliant_userdetail->peak_flow_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->peak_flow_reading_detail), SEC_KEY)) ;
                }

                if(!empty($user_detail->chief_compliant_userdetail->cancer_cc_detail)){
                    $user_detail->chief_compliant_userdetail->cancer_cc_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_cc_detail), SEC_KEY));
                    $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->cancer_cc_detail as $key => $value){
                        if(!empty($value)){

                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          if(!empty($temp)){
                              $tempar[$temp->id]['question_id'] = $temp->id ;
                              $tempar[$temp->id]['question'] = $temp->question ;
                              $tempar[$temp->id]['answer'] = $value;
                          }
                        }
                      }
                      $user_detail->chief_compliant_userdetail->cancer_cc_detail = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->cancer_history_detail))
                {
                  $user_detail->chief_compliant_userdetail->cancer_history_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_history_detail), SEC_KEY))  ;

                  $tempar = array();
                  foreach($user_detail->chief_compliant_userdetail->cancer_history_detail as $key => $value){

                      if(!empty($value) && is_array($value)){

                        foreach ($value as $k => $v) {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $k])->first();
                          if(!empty($temp)){
                              $tempar[$key][$temp->id]['question_id'] = $temp->id ;
                              $tempar[$key][$temp->id]['question'] = $temp->question ;
                              $tempar[$key][$temp->id]['answer'] = $v;
                          }

                        }
                      }
                    }
                    $user_detail->chief_compliant_userdetail->cancer_history_detail = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail))
                {
                  $user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail), SEC_KEY))  ;
                }

                if(!empty($user_detail->chief_compliant_userdetail->cancer_family_members))
                {
                  $user_detail->chief_compliant_userdetail->cancer_family_members = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_family_members), SEC_KEY))  ;
                }


                if(!empty($user_detail->chief_compliant_userdetail->cancer_medical_detail))
                {
                  $i = 0;
                  $user_detail->chief_compliant_userdetail->cancer_medical_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_medical_detail), SEC_KEY))  ;
                  $tempar = array();
                   $i = 0;
                  foreach($user_detail->chief_compliant_userdetail->cancer_medical_detail as $key => $value){

                      if(!empty($value)){

                        $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                        if(!empty($temp)){
                            $tempar[$temp->id]['question_id'] = $temp->id ;
                            $tempar[$temp->id]['question'] = $temp->question ;
                            $tempar[$temp->id]['answer'] = $value;
                        }
                        $i++;
                      }
                    }
                    $user_detail->chief_compliant_userdetail->cancer_medical_detail = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments))
                {
                 $user_detail->chief_compliant_userdetail->cancer_assessments = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->cancer_assessments), SEC_KEY))  ;
                  //pr($user_detail->chief_compliant_userdetail->cancer_assessments);die;
                  $assessment_history = array();
                  $life_assessment = array();
                  $chemo_assessment = array();

                  if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments['assessment_history']))
                  {
                    $i = 0;
                  foreach($user_detail->chief_compliant_userdetail->cancer_assessments['assessment_history'] as $key => $value){

                      if(!empty($value)){

                        $temp = $this->CommonConditions->find('all')->where(['id'=> $key])->first();
                        $assessment_history[$i]['symtoms_id'] = $temp->id ;
                        $assessment_history[$i]['name'] = !empty($temp->note_name) ? $temp->note_name : $temp->name ;
                        $assessment_history[$i]['answer'] = $value;
                        $i++;
                      }
                    }
                  }

                  if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments['life_assessment']))
                  {
                    $j = 0;
                  foreach($user_detail->chief_compliant_userdetail->cancer_assessments['life_assessment'] as $key => $value){

                      if(!empty($value)){

                        $temp = $this->CommonConditions->find('all')->where(['id'=> $key])->first();
                        $life_assessment[$j]['symtoms_id'] = $temp->id ;
                        $life_assessment[$j]['name'] = !empty($temp->note_name) ? $temp->note_name : $temp->name ;
                        $life_assessment[$j]['answer'] = $value;
                        $j++;
                      }
                    }
                   }

                   if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments['chemo_assessment']))
                  {
                    $j = 0;
                  foreach($user_detail->chief_compliant_userdetail->cancer_assessments['chemo_assessment'] as $key => $value){

                      if(!empty($value)){

                        $temp = $this->CommonConditions->find('all')->where(['id'=> $key])->first();
                        $chemo_assessment[$j]['symtoms_id'] = $temp->id ;
                        $chemo_assessment[$j]['name'] = !empty($temp->note_name) ? $temp->note_name : $temp->name ;
                        $chemo_assessment[$j]['answer'] = $value;
                        $j++;
                      }
                    }
                   }

                   $cancer_assessments = array('assessment_history' => $assessment_history,'life_assessment' => $life_assessment,'chemo_assessment' => $chemo_assessment);
                    $user_detail->chief_compliant_userdetail->cancer_assessments = $cancer_assessments;

                }

                if(!empty($user_detail->chief_compliant_userdetail->pre_op_post_op))
                {
                    $user_detail->chief_compliant_userdetail->pre_op_post_op = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->pre_op_post_op), SEC_KEY))  ;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->pre_op_post_op as $key => $value)
                    {
                        if(!empty($value))
                        {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->pre_op_post_op = $tempar;
                }
            }


    $length_arr =  '{"1x a day": "qd", "2x a day": "BID", "3x a day": "TID", "every 4 hours": "q4h", "every 6 hours": "q6h", "every 8 hours": "q8h", "every 12 hours": "q12h", "1x a week": "qwk", "2x a week": "2/wk", "3x a week": "3/wk", "4x a week": "q4wk", "5x a week": "q5wk", "6x a week": "q6wk", "at bedtime": "qhs", "in the morning": "qam", "as needed": "PRN","evening":"qpm"}' ;

        $length_arr = json_decode($length_arr, true);
        $length_arr = array_flip($length_arr);



        // $this->set(compact('user_detail', 'length_arr'));

      // getting data of new appointments end ****************************


      // Pt: ObgynDemo, Female 25yo, F
      $now = Time::now();
    $age = $now->year - date('Y',strtotime($login_user->dob));
    // Security::decrypt( base64_decode($login_user->last_name) , SEC_KEY)
      $pt = h(ucfirst($login_user->first_name)).', '.h($login_user->last_name).'   '.$age.'yo, '.($login_user->gender == 1 ? 'M' : 'F') ;

      // DOB: 8/18/1992
     // $dob = $login_user->dob->i18nFormat('yyyy-MM-dd');
      $dob = date('Y-m-d',strtotime($login_user->dob));

    // MRN#:  P: 123123123  E: john@valhalla.healthcare  05/14/2018  07:33  BMI: 24.5
    $phone = $login_user->phone;
    $email = $login_user->email;
    $curdate = $now->i18nFormat('MM/dd/yyyy') ;
    $curtime = $now->i18nFormat('HH:mm');
   // pr($phone); pr($email); pr($curdate); pr($curtime);
    // bmi calculation url-http://extoxnet.orst.edu/faqs/dietcancer/web2/twohowto.html
    // Multiply the weight in pounds by 0.45 -> Multiply the height in inches by 0.025  -> Square the answer from step 2 -> Divide the answer from step 1 by the answer from step 3
    $bmi = "";
    /*
    $hght =  $login_user->height;
    $wght =  $login_user->weight;
    if(!empty($hght) && !empty($wght)){
      $bmi = ($wght * 0.45) / (pow(($hght*0.025), 2)) ;
      $bmi = round($bmi, 1);
    }
    */

    $bmi = $login_user->bmi;

// pr($user_detail->chief_compliant_userdetail); die;
    // #CC obgyndemo
    // pr($user_detail->chief_compliant_userdetail->chief_compliant_id) ;die;
if(isset($user_detail->chief_compliant_userdetail->all_cc_detail_name)){

  $cc = $user_detail->chief_compliant_userdetail->all_cc_detail_name;
}
elseif(!empty($user_detail->chief_compliant_userdetail->random_chief_compliant)){
    $user_detail->chief_compliant_userdetail->random_chief_compliant = Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->random_chief_compliant), SEC_KEY);
      $cc .= (!empty($cc) ? ', ' : '').$user_detail->chief_compliant_userdetail->random_chief_compliant ;

    }


  $cc = rtrim($cc,' ,');
//Add the word chronic before the cheif complaint that has pain word
if(!empty($cc)){
    $duration_arr = array('3 months','4 months','5 months','6 months','7 months','8 months','9 months','10 months','11 months','1 year','2 years','3 years','4 years','5 years','6 years','7 years','8 years','9 years','10 years','10+ years');
    $temp_all_cc_name = explode(", ", $cc);
    if(count($temp_all_cc_name) && !empty($user_detail->chief_compliant_userdetail->compliant_length) && in_array($user_detail->chief_compliant_userdetail->compliant_length, $duration_arr)){

        foreach ($temp_all_cc_name as $cckey => $ccvalue) {

            if(strrpos($ccvalue, 'pain') !== false ){

                $temp_all_cc_name[$cckey] = 'chronic '.$ccvalue;
            }

        }
    }

    $cc = implode(", ", $temp_all_cc_name);
    //pr($temp_all_cc_name);die;
}

$cc_header = '';
$question_detial_res = $this->CcDetail->prepare_question_layman($user_detail->chief_compliant_userdetail,$login_user['gender']);

if(!empty($question_detial_res) && isset($question_detial_res['all_cc_name'])){

    $cc = $question_detial_res['all_cc_name'].(!empty($cc) ? ', '.$cc : '');
    $cc = rtrim($cc,' ,');
}

if(!empty($question_detial_res) && isset($question_detial_res['cc_header'])){

    $cc_header = $question_detial_res['cc_header'];
}


    // #HPI Female is a 25 y.o. G2P2 female student who is heterosexual and single, ...
$s_ori = array(0 => 'Heterosexual', 1 => 'Homosexual', 2 => 'Bisexual', 9 => 'Prefer not to say');
$mar_s = array(0 => 'Unmarried', 1 => 'Married', 2 => 'Divorced');


      $temp = '';
      if(is_array($user_detail->chief_compliant_userdetail->compliant_symptom_ids)){
       foreach($user_detail->chief_compliant_userdetail->compliant_symptom_ids as $k => $v)
        {
          $temp .= $v->name .', ' ;
        }
    }

if(!empty($user_detail->chief_compliant_userdetail->symptom_from_tab1)){
  // $tsym  = unserialize(base64_decode($user_detail->chief_compliant_userdetail->symptom_from_tab1));
$tsym  = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->symptom_from_tab1), SEC_KEY)));
// pr($tsym); die;
  $tsym = implode(', ', $tsym) ;
  $temp .= $tsym ;
}

    $temp = rtrim($temp, ', ');
      // echo $temp ;

      $temp_associated_symp = $temp ;

      // associated symptom from tab 3
 // $res_ar = array(0 => 'NO', 1 => 'YES' , 2 => "I DON'T KNOW");
      $positive_symptom = '' ;
      $negative_symptom = '' ;
// pr($user_detail->chief_compliant_userdetail->compliant_symptom_ids); die ;
 if(!empty($user_detail->chief_compliant_userdetail->compliant_symptom_ids)){

    foreach ($user_detail->chief_compliant_userdetail->compliant_symptom_ids as $key => $value) {

      $positive_symptom .= $value->name;

    }
  }
$positive_symptom = !empty($positive_symptom)? $positive_symptom.', ' : '' ;
// pr($user_detail->chief_compliant_userdetail->chief_compliant_symptoms); die;
  if(is_array($user_detail->chief_compliant_userdetail->chief_compliant_symptoms)) {
     foreach ($user_detail->chief_compliant_userdetail->chief_compliant_symptoms as $key => $value) {
        foreach($value as $k =>$v) {
          if($key == 1)  // get the positive symptom
          $positive_symptom = $positive_symptom.$v->name ;
          else if($key == 0) // get the negative symptom
          $negative_symptom = $negative_symptom.$v->name.', ' ;

      }
     }
  }
$positive_symptom = !empty($positive_symptom)? $positive_symptom.', ' : '' ;
// get the python file related associated symptom start
// pr($user_detail->chief_compliant_userdetail->python_file_option_3rd_tab); die;
    if(!empty($user_detail->chief_compliant_userdetail->python_file_option_3rd_tab)){


    // $python_file_option_3rd_tab = unserialize(base64_decode($user_detail->chief_compliant_userdetail->python_file_option_3rd_tab));

  $python_file_option_3rd_tab = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->python_file_option_3rd_tab), SEC_KEY)));

    // pr($python_file_option_3rd_tab); die;

// pr($python_file_option_3rd_tab);
    // $positive_symptom = "";
    // $negative_symptom = "";

    // pr($user_detail->compliant_symptom_ids); die;



    if( isset($python_file_option_3rd_tab[1]) && is_array($python_file_option_3rd_tab[1])){
        foreach ($python_file_option_3rd_tab[1] as $key => $value) {
            $positive_symptom .= $value['layman'].', ';
        }
    }

    if( isset($python_file_option_3rd_tab[0]) && is_array($python_file_option_3rd_tab[0])){
        foreach ($python_file_option_3rd_tab[0] as $key => $value) {
            $negative_symptom .= $value['layman'].', ';
        }
    }



    }

          $positive_symptom = rtrim($positive_symptom, ', ');
          $negative_symptom = rtrim($negative_symptom, ', ');




$other_question_detial_res = $this->General->prepare_other_question_layman($user_detail->chief_compliant_userdetail);


// pr($user_detail);
// pr($question_detial_res) ;die;


$other_question_detial_res = strip_tags($other_question_detial_res['layman_summar']);

$other_question_detial_res = str_replace("your","Patient's",$other_question_detial_res);
$other_question_detial_res = str_replace("you","Patient",$other_question_detial_res);
$other_question_detial_res = str_replace("Your","Patient's",$other_question_detial_res);
$other_question_detial_res = str_replace("You","Patient",$other_question_detial_res);



// pr($user_detail);
// pr($question_detial_res) ;die;
$question_detial_res = strip_tags($question_detial_res['layman_summar']);

$question_detial_res = str_replace("your","Patient's",$question_detial_res);
$question_detial_res = str_replace("you","Patient",$question_detial_res);

$general_update_question_layman = "";
$pain_update_question_layman = "";
$pre_visit_other_quarion = "";
$pre_visit_quarion = "";
$screening_question_detail_layman = "";
$pre_op_procedure_detail_question_layman  = "";
$pre_op_medication_detail_question_layman = "";
$cronic_illness_layman = '';

$screening_question_detail_layman = $this->prepare_screening_question_layman($user_detail->chief_compliant_userdetail);
  if(!empty($screening_question_detail_layman) && isset($screening_question_detail_layman['layman_summar'])){

    //$screening_question_detail_layman = strip_tags($screening_question_detail_layman);
    $screening_question_detail_layman = $screening_question_detail_layman['layman_summar'];
    $screening_question_detail_layman = str_replace("your","Patient's",$screening_question_detail_layman);
    $screening_question_detail_layman = str_replace("you","Patient",$screening_question_detail_layman);
    $screening_question_detail_layman = str_replace("Your","Patient's",$screening_question_detail_layman);
    $screening_question_detail_layman = str_replace("You","Patient",$screening_question_detail_layman);
  }



  $pre_op_procedure_detail_question_layman = $this->prepare_pre_op_procedure_detail_question_layman($user_detail->chief_compliant_userdetail);
//pr($screening_question_detail_layman);
  if(!empty($pre_op_procedure_detail_question_layman) && isset($pre_op_procedure_detail_question_layman['layman_summar'])){

    $pre_op_procedure_detail_question_layman = $pre_op_procedure_detail_question_layman['layman_summar'];

    $pre_op_procedure_detail_question_layman = str_replace("your","Patient's",$pre_op_procedure_detail_question_layman);
    $pre_op_procedure_detail_question_layman = str_replace("you","Patient",$pre_op_procedure_detail_question_layman);
    $pre_op_procedure_detail_question_layman = str_replace("Your","Patient's",$pre_op_procedure_detail_question_layman);
    $pre_op_procedure_detail_question_layman = str_replace("You","Patient",$pre_op_procedure_detail_question_layman);
  }



   $pre_op_medication_detail_question_layman = $this->prepare_pre_op_medication_detail_question_layman($user_detail->chief_compliant_userdetail);
//pr($screening_question_detail_layman);
  if(!empty($pre_op_medication_detail_question_layman) && isset($pre_op_medication_detail_question_layman['layman_summar'])){

    $pre_op_medication_detail_question_layman = $pre_op_medication_detail_question_layman['layman_summar'];

    $pre_op_medication_detail_question_layman = str_replace("your","Patient's",$pre_op_medication_detail_question_layman);
    $pre_op_medication_detail_question_layman = str_replace("you","Patient",$pre_op_medication_detail_question_layman);
    $pre_op_medication_detail_question_layman = str_replace("Your","Patient's",$pre_op_medication_detail_question_layman);
    $pre_op_medication_detail_question_layman = str_replace("You","Patient",$pre_op_medication_detail_question_layman);
  }

  $cronic_illness_layman = $this->prepare_chronic_illnesses_layman($user_detail->chief_compliant_userdetail);
  if(!empty($cronic_illness_layman) && isset($cronic_illness_layman['layman_summar'])){

    $cronic_illness_layman = $cronic_illness_layman['layman_summar'];
    $cronic_illness_layman = strip_tags($cronic_illness_layman);
    $cronic_illness_layman = str_replace("your","Patient's",$cronic_illness_layman);
    $cronic_illness_layman = str_replace("you","Patient",$cronic_illness_layman);
    $cronic_illness_layman = str_replace("Your","Patient's",$cronic_illness_layman);
    $cronic_illness_layman = str_replace("You","Patient",$cronic_illness_layman);
  }


//get layman for pain update question when pain follow up (step id = 8)
if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 8){



    $prev_visit_user_detail =  $this->ChiefCompliantUserdetails->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->followup_parent_id])->first();
    //$prev_visit_user_detail->chief_compliant_id =
    $prev_visit_user_detail = $this->prepare_user_detial_data_for_render($prev_visit_user_detail);
    $prev_cc_name = null;

    if(!empty($prev_visit_user_detail) && !empty($prev_visit_user_detail->chief_compliant_details)){

        foreach ($prev_visit_user_detail->chief_compliant_details as $key => $value) {

            if(isset($value['cc_data']['name']) && !empty($value['cc_data']['name'])){

                $prev_cc_name[] = $value['cc_data']['name'];
            }
        }
    }

    if(!empty($prev_cc_name)){

        $prev_cc_name = implode(",", $prev_cc_name);
    }
    $prev_visit_user_detail->chief_compliant_id = $user_detail->chief_compliant_userdetail->chief_compliant_id;
    //pr($prev_visit_user_detail);

    $prev_visit_question_detial_res = $this->CcDetail->prepare_question_layman($prev_visit_user_detail,$login_user['gender']);

    if(!empty($prev_visit_question_detial_res) && isset($prev_visit_question_detial_res['layman_summar']) && isset($prev_visit_question_detial_res['all_cc_name']) &&  !empty($prev_visit_question_detial_res['layman_summar']) && !empty($prev_visit_question_detial_res['all_cc_name'])){

        $pre_visit_cc = $prev_visit_question_detial_res['all_cc_name'];
        $pre_visit_cc = rtrim($pre_visit_cc, ', ');

        $prev_visit_question_detial_res = strip_tags($prev_visit_question_detial_res['layman_summar']);
        $prev_visit_question_detial_res = str_replace("your","Patient's",$prev_visit_question_detial_res);
        $prev_visit_question_detial_res = str_replace("you","Patient",$prev_visit_question_detial_res);

        $pre_visit_quarion = " In your previous visit you provided these details for ".$pre_visit_cc .": ".$prev_visit_question_detial_res;
    }
   // pr($pre_visit_quarion);die;
    $prev_visit_other_question_detial_res = $this->General->prepare_other_question_layman($prev_visit_user_detail);
    //pr($prev_visit_other_question_detial_res);die;


    if(!empty($prev_visit_other_question_detial_res) && isset($prev_visit_other_question_detial_res['layman_summar']) &&  !empty($prev_visit_other_question_detial_res['layman_summar'])){

        $prev_visit_other_question_detial_res = strip_tags($prev_visit_other_question_detial_res['layman_summar']);
        $prev_visit_other_question_detial_res = str_replace("your","Patient's",$prev_visit_other_question_detial_res);
        $prev_visit_other_question_detial_res = str_replace("you","Patient",$prev_visit_other_question_detial_res);
        $prev_visit_other_question_detial_res = str_replace("Your","Patient's",$prev_visit_other_question_detial_res);
        $prev_visit_other_question_detial_res = str_replace("You","Patient",$prev_visit_other_question_detial_res);

        $pre_visit_other_quarion = " In your previous visit ".$prev_visit_other_question_detial_res." ";
        //pr($pre_visit_other_quarion);die;
    }

    $pain_update_question_layman = $this->prepare_pain_update_question_layman($user_detail->chief_compliant_userdetail,$prev_cc_name);
   // pr($pain_update_question_layman);die;
    $pain_update_question_layman = $pain_update_question_layman['layman_summar'];


    $pain_update_question_layman = strip_tags($pain_update_question_layman);

    $pain_update_question_layman = str_replace("your","Patient's",$pain_update_question_layman);
    $pain_update_question_layman = str_replace("you","Patient",$pain_update_question_layman);
    $pain_update_question_layman = str_replace("Your","Patient's",$pain_update_question_layman);
    $pain_update_question_layman = str_replace("You","Patient",$pain_update_question_layman);

    $general_update_question_layman = $this->prepare_general_update_question_layman($user_detail->chief_compliant_userdetail);
    $general_update_question_layman = $general_update_question_layman['layman_summar'];

    $general_update_question_layman = strip_tags($general_update_question_layman);

    $general_update_question_layman = str_replace("your","Patient's",$general_update_question_layman);
    $general_update_question_layman = str_replace("you","Patient",$general_update_question_layman);
    $general_update_question_layman = str_replace("Your","Patient's",$general_update_question_layman);
    $general_update_question_layman = str_replace("You","Patient",$general_update_question_layman);
}


if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 12){

   // pr($user_detail->chief_compliant_userdetail);
    if(isset($user_detail->chief_compliant_userdetail->follow_up_step_id) && $user_detail->chief_compliant_userdetail->follow_up_step_id == 9){

        $prev_visit_user_detail =  $this->ChiefCompliantUserdetails->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->followup_parent_id])->first();
        $prev_visit_user_detail = $this->prepare_user_detial_data_for_render($prev_visit_user_detail);

        $prev_visit_question_detial_res = $this->prepare_screening_question_layman($prev_visit_user_detail,1);

        $prev_visit_question_detial_res = $prev_visit_question_detial_res['layman_summar'];
        $prev_visit_question_detial_res = str_replace("your","Patient's",$prev_visit_question_detial_res);
        $prev_visit_question_detial_res = str_replace("you","Patient",$prev_visit_question_detial_res);
        $pre_visit_quarion = $prev_visit_question_detial_res;
    }
}

    //generate follow up sx note output
    $follow_up_sx_detial_res = $this->General->follow_up_sx_detail_layman($user_detail->chief_compliant_userdetail);

    $hpi = h(ucfirst($login_user->first_name)).' is a '.$age.' y.o.'.($login_user->gender == 1 ? ' Male ' : ' Female ').($login_user->is_retired == 1 ? 'Retired' : '').( !empty($login_user->occupation) ? ' '.h($login_user->occupation): '' );


      $coming_in_for = strtolower(trim($user_detail->chief_compliant_userdetail->current_step_id->step_name)) ;

      // below code commented for this reason - According to clinet new reqirement change is -
// If the person is coming in for symptom complaints change  coming in for symptom complaints, and has a chief complaint of back pain. The back pain started 3 days ago. -> presenting with back pain for 3 days.
if(stripos($coming_in_for, 'symptom') !== false){  // if the person is coming in for symptom complaint

    $cc = strtolower($cc);
    if($user_detail->chief_compliant_userdetail->current_step_id->id == 1 && !empty($cc_header)){

        $hpi .= $cc_header;
    }
    else
    {
        $hpi .= ' presenting with '.$cc.' for '.h($user_detail->chief_compliant_userdetail->compliant_length).'.' ;
    }
    //$hpi .= ' presenting with '.$cc.' for '.h($user_detail->chief_compliant_userdetail->compliant_length).'.' ;


}else {
    $hpi .= ' coming in for'.($coming_in_for[0] == 'a' ? ' an ' : ($coming_in_for[0] == 's' ? ' ' : ' a ') ).$coming_in_for.(!empty($cc) ? ', ' : '. ');
    $cc = strtolower($cc);
     $hpi .= !empty($cc) ? 'and has a chief complaint of '.$cc.'. ' : '';

     $hpi .= !empty($user_detail->chief_compliant_userdetail->compliant_length) ? 'The '.$cc.' started '.h($user_detail->chief_compliant_userdetail->compliant_length).' ago.' : '';

}
    // $hpi .= ' coming in for'.($coming_in_for[0] == 'a' ? ' an ' : ($coming_in_for[0] == 's' ? ' ' : ' a ') ).$coming_in_for.(!empty($cc) ? ', ' : '. ');
    // $cc = strtolower($cc);
    //  $hpi .= !empty($cc) ? 'and has a chief complaint of '.$cc.'. ' : '';

    //  $hpi .= !empty($user_detail->chief_compliant_userdetail->compliant_length) ? 'The '.$cc.' started '.h($user_detail->chief_compliant_userdetail->compliant_length).' ago.' : '';


     // $hpi = strtolower($hpi) ;

    $hpi .= $question_detial_res."".$other_question_detial_res."".$general_update_question_layman."".$pain_update_question_layman.''.$screening_question_detail_layman.''.$pre_op_procedure_detail_question_layman.''.$pre_op_medication_detail_question_layman.''.$pre_visit_quarion."".$pre_visit_other_quarion.''.$cronic_illness_layman;

    //$hpi .= $question_detial_res."".$other_question_detial_res;

    // (!empty($question_detial_res) ? '. ' : '');
$he = 'He'; $she = 'She';
$covid_associated_symp = "";
$covid_associated_symptom_trans = array(

    'shortness of breath' => 'SOB',
    'blue face or lips' => 'cyanosis',
    'coughing up blood' => 'hemoptysis',
    'nausea or vomiting' => 'n/v',
    'phlegm production' => 'sputum production',
    'weight loss' => 'anorexia'
);

if(!empty($temp_associated_symp) || !empty($positive_symptom) ){
  $hpi = trim($hpi);
  $hpi .= ' Associated symptoms include '.strtolower(htmlspecialchars($temp_associated_symp)).(!empty($temp_associated_symp)&& !empty($positive_symptom) ? ', ' : '').strtolower(htmlspecialchars($positive_symptom)).'. ';
  $covid_associated_symp .= 'Associated symptoms include '.strtolower(htmlspecialchars($temp_associated_symp)).(!empty($temp_associated_symp)&& !empty($positive_symptom) ? ', ' : '');
    $temp_pos_sym = explode(", ", $positive_symptom);

    if(!empty($temp_pos_sym)){
        foreach ($temp_pos_sym as $key => $value) {
            $value = strtolower(trim($value));
            $covid_associated_symp .= (isset($covid_associated_symptom_trans[$value]) ? $covid_associated_symptom_trans[$value] : $value).", ";
        }


        $covid_associated_symp = rtrim($covid_associated_symp,', ');
    }
    $covid_associated_symp = rtrim($covid_associated_symp,', ').". ";
$he = 'He'; $she = 'She';
}
// pr($hpi); die;
// else {
//     $hpi .= ' Associated symptoms: not provided. ';
// }

 if(!empty($negative_symptom)){

    $hpi .=  ($login_user->gender == 1 ? $he : $she).' denies '.htmlspecialchars($negative_symptom) .'. ' ;
    $covid_associated_symp .= ($login_user->gender == 1 ? $he : $she).' denies ';
    $temp_nag_sym = explode(", ", $negative_symptom);
    if(!empty($temp_nag_sym)){

        foreach ($temp_nag_sym as $key => $value) {

           $covid_associated_symp .= (isset($covid_associated_symptom_trans[$value]) ? $covid_associated_symptom_trans[$value] : $value).", ";
        }

        $covid_associated_symp = rtrim($covid_associated_symp,', ');
    }
    $covid_associated_symp .= ". ";
 }
$hpi = rtrim($hpi, ', ');

$patient_other_detail_score = '';

if($user_detail->chief_compliant_userdetail->current_step_id->id == 4){

  if(!empty($user_detail->chief_compliant_userdetail->compliant_medication_detail)){
        $hpi = rtrim($hpi,'.');
        $hpi .= ' of ';
        foreach ($user_detail->chief_compliant_userdetail->compliant_medication_detail as $key => $value) {

            $hpi .= trim($value['medication_name_id']).', ';
        }

        $hpi = rtrim($hpi,', ');
        $hpi .= '.';
    }

    if(!empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details)){

      $patient_other_detail_score = $this->General->prepare_medication_refill_extra_details_layman($user_detail->chief_compliant_userdetail->medication_refill_extra_details, $user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details);
    }

 }

$subjective = "";
$procudure_name = "";
$procudure_since_date = "";

if(isset($patient_other_detail_score) && !empty($patient_other_detail_score)){

   $temp_soapp_hpi = '';
      $temp_comm_hpi = '';
      $temp_dast_hpi = '';
      $temp_padt_hpi = '';
      //pr($patient_other_detail_score);die;

      if(!empty($patient_other_detail_score['padt_description'])){
            $temp_padt_hpi .= "PADT";
            $hpi .= ' PADT was performed. ';
            $hpi .= $patient_other_detail_score['padt_description'];
            //$temp_padt_hpi = $patient_other_detail_score['padt_description'];
       }
      if(!empty($patient_other_detail_score['soapp_summary'])){

           $hpi .= " SOAPP-R, ";

           $temp_soapp_hpi .= 'SOAPP-R score is '.$patient_other_detail_score['soapp_score'].", ".($patient_other_detail_score['soapp_score'] >= 18 ? "positive" : "negative").' indication. ';

           //$temp_soapp_hpi .= 'SOAPP-R indication is '.($patient_other_detail_score['soapp_score'] >= 18 ? "positive" : "negative").". ";
      }

      if(!empty($patient_other_detail_score['comm_summary'])){

           $hpi .= "COMM, ";

          $temp_comm_hpi .= 'COMM score is '.$patient_other_detail_score['comm_score'].", ".($patient_other_detail_score['comm_score'] >= 9 ? "positive" : "negative")." indication. ";
          //$temp_comm_hpi .= 'COMM indication is '.($patient_other_detail_score['comm_score'] >= 9 ? "positive" : "negative").". ";
      }

      if(!empty($patient_other_detail_score['dast_summary'])){

           $hpi .= "DAST-10, ";

          $temp_dast_hpi .= 'DAST-10 score is '.$patient_other_detail_score['dast_score'].", ";
          if($patient_other_detail_score['dast_score'] == 0){

            $temp_dast_hpi .= 'low degree of problems related to drug abuse.';
          }
          elseif($patient_other_detail_score['dast_score'] >= 1 && $patient_other_detail_score['dast_score'] <= 2){

            $temp_dast_hpi .= 'low degree of problems related to drug abuse.';
          }
          elseif($patient_other_detail_score['dast_score'] >= 3 && $patient_other_detail_score['dast_score'] <= 5){

            $temp_dast_hpi .= 'moderate degree of problems related to drug abuse.';
          }
          elseif($patient_other_detail_score['dast_score'] >= 6 && $patient_other_detail_score['dast_score'] <= 8){

            $temp_dast_hpi .= 'substantial degree of problems related to drug abuse.';
          }
          elseif($patient_other_detail_score['dast_score'] >= 9 && $patient_other_detail_score['dast_score'] <= 10){

            $temp_dast_hpi .= 'severe degree of problems related to drug abuse.';
          }
      }

    // $hpi .= $temp_padt_hpi;
    $hpi = rtrim($hpi,', ');
    $hpi .= " performed. ";
    $hpi .= $temp_soapp_hpi.$temp_comm_hpi.$temp_dast_hpi;
  // $hpi .= 'DAST-10 summary: '.$patient_other_detail_score['dast_description'].". ";
}



//pr($login_user);

if($user_detail->specialization_id == 6 && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 11){
    //die('3434');
    $post_checkup_layman = $this->prepare_post_checkup_question_layman($user_detail->chief_compliant_userdetail,$login_user->gender);

    if(!empty($post_checkup_layman) && isset($post_checkup_layman['layman_summar'])){

        $procudure_name = $post_checkup_layman['procudure'];
        $procudure_date = $post_checkup_layman['procedure_date'];
        $procudure_date = new \DateTime($procudure_date);
        $now_date = new \DateTime();
        $procudure_since_date = $now_date->diff($procudure_date)->format('%a');
        $post_checkup_layman = $post_checkup_layman['layman_summar'];
    }

    $subjective .= $login_user->first_name." is following up ".$post_checkup_layman;
}

if($user_detail->specialization_id == 6 && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 12 && $user_detail->chief_compliant_userdetail->follow_up_step_id == 11 ){
    //die('dfdf');
    $prev_visit_user_detail =  $this->ChiefCompliantUserdetails->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->followup_parent_id])->first();
      $prev_visit_user_detail = $this->prepare_user_detial_data_for_render($prev_visit_user_detail);

     // pr($prev_visit_user_detail);die;

    $post_checkup_layman = $this->prepare_followup_post_checkup_question_layman($user_detail->chief_compliant_userdetail,$prev_visit_user_detail,$login_user->gender);

    // echo '<pre>';
    // pr($post_checkup_layman);die;

    if(!empty($post_checkup_layman) && isset($post_checkup_layman['layman_summar'])){

        $procudure_name = $post_checkup_layman['procudure'];
        $procudure_date = $post_checkup_layman['procedure_date'];
        $procudure_date = new \DateTime($procudure_date);
        $now_date = new \DateTime();
        $procudure_since_date = $now_date->diff($procudure_date)->format('%a');
        $post_checkup_layman = $post_checkup_layman['layman_summar'];
    }

    $subjective .= $login_user->first_name." is following up ".$post_checkup_layman;
}
  // $hpi = strtolower($hpi);
     // pr($hpi); die;
// pr($user_detail) ; die;

    // #GYNHX : LMP Paps STI Breast BCM
      // LMP 05/04, menses at 11, 24 interval, 11 duration, Regular

$period_specific_label = array('was_it_regular_or_not' => 'Was it regular or not ?', 'cycle_length_in_days' => 'Cycle length (In Days)', 'flow_duration_in_days' => 'Flow duration (In Days)' );

  $lmp = '' ; $lmp_reg = '' ; $lmp_interval = '' ; $lmp_duration = '' ;

if(!empty($user_detail->chief_compliant_userdetail->last_period_info)){
  $user_detail->chief_compliant_userdetail->last_period_info = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->last_period_info), SEC_KEY)) ;
  // pr($user_detail->chief_compliant_userdetail->last_period_info); die;

  // $user_detail->chief_compliant_userdetail->last_period_info = array_filter($user_detail->chief_compliant_userdetail->last_period_info) ;
 if(is_array($user_detail->chief_compliant_userdetail->last_period_info)){
  foreach ($user_detail->chief_compliant_userdetail->last_period_info as $key => $value) {

    if($key == 'was_it_regular_or_not'){
      if($value == 1)   $lmp_reg =  'regular'; else if($value == 0)   $lmp_reg =  'irregular';
    }
    if($key == 'cycle_length_in_days')
      $lmp_interval =  ' interval '.h($value).' days, ';
    if($key == 'flow_duration_in_days')
      $lmp_duration =  ' duration '.h($value).' days, ';
   }
 }
}


    $lmp =  "LMP ".(!empty($user_detail->chief_compliant_userdetail->last_period_date) ? $user_detail->chief_compliant_userdetail->last_period_date->i18nFormat('MM-dd-yyyy').', ' : ' not provided, ');
    // pr($women_field);

    // pr($user_detail);
    // die ;
if(!empty($women_field)) {
       $lmp .= 'menses at '.h($women_field->age_of_first_priod).', '.$lmp_interval.$lmp_duration.$lmp_reg ;
}

$lmp = rtrim($lmp, ', ');

    // Paps: Last pap 04/2017, abnormal, Findings/Procedures: None



// pr($women_field);die;

  $paps = ''; $paps_reg = '' ; $paps_finding = '' ;

  $papsmear_specific_label = array('was_it_regular_or_not' => 'Was it regular or not ?', 'any_findings_or_procedures' => 'Any Findings/Procedures?' );

 if(!empty($user_detail->chief_compliant_userdetail->last_pap_smear_info)){


$user_detail->chief_compliant_userdetail->last_pap_smear_info = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->last_pap_smear_info), SEC_KEY)) ;
}



// papsmear_month
// papsmear_year
// was_it_regular_or_not
// any_findings_or_procedures
// pr($women_field->papsmear_month); die;
$papsmear_month = isset($user_detail->chief_compliant_userdetail->last_pap_smear_info['papsmear_month']) ? $user_detail->chief_compliant_userdetail->last_pap_smear_info['papsmear_month'] : ( !empty($women_field->papsmear_month) ? $women_field->papsmear_month : '') ;

// pr($user_detail); die;

$papsmear_year = isset($user_detail->chief_compliant_userdetail->last_pap_smear_info['papsmear_year']) ? $user_detail->chief_compliant_userdetail->last_pap_smear_info['papsmear_year'] :  ( !empty($women_field->papsmear_year) ? $women_field->papsmear_year : '');

$any_findings_or_procedures = isset($user_detail->chief_compliant_userdetail->last_pap_smear_info['any_findings_or_procedures']) ? $user_detail->chief_compliant_userdetail->last_pap_smear_info['any_findings_or_procedures'] : ( !empty($women_field->papsmear_finding) ? $women_field->papsmear_finding : '');

$was_it_regular_or_not = isset($user_detail->chief_compliant_userdetail->last_pap_smear_info['was_it_regular_or_not']) ? $user_detail->chief_compliant_userdetail->last_pap_smear_info['was_it_regular_or_not'] : ( !empty($women_field->is_regular_papsmear) ? $women_field->is_regular_papsmear : '');

// pr($papsmear_month);
// pr($papsmear_year);
// pr($any_findings_or_procedures);
// pr($was_it_regular_or_not);  die;
    // Paps: Last pap 04/2017, abnormal, Findings/Procedures: None
$paps = 'Last pap '.(!empty($papsmear_month)&&!empty($papsmear_year) ? ($papsmear_month<10 ? "0" : "").($papsmear_month+1).'/'.$papsmear_year : 'none provided').', ' ;
$paps .= (is_null($was_it_regular_or_not) ? '' : ($was_it_regular_or_not == 1 ? 'regular' : 'not regular' )).', ';
$paps .= 'Findings/Procedures: '.(!empty($any_findings_or_procedures) ? $any_findings_or_procedures : 'none provided') ;

// pr($paps); die;
     // STI: HPV (2014)



    $sti = '' ;
if(!empty($women_field) && !empty($women_field->sti_std_detail)){
          // $women_field->sti_std_detail = unserialize(base64_decode($women_field->sti_std_detail)) ;
$women_field->sti_std_detail = unserialize((Security::decrypt(base64_decode($women_field->sti_std_detail), SEC_KEY))) ;
// pr($women_field->sti_std_detail);
    $sti_std_disease = array("Human papillomavirus (HPV)", "Gonorrhea", "Chlamydia", "Genital herpes", "Syphilis", "Trichomoniasis", "HIV/AIDS", "OTHER");

  if(is_array($women_field->sti_std_detail)){
        foreach ($women_field->sti_std_detail as $key => $value) {
             if(is_numeric($key)){
              if($key != 7)
                $sti .=  $sti_std_disease[$key].(!empty($value) ? ' ('.$value.')' : '').', ' ;
               if($key == 7)  // because other sti std serial no is 7 in array
                $sti .=  h($women_field->sti_std_detail['other']).(!empty($value) ? ' ('.$value.')' : '').', ' ;

             }
    }
  }
}

  $sti = rtrim($sti, ', ');
// pr($sti); die;
      // Breast: abnormal lumps, 1 biopsy, no result
$biopsy_rsult = ''; $count_biopsy = '';
if(!empty($women_field) && !empty($women_field->breast_lump_biopsy_result)){
    // $women_field->breast_lump_biopsy_result = unserialize(base64_decode($women_field->breast_lump_biopsy_result))  ;
$women_field->breast_lump_biopsy_result = unserialize((Security::decrypt(base64_decode($women_field->breast_lump_biopsy_result), SEC_KEY)))  ;


$month_name = ['January', 'February', 'March', 'April','May', 'June', 'July','August', 'September', 'October','Nobember', 'December']  ;
                  // pr( $women_field->breast_lump_biopsy_result );

   if(isset($women_field->breast_lump_biopsy_result['biopsy_result']) && is_array($women_field->breast_lump_biopsy_result['biopsy_result'])){
    foreach ($women_field->breast_lump_biopsy_result['biopsy_result'] as $key => $value) {

      $biopsy_rsult .= h(trim($value)).' ('.$women_field->breast_lump_biopsy_result['biopsy_year'][$key].'), ';
    }

    $count_biopsy = count($women_field->breast_lump_biopsy_result['biopsy_result']) ;
    $biopsy_rsult = rtrim($biopsy_rsult, ', ');
              }
}
$breast = '';
if(!empty($women_field))
      $breast = ($women_field->previous_abnormal_breast_lump == 1 ? 'abnormal lumps, ' : 'No abnormal lumps, ').$count_biopsy.(empty($count_biopsy) ? 'no biopsy, ' : ($count_biopsy>1 ? ' biopsies, ' : ' biopsy, ')).$biopsy_rsult ;

$breast = rtrim($breast, ', ') ;
// pr($breast); die ;
    // BCM: condom


   $bcm = '' ;

    if(!empty($user_detail->chief_compliant_userdetail->sexual_info)) {



    // $user_detail->chief_compliant_userdetail->sexual_info = unserialize(base64_decode($user_detail->chief_compliant_userdetail->sexual_info)) ;

      $user_detail->chief_compliant_userdetail->sexual_info = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->sexual_info), SEC_KEY))) ;



    $sexual_info_label = array('sexual_active_or_not' => 'Are you sexually active?', 'no_of_partner' => 'Number of sexual partner', 'protection_used_or_not' => 'Do you use protection?', 'protection_method' => 'Protection method(s)' );
  if(is_array($user_detail->chief_compliant_userdetail->sexual_info)) {
    foreach ($user_detail->chief_compliant_userdetail->sexual_info as $key => $value) {

      if($key == 'protection_method')
           $bcm .= h($value).', ' ;

    }
  }

    $bcm = rtrim($bcm, ',') ;
     }

// 1. Currently pregnant 34 weeks 0 days, M, no complications
// 2. 8/2016 Vaginal delivery, no complications, Ben Taub hospital birthed


// pr($user_detail->chief_compliant_userdetail); die;
     // #OBHX
    // if(!empty($women_field)) {
$tmp = $user_detail->chief_compliant_userdetail ;

if(!empty($tmp->is_curently_pregnant))
  $tmp->is_curently_pregnant = Security::decrypt( base64_decode($tmp->is_curently_pregnant), SEC_KEY);
if(!empty($tmp->currently_pregnant_week))
  $tmp->currently_pregnant_week = Security::decrypt( base64_decode($tmp->currently_pregnant_week), SEC_KEY);
if(!empty($tmp->currently_pregnant_days))
  $tmp->currently_pregnant_days = Security::decrypt( base64_decode($tmp->currently_pregnant_days), SEC_KEY);
if(!empty($tmp->currently_pregnant_complication))
  $tmp->currently_pregnant_complication = Security::decrypt( base64_decode($tmp->currently_pregnant_complication), SEC_KEY);
// pr($tmp) ;die;
// Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_id), SEC_KEY)
         // Currently pregnant 34 weeks 0 days, M, no complications
$i = 1;
        $cur_preg_info =   ($tmp->is_curently_pregnant == 1 ? $i++.'. Currently pregnant, ' : 'Not currently pregnant, ');
        if($tmp->is_curently_pregnant == 1){
          $cur_preg_info .=   (empty($tmp->currently_pregnant_week)? '0' : h($tmp->currently_pregnant_week) ).' weeks, '.(empty($tmp->currently_pregnant_days) ? '0' : h($tmp->currently_pregnant_days) ).' days, ';


          // if(!empty($tmp->current_baby_sex)){
          //   $cur_preg_info .= $tmp->current_baby_sex ;
          // }


          // code commented as now we are using tagsinput instead of multiselect input
          if(!empty($tmp->current_baby_sex)){
      $tmp->current_baby_sex = rtrim($tmp->current_baby_sex, ', ');
      // pr($tmp->current_baby_sex) ;die ;
            $cur_preg_info .=  $tmp->current_baby_sex.', ';

            // commented as we changed input type on front end
            // $tmp->current_baby_sex = explode(',',$tmp->current_baby_sex) ;

            // foreach ($tmp->current_baby_sex as $key => $value) {
            //   $cur_preg_info .=  $value == 1 ? 'M, ' : 'F, ';
            // }

          }

          // commented as multiple gender is required
          // $cur_preg_info .=  ($tmp->current_baby_sex == 1 ? 'M, ' : ( !is_null($tmp->current_baby_sex) && $tmp->current_baby_sex == 0 ?  'F, ' : ''));

           $cur_preg_info .=  (empty($tmp->currently_pregnant_complication)? 'no complications' : h($tmp->currently_pregnant_complication) ) ;
        }

     $cur_preg_info = rtrim($cur_preg_info, ', ')    ;

        // pr($cur_preg_info); die;

    // }
// echo $cur_preg_info ; die;

    // 8/2016 Vaginal delivery, no complications, Ben Taub hospital birthed

    $prev_birth_data = array(); // as multiple birth will be inserted as separate array

        $prev_birth_data[] = $cur_preg_info ;
        $prev_birth_detail =  array();

    if(!empty($women_field) && $women_field->is_previous_birth ==1) {
      if(!empty($women_field->prev_birth_detail))
        $prev_birth_detail  = unserialize((Security::decrypt(base64_decode($women_field->prev_birth_detail), SEC_KEY))) ;
// pr($prev_birth_detail); die;


        // pr($prev_birth_detail); die;
$month_name = ['January', 'February', 'March', 'April','May', 'June', 'July','August', 'September', 'October','Nobember', 'December']  ;

  if(!empty($prev_birth_detail) && is_array($prev_birth_detail['previous_birth_sex'])) {
        // $i = 2;
        foreach ($prev_birth_detail['previous_birth_sex'] as $key => $value) {
// 2. 8/2016 Vaginal delivery, no complications, Ben Taub hospital birthed

$tempp = $i++.'. '.((is_numeric($prev_birth_detail['previous_birth_month'][$key]) && is_numeric($prev_birth_detail['previous_birth_year'][$key])) ? ($prev_birth_detail['previous_birth_month'][$key]+1).'/'.$prev_birth_detail['previous_birth_year'][$key] : 'date not provided, ').' ';

$tempp .= ($prev_birth_detail['previous_delivery_method'][$key] === 0 ? 'Vaginal delivery, ' : ($prev_birth_detail['previous_delivery_method'][$key] == 1 ? 'C-section, ' : 'delivery method not provided, ' ));

$tempp .= (!empty($prev_birth_detail['previous_complication'][$key])? h($prev_birth_detail['previous_complication'][$key]).', ' : 'no complications, ').h($prev_birth_detail['previous_hospital'][$key]).', '  ;

$prev_birth_data[]  = rtrim($tempp, ', ') ;
// $prev_birth_data .= ($prev_birth_detail['previous_birth_month'][$key]+1).'/'.$prev_birth_detail['previous_birth_year'][$key].', '.($prev_birth_detail['previous_delivery_method'][$key] == 0 ? 'Vaginal delivery' : ($prev_birth_detail['previous_delivery_method'][$key] == 1 ? 'C-section' : '' )).', '.h($prev_birth_detail['previous_complication'][$key]).', '.h($prev_birth_detail['previous_hospital'][$key]).', '  ;


        }
    }
        // $prev_birth_data =  '2. '.rtrim($prev_birth_data, ', ') ;
        }
// pr($prev_birth_data); die ;

        // #MEDS birth control pill 2mg prn po
//echo 'hghgf<pre>'; print_r($user_detail->chief_compliant_userdetail->compliant_medication_detail); die;
$med_how_tken_arr = array("mouth"=>"PO","nasal spray"=>"IN","both ears" => "AU","right ear" => "AD","left ear" => "AS","both eyes" => "OU","right eye" => "OD","left eye" => "OS","muscle injection"=>"IM","subcutaneously"=>"SUBQ","under the skin"=>"SUBQ","under tongue"=>"sublingual","Topical"=>"TD","Suppository"=>"SUPP") ;
$meds = '' ;
if(is_array($user_detail->chief_compliant_userdetail->compliant_medication_detail)) {

        foreach ($user_detail->chief_compliant_userdetail->compliant_medication_detail as $key => $value) {

$value['medication_how_taken'] = !empty($med_how_tken_arr[$value['medication_how_taken']]) ? $med_how_tken_arr[$value['medication_how_taken']] : $value['medication_how_taken'] ;
    // pr($value) ;die;

            if(!empty($value['medication_name_name'])){

                $meds .= h($value['medication_name_name']);
            }

            if(!empty($value['medication_dose'])){

                $meds .= ' '.h($value['medication_dose']);
            }
            if(!empty($value['medication_how_often'])){

                $meds .= ' '.h($value['medication_how_often']);
            }
            if(!empty($value['medication_how_taken'])){

                $meds .= ' '.h($value['medication_how_taken']);
            }

            $meds .= ', ';
            //$meds .=  h($value['medication_name_name']).'  '.h($value['medication_dose']).'  '.h($value['medication_how_often']).'  '.h($value['medication_how_taken']).', ' ;
            // h($length_arr[$value['medication_how_often']])
             }
         $meds = rtrim($meds, ', ') ;
       }

       if(is_array($user_detail->chief_compliant_userdetail->chronic_dmii_medication))
        {
            foreach ($user_detail->chief_compliant_userdetail->chronic_dmii_medication as $key => $value)
            {

                $value['medication_how_taken'] = !empty($med_how_tken_arr[$value['medication_how_taken']]) ? $med_how_tken_arr[$value['medication_how_taken']] : $value['medication_how_taken'] ;
                if(!empty($value['medication_name_name']))
                {
                    $meds .= h($value['medication_name_name']);
                }
                if(!empty($value['medication_dose']))
                {
                    $meds .= ' '.h($value['medication_dose']);
                }

                if(!empty($value['medication_how_often']))
                {
                    $meds .= ' '.h($value['medication_how_often']);
                }

                if(!empty($value['medication_how_taken']))
                {
                    $meds .= ' '.h($value['medication_how_taken']);
                }

                $meds .= ', ';
            }

            $meds = rtrim($meds, ', ') ;
        }

// pr($meds); die;

       // #PMH Chicken Pox (2002), DM2 (2015)
    $commonTable = TableRegistry::get('common_conditions');


    $tmp_common_medical_cond = $commonTable->find('list', [
                        // 'keyField' => 'name',
                        'keyField' => function ($row) {
                return strtolower(preg_replace('/\s+/', '', trim($row['name'])))  ;  // we are trimming and lowercase key to match the user supplied  medical history
                                    } ,
                        'valueField' => 'note_name'
                    ])->toArray();


 // if($tk = array_search(strtolower(preg_replace('/\s+/', '', $value)), $chief_compliant_arr)){


    // pr($tmp_common_medical_cond);

       $pmh = '';
  if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){

    if(!empty($user_detail->chief_compliant_userdetail->focused_history_detail) && isset($user_detail->chief_compliant_userdetail->focused_history_detail[213])){

        //$cpt_pmfsh_count++;
        $ques_213_translate = array(

                    'Chronic obstructive pulmonary disease (COPD)' => 'COPD',
                    'Asthma' => 'asthma',
                    'Heart disease (coronary artery disease)' => 'CAD',
                    'Heart attacks' => 'MI',
                    'Heart failure' => 'CHF',
                    'High blood pressure (hypertension)' => 'HTN',
                    'Diabetes' => 'DM2',
                    'Multiple sclerosis' => 'MS',
                    "Lou Gehrig's disease (ALS)" => 'ALS',
                    "Myasthenia gravis" => 'myasthenia gravis',
                    'Immunsuppression therapy' => 'immunsuppression therapy',
                    'Cirrhosis' => 'cirrhosis',
                    'Chronic kidney disease' => 'CKD',
                    'Obesity' => 'obesity'
                );
        if(!empty($user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer']) && is_array($user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer'])){

            foreach ($user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer'] as $key => $value) {

                $pmh .= (isset($ques_213_translate[$value])? $ques_213_translate[$value] : $value).", ";
            }
            $pmh = rtrim($pmh,', ');
        }
        else{

            $pmh = $user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer'] ;
        }
    }
}

    if(!empty($login_user->medical_history)){
    // $medical_history = unserialize(base64_decode($login_user->medical_history));
      $medical_history = unserialize((Security::decrypt(base64_decode($login_user->medical_history), SEC_KEY)));
     if(!empty($medical_history)){
      $pmh .= !empty($pmh) ? ', ': '';
    foreach ($medical_history as $key => $value) {

    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

    $value['name'] =   !empty($tmp_common_medical_cond[strtolower(preg_replace('/\s+/', '', $value['name']))]) ? $tmp_common_medical_cond[strtolower(preg_replace('/\s+/', '', $value['name']))] : $value['name'] ;

      $pmh .= h($value['name']).(!empty(trim($value['year'])) ? ' ('.h($value['year']).'), ' : ', ' );

    }
    }
      // $pmh = strtolower(rtrim($pmh, ', ')) ;

    }

 $pmh = (rtrim($pmh, ', ')) ;
    // pr($pmh); die ;
    // #PSH  - it has same structure as #PMH
    $psh = '';
    if(!empty($login_user->surgical_history)){
    // $medical_history = unserialize(base64_decode($login_user->medical_history));
      $surgical_history = unserialize((Security::decrypt(base64_decode($login_user->surgical_history), SEC_KEY)));
      if(!empty($surgical_history)){

    foreach ($surgical_history as $key => $value) {

    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose
     // strtolower(preg_replace('/\s+/', '', trim($value['name'])))
    $value['name'] =   !empty($tmp_common_medical_cond[strtolower(preg_replace('/\s+/', '', trim($value['name'])))]) ? $tmp_common_medical_cond[strtolower(preg_replace('/\s+/', '', $value['name']))] : $value['name'] ;


      $psh .= h($value['name']).(!empty(trim($value['year'])) ? ' ('.h($value['year']).'), ' : ', ' );

    }
    }
      // $psh = strtolower(rtrim($psh, ', ')) ;
    $psh = (rtrim($psh, ', ')) ;
    }

    // #FH PGM - Breast cancer, MGM (d/c 85, natural) - Diabetes,
        // PGF (d/c 31, acute rheumatic fever)
    $fh = array() ;  // we are using array becasue each case will be in separate array

     if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){
        //pr($user_detail->chief_compliant_userdetail->focused_history_detail);die;
        if(isset($user_detail->chief_compliant_userdetail->focused_history_detail[212]) && !empty($user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer'])){

            $ques_213_translate = array(

                    'Chronic obstructive pulmonary disease (COPD)' => 'COPD',
                    'Asthma' => 'asthma',
                    'Heart disease (coronary artery disease)' => 'CAD',
                    'Heart attacks' => 'MI',
                    'Heart failure' => 'CHF',
                    'High blood pressure (hypertension)' => 'HTN',
                    'Diabetes' => 'DM2',
                    'Multiple sclerosis' => 'MS',
                    "Lou Gehrig's disease (ALS)" => 'ALS',
                    "Myasthenia gravis" => 'myasthenia gravis',
                    'Immunsuppression therapy' => 'immunsuppression therapy',
                    'Cirrhosis' => 'cirrhosis',
                    'Chronic kidney disease' => 'CKD',
                    'Obesity' => 'obesity'
                );

            $family_members_translate = array(

                'Father' => 'F',
                'Mother' => 'M',
                'Paternal grandmother' => 'PGM',
                'Paternal grandfather' => 'PGF',
                'Maternal grandmother' => 'MGM',
                'Maternal grandfather' => 'MGF',
                'Brother' => 'brother',
                'Sister' => 'sister',
                'Son' => 'son',
                'Daughter' => 'daughter'
            );
            foreach ($user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer'] as $key => $value) {

                if($key != 'members'){
                    $cond = isset($ques_213_translate[$value]) ? $ques_213_translate[$value] : "";
                    if(!empty($cond) && isset($user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer']['members'][$key])){

                        $members = array();
                        foreach ($user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer']['members'][$key] as $k => $v) {

                            $members[] = isset($family_members_translate[$v]) ? $family_members_translate[$v] : $v;
                        }

                        $members = array_filter($members);
                        $temp_fh = $cond.(!empty($members) ? "(".implode(", ", $members).")":"");
                        $fh[]  = $temp_fh;
                    }
                }
            }
        }
    }


    if(!empty($login_user->family_history)){
    // $family_history = unserialize(base64_decode($login_user->family_history));
      $family_history = unserialize((Security::decrypt(base64_decode($login_user->family_history), SEC_KEY)));

        // pr($family_history); die;
     $family_relation = [1=>'F', 2=>'M', 3=>'PGM', 4=>'PGF', 5=>'MGM', 6=>'MGF', 7=>'Brother', 8=>'Sister', 9=>'Son', 10=>'Daughter',11 =>"Cousin(mom's side)",12 =>"Cousin(dad's side)",13 =>"Aunt(mom's side)",14 =>"Aunt(dad's side)",15=>"Uncle(mom's side)",16 =>"Uncle(dad's side)"];



  // $family_relation = [1=>'Father', 2=>'Mother', 3=>'Grandmother (Dad-side)', 4=>'Grandfather (Dad-side)', 5=>'Grandmother (Mom-side)', 6=>'Grandfather (Mom-side)', 7=>'Brother', 8=>'Sister', 9=>'Son', 10=>'Daughter'];


      foreach ($family_history as $key => $value) {
$tmp = '';
$tempfh = '';
if(isset($value['alive_status']) && !empty($value['alive_status'])) {
      if(($value['alive_status'] == 0 || $value['alive_status'] == 1  || !empty($value['decease_year'])) && !empty($value['cause_of_death']))
        { $tmp = ', '; }
  }

  $tempfh .= h($family_relation[$value['name']]);
  if(isset($value['alive_status']) && !empty($value['alive_status'])){
  $tempfh  .= ' ('.($value['alive_status'] == 1 ? "alive" : "d/c".($value['decease_year'] == 999 ? ' childhood' : ($value['decease_year'] == 911  ? '' : (!empty($value['decease_year']) ? ' '.h($value['decease_year'] ) : '' ))).$tmp.h(trim(strtolower(implode(', ', explode(",", $value['cause_of_death']))))) ).')';
  }

  $tempfh  .= !empty($value['disease']) ? ' - '.h(trim(strtolower(implode(', ', explode(",", $value['disease']))))).', ' : '' ;

// implode(explode()) is used to add space after comma in above line


    $tempfh = rtrim($tempfh, ', ');
    $fh[] = $tempfh ;
      }
    }


// pr($fh); die;
    // $fh = rtrim($fh, ', ');

    // #SH heterosexual, sexually active, 1 partner, protection: condom, denies EtOH and 1 drinks/wk for 3 years, denies current smoking, denies past smoking, denies IDU

    $sh = '';



        // sexually active, 1 partner, protection: condom,
        $sx_act = '';
        if(!empty($user_detail->chief_compliant_userdetail->sexual_info)){
            $tmp_sx = $user_detail->chief_compliant_userdetail->sexual_info ;
            if(isset($tmp_sx['sexual_active_or_not'])){
$sx_act .= ($tmp_sx['sexual_active_or_not'] == 1 ? 'sexually active, ' : 'sexually inactive, ' );


 if(isset($tmp_sx['no_of_partner']) && $tmp_sx['sexual_active_or_not'] == 1 ){
$sx_act .= ($tmp_sx['no_of_partner'] >= 1 ? $tmp_sx['no_of_partner'].' partners, ' : 'no partner, ') ;
            }
    if(isset($tmp_sx['protection_used_or_not']) && $tmp_sx['protection_used_or_not'] == 0 && $tmp_sx['sexual_active_or_not'] == 1 ){

       $sx_act .= 'protection: none, ' ;
    }
    if( isset($tmp_sx['protection_used_or_not'])  && $tmp_sx['protection_used_or_not'] == 1 && $tmp_sx['sexual_active_or_not'] == 1 ){

        $sx_act .= !empty(trim($tmp_sx['protection_method'])) ? 'protection: '.$tmp_sx['protection_method'].', ' : 'protection: not provided, ' ;

    }

            }


        }


        // $sx_act = rtrim($sx_act, ', ');
// pr( $sx_act); die ;
        // pr($sx_act) ;die;
  $s_ori = array(0 => 'Heterosexual', 1 => 'Homosexual', 2 => 'Bisexual', 9 => 'Prefer not to say');




if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){

    if(!empty($user_detail->chief_compliant_userdetail->focused_history_detail)){

        foreach ($user_detail->chief_compliant_userdetail->focused_history_detail as $key => $value) {

            if(in_array($key, [214,215,216,217])){

                //$cpt_pmfsh_count++;

                switch ($key) {
                    case 214:
                        $sh.= !empty($value) && $value['answer'] == 'Yes' ? '+current smoking, ' : "denies current smoking, ";
                        break;

                    case 215:
                        $sh.= !empty($value) && $value['answer'] == 'Yes' ? '+past smoking, ' : "denies past smoking, ";
                        break;

                    case 216:
                        $sh.= !empty($value) && $value['answer'] == 'Yes' ? '+current vaping, ' : "denies current vaping, ";
                        break;

                    case 217:
                        $sh.= !empty($value) && $value['answer'] == 'Yes' ? '+past vaping, ' : "denies past vaping, ";
                        break;

                }
            }
        }
    }
}
else
{


   if($login_user->is_currentlysmoking == 1){
      if(!empty($login_user->current_smoke_pack)){
          $sh .= 'currently smoking : ';
          $sh .= ($login_user->current_smoke_pack == 'morethan10' ? 'more than 10' : h($login_user->current_smoke_pack) ).' packs/wk, ';
      }else {
          $sh .= 'currently smoking: consumes but frequency not provided, ';
      }
   } else{
          $sh .= 'denies current smoking, ';
   }

   if($login_user->is_pastsmoking == 1){
      if(!empty($login_user->past_smoke_pack)){
          $sh .= 'past smoking: ';
           $sh .= ($login_user->past_smoke_pack == 'morethan10' ? 'more than 10' : h($login_user->past_smoke_pack) ).' packs/wk for '.($login_user->past_smoke_year == "morethan10" ? 'more than 10' : h($login_user->past_smoke_year) ).' years, ' ;
      }else{
          $sh .= 'past smoking: consumes but frequency not provided, ';
      }
   }else{
          $sh .= 'denies past smoking, ';
   }

}


 //  denies EtOH and 1 drinks/wk for 3 years,
  // here EtOH refers to current drinking

   if($login_user->is_currentlydrinking == 1 ){
      if(!empty($login_user->current_drink_pack)){

           $sh .= ($login_user->current_drink_pack == 'morethan10' ? 'EtOH: more than 14' : 'EtOH: '.h($login_user->current_drink_pack) ).'  drinks/wk, ';

      }else{
          $sh .= 'EtOH: consumes but frequency not provided, ';
      }
   }else{
          $sh .= 'denies EtOH, ';
   }




   if($login_user->is_pastdrinking == 1 ){
      if(!empty($login_user->past_drink_pack)){
          $sh .= ($login_user->past_drink_pack == 'morethan10' ? 'past drinking : more than 14' : h($login_user->past_drink_pack) ).' drinks/wk for '.($login_user->past_drink_year == "morethan10" ? 'more than 10' : h($login_user->past_drink_year) ).' years, ' ;
      }else{
            $sh .= 'past drinking: consumes but frequency not provided, ';
      }
   }else{
       $sh .= 'denies past drinking, ';
   }


   // denies IDU
  $other_drug_history = $login_user->other_drug_history ;

  if($login_user->is_otherdrug == 1){

    if(!empty($other_drug_history)){
        // $other_drug_history = unserialize($other_drug_history) ;
       $other_drug_history = unserialize(Security::decrypt(base64_decode($other_drug_history), SEC_KEY)) ;


        if(!empty($other_drug_history))  {
              $sh .= 'IDU: ';
             foreach ($other_drug_history as $key => $value) {

              // $sh .= h($value['name']).' '.($value['quantity'] == 'morethan10' ? 'more than 10' : h($value['quantity'] )).' for '.h($value['year']).' year, ' ;
                $sh .= h($value['name']).' for '.($value['year'] == "morethan10" ? 'more than 10' : h($value['year']) ).' years, ' ;

            }
        } else {

             $sh .= 'IDU: consumes but frequency not provided, ';

        }

    }else{
        $sh .= 'IDU: consumes but frequency not provided, ';
    }

  } else {

     $sh .= 'denies IDU, ';

  }



  $other_drug_history_past = $login_user->other_drug_history_past ;
  if($login_user->is_otherdrugpast == 1){

    if(!empty($other_drug_history_past)){


    $other_drug_history_past = unserialize(Security::decrypt(base64_decode($other_drug_history_past), SEC_KEY)) ;

    if(!empty($other_drug_history_past)) {
      $sh .= 'past drug use: ';

          foreach ($other_drug_history_past as $key => $value) {

          // $sh .= h($value['name']).' '.($value['quantity'] == 'morethan10' ? 'more than 10' : h($value['quantity'] )).' for '.h($value['year']).' year, ' ;

            $sh .= h($value['name']).' for '.($value['year'] == "morethan10" ? 'more than 10' : h($value['year']) ).' years, ' ;
        }
    } else {
        $sh .= 'past drug use: consumes but frequency not provided, ';
      }
    }else{
         $sh .= 'past drug use: consumes but frequency not provided, ';
    }
  } else {

     $sh .= 'denies past drug use, ';

  }

  if($login_user->sexual_orientation != ''){

    $sh = $s_ori[$login_user->sexual_orientation].($login_user->sexual_orientation == 9 ? ' sexual orientation' : '').', '.$sx_act.$sh ;

  }
  $sh = rtrim($sh, ', ') ;



// #SH heterosexual, sexually active, 1 partner, protection: condom, denies EtOH and 1 drinks/wk for 3 years, denies current smoking, denies past smoking, denies IDU

        // pr($sh); die ;

  // #ALL latex (Dry skin), Eggs (Diarrhea)

    $all = '' ;

    if(!empty($login_user->allergy_history)){
    // $allergy_history = unserialize(base64_decode($login_user->allergy_history));
          $allergy_history = unserialize((Security::decrypt(base64_decode($login_user->allergy_history), SEC_KEY)));
          if(!empty($allergy_history)) {

      foreach ($allergy_history as $key => $value) {



        $all .= h($value['name']).(!empty(trim($value['reaction'])) ? ' ('.h($value['reaction']).'), ' : ', ' ) ;

      }
      }
      $all = rtrim($all, ', ') ;

    }
// pr($pmh);
// pr($psh);
// pr($all); die ;
  // #IMM +Hepatitis A (2015), +Hepatitis B (2018), +Measles (2012), +Meningococcal (2015), +Mumps (2011)


    $commonTable = TableRegistry::get('common_conditions');


    $shot_cond = $commonTable->find('list', [
                        'keyField' => 'id',
                        'valueField' => 'name'
                    ])->where(['cond_type' => 4])->toArray();
    // pr($shot_cond);

    $imm = '' ;

  if(!empty($login_user->shots_history)){
    // $medical_history = unserialize(base64_decode($login_user->medical_history));
      $shots_history = unserialize((Security::decrypt(base64_decode($login_user->shots_history), SEC_KEY)));
      if(!empty($shots_history) && is_array($shots_history)){
        foreach ($shots_history as $key => $value) {
          $imm .=  (isset($shot_cond[$key]) ? $shot_cond[$key] : '').''.(h($value) == 1 ? " (childhood)" : (!empty($value) ? ' ('.h($value).')' : '') ).', ';
        }
      }
      $imm = rtrim($imm, ', ') ;

  }


if(!empty($login_user->other_shots_history)){

      $other_shots_history = unserialize((Security::decrypt(base64_decode($login_user->other_shots_history), SEC_KEY)));
      if(!empty($other_shots_history) && is_array($other_shots_history)){
          foreach ($other_shots_history as $key => $value) {

            if(isset($value['name'])){

                $imm .= $value['name'];
            }
            else{

                continue;
            }

            if(isset($value['year']) && !empty($value['year'])){

                $imm .= $value['year'] == 1 ? " (childhood)" : " (".$value['year'].")";
            }

            $imm .= ", ";

          }
      }

      $imm = rtrim($imm, ', ') ;
  }

  // #ROS GEN  GI/GU  HEENT  HEME/ENDO  CV  NEURO/MSK  RESP  PSYCH  SKIN

  $all_questionnaire = $this->ChiefCompliantQuestionnaire->find('all');
  // pr($all_questionnaire); die;
  $all_questionnaire_arr = array();
  $temp_general_health_questionnaire_grp_arr = array();
  foreach ($all_questionnaire as $key => $value) {
    // pr($value); die;
    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose
    // $value->questionnaire_text = (!empty($value->note_name) ? $value->note_name  : (!empty($value->medical_name) ? $value->medical_name : $value->questionnaire_text )) ;

    $all_questionnaire_arr[$value->questionnaire_type_id][] = $value->id ;
  }
  // pr($all_questionnaire_arr); die;

$positive_questionnaire = '' ;
$negative_questionnaire = '' ;
$positive_questionnaire = '' ;
$negative_questionnaire = '' ;
$spine_MSK              = '';
$spine_NEURO            = '';
$spine_GEN              = '';
$spine_ENT              = '';
$spine_CV               = '';
$spine_RESP             = '';
$spine_GI               = '';
$spine_SKINBREAST       = '';
$spine_ENDO             = '';
$spine_HEMELYMPH        = '';


if($user_detail->specialization_id == 4 || $user_detail->specialization_id == 7){  // for specialization id 3 related logic for health questionaire


//John: However, we may specify it to be different for specific orthopedics modules, such as in this case with the spine module we want 5 of MSK, 5 of NEURO,  and two from each of the following :GEN, ENT, CV, RESP, GI, SKIN/BREAST, ENDO, HEME/LYMPH

$temp_spine_questionnaire_grp_arr = array(); // we are creating new source array and take only those  options that are needed in orthopedic spine module
$temp_spine_questionnaire_grp_arr['MSK'] = $all_questionnaire_arr[21] ;
$temp_spine_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[20] ;
$temp_spine_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[32] ;
$temp_spine_questionnaire_grp_arr['ENT'] = array_merge($all_questionnaire_arr[13], $all_questionnaire_arr[14], $all_questionnaire_arr[16])  ;
$temp_spine_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[18] ;
$temp_spine_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[19] ;
$temp_spine_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[22] ;
$temp_spine_questionnaire_grp_arr['SKIN_BREAST'] = array_merge($all_questionnaire_arr[24], $all_questionnaire_arr[25]) ;
$temp_spine_questionnaire_grp_arr['ENDO'] = $all_questionnaire_arr[28] ;
$temp_spine_questionnaire_grp_arr['HEME_LYMPH'] = $all_questionnaire_arr[26]; //  array_merge($all_questionnaire_arr[26], $all_questionnaire_arr[27]) ; there is no data in the id 27 so we commented this temporarily , when client provide data we will uncomment it





// pr($temp_ortho_questionnaire_grp_arr);


// pr($user_detail->chief_compliant_userdetail->questionnaire_detail); die;
if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail)) {

             $res_ar = array(0 => 'NO', 1 => 'YES' , 2 => "I DON'T KNOW");

$spine_MSK  = '';  $spine_NEURO  = '';  $spine_GEN  = '';  $spine_ENT  = '';  $spine_CV  = '';  $spine_RESP  = '';  $spine_GI  = '';  $spine_SKINBREAST  = '';  $spine_ENDO  = '';  $spine_HEMELYMPH  = '';

             foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value) {
              foreach($value as $k =>$v) {
// pr($v); die;

    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose
    $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;


                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['MSK'])){
 if($key == 1) $spine_MSK .= '+'.strtolower($v->questionnaire_text).', ';
                  }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['NEURO'])){
 if($key == 1) $spine_NEURO .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['GEN'])){
 if($key == 1) $spine_GEN .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                  if(in_array($v->id, $temp_spine_questionnaire_grp_arr['ENT'])){
 if($key == 1) $spine_ENT .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                  if(in_array($v->id, $temp_spine_questionnaire_grp_arr['CV'])){
 if($key == 1) $spine_CV .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['RESP'])){
 if($key == 1) $spine_RESP .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                  if(in_array($v->id, $temp_spine_questionnaire_grp_arr['GI'])){
 if($key == 1) $spine_GI .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['SKIN_BREAST'])){
 if($key == 1) $spine_SKINBREAST .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['ENDO'])){
 if($key == 1) $spine_ENDO .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['HEME_LYMPH'])){
 if($key == 1) $spine_HEMELYMPH .= '+'.strtolower($v->questionnaire_text).', ';
                  }

      }
   }



$spine_MSK  = rtrim($spine_MSK , ', ');  $spine_NEURO  = rtrim($spine_NEURO , ', ');  $spine_GEN  = rtrim($spine_GEN , ', ');  $spine_ENT  = rtrim($spine_ENT , ', ');  $spine_CV  = rtrim($spine_CV , ', ');  $spine_RESP  = rtrim($spine_RESP , ', ');  $spine_GI  = rtrim($spine_GI , ', ');  $spine_SKINBREAST  = rtrim($spine_SKINBREAST , ', ');  $spine_ENDO  = rtrim($spine_ENDO , ', ');  $spine_HEMELYMPH  = rtrim($spine_HEMELYMPH , ', ');


$spine_MSK  .= '. Denies ';  $spine_NEURO  .= '. Denies ';  $spine_GEN  .= '. Denies ';  $spine_ENT  .= '. Denies ';  $spine_CV  .= '. Denies ';  $spine_RESP  .= '. Denies ';  $spine_GI  .= '. Denies ';  $spine_SKINBREAST  .= '. Denies ';  $spine_ENDO  .= '. Denies ';  $spine_HEMELYMPH  .= '. Denies ';


             foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value) {
              foreach($value as $k =>$v) {
// pr($v); die;

    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose
    $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;


                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['MSK'])){
 if($key == 0) $spine_MSK .= strtolower($v->questionnaire_text).', ';
                  }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['NEURO'])){
 if($key == 0) $spine_NEURO .= strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['GEN'])){
 if($key == 0) $spine_GEN .= strtolower($v->questionnaire_text).', ';
                  }
                  if(in_array($v->id, $temp_spine_questionnaire_grp_arr['ENT'])){
 if($key == 0) $spine_ENT .= strtolower($v->questionnaire_text).', ';
                  }
                  if(in_array($v->id, $temp_spine_questionnaire_grp_arr['CV'])){
 if($key == 0) $spine_CV .= strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['RESP'])){
 if($key == 0) $spine_RESP .= strtolower($v->questionnaire_text).', ';
                  }
                  if(in_array($v->id, $temp_spine_questionnaire_grp_arr['GI'])){
 if($key == 0) $spine_GI .= strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['SKIN_BREAST'])){
 if($key == 0) $spine_SKINBREAST .= strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['ENDO'])){
 if($key == 0) $spine_ENDO .= strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['HEME_LYMPH'])){
 if($key == 0) $spine_HEMELYMPH .= strtolower($v->questionnaire_text).', ';
                  }

      }
   }


}
 // pr($q_general); pr($q_GIGU); pr($q_HEENT); pr($q_HEMEENDO); pr($q_CV); pr($q_NEUROMSK); pr($q_RESP); pr($q_PSYCH); pr($q_SKIN);   die;



$spine_MSK  = rtrim($spine_MSK , ', ');  $spine_NEURO  = rtrim($spine_NEURO , ', ');  $spine_GEN  = rtrim($spine_GEN , ', ');  $spine_ENT  = rtrim($spine_ENT , ', ');  $spine_CV  = rtrim($spine_CV , ', ');  $spine_RESP  = rtrim($spine_RESP , ', ');  $spine_GI  = rtrim($spine_GI , ', ');  $spine_SKINBREAST  = rtrim($spine_SKINBREAST , ', ');  $spine_ENDO  = rtrim($spine_ENDO , ', ');  $spine_HEMELYMPH  = rtrim($spine_HEMELYMPH , ', ');

$spine_MSK  = ltrim($spine_MSK , '. ');
$spine_NEURO  = ltrim($spine_NEURO , '. ');
$spine_GEN  = ltrim($spine_GEN , '. ');
$spine_ENT  = ltrim($spine_ENT , '. ');
$spine_CV  = ltrim($spine_CV , '. ');
$spine_RESP  = ltrim($spine_RESP , '. ');
$spine_GI  = ltrim($spine_GI , '. ');
$spine_SKINBREAST  = ltrim($spine_SKINBREAST , '. ');
$spine_ENDO  = ltrim($spine_ENDO , '. ');
$spine_HEMELYMPH  = ltrim($spine_HEMELYMPH , '. ');



$spine_MSK  = preg_replace('/Denies$/', '', $spine_MSK);  $spine_NEURO  = preg_replace('/Denies$/', '', $spine_NEURO);  $spine_GEN  = preg_replace('/Denies$/', '', $spine_GEN);  $spine_ENT  = preg_replace('/Denies$/', '', $spine_ENT);  $spine_CV  = preg_replace('/Denies$/', '', $spine_CV);  $spine_RESP  = preg_replace('/Denies$/', '', $spine_RESP);  $spine_GI  = preg_replace('/Denies$/', '', $spine_GI);  $spine_SKINBREAST  = preg_replace('/Denies$/', '', $spine_SKINBREAST);  $spine_ENDO  = preg_replace('/Denies$/', '', $spine_ENDO);  $spine_HEMELYMPH  = preg_replace('/Denies$/', '', $spine_HEMELYMPH);



/*$spine_MSK  = strtolower($spine_MSK);  $spine_NEURO  = strtolower($spine_NEURO);  $spine_GEN  = strtolower($spine_GEN);  $spine_ENT  = strtolower($spine_ENT);  $spine_CV  = strtolower($spine_CV);  $spine_RESP  = strtolower($spine_RESP);  $spine_GI  = strtolower($spine_GI);  $spine_SKINBREAST  = strtolower($spine_SKINBREAST);  $spine_ENDO  = strtolower($spine_ENDO);  $spine_HEMELYMPH  = strtolower($spine_HEMELYMPH); */





}


if($user_detail->specialization_id == 3){  // for specialization id 3 related logic for health questionaire

// John:The default for orthopedics modules is 2 from each of the following:
// GEN, EYES, ENT, CV, RESP, NEURO, MSK, GI, GU, SKIN/BREAST, ENDO, HEME/LYMPH, ALL/IMM, PSYCH

      // pr($all_questionnaire_arr); die;
      $temp_ortho_questionnaire_grp_arr = array();  // we are creating new source array and take only those  options that are needed in orthopedic module
      $temp_ortho_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[32] ;
      $temp_ortho_questionnaire_grp_arr['EYES'] = $all_questionnaire_arr[12] ;
      $temp_ortho_questionnaire_grp_arr['ENT'] = array_merge($all_questionnaire_arr[13], $all_questionnaire_arr[14], $all_questionnaire_arr[16])  ;
      $temp_ortho_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[18] ;
      $temp_ortho_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[19] ;
      $temp_ortho_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[20] ;
      $temp_ortho_questionnaire_grp_arr['MSK'] = $all_questionnaire_arr[21] ;
      $temp_ortho_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[22] ;
      $temp_ortho_questionnaire_grp_arr['GU'] = $all_questionnaire_arr[23] ;
      $temp_ortho_questionnaire_grp_arr['SKIN_BREAST'] = array_merge($all_questionnaire_arr[24], $all_questionnaire_arr[25])  ;
      $temp_ortho_questionnaire_grp_arr['ENDO'] = $all_questionnaire_arr[28] ;
      $temp_ortho_questionnaire_grp_arr['HEME_LYMPH'] = $all_questionnaire_arr[26] ;
      // for 27, 30, 31 there is no  data so we commented it temporarily, when client provide data then we will uncomment it
      // $temp_ortho_questionnaire_grp_arr['HEME_LYMPH'] = $all_questionnaire_arr[27] ;
      // $temp_ortho_questionnaire_grp_arr['ALL_IMM'] = $all_questionnaire_arr[30] ;
      // $temp_ortho_questionnaire_grp_arr['ALL_IMM'] = $all_questionnaire_arr[31] ;
      $temp_ortho_questionnaire_grp_arr['PSYCH'] = $all_questionnaire_arr[29] ;

// pr($temp_ortho_questionnaire_grp_arr);


// pr($user_detail->chief_compliant_userdetail->questionnaire_detail); die;
if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail)) {

             $res_ar = array(0 => 'NO', 1 => 'YES' , 2 => "I DON'T KNOW");

$ortho_GEN  = '';  $ortho_EYES  = '';  $ortho_ENT  = '';  $ortho_CV  = '';  $ortho_RESP  = '';  $ortho_NEURO  = '';  $ortho_MSK  = '';  $ortho_GI  = '';  $ortho_GU  = '';  $ortho_SKINBREAST  = '';  $ortho_ENDO = '';  $ortho_HEMELYMPH  = '';  $ortho_PSYCH  = '';

             foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value) {
              foreach($value as $k =>$v) {
// pr($v); die;

    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose
    $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;


                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GEN'])){
 if($key == 1) $ortho_GEN .= '+'.strtolower($v->questionnaire_text).', ';
                  }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['EYES'])){
 if($key == 1) $ortho_EYES .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['ENT'])){
 if($key == 1) $ortho_ENT .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                  if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['CV'])){
 if($key == 1) $ortho_CV .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                  if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['RESP'])){
 if($key == 1) $ortho_RESP .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['NEURO'])){
 if($key == 1) $ortho_NEURO .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                  if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['MSK'])){
 if($key == 1) $ortho_MSK .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GI'])){
 if($key == 1) $ortho_GI .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GU'])){
 if($key == 1) $ortho_GU .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['SKIN_BREAST'])){
 if($key == 1) $ortho_SKINBREAST .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['ENDO'])){
 if($key == 1) $ortho_ENDO .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['HEME_LYMPH'])){
 if($key == 1) $ortho_HEMELYMPH .= '+'.strtolower($v->questionnaire_text).', ';
                  }
                  if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['PSYCH'])){
 if($key == 1) $ortho_PSYCH .= '+'.strtolower($v->questionnaire_text).', ';
                  }



      }
   }


$ortho_GEN   = rtrim($ortho_GEN , ', ');  $ortho_EYES   = rtrim($ortho_EYES , ', ');  $ortho_ENT   = rtrim($ortho_ENT , ', ');  $ortho_CV   = rtrim($ortho_CV , ', ');  $ortho_RESP   = rtrim($ortho_RESP , ', ');  $ortho_NEURO   = rtrim($ortho_NEURO , ', ');  $ortho_MSK   = rtrim($ortho_MSK , ', ');  $ortho_GI   = rtrim($ortho_GI , ', ');  $ortho_GU   = rtrim($ortho_GU , ', ');  $ortho_SKINBREAST   = rtrim($ortho_SKINBREAST , ', ');  $ortho_ENDO  = rtrim($ortho_ENDO , ', ');  $ortho_HEMELYMPH   = rtrim($ortho_HEMELYMPH , ', ');   $ortho_PSYCH   = rtrim($ortho_PSYCH , ', ');

$ortho_GEN  .= '. Denies ';  $ortho_EYES  .= '. Denies ';  $ortho_ENT  .= '. Denies ';  $ortho_CV  .= '. Denies ';  $ortho_RESP  .= '. Denies ';  $ortho_NEURO  .= '. Denies ';  $ortho_MSK  .= '. Denies ';  $ortho_GI  .= '. Denies ';  $ortho_GU  .= '. Denies ';  $ortho_SKINBREAST  .= '. Denies ';  $ortho_ENDO .= '. Denies ';  $ortho_HEMELYMPH  .= '. Denies '; $ortho_PSYCH  .= '. Denies ';



             foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value) {
              foreach($value as $k =>$v) {
// pr($v); die;

    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose
    $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;


                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GEN'])){
 if($key == 0) $ortho_GEN .= strtolower($v->questionnaire_text).', ';
                  }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['EYES'])){
 if($key == 0) $ortho_EYES .= strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['ENT'])){
 if($key == 0) $ortho_ENT .= strtolower($v->questionnaire_text).', ';
                  }
                  if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['CV'])){
 if($key == 0) $ortho_CV .= strtolower($v->questionnaire_text).', ';
                  }
                  if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['RESP'])){
 if($key == 0) $ortho_RESP .= strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['NEURO'])){
 if($key == 0) $ortho_NEURO .= strtolower($v->questionnaire_text).', ';
                  }
                  if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['MSK'])){
 if($key == 0) $ortho_MSK .= strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GI'])){
 if($key == 0) $ortho_GI .= strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GU'])){
 if($key == 0) $ortho_GU .= strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['SKIN_BREAST'])){
 if($key == 0) $ortho_SKINBREAST .= strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['ENDO'])){
 if($key == 0) $ortho_ENDO .= strtolower($v->questionnaire_text).', ';
                  }
                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['HEME_LYMPH'])){
 if($key == 0) $ortho_HEMELYMPH .= strtolower($v->questionnaire_text).', ';
                  }
                  if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['PSYCH'])){
 if($key == 0) $ortho_PSYCH .= strtolower($v->questionnaire_text).', ';
                  }
      }
   }


}
 // pr($q_general); pr($q_GIGU); pr($q_HEENT); pr($q_HEMEENDO); pr($q_CV); pr($q_NEUROMSK); pr($q_RESP); pr($q_PSYCH); pr($q_SKIN);   die;

$ortho_GEN   = rtrim($ortho_GEN , ', ');  $ortho_EYES   = rtrim($ortho_EYES , ', ');  $ortho_ENT   = rtrim($ortho_ENT , ', ');  $ortho_CV   = rtrim($ortho_CV , ', ');  $ortho_RESP   = rtrim($ortho_RESP , ', ');  $ortho_NEURO   = rtrim($ortho_NEURO , ', ');  $ortho_MSK   = rtrim($ortho_MSK , ', ');  $ortho_GI   = rtrim($ortho_GI , ', ');  $ortho_GU   = rtrim($ortho_GU , ', ');  $ortho_SKINBREAST   = rtrim($ortho_SKINBREAST , ', ');  $ortho_ENDO  = rtrim($ortho_ENDO , ', ');  $ortho_HEMELYMPH   = rtrim($ortho_HEMELYMPH , ', ');   $ortho_PSYCH   = rtrim($ortho_PSYCH , ', ');

$ortho_GEN   = ltrim($ortho_GEN , '. ');
$ortho_EYES   = ltrim($ortho_EYES , '. ');
$ortho_ENT   = ltrim($ortho_ENT , '. ');
$ortho_CV   = ltrim($ortho_CV , '. ');
$ortho_RESP   = ltrim($ortho_RESP , '. ');
$ortho_NEURO   = ltrim($ortho_NEURO , '. ');
$ortho_MSK   = ltrim($ortho_MSK , '. ');
$ortho_GI   = ltrim($ortho_GI , '. ');
$ortho_GU   = ltrim($ortho_GU , '. ');
$ortho_SKINBREAST   = ltrim($ortho_SKINBREAST , '. ');
$ortho_ENDO  = ltrim($ortho_ENDO , '. ');
$ortho_HEMELYMPH   = ltrim($ortho_HEMELYMPH , '. ');
$ortho_PSYCH   = ltrim($ortho_PSYCH , '. ');



$ortho_GEN  = preg_replace('/Denies$/', '', $ortho_GEN);  $ortho_EYES  = preg_replace('/Denies$/', '', $ortho_EYES);  $ortho_ENT  = preg_replace('/Denies$/', '', $ortho_ENT);  $ortho_CV  = preg_replace('/Denies$/', '', $ortho_CV);  $ortho_RESP  = preg_replace('/Denies$/', '', $ortho_RESP);  $ortho_NEURO  = preg_replace('/Denies$/', '', $ortho_NEURO);  $ortho_MSK  = preg_replace('/Denies$/', '', $ortho_MSK);  $ortho_GI  = preg_replace('/Denies$/', '', $ortho_GI);  $ortho_GU  = preg_replace('/Denies$/', '', $ortho_GU);  $ortho_SKINBREAST  = preg_replace('/Denies$/', '', $ortho_SKINBREAST);  $ortho_ENDO = preg_replace('/Denies$/', '', $ortho_ENDO);  $ortho_HEMELYMPH  = preg_replace('/Denies$/', '', $ortho_HEMELYMPH);   $ortho_PSYCH  = preg_replace('/Denies$/', '', $ortho_PSYCH);

}

$oncology_GEN  = ''; $oncology_EYE = ''; $oncology_ENT = ''; $oncology_CV = ''; $oncology_RESP = ''; $oncology_GI = ''; $oncology_GU = ''; $oncology_MSK = ''; $oncology_SKIN = ''; $oncology_BREAST = ''; $oncology_NEURO = ''; $oncology_PSYCH = ''; $oncology_ENDO = ''; $oncology_HEME_LYMPH = ''; $oncology_ALL_IMM = '';


if($user_detail->specialization_id == 8)

{
    // we are creating new source array and take only those  options that are needed in cancer module
    $temp_cancer_questionnaire_grp_arr = array();
    if(isset($all_questionnaire_arr[36])){
      $temp_cancer_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[36] ;
    }

    if(isset($all_questionnaire_arr[37])){
      $temp_cancer_questionnaire_grp_arr['EYES'] = $all_questionnaire_arr[37] ;
    }

    if(isset($all_questionnaire_arr[38])){
      $temp_cancer_questionnaire_grp_arr['ENT'] = $all_questionnaire_arr[38] ;
    }

    if(isset($all_questionnaire_arr[39])){
      $temp_cancer_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[39] ;
    }

    if(isset($all_questionnaire_arr[40])){
      $temp_cancer_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[40] ;
    }

    if(isset($all_questionnaire_arr[41])){
      $temp_cancer_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[41] ;
    }
    if(isset($all_questionnaire_arr[42])){
      $temp_cancer_questionnaire_grp_arr['GU'] = $all_questionnaire_arr[42] ;
    }
    if(isset($all_questionnaire_arr[43])){
      $temp_cancer_questionnaire_grp_arr['MSK'] = $all_questionnaire_arr[43] ;
    }
    if(isset($all_questionnaire_arr[44])){
      $temp_cancer_questionnaire_grp_arr['SKIN'] = $all_questionnaire_arr[44] ;
    }
    if(isset($all_questionnaire_arr[45])){
      $temp_cancer_questionnaire_grp_arr['BREAST'] = $all_questionnaire_arr[45] ;
    }
    if(isset($all_questionnaire_arr[46])){
      $temp_cancer_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[46] ;
    }

    if(isset($all_questionnaire_arr[47])){
      $temp_cancer_questionnaire_grp_arr['PSYCH'] = $all_questionnaire_arr[47] ;
    }
    if(isset($all_questionnaire_arr[48])){
      $temp_cancer_questionnaire_grp_arr['ENDO'] = $all_questionnaire_arr[48] ;
    }
    if(isset($all_questionnaire_arr[49])){
      $temp_cancer_questionnaire_grp_arr['HEME_LYMPH'] = $all_questionnaire_arr[49] ;
    }
    if(isset($all_questionnaire_arr[50])){

      $temp_cancer_questionnaire_grp_arr['ALL_IMM'] = $all_questionnaire_arr[50] ;
    }

    if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail))
    {
        $res_ar = array(0 => 'NO', 1 => 'YES' , 2 => "I DON'T KNOW");

        foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)
        {
            foreach($value as $k =>$v)
            {
                // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

                $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;

                $v->questionnaire_text  = strtolower($v->questionnaire_text);



                if(isset($temp_cancer_questionnaire_grp_arr['GEN']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GEN']))
                {

                    if($key == 1) $oncology_GEN .= '+'.$v->questionnaire_text.', ';

                }

                if(isset($temp_cancer_questionnaire_grp_arr['EYES']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['EYES']))
                {

                    if($key == 1) $oncology_EYE .= '+'.$v->questionnaire_text.', ';

                }

                if(isset($temp_cancer_questionnaire_grp_arr['ENT']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ENT']))
                {

                    if($key == 1) $oncology_ENT .= '+'.$v->questionnaire_text.', ';

                }

                if(isset($temp_cancer_questionnaire_grp_arr['CV']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['CV']))
                {

                    if($key == 1) $oncology_CV .= '+'.$v->questionnaire_text.', ';

                }

                if(isset($temp_cancer_questionnaire_grp_arr['RESP']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['RESP']))
                {

                    if($key == 1) $oncology_RESP .= '+'.$v->questionnaire_text.', ';

                }

                if(isset($temp_cancer_questionnaire_grp_arr['GI']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GI']))
                {

                    if($key == 1) $oncology_GI .= '+'.$v->questionnaire_text.', ';

                }

                if(isset($temp_cancer_questionnaire_grp_arr['GU']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GU']))
                {

                    if($key == 1) $oncology_GU .= '+'.$v->questionnaire_text.', ';

                }
                if(isset($temp_cancer_questionnaire_grp_arr['MSK']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['MSK']))
                {

                    if($key == 1) $oncology_MSK .= '+'.$v->questionnaire_text.', ';

                }
                if(isset($temp_cancer_questionnaire_grp_arr['SKIN']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['SKIN']))
                {

                    if($key == 1) $oncology_SKIN .= '+'.$v->questionnaire_text.', ';

                }
                if(isset($temp_cancer_questionnaire_grp_arr['BREAST']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['BREAST']))
                {

                    if($key == 1) $oncology_BREAST .= '+'.$v->questionnaire_text.', ';

                }
                if(isset($temp_cancer_questionnaire_grp_arr['NEURO']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['NEURO']))
                {

                    if($key == 1) $oncology_NEURO .= '+'.$v->questionnaire_text.', ';

                }
                if(isset($temp_cancer_questionnaire_grp_arr['PSYCH']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['PSYCH']))
                {

                    if($key == 1) $oncology_PSYCH .= '+'.$v->questionnaire_text.', ';

                }

                if(isset($temp_cancer_questionnaire_grp_arr['ENDO']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ENDO']))
                {

                    if($key == 1) $oncology_ENDO .= '+'.$v->questionnaire_text.', ';

                }
                if(isset($temp_cancer_questionnaire_grp_arr['HEME_LYMPH']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['HEME_LYMPH']))
                {

                    if($key == 1) $oncology_HEME_LYMPH .= '+'.$v->questionnaire_text.', ';

                }
                if(isset($temp_cancer_questionnaire_grp_arr['ALL_IMM']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ALL_IMM']))
                {

                    if($key == 1) $oncology_ALL_IMM .= '+'.$v->questionnaire_text.', ';

                }


            }

        }

        $oncology_GEN   = rtrim($oncology_GEN , ', ');  $oncology_EYE   = rtrim($oncology_EYE , ', ');  $oncology_ENT   = rtrim($oncology_ENT , ', ');  $oncology_CV   = rtrim($oncology_CV , ', ');  $oncology_RESP   = rtrim($oncology_RESP , ', ');  $oncology_GI   = rtrim($oncology_GI , ', ');  $oncology_GU   = rtrim($oncology_GU , ', ');  $oncology_MSK   = rtrim($oncology_MSK , ', ');  $oncology_SKIN   = rtrim($oncology_SKIN , ', ');  $oncology_BREAST   = rtrim($oncology_BREAST , ', ');  $oncology_NEURO  = rtrim($oncology_NEURO , ', ');  $oncology_PSYCH   = rtrim($oncology_PSYCH , ', ');   $oncology_ENDO   = rtrim($oncology_ENDO , ', '); $oncology_HEME_LYMPH   = rtrim($oncology_HEME_LYMPH , ', ');   $oncology_ALL_IMM   = rtrim($oncology_ALL_IMM , ', ');


        $oncology_GEN  .= '. Denies ';  $oncology_EYE  .= '. Denies ';  $oncology_ENT  .= '. Denies ';  $oncology_CV  .= '. Denies ';  $oncology_RESP  .= '. Denies ';  $oncology_GI  .= '. Denies ';  $oncology_GU  .= '. Denies ';  $oncology_MSK  .= '. Denies ';  $oncology_SKIN  .= '. Denies ';  $oncology_BREAST  .= '. Denies ';  $oncology_NEURO .= '. Denies ';  $oncology_PSYCH  .= '. Denies '; $oncology_ENDO  .= '. Denies '; $oncology_HEME_LYMPH  .= '. Denies '; $oncology_ALL_IMM  .= '. Denies ';


        foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)

        {

            foreach($value as $k =>$v)

            {
                // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

                $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;

                if(isset($temp_cancer_questionnaire_grp_arr['GEN']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GEN']))
                {

                    if($key == 0) $oncology_GEN .= $v->questionnaire_text.', ';

                }

                if(isset($temp_cancer_questionnaire_grp_arr['EYES']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['EYES']))
                {

                    if($key == 0) $oncology_EYE .= $v->questionnaire_text.', ';

                }

                if(isset($temp_cancer_questionnaire_grp_arr['ENT']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ENT']))
                {

                    if($key == 0) $oncology_ENT .= $v->questionnaire_text.', ';

                }

                if(isset($temp_cancer_questionnaire_grp_arr['CV']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['CV']))
                {

                    if($key == 0) $oncology_CV .= $v->questionnaire_text.', ';

                }

                if(isset($temp_cancer_questionnaire_grp_arr['RESP']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['RESP']))
                {

                    if($key == 0) $oncology_RESP .= $v->questionnaire_text.', ';

                }

                if(isset($temp_cancer_questionnaire_grp_arr['GI']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GI']))
                {

                    if($key == 0) $oncology_GI .= $v->questionnaire_text.', ';

                }

                if(isset($temp_cancer_questionnaire_grp_arr['GU']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GU']))
                {

                    if($key == 0) $oncology_GU .= $v->questionnaire_text.', ';

                }
                if(isset($temp_cancer_questionnaire_grp_arr['MSK']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['MSK']))
                {

                    if($key == 0) $oncology_MSK .= $v->questionnaire_text.', ';

                }
                if(isset($temp_cancer_questionnaire_grp_arr['SKIN']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['SKIN']))
                {

                    if($key == 0) $oncology_SKIN .= $v->questionnaire_text.', ';

                }
                if(isset($temp_cancer_questionnaire_grp_arr['BREAST']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['BREAST']))
                {

                    if($key == 0) $oncology_BREAST .= $v->questionnaire_text.', ';

                }
                if(isset($temp_cancer_questionnaire_grp_arr['NEURO']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['NEURO']))
                {

                    if($key == 0) $oncology_NEURO .= $v->questionnaire_text.', ';

                }
                if(isset($temp_cancer_questionnaire_grp_arr['PSYCH']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['PSYCH']))
                {

                    if($key == 0) $oncology_PSYCH .= $v->questionnaire_text.', ';

                }

                if(isset($temp_cancer_questionnaire_grp_arr['ENDO']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ENDO']))
                {

                    if($key == 0) $oncology_ENDO .= $v->questionnaire_text.', ';

                }
                if(isset($temp_cancer_questionnaire_grp_arr['HEME_LYMPH']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['HEME_LYMPH']))
                {

                    if($key == 0) $oncology_HEME_LYMPH .= $v->questionnaire_text.', ';

                }
                if(isset($temp_cancer_questionnaire_grp_arr['ALL_IMM']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ALL_IMM']))
                {

                    if($key == 0) $oncology_ALL_IMM .= $v->questionnaire_text.', ';

                }

            }

        }

        //calculate the ROS count, we calculate the number of group of health questionnaire to generate the cpt code
       // $positive_ros_count = count($temp_cancer_questionnaire_grp_arr);
    }

   $oncology_GEN   = rtrim($oncology_GEN , ', ');  $oncology_EYE   = rtrim($oncology_EYE , ', ');  $oncology_ENT   = rtrim($oncology_ENT , ', ');  $oncology_CV   = rtrim($oncology_CV , ', ');  $oncology_RESP   = rtrim($oncology_RESP , ', ');  $oncology_GI   = rtrim($oncology_GI , ', ');  $oncology_GU   = rtrim($oncology_GU , ', ');  $oncology_MSK   = rtrim($oncology_MSK , ', ');  $oncology_SKIN   = rtrim($oncology_SKIN , ', ');  $oncology_BREAST   = rtrim($oncology_BREAST , ', ');  $oncology_NEURO  = rtrim($oncology_NEURO , ', ');  $oncology_PSYCH   = rtrim($oncology_PSYCH , ', ');   $oncology_ENDO   = rtrim($oncology_ENDO , ', '); $oncology_HEME_LYMPH   = rtrim($oncology_HEME_LYMPH , ', ');   $oncology_ALL_IMM   = rtrim($oncology_ALL_IMM , ', ');

    $oncology_GEN   = ltrim($oncology_GEN , '. ');
    $oncology_EYE   = ltrim($oncology_EYE , '. ');
    $oncology_ENT   = ltrim($oncology_ENT , '. ');
    $oncology_CV   = ltrim($oncology_CV , '. ');
    $oncology_RESP   = ltrim($oncology_RESP , '. ');
    $oncology_GI   = ltrim($oncology_GI , '. ');
    $oncology_GU   = ltrim($oncology_GU , '. ');
    $oncology_MSK   = ltrim($oncology_MSK , '. ');
    $oncology_SKIN   = ltrim($oncology_SKIN , '. ');
     $oncology_BREAST   = ltrim($oncology_BREAST , '. ');
     $oncology_NEURO  = ltrim($oncology_NEURO , '. ');
     $oncology_PSYCH   = ltrim($oncology_PSYCH , '. ');
     $oncology_ENDO   = ltrim($oncology_ENDO , '. ');
    $oncology_HEME_LYMPH   = ltrim($oncology_HEME_LYMPH , '. ');
    $oncology_ALL_IMM   = ltrim($oncology_ALL_IMM , '. ');

    $oncology_GEN  = preg_replace('/Denies$/', '', $oncology_GEN);
    $oncology_EYE  = preg_replace('/Denies$/', '', $oncology_EYE);
    $oncology_ENT  = preg_replace('/Denies$/', '', $oncology_ENT);
    $oncology_CV  = preg_replace('/Denies$/', '', $oncology_CV);
    $oncology_RESP  = preg_replace('/Denies$/', '', $oncology_RESP);
    $oncology_GI  = preg_replace('/Denies$/', '', $oncology_GI);
    $oncology_GU  = preg_replace('/Denies$/', '', $oncology_GU);
    $oncology_MSK  = preg_replace('/Denies$/', '', $oncology_MSK);
    $oncology_SKIN  = preg_replace('/Denies$/', '', $oncology_SKIN);
    $oncology_BREAST  = preg_replace('/Denies$/', '', $oncology_BREAST);
    $oncology_NEURO  = preg_replace('/Denies$/', '', $oncology_NEURO);
    $oncology_PSYCH = preg_replace('/Denies$/', '', $oncology_PSYCH);
    $oncology_ENDO  = preg_replace('/Denies$/', '', $oncology_ENDO);
    $oncology_HEME_LYMPH  = preg_replace('/Denies$/', '', $oncology_HEME_LYMPH);
    $oncology_ALL_IMM  = preg_replace('/Denies$/', '', $oncology_ALL_IMM);

}

if($user_detail->specialization_id == 1 || $user_detail->specialization_id == 2 || $user_detail->specialization_id == 5 || $user_detail->specialization_id == 6)
{
 // For specialization id 1,2 related health questionaire logic

  $temp_general_health_questionnaire_grp_arr = array();

    //copd condition additional health questionnaire
    $health_associated_sym = array(

        'CV' => array('chest tightness'),
        'RESP' => array('SOB','cough','cyanosis','dyspnea at rest','DOE','hemoptysis')
    );
    // we are creating new source array and take only those  options that are needed in chronic condition module

    if($user_detail->chief_compliant_userdetail->current_step_id->id == 18 && !empty($user_detail->chief_compliant_userdetail->chronic_condition) && is_array($user_detail->chief_compliant_userdetail->chronic_condition)){

        if(in_array("dmii", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[2] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[6] ;
        }

        if(in_array("cad", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[2] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[6] ;

        }

        if(in_array("chf", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['PSYCH'] = $all_questionnaire_arr[8] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[6] ;
        }

        if(in_array("htn", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[7] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[6] ;
        }

        if(in_array("copd", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[2] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['MSK'] = $all_questionnaire_arr[21] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = isset($temp_general_health_questionnaire_grp_arr['NEURO']) ? array_merge($temp_general_health_questionnaire_grp_arr['NEURO'], $all_questionnaire_arr[20]) : $all_questionnaire_arr[20];
            $temp_general_health_questionnaire_grp_arr['SKIN'] = $all_questionnaire_arr[24] ;
            $temp_general_health_questionnaire_grp_arr['PSYCH'] = $all_questionnaire_arr[8] ;
            $temp_general_health_questionnaire_grp_arr['ENT'] = $all_questionnaire_arr[35] ;
            $temp_general_health_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[7] ;
        }

        if(in_array("asthma", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[7] ;
            $temp_general_health_questionnaire_grp_arr['PSYCH'] = $all_questionnaire_arr[8] ;
            $temp_general_health_questionnaire_grp_arr['EYES'] = $all_questionnaire_arr[12] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = isset($temp_general_health_questionnaire_grp_arr['NEURO']) ? array_merge($temp_general_health_questionnaire_grp_arr['NEURO'], $all_questionnaire_arr[20]) : $all_questionnaire_arr[20];
            $temp_general_health_questionnaire_grp_arr['MSK'] = $all_questionnaire_arr[21] ;
            $temp_general_health_questionnaire_grp_arr['GI'] = isset($temp_general_health_questionnaire_grp_arr['GI']) ? array_merge($temp_general_health_questionnaire_grp_arr['GI'], $all_questionnaire_arr[22]) : $all_questionnaire_arr[22];
            $temp_general_health_questionnaire_grp_arr['SKIN'] = $all_questionnaire_arr[24] ;
            $temp_general_health_questionnaire_grp_arr['ENT'] = $all_questionnaire_arr[35] ;
        }
    }

$q_general = ''; $q_GIGU = '';  $q_HEENT = '';  $q_HEMEENDO = ''; $q_CV = ''; $q_NEUROMSK = ''; $q_RESP = ''; $q_PSYCH = '' ; $q_SKIN = ''; $q_CV_RESP = '';
        $q_THROAT = ""; $q_ENT = ''; $q_MSK = ''; $q_NEURO = ''; $q_GI = ''; $q_GU = ''; $q_EYES = '';
// pr($user_detail->chief_compliant_userdetail->questionnaire_detail); die;
if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail)) {

             $res_ar = array(0 => 'NO', 1 => 'YES' , 2 => "I DON'T KNOW");

             foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value) {
              foreach($value as $k =>$v) {
// pr($v); die;

    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose
    $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;

     if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){

                    if(in_array($v->id, $all_questionnaire_arr[1])){
                        if($key == 1) $q_general .= '+'.$v->questionnaire_text.', ';
                    }

                    if(in_array($v->id, $all_questionnaire_arr[5])){
                        if($key == 1) $q_CV .= '+'.$v->questionnaire_text.', ';
                    }

                    if(in_array($v->id, $all_questionnaire_arr[7])){
                        if($key == 1) $q_RESP .= '+'.$v->questionnaire_text.', ';
                    }
                    if(in_array($v->id, $all_questionnaire_arr[8])){
                        if($key == 1) $q_PSYCH .= '+'.$v->questionnaire_text.', ';
                    }
                    if(in_array($v->id, $all_questionnaire_arr[9])){
                        if($key == 1) $q_SKIN .= '+'.$v->questionnaire_text.', ';
                    }

                    if(in_array($v->id, $all_questionnaire_arr[20])){
                        if($key == 1) $q_NEURO .= '+'.$v->questionnaire_text.', ';
                    }

                    if(in_array($v->id, $all_questionnaire_arr[21])){
                        if($key == 1) $q_MSK .= '+'.$v->questionnaire_text.', ';
                    }

                    if(in_array($v->id, $all_questionnaire_arr[22])){
                        if($key == 1) $q_GI .= '+'.$v->questionnaire_text.', ';
                    }

                    if(in_array($v->id, $all_questionnaire_arr[23])){
                        if($key == 1) $q_GU .= '+'.$v->questionnaire_text.', ';
                    }

                    if(in_array($v->id, $all_questionnaire_arr[35])){
                        if($key == 1) $q_ENT .= '+'.$v->questionnaire_text.', ';
                    }
                }
                elseif($user_detail->chief_compliant_userdetail->current_step_id->id == 18)
                {
                    if(isset($temp_general_health_questionnaire_grp_arr['GEN']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['GEN'])){
                        if($key == 1) $q_general .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['GI']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['GI'])){
                        if($key == 1) $q_GI .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['CV']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['CV'])){
                        if($key == 1) $q_CV .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['NEURO']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['NEURO'])){
                        if($key == 1) $q_NEURO .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['RESP']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['RESP'])){
                        if($key == 1) $q_RESP .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['PSYCH']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['PSYCH'])){
                        if($key == 1) $q_PSYCH .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['MSK']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['MSK'])){
                        if($key == 1) $q_MSK .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['SKIN']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['SKIN'])){
                        if($key == 1) $q_SKIN .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['ENT']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['ENT'])){
                        if($key == 1) $q_ENT .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['EYES']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['EYES'])){
                        if($key == 1) $q_EYES .= '+'.$v->questionnaire_text.', ';
                    }

                }
                else{

                  if(in_array($v->id, $all_questionnaire_arr[1])){
   if($key == 1) $q_general .= '+'.strtolower($v->questionnaire_text).', ';
                    }

                  if(in_array($v->id, $all_questionnaire_arr[2])){
   if($key == 1) $q_GIGU .= '+'.strtolower($v->questionnaire_text).', ';
                    }
                  if(in_array($v->id, $all_questionnaire_arr[3])){
   if($key == 1) $q_HEENT .= '+'.strtolower($v->questionnaire_text).', ';
                    }
                    if(in_array($v->id, $all_questionnaire_arr[4])){
   if($key == 1) $q_HEMEENDO .= '+'.strtolower($v->questionnaire_text).', ';
                    }
                    if(in_array($v->id, $all_questionnaire_arr[5])){
   if($key == 1) $q_CV .= '+'.strtolower($v->questionnaire_text).', ';
                    }
                  if(in_array($v->id, $all_questionnaire_arr[6])){
   if($key == 1) $q_NEUROMSK .= '+'.strtolower($v->questionnaire_text).', ';
                    }
                    if(in_array($v->id, $all_questionnaire_arr[7])){
   if($key == 1) $q_RESP .= '+'.strtolower($v->questionnaire_text).', ';
                    }
                  if(in_array($v->id, $all_questionnaire_arr[8])){
   if($key == 1) $q_PSYCH .= '+'.strtolower($v->questionnaire_text).', ';
                    }
                  if(in_array($v->id, $all_questionnaire_arr[9])){
   if($key == 1) $q_SKIN .= '+'.strtolower($v->questionnaire_text).', ';
                    }

                    if(in_array($v->id, $all_questionnaire_arr[33])){
   if($key == 1) $q_CV_RESP .= '+'.strtolower($v->questionnaire_text).', ';
                    }

                  if(in_array($v->id, $all_questionnaire_arr[34])){
   if($key == 1) $q_THROAT .= '+'.strtolower($v->questionnaire_text).', ';
                    }
                  }

      }
   }

   //set some associated symptom at end of healthquestionnaire
        $temp_posivite_sym = explode(", ", $positive_symptom);
        if($user_detail->chief_compliant_userdetail->current_step_id->id == 18 && !empty($temp_posivite_sym) && in_array("copd", $user_detail->chief_compliant_userdetail->chronic_condition)){

            foreach ($temp_posivite_sym as $sym_key => $sym_value) {

               //set the CV symptoms
                if(isset($temp_general_health_questionnaire_grp_arr['CV']) && isset($health_associated_sym['CV']) && in_array($sym_value, $health_associated_sym['CV'])){

                    $q_CV .= '+'.$sym_value.', ';
                }

                if(isset($temp_general_health_questionnaire_grp_arr['RESP']) && isset($health_associated_sym['RESP']) && in_array($sym_value, $health_associated_sym['RESP'])){

                    $q_RESP .= '+'.$sym_value.', ';
                }
            }
        }

   $q_general = rtrim($q_general , ', '); $q_GIGU = rtrim($q_GIGU , ', ');  $q_HEENT = rtrim($q_HEENT , ', ');  $q_HEMEENDO = rtrim($q_HEMEENDO , ', '); $q_CV = rtrim($q_CV , ', '); $q_NEUROMSK = rtrim($q_NEUROMSK , ', '); $q_RESP = rtrim($q_RESP , ', '); $q_PSYCH = rtrim( $q_PSYCH , ', ') ; $q_SKIN = rtrim($q_SKIN , ', '); $q_CV_RESP = rtrim($q_CV_RESP , ', '); $q_THROAT = rtrim($q_THROAT , ', ');
   $q_NEURO = rtrim($q_NEURO , ', '); $q_GI = rtrim($q_GI , ', ');  $q_GU = rtrim($q_GU , ', ');  $q_MSK = rtrim($q_MSK , ', '); $q_ENT = rtrim($q_ENT , ', '); $q_EYES = rtrim($q_EYES , ', ');



$q_general .= '. Denies '; $q_GIGU .= '. Denies ';
$q_HEENT .= '. Denies ';  $q_HEMEENDO .= '. Denies ';  $q_CV .= '. Denies ';  $q_NEUROMSK .= '. Denies ';  $q_RESP .= '. Denies ';  $q_PSYCH .= '. Denies ';  $q_SKIN .= '. Denies '; $q_CV_RESP .= '. Denies '; $q_THROAT .= '. Denies ';
$q_NEURO .= '. Denies ';  $q_MSK .= '. Denies ';  $q_GU .= '. Denies ';  $q_GI .= '. Denies ';  $q_ENT .= '. Denies '; $q_EYES .= '. Denies ';


      foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value) {
              foreach($value as $k =>$v) {
// pr($v);
//                 pr($v->questionnaire_text) ;
    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose
    $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;

    if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){

                    if(in_array($v->id, $all_questionnaire_arr[1])){
                        if($key == 0) $q_general .= $v->questionnaire_text.', ';
                    }

                    if(in_array($v->id, $all_questionnaire_arr[5])){
                        if($key == 0) $q_CV .= $v->questionnaire_text.', ';
                    }

                    if(in_array($v->id, $all_questionnaire_arr[7])){
                        if($key == 0) $q_RESP .= $v->questionnaire_text.', ';
                    }
                    if(in_array($v->id, $all_questionnaire_arr[8])){
                        if($key == 0) $q_PSYCH .= $v->questionnaire_text.', ';
                    }
                    if(in_array($v->id, $all_questionnaire_arr[9])){
                        if($key == 0) $q_SKIN .= $v->questionnaire_text.', ';
                    }

                    if(in_array($v->id, $all_questionnaire_arr[20])){
                        if($key == 0) $q_NEURO .= $v->questionnaire_text.', ';
                    }

                    if(in_array($v->id, $all_questionnaire_arr[21])){
                        if($key == 0) $q_MSK .= $v->questionnaire_text.', ';
                    }

                    if(in_array($v->id, $all_questionnaire_arr[22])){
                        if($key == 0) $q_GI .= $v->questionnaire_text.', ';
                    }

                    if(in_array($v->id, $all_questionnaire_arr[23])){
                        if($key == 0) $q_GU .= $v->questionnaire_text.', ';
                    }

                    if(in_array($v->id, $all_questionnaire_arr[35])){
                        if($key == 0) $q_ENT .= $v->questionnaire_text.', ';
                    }
                }
                elseif($user_detail->chief_compliant_userdetail->current_step_id->id == 18)
                {
                    if(isset($temp_general_health_questionnaire_grp_arr['GEN']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['GEN'])){
                        if($key == 0) $q_general .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['GI']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['GI'])){
                        if($key == 0) $q_GI .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['CV']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['CV'])){
                        if($key == 0) $q_CV .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['NEURO']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['NEURO'])){
                        if($key == 0) $q_NEURO .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['RESP']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['RESP'])){
                        if($key == 0) $q_RESP .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['PSYCH']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['PSYCH'])){
                        if($key == 0) $q_PSYCH .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['MSK']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['MSK'])){
                        if($key == 0) $q_MSK .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['SKIN']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['SKIN'])){
                        if($key == 0) $q_SKIN .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['ENT']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['ENT'])){
                        if($key == 0) $q_ENT .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['EYES']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['EYES'])){
                        if($key == 0) $q_EYES .= $v->questionnaire_text.', ';
                    }
                }
                else
                {

                  if(in_array($v->id, $all_questionnaire_arr[1])){
   if($key == 0) $q_general .= strtolower($v->questionnaire_text).', ';
                      }

                  if(in_array($v->id, $all_questionnaire_arr[2])){
   if($key == 0) $q_GIGU .= strtolower($v->questionnaire_text).', ';
                      }
                  if(in_array($v->id, $all_questionnaire_arr[3])){
   if($key == 0) $q_HEENT .= strtolower($v->questionnaire_text).', ';
                      }
                      if(in_array($v->id, $all_questionnaire_arr[4])){
   if($key == 0) $q_HEMEENDO .= strtolower($v->questionnaire_text).', ';
                      }
                      if(in_array($v->id, $all_questionnaire_arr[5])){
   if($key == 0) $q_CV .= strtolower($v->questionnaire_text).', ';
                      }
                  if(in_array($v->id, $all_questionnaire_arr[6])){
   if($key == 0) $q_NEUROMSK .= strtolower($v->questionnaire_text).', ';
                      }
                      if(in_array($v->id, $all_questionnaire_arr[7])){
   if($key == 0) $q_RESP .= strtolower($v->questionnaire_text).', ';
                      }
                  if(in_array($v->id, $all_questionnaire_arr[8])){
   if($key == 0) $q_PSYCH .= strtolower($v->questionnaire_text).', ';
                      }
                  if(in_array($v->id, $all_questionnaire_arr[9])){
   if($key == 0) $q_SKIN .= strtolower($v->questionnaire_text).', ';
                      }

                    if(in_array($v->id, $all_questionnaire_arr[33])){
   if($key == 0) $q_CV_RESP .= strtolower($v->questionnaire_text).', ';
                      }

                  if(in_array($v->id, $all_questionnaire_arr[34])){
   if($key == 0) $q_THROAT .= strtolower($v->questionnaire_text).', ';
                      }
                    }

      }
   }


//set some associated symptom at end of healthquestionnaire
        $temp_negative_symptom = explode(", ", $negative_symptom);
        if($user_detail->chief_compliant_userdetail->current_step_id->id == 18 && !empty($temp_negative_symptom) && in_array("copd", $user_detail->chief_compliant_userdetail->chronic_condition)){

            foreach ($temp_negative_symptom as $sym_key => $sym_value) {

               //set the CV symptoms
                if(isset($temp_general_health_questionnaire_grp_arr['CV']) && isset($health_associated_sym['CV']) && in_array($sym_value, $health_associated_sym['CV'])){

                    $q_CV .= $sym_value.', ';
                }

                if(isset($temp_general_health_questionnaire_grp_arr['RESP']) && isset($health_associated_sym['RESP']) && in_array($sym_value, $health_associated_sym['RESP'])){

                    $q_RESP .= $sym_value.', ';
                }
            }
        }
}

 // pr($q_general); pr($q_GIGU); pr($q_HEENT); pr($q_HEMEENDO); pr($q_CV); pr($q_NEUROMSK); pr($q_RESP); pr($q_PSYCH); pr($q_SKIN);   die;
$q_general = rtrim($q_general , ', '); $q_GIGU = rtrim($q_GIGU , ', ');  $q_HEENT = rtrim($q_HEENT , ', ');  $q_HEMEENDO = rtrim($q_HEMEENDO , ', '); $q_CV = rtrim($q_CV , ', '); $q_NEUROMSK = rtrim($q_NEUROMSK , ', '); $q_RESP = rtrim($q_RESP , ', '); $q_PSYCH = rtrim( $q_PSYCH , ', ') ; $q_SKIN = rtrim($q_SKIN , ', '); $q_CV_RESP = rtrim($q_CV_RESP , ', '); $q_THROAT = rtrim($q_THROAT , ', ');
$q_NEURO = rtrim($q_NEURO , ', '); $q_GI = rtrim($q_GI , ', ');  $q_GU = rtrim($q_GU , ', ');  $q_MSK = rtrim($q_MSK , ', '); $q_ENT = rtrim($q_ENT , ', '); $q_EYES = rtrim($q_EYES, ', ');

$q_general = ltrim($q_general , '. ');
$q_GIGU = ltrim($q_GIGU , '. ');
$q_HEENT = ltrim($q_HEENT , '. ');
$q_HEMEENDO = ltrim($q_HEMEENDO , '. ');
$q_CV = ltrim($q_CV , '. ');
$q_NEUROMSK = ltrim($q_NEUROMSK , '. ');
 $q_RESP = ltrim($q_RESP , '. ');
 $q_PSYCH = ltrim( $q_PSYCH , '. ') ;
 $q_SKIN = ltrim($q_SKIN , '. ');
 $q_CV_RESP = ltrim($q_CV_RESP , '. ');
 $q_THROAT = ltrim($q_THROAT , '. ');
 $q_NEURO = ltrim($q_NEURO , '. '); $q_GI = ltrim($q_GI , '. ');  $q_GU = ltrim($q_GU , '. ');  $q_MSK = ltrim($q_MSK , '. '); $q_ENT = ltrim($q_ENT , '. ');
 $q_EYES = ltrim($q_EYES , '. ');


$q_general = preg_replace('/Denies$/', '', $q_general);
$q_GIGU = preg_replace('/Denies$/', '', $q_GIGU);
$q_HEENT = preg_replace('/Denies$/', '', $q_HEENT);
$q_HEMEENDO = preg_replace('/Denies$/', '', $q_HEMEENDO);
$q_CV = preg_replace('/Denies$/', '', $q_CV);
$q_NEUROMSK = preg_replace('/Denies$/', '', $q_NEUROMSK);
$q_RESP = preg_replace('/Denies$/', '', $q_RESP);
$q_PSYCH = preg_replace('/Denies$/', '', $q_PSYCH);
$q_SKIN = preg_replace('/Denies$/', '', $q_SKIN);
$q_CV_RESP = preg_replace('/Denies$/', '', $q_CV_RESP);
$q_THROAT = preg_replace('/Denies$/', '', $q_THROAT);

$q_NEURO = preg_replace('/Denies$/', '', $q_NEURO);
$q_GI = preg_replace('/Denies$/', '', $q_GI);
$q_GU = preg_replace('/Denies$/', '', $q_GU);
$q_MSK = preg_replace('/Denies$/', '', $q_MSK);
$q_ENT = preg_replace('/Denies$/', '', $q_ENT);

$q_NEURO = str_replace("loc", "LOC", $q_NEURO);
$q_PSYCH = str_replace("si", "SI", $q_PSYCH);
$q_EYES = preg_replace('/Denies$/', '', $q_EYES);

}
// $q_general = rtrim($q_general , 'denies '); $q_GIGU = rtrim($q_GIGU , 'denies ');  $q_HEENT = rtrim($q_HEENT , 'denies ');  $q_HEMEENDO = rtrim($q_HEMEENDO , 'denies '); $q_CV = rtrim($q_CV , 'denies '); $q_NEUROMSK = rtrim($q_NEUROMSK , 'denies '); $q_RESP = rtrim($q_RESP , 'denies '); $q_PSYCH = rtrim( $q_PSYCH , 'denies ') ; $q_SKIN = rtrim($q_SKIN , 'denies ');


// pr($q_general); pr($q_GIGU);pr($q_HEENT);pr($q_HEMEENDO);pr($q_CV);pr($q_NEUROMSK);pr($q_RESP);pr($q_PSYCH);pr($q_SKIN);

  $curnt_date = date('Y-m-d\TH:i:s');

  // preparing array that will finally convert into json



// get emr id as database

$internal_emr_id = '' ;
if(!empty($login_user->internal_emr_id)){

  $internal_emr_id =  Security::decrypt( base64_decode($login_user->internal_emr_id), SEC_KEY);


} else {
    $clinic_data_dump = '' ;
            $phone_no = $login_user->phone ;
              if(strlen($phone_no) == 10){
                  $phone_no_with_extra_1 = '1'.$phone_no ;
              }

              // elseif (strlen($phone_no) == 11 && $phone_no[0] == 1 ) {
              //     $phone_no_without_extra_1 = substr($phone_no, 1) ;
              // }


    if(!empty($login_user->organization->clinic_data_dump))
      $clinic_data_dump = $login_user->organization->clinic_data_dump;
      $file_name = WWW_ROOT.'clinic_data_dump/'.$clinic_data_dump;
          if(is_file($file_name) && file_exists($file_name)){
              $file = fopen($file_name, 'r');
              while (($line = fgetcsv($file)) !== FALSE) {
                //$line is an array of the csv elements
                // pr($line); die;
                  // if(in_array($email_id, $line)){
                // pr($line);
                  if(
                  in_array($phone_no, $line) ||
              (!empty($phone_no_with_extra_1) &&  in_array($phone_no_with_extra_1, $line))
           // (!empty($phone_no_without_extra_1) &&  in_array($phone_no_without_extra_1, $line))

                  ){
                    $internal_emr_id = $line[3]; // in the array index of emr id is 3
                    break;
                  }
              }
              // die;
              fclose($file);
          }


}
// pr($phone);
$ph_prefix = '+1 ';

if(strlen($phone) > 10 && $phone[0] == '1'){
  $phone = substr($phone, 1);
}
  $phone = substr_replace($phone, ' - ', 3, 0);
  $phone = substr_replace($phone, ' - ', 9, 0);
  $phone = $ph_prefix.$phone;

//chronic condition module note
$cronic_subjective_text_detail = $this->General->chronic_condition_subjective($user_detail->chief_compliant_userdetail,$positive_symptom,$negative_symptom,$meds);

$cronic_subjective_text = '';
$cronic_reason_for_visit = '';

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 18)
{

    $cronic_reason_for_visit = strtolower(is_array($user_detail->chief_compliant_userdetail->chronic_condition) ? implode(", ", $user_detail->chief_compliant_userdetail->chronic_condition) : $user_detail->chief_compliant_userdetail->chronic_condition);

    $ethinicity_trans = array(

        0 => 'asian',
        1 => 'caucasian',
        2 => 'hispanic',
        3 => 'pacific',
        4 => 'native american',
        5 => 'african american',
        9 => 'prefer not to say'
    );

    $ethinicity = !empty($login_user->ethinicity) && isset($ethinicity_trans[$login_user->ethinicity]) ? $ethinicity_trans[$login_user->ethinicity] : '';
    $cronic_subjective_text ='';
    $cronic_subjective_text .= $login_user->first_name.' is a '.$age." y.o. ".(!empty($ethinicity) ? $ethinicity.' ' : '').($login_user->gender == 0 ? 'female': "male");

       /* $cronic_subjective_text ='';
        $cronic_subjective_text .= $login_user->first_name.' is a '.$age." y.o. ".($login_user->race == 1 ? "hispanic" : "non hispanic").' '.($login_user->gender == 0 ? 'female': "male");*/

        if(!empty($pmh)){

            $cronic_subjective_text .= ' with a PMH significant for '.$pmh;
        }

        if(isset($cronic_subjective_text_detail['layman_summar'])){

            $cronic_subjective_text .= ' '.$cronic_subjective_text_detail['layman_summar'];
        }

        $cronic_subjective_text = str_replace(["dmii","Dm"], ['DM','DM'], $cronic_subjective_text);

        if(isset($cronic_subjective_text_detail['sh_layman'])){

            $sh = $cronic_subjective_text_detail['sh_layman'].''.$sh;
            //$sh = $cronic_subjective_text_detail['sh_layman'];
            $sh = str_replace(". aerobic", ". Aerobic", $sh);
            $sh = str_replace(". patient", ". Patient", $sh);
        }

        if(isset($cronic_subjective_text_detail['med_layman'])){

          $meds = (!empty($cronic_subjective_text_detail['med_layman']) ? $cronic_subjective_text_detail['med_layman'].', ': '').$meds;
          $meds = rtrim($meds,', ');
        }

        //update fh for chronic conditions module
        if(isset($cronic_subjective_text_detail['fh_cond']) && !empty($cronic_subjective_text_detail['fh_cond'])){

            $family_history = array();
            $family_relation = [1=>'F', 2=>'M', 3=>'PGM', 4=>'PGF', 5=>'MGM', 6=>'MGF', 7=>'Brother', 8=>'Sister', 9=>'Son', 10=>'Daughter'];
            if(!empty($login_user->family_history)){

                $family_history = unserialize((Security::decrypt(base64_decode($login_user->family_history), SEC_KEY)));
            }

            if(empty($family_history)){

                foreach ($cronic_subjective_text_detail['fh_cond'] as $key => $value) {

                    if(isset($value['members']) && !empty($value['members']) && is_array($value['members'])){

                      foreach ($value['members'] as $fkey => $fvalue) {

                        $temp_fh = $fvalue.' - ';
                        $temp_fh .= $value['name'];
                        $fh[] = $temp_fh;
                      }
                    }
                    else{

                        $temp_fh = $value['name'];
                        $fh[] = $temp_fh;
                    }
                }

            }
            else{

                $temp_chronic_fh = array_column($family_history, 'disease');

                foreach ($cronic_subjective_text_detail['fh_cond'] as $key => $value) {

                    $temp_fh_cond_key = array_search($value['name'], $temp_chronic_fh);

                    if($temp_fh_cond_key === false || (isset($value['members']) && $temp_fh_cond_key !== false && $value['members'] != $family_history[$temp_fh_cond_key]['name'])){

                        if(isset($value['members']) && !empty($value['members']) && is_array($value['members'])){

                          foreach ($value['members'] as $fkey => $fvalue) {

                            $temp_fh = $fvalue.' - ';
                            $temp_fh .= $value['name'];
                            $fh[] = $temp_fh;
                          }
                        }
                        else{

                            $temp_fh = $value['name'];
                            $fh[] = $temp_fh;
                        }


                    }
                }
            }
            // pr($cronic_subjective_text_detail['fh_cond']);
            // pr($family_history);die;

        }
}
// pr($phone); die;

// if($login_user->gender == 1) {  // prepare array for male user
$cnt = 1;
$document_section = array();

$line1 = 'Patient: '.h(ucfirst($login_user->last_name)).', '.h(ucfirst($login_user->first_name)).' DOB: '.(date('m-d-Y',strtotime($login_user->dob)) ).' Age: '.$age.' Sex: '.($login_user->gender == 1 ? 'M' : 'F') ;
// Line 2 - MRN: [##########]    Phone: ###-###-####
$line2 = 'MRN: '.$mrn.'    Phone: '.$phone ;
// Line 3 - Address: [Address], [City], [ST] [ZIP]
$line3 = 'Address: '.$login_user->address.', '.$login_user->city.', '.$login_user->state.' '.$login_user->zip.' Preferred Pharmacy: '.(!empty($login_user->pharmacy) ? $login_user->pharmacy : "none provided");
 // Line 4 - Encounter Date: mm/dd/yyyy   Provider: [PFNAME] [Credentials]

 $line4 = 'Encounter Date: '.$curdate.'   Provider: '.$user_detail->doctor->doctor_name.' '.$user_detail->doctor->credentials;
 // Line 5 - Facility: [Clinic Name]
 $line5 = 'Facility: '.$user_detail->organization->organization_name ;


$covid_screening = '';
$covid_layman = '';
//pr($user_detail->chief_compliant_userdetail);die;
if(($user_detail->chief_compliant_userdetail->current_step_id->id == 1 || $user_detail->chief_compliant_userdetail->current_step_id->id == 17) && !empty($user_detail->chief_compliant_userdetail->covid_detail)){

    if($user_detail->chief_compliant_userdetail->current_step_id->id == 1){
      $covid_screening = 0;
      foreach ($user_detail->chief_compliant_userdetail->covid_detail as $key => $value) {

          if($value['answer'] == 'Yes' && ($key == 141 || $key == 142)){

              $covid_screening = 1;
              //break;
          }

          if($key == 141 && $value['answer'] == 'Yes'){

              $covid_layman .= 'recent travel to affected geographical areas';
          }

          if($key == 142 && $value['answer'] == 'Yes'){

              $covid_layman .= ', close contact with laboratory-confirmed COVID-19 patient';
          }
      }

      if($covid_screening == 0){

          $hpi .= ' COVID-19 screening is negative. ';
          //$hpi .= $covid_layman;
      }
      else{

          $covid_layman = trim($covid_layman,', ');
          $hpi .= ' COVID-19 screening is positive for '.$covid_layman.'. ';
      }
    }

    if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){

        $covid_risk = 'Low';
        $covid_layman = '';

        foreach ($user_detail->chief_compliant_userdetail->covid_detail as $key => $value) {

            switch ($value['question_id']) {
                case 201:

                    if($value['answer'] == 'Yes'){

                      $covid_risk = 'High';
                      $covid_layman .= 'recent international travel, ';
                    }

                    break;

                case 204:

                    if($value['answer'] == 'Yes'){

                      $covid_risk = 'High';
                      $covid_layman .= 'recent domestic travel, ';
                    }
                    break;

                case 207:

                    if($value['answer'] == 'Yes'){

                      $covid_risk = 'High';
                      $covid_layman .= 'exposure to lab-confirmed COVID-19, ';
                    }
                    break;

                case 208:

                   if($value['answer'] == 'Yes'){

                      $covid_risk = 'High';
                      $covid_layman .= 'health care provider or first responder, ';
                    }
                    break;
            }

        }

        $covid_layman = rtrim($covid_layman,', ');
    }

}

//calculate the health exposure risk for covid module (step_id = 17)
$health_risk = '';
$health_layman  = '';
if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){

    $health_risk_score = 0;

    if($age >= 60 && $age < 70){

        $health_risk_score += 1;
    }
    elseif($age >= 70 && $age < 80){

        $health_risk_score += 2;
    }
    elseif($age >= 80){

        $health_risk_score += 4;
    }

    if(!empty($user_detail->chief_compliant_userdetail->focused_history_detail)){

        if(isset($user_detail->chief_compliant_userdetail->focused_history_detail[213])){

            $health_conditions = $user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer'];
            if(in_array("Chronic obstructive pulmonary disease (COPD)", $health_conditions)){

                $health_risk_score += 3;
                $health_layman .= 'COPD, ';
            }
            if(in_array("Heart disease (coronary artery disease)", $health_conditions)){

                $health_risk_score += 4;
                $health_layman .= 'CAD, ';
            }
            if(in_array("High blood pressure (hypertension)", $health_conditions)){

                $health_risk_score += 2;
                $health_layman .= 'HTN, ';
            }
            if(in_array("Diabetes", $health_conditions)){

                $health_risk_score += 2;
                $health_layman .= 'Diabetes, ';
            }
        }

        if(isset($user_detail->chief_compliant_userdetail->focused_history_detail[214]) && $user_detail->chief_compliant_userdetail->focused_history_detail[214]['answer'] == 'Yes'){

            $health_risk_score += 1;
            $health_layman .= 'current smoking';
        }

    }

    if($health_risk_score == 0){

        $health_risk = 'Low';
    }
    elseif($health_risk_score == 1){

        $health_risk = 'Moderate';
    }
    elseif($health_risk_score == 2 || $health_risk_score == 3){

        $health_risk = 'High';
    }
    else{

        $health_risk = 'Very high';
    }
    $health_layman = rtrim($health_layman,', ');
}

$phq_9_layman = '';
$phq_score = '';
if(!empty($user_detail->chief_compliant_userdetail->phq_9_detail) && $user_detail->chief_compliant_userdetail->current_step_id->id == 17){

    $phq_score = array_sum($user_detail->chief_compliant_userdetail->phq_9_detail);
    if($phq_score >= 2){

        $phq_9_layman = 'PHQ-2 is positive';
    }
    else{

        $phq_9_layman = 'PHQ-2 is negative';
    }

    $phq_9_layman = rtrim($phq_9_layman,', ').'. ';
}

if(!empty($hpi)){

  $hpi = $this->General->sentence_uppercase($hpi);
}

$cancer_layman_detail = $this->General->cancer_layman($user_detail->chief_compliant_userdetail, $login_user->gender);
$pre_op_post_op_detial_res = $this->General->pre_op_post_op_detail_layman($user_detail->chief_compliant_userdetail,$login_user->gender);
$pre_op_post_op_subjective_text = isset($pre_op_post_op_detial_res['layman_summar']) && !empty($pre_op_post_op_detial_res['layman_summar']) ? $login_user->first_name.' is a who is following up '.$pre_op_post_op_detial_res['layman_summar'] : "none provided";

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19){

  $cc = !empty($cancer_layman_detail['cancer_cc']) ? ucfirst($cancer_layman_detail['cancer_cc']) : "";
  $psh = !empty($cancer_layman_detail['sargical_hx']) ? $cancer_layman_detail['sargical_hx'].", ".$psh : $psh;
  $psh = trim($psh,', ');

  if(!empty($cancer_layman_detail['pmh'])){

    $pmh .= ", ".$cancer_layman_detail['pmh'];
  }

  $pmh = trim($pmh,', ');

  $cancer_hpi = "This is a ".$age." y.o. ".($login_user->gender == 0 ? "female" : 'male')." ".$cancer_layman_detail['hpi'];
  $hpi = trim($cancer_hpi,' ');
  $hpi = strip_tags($hpi);

  $oncology_NEURO = isset($cancer_layman_detail['qa_neuro']) && !empty($cancer_layman_detail['qa_neuro']) ? $cancer_layman_detail['qa_neuro'].(!empty($oncology_NEURO) ? ", ".$oncology_NEURO : '') : $oncology_NEURO;

  $oncology_GI = isset($cancer_layman_detail['qa_gi']) && !empty($cancer_layman_detail['qa_gi']) ? $cancer_layman_detail['qa_gi'].(!empty($oncology_GI) ? ", ".$oncology_GI : '') : $oncology_GI;

  $oncology_EYE = isset($cancer_layman_detail['qa_eye']) && !empty($cancer_layman_detail['qa_eye']) ? $cancer_layman_detail['qa_eye'].(!empty($oncology_EYE) ? ", ".$oncology_EYE : '') : $oncology_EYE;

  $oncology_PSYCH = isset($cancer_layman_detail['qa_psych']) && !empty($cancer_layman_detail['qa_psych']) ? $cancer_layman_detail['qa_psych'].(!empty($oncology_PSYCH) ? $oncology_PSYCH : '') : $oncology_PSYCH;

  $oncology_RESP = isset($cancer_layman_detail['qa_resp']) && !empty($cancer_layman_detail['qa_resp']) ? $cancer_layman_detail['qa_resp'].(!empty($oncology_RESP) ? ", ".$oncology_RESP : '') : $oncology_RESP;

  $oncology_CV = isset($cancer_layman_detail['qa_cv']) && !empty($cancer_layman_detail['qa_cv']) ? $cancer_layman_detail['qa_cv'].(!empty($oncology_CV) ? ", ".$oncology_CV : '') : $oncology_CV ;

  $oncology_SKIN = isset($cancer_layman_detail['qa_skin']) && !empty($cancer_layman_detail['qa_skin']) ? $cancer_layman_detail['qa_skin'].(!empty($oncology_SKIN) ? ", ".$oncology_SKIN : '') : $oncology_SKIN;

  $oncology_MSK = isset($cancer_layman_detail['qa_msk']) && !empty($cancer_layman_detail['qa_msk']) ? $cancer_layman_detail['qa_msk'].(!empty($oncology_MSK) ? ", ".$oncology_MSK : '') : $oncology_MSK;

  $oncology_GU = isset($cancer_layman_detail['qa_gu']) && !empty($cancer_layman_detail['qa_gu']) ? $cancer_layman_detail['qa_gu'].(!empty($oncology_GU) ? ", ".$oncology_GU : '') : $oncology_GU;

  $oncology_GEN = isset($cancer_layman_detail['qa_gen']) && !empty($cancer_layman_detail['qa_gen']) ? $cancer_layman_detail['qa_gen'].(!empty($oncology_GEN) ? ", ".$oncology_GEN : '') : $oncology_GEN;

  $oncology_HEME_LYMPH = isset($cancer_layman_detail['qa_heme_lymph']) && !empty($cancer_layman_detail['qa_heme_lymph']) ? $cancer_layman_detail['qa_heme_lymph'].(!empty($oncology_HEME_LYMPH) ? ", ".$oncology_HEME_LYMPH : '') : $oncology_HEME_LYMPH;

  $oncology_ENT = isset($cancer_layman_detail['qa_ent']) && !empty($cancer_layman_detail['qa_ent']) ? $cancer_layman_detail['qa_ent'].(!empty($oncology_ENT) ? ", ".$oncology_ENT : '') : $oncology_ENT;

  $oncology_ALL_IMM = isset($cancer_layman_detail['qa_all_imm']) && !empty($cancer_layman_detail['qa_all_imm']) ? $cancer_layman_detail['qa_all_imm'].(!empty($oncology_ALL_IMM) ? ", ".$oncology_ALL_IMM : '') : $oncology_ALL_IMM;

  $oncology_BREAST = isset($cancer_layman_detail['qa_breast']) && !empty($cancer_layman_detail['qa_breast']) ? $cancer_layman_detail['qa_breast'].(!empty($oncology_BREAST) ? ", ".$oncology_BREAST : '') : $oncology_BREAST;

  $oncology_GEN   = trim($oncology_GEN , ', ');
  $oncology_EYE   = trim($oncology_EYE , ', ');
  $oncology_ENT   = trim($oncology_ENT , ', ');
  $oncology_CV   = trim($oncology_CV , ', ');
  $oncology_RESP   = trim($oncology_RESP , ', ');
  $oncology_GI   = trim($oncology_GI , ', ');
  $oncology_GU   = trim($oncology_GU , ', ');
  $oncology_MSK   = trim($oncology_MSK , ', ');
  $oncology_SKIN   = trim($oncology_SKIN , ', ');
  $oncology_BREAST   = trim($oncology_BREAST , ', ');
  $oncology_NEURO  = trim($oncology_NEURO , ', ');
  $oncology_PSYCH   = trim($oncology_PSYCH , ', ');
  $oncology_ENDO   = trim($oncology_ENDO , ', ');
  $oncology_HEME_LYMPH   = trim($oncology_HEME_LYMPH , ', ');
  $oncology_ALL_IMM   = trim($oncology_ALL_IMM , ', ');

}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 17){

    $covid_subjective_detail = $this->General->covid_module_subjective($user_detail->chief_compliant_userdetail);
    $covid_subjective = "This is a ";
    if($covid_subjective_detail['is_pregnate'] == 1){

        $covid_subjective .= "currently pregnant ";
    }
    $covid_subjective .= $age." y.o. ".($login_user->gender == 0 ? 'F ': "M ");
    $covid_subjective .= $covid_subjective_detail['layman_summar'];
    $covid_subjective .= $covid_associated_symp;
    $covid_subjective .= $phq_9_layman;
}


if(empty($line1)) $line1 = 'none provided';
$document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $line1,
                "ObservationDate" => $curnt_date
            );
if(empty($line2)) $line2 = 'none provided';
$document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $line2,
                "ObservationDate" => $curnt_date
            );
if(empty($line3)) $line3 = 'none provided';
$document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $line3,
                "ObservationDate" => $curnt_date
            );
if(empty($line4)) $line4 = 'none provided';
$document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $line4,
                "ObservationDate" => $curnt_date
            );
if(empty($line5)) $line5 = 'none provided';
$document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $line5,
                "ObservationDate" => $curnt_date
            );


if($login_user->gender == 0 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 17 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 18){

    $document_section[] = array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  "SectionText" => 'BMI:',
                  "ObservationDate" => $curnt_date
              );

    if(empty($bmi)) $bmi = 'none provided';
    $document_section[] =  array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $bmi,
                "ObservationDate" => $curnt_date
            );
  }

if(!empty($cc))
{
  $document_section[] = array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  // "SectionText" => '#CC',
                  "SectionText" => 'CC',
                  "ObservationDate" => $curnt_date
              );
  $document_section[] = array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  "SectionText" => $cc,
                  "ObservationDate" => $curnt_date
              );
}
if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 4){

  $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#HPI',
                "SectionText" => 'SUBJECTIVE:',
                "ObservationDate" => $curnt_date
            );

if(empty($subjective)) $subjective = 'none provided';
$document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $hpi,
                "ObservationDate" => $curnt_date
            );
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 17){

  $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#HPI',
                "SectionText" => 'HPI:',
                "ObservationDate" => $curnt_date
            );

  if(empty($covid_subjective)) $covid_subjective = 'none provided';
  $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $covid_subjective,
                "ObservationDate" => $curnt_date
            );
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 18){

   $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#HPI',
                "SectionText" => 'REASON FOR VISIT:',
                "ObservationDate" => $curnt_date
            );

   $reason_for_visit = empty($cronic_reason_for_visit) ? "none provided" : "f/u ".$cronic_reason_for_visit.' management.';
   $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $reason_for_visit,
                "ObservationDate" => $curnt_date
            );

    $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#HPI',
                "SectionText" => 'SUBJECTIVE:',
                "ObservationDate" => $curnt_date
            );
    $subjective = empty($cronic_subjective_text) ? "none provided" : $cronic_subjective_text;
    $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $subjective,
                "ObservationDate" => $curnt_date
            );
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 16){

   $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#HPI',
                "SectionText" => 'REASON FOR VISIT:',
                "ObservationDate" => $curnt_date
            );

   $reason_for_visit = empty($follow_up_sx_detial_res['all_cc_name']) ? "none provided" : "f/u ".$follow_up_sx_detial_res['all_cc_name'];
   $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $reason_for_visit,
                "ObservationDate" => $curnt_date
            );

    $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#HPI',
                "SectionText" => 'SUBJECTIVE:',
                "ObservationDate" => $curnt_date
            );
    $subjective = empty($follow_up_sx_detial_res['layman_summar']) ? "none provided" : $follow_up_sx_detial_res['layman_summar'];
    $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $subjective,
                "ObservationDate" => $curnt_date
            );
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 20){

   $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => 'REASON FOR VISIT:',
                "ObservationDate" => $curnt_date
            );

   $reason_for_visit = (empty($pre_op_post_op_detial_res['reason_for_visit']) ? "none provided" : $pre_op_post_op_detial_res['reason_for_visit']);
   $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $reason_for_visit,
                "ObservationDate" => $curnt_date
            );

    $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => 'SUBJECTIVE:',
                "ObservationDate" => $curnt_date
            );
    $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $pre_op_post_op_subjective_text,
                "ObservationDate" => $curnt_date
            );
}


if($user_detail->specialization_id == 6 && ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 11 || ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 12 && $user_detail->chief_compliant_userdetail->follow_up_step_id == 11))){


  $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#HPI',
                "SectionText" => 'REASON FOR VISIT:',
                "ObservationDate" => $curnt_date
            );

  $reason_for_visit = '';
  if(empty($procudure_name) && empty($procedure_date)){

    $reason_for_visit = 'none provided';
  }
  else{

    $reason_for_visit = $procudure_name." day ".$procudure_since_date;
  }

  $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $reason_for_visit,
                "ObservationDate" => $curnt_date
            );


  $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#HPI',
                "SectionText" => 'SUBJECTIVE:',
                "ObservationDate" => $curnt_date
            );

if(empty($subjective)) $subjective = 'none provided';
$document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $subjective,
                "ObservationDate" => $curnt_date
            );

}
else{
  if(!in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [4,16,17,18,20])){

    $document_section[] = array(
                    "SetIdentifier" => $cnt++,
                    "ValueType" => "FT",
                    // "SectionText" => '#HPI',
                    "SectionText" => 'HPI',
                    "ObservationDate" => $curnt_date
                );
    // $document_section[] = array(
    //                 "SetIdentifier" => "17",
    //                 "ValueType" => "FT",
    //                 "SectionText" => $curtime,
    //                 "ObservationDate" => $curnt_date
    //             );

    if(empty($hpi)) $hpi = 'none provided';
    $document_section[] = array(
                    "SetIdentifier" => $cnt++,
                    "ValueType" => "FT",
                    "SectionText" => $hpi,
                    "ObservationDate" => $curnt_date
                );
  }
}

//not for covid module
if($user_detail->chief_compliant_userdetail->current_step_id['id'] != 17 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 18)
{
// female related field not present in orthopedics and orthopedics spine
if($login_user->gender == 0 && $user_detail->specialization_id != 3 && $user_detail->specialization_id != 4 &&  $user_detail->specialization_id != 7) { // only for female and not for orthopedic module

    if($user_detail->chief_compliant_userdetail->current_step_id['id'] != 19){
            $document_section[] = array(
                            "SetIdentifier" => $cnt++,
                            "ValueType" => "FT",
                            // "SectionText" => '#GYNHX',
                            "SectionText" => 'GYNHX',
                            "ObservationDate" => $curnt_date
                        );
            if(empty($lmp)) $lmp = 'none provided';
            $document_section[] = array(
                            "SetIdentifier" => $cnt++,
                            "ValueType" => "FT",
                            "SectionText" => $lmp,
                            "ObservationDate" => $curnt_date
                        );

          }
            $document_section[] =  array(
                            "SetIdentifier" => $cnt++,
                            "ValueType" => "FT",
                            "SectionText" => 'Paps:',
                            "ObservationDate" => $curnt_date
                        );
            if(empty($paps)) $paps = 'none provided';
            $document_section[] =  array(
                            "SetIdentifier" => $cnt++,
                            "ValueType" => "FT",
                            "SectionText" => $paps,
                            "ObservationDate" => $curnt_date
                        );
    }
//16 sep 2019
 /*if($user_detail->specialization_id != 3 && $user_detail->specialization_id != 4 && $user_detail->specialization_id != 7) {   */
if($user_detail->specialization_id == 2) {
$document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => 'STI:',
                "ObservationDate" => $curnt_date
            );
if(empty($sti)) $sti = 'none provided';
$document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $sti,
                "ObservationDate" => $curnt_date
            );
}
// female related field not present in orthopedics and orthopedics spine
  if($login_user->gender == 0  && $user_detail->specialization_id != 3 && $user_detail->specialization_id != 4 && $user_detail->specialization_id != 7) {
            $document_section[] = array(
                            "SetIdentifier" => $cnt++,
                            "ValueType" => "FT",
                            "SectionText" => 'Breast:',
                            "ObservationDate" => $curnt_date
                        ) ;
            if(empty($breast)) $breast = 'none provided';
            $document_section[] = array(
                            "SetIdentifier" => $cnt++,
                            "ValueType" => "FT",
                            "SectionText" => $breast,
                            "ObservationDate" => $curnt_date
                        ) ;

        }
 if($user_detail->specialization_id != 3 && $user_detail->specialization_id != 4 && $user_detail->specialization_id != 7) {

$document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => 'BCM:',
                "ObservationDate" => $curnt_date
            );
if(empty($bcm)) $bcm = 'none provided';
$document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $bcm,
                "ObservationDate" => $curnt_date
            );

}

        // if($login_user->gender == 0) {
// if($login_user['gender'] == 0 && $apt_id_data->specialization_id != 3) {
// female related field not present in orthopedics and orthopedics spine
      if($login_user->gender == 0  && $user_detail->specialization_id != 3 && $user_detail->specialization_id != 4 && $user_detail->specialization_id != 7 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 18) { // only for female and not for orthopedic module
                $document_section[] = array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                // "SectionText" => '#OBHX',
                                "SectionText" => 'OBHX',
                                "ObservationDate" => $curnt_date
                            );
                if(!empty($prev_birth_data)){
                    foreach ($prev_birth_data as $key => $value) {

                        $document_section[] = array(
                                        "SetIdentifier" => $cnt++,
                                        "ValueType" => "FT",
                                        "SectionText" => $value,
                                        "ObservationDate" => $curnt_date
                                    );

                    }
                } else{

                        $document_section[] = array(
                                        "SetIdentifier" => $cnt++,
                                        "ValueType" => "FT",
                                        "SectionText" => "none provided",
                                        "ObservationDate" => $curnt_date
                                    );

                }


            }
  }
$document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#MEDS',
                "SectionText" => 'MEDS',
                "ObservationDate" => $curnt_date
            );
if(empty($meds)) $meds = 'none provided';
$document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $meds,
                "ObservationDate" => $curnt_date
            );

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19)
{
    $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#MEDS',
                "SectionText" => 'Treatment Hx',
                "ObservationDate" => $curnt_date
            );
    if(empty($cancer_layman_detail['treatment_hx'])) $cancer_layman_detail['treatment_hx'] = 'none provided';
    $document_section[] = array(
                    "SetIdentifier" => $cnt++,
                    "ValueType" => "FT",
                    "SectionText" => $cancer_layman_detail['treatment_hx'],
                    "ObservationDate" => $curnt_date
                );
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] != 17)
{
  $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#PMH',
                "SectionText" => 'PMH',
                "ObservationDate" => $curnt_date
            );
  if(empty($pmh)) $pmh = 'none provided';
  $document_section[] = array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  "SectionText" => $pmh,
                  "ObservationDate" => $curnt_date
              );
}

$document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#SH',
                "SectionText" => 'SH',
                "ObservationDate" => $curnt_date
            );
if(empty($sh)) $sh = 'none provided';
$document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $sh,
                "ObservationDate" => $curnt_date
            );

if($user_detail->chief_compliant_userdetail->current_step_id['id'] != 17)
{
  $document_section[] = array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  // "SectionText" => '#PSH',
                  "SectionText" => 'PSH',
                  "ObservationDate" => $curnt_date
              );
  if(empty($psh)) $psh = 'none provided';
  $document_section[] = array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  "SectionText" => $psh,
                  "ObservationDate" => $curnt_date
              );
}

$document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#FH',
                "SectionText" => 'FH',
                "ObservationDate" => $curnt_date
            );


if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19){


}
else{

    if(!empty($fh)){
            foreach ($fh as $key => $value) {
                $document_section[] = array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $value,
                                "ObservationDate" => $curnt_date
                            );
            }

        } else {

                $document_section[] = array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'none provided',
                                "ObservationDate" => $curnt_date
                            );


        }
}



if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19){

  if($login_user['gender'] == 0){
        if(!empty($women_field) && isset($women_field->age_of_first_priod) && !empty($women_field->age_of_first_priod)) {

            $temp_menarche = "Menses at ".$women_field->age_of_first_priod.". ";
            $cancer_layman_detail['gyn_hx'] = str_replace("menarche ", $temp_menarche, $cancer_layman_detail['gyn_hx']);
        }
        else{

          $cancer_layman_detail['gyn_hx'] = str_replace("menarche ", "", $cancer_layman_detail['gyn_hx']);
        }

        $document_section[] = array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  // "SectionText" => '#ALL',
                  "SectionText" => 'GYN Hx',
                  "ObservationDate" => $curnt_date
              );
        if(empty($cancer_layman_detail['gyn_hx'])) $cancer_layman_detail['gyn_hx'] = 'none provided';
        $document_section[] =  array(
                        "SetIdentifier" => $cnt++,
                        "ValueType" => "FT",
                        "SectionText" => $cancer_layman_detail['gyn_hx'],
                        "ObservationDate" => $curnt_date
                    );
    }
}


  $document_section[] = array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  // "SectionText" => '#ALL',
                  "SectionText" => 'ALL',
                  "ObservationDate" => $curnt_date
              );
  if(empty($all)) $all = 'none provided';
  $document_section[] =  array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  "SectionText" => $all,
                  "ObservationDate" => $curnt_date
              );
if($user_detail->chief_compliant_userdetail->current_step_id['id'] != 17 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 19)
{
  $document_section[] =  array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  // "SectionText" => '#IMM',
                  "SectionText" => 'IMM',
                  "ObservationDate" => $curnt_date
              );
  if(empty($imm)) $imm = 'none provided';
  $document_section[] =  array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  "SectionText" => $imm,
                  "ObservationDate" => $curnt_date
              );
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 18)
{

  $document_section[] =  array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#ROS (last 30 days)',
                "SectionText" => 'Vitals:',
                "ObservationDate" => $curnt_date
            );


  $document_section[] = array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => 'BMI:',
                "ObservationDate" => $curnt_date
            );

  if(empty($bmi)) $bmi = 'none provided';
  $document_section[] =  array(
              "SetIdentifier" => $cnt++,
              "ValueType" => "FT",
              "SectionText" => $bmi,
              "ObservationDate" => $curnt_date
          );


  $glu = empty($cronic_subjective_text_detail['glu_layman']) ? 'none provided' : $cronic_subjective_text_detail['glu_layman'];
  $document_section[] = array(
                    "SetIdentifier" => $cnt++,
                    "ValueType" => "FT",
                    "SectionText" => 'GLU:',
                    "ObservationDate" => $curnt_date
                );


  $document_section[] =  array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  "SectionText" =>$glu,
                  "ObservationDate" => $curnt_date
              );

  $bp = empty($cronic_subjective_text_detail['bp_layman']) ? 'none provided' : $cronic_subjective_text_detail['bp_layman'];
  $document_section[] = array(
                    "SetIdentifier" => $cnt++,
                    "ValueType" => "FT",
                    "SectionText" => 'BP:',
                    "ObservationDate" => $curnt_date
                );


  $document_section[] =  array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  "SectionText" =>$bp,
                  "ObservationDate" => $curnt_date
              );

  $spo2 = empty($cronic_subjective_text_detail['spo2_layman']) ? 'none provided' : $cronic_subjective_text_detail['spo2_layman'];
  $document_section[] = array(
                    "SetIdentifier" => $cnt++,
                    "ValueType" => "FT",
                    "SectionText" => 'SPO2:',
                    "ObservationDate" => $curnt_date
                );


  $document_section[] =  array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  "SectionText" =>$spo2,
                  "ObservationDate" => $curnt_date
              );
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 17)
{

  $document_section[] =  array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#ROS (last 30 days)',
                "SectionText" => 'Vitals:',
                "ObservationDate" => $curnt_date
            );

  if($login_user->gender == 0){

      $document_section[] = array(
                    "SetIdentifier" => $cnt++,
                    "ValueType" => "FT",
                    "SectionText" => 'BMI:',
                    "ObservationDate" => $curnt_date
                );

      if(empty($bmi)) $bmi = 'none provided';
      $document_section[] =  array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  "SectionText" => $bmi,
                  "ObservationDate" => $curnt_date
              );
    }

    $document_section[] = array(
                    "SetIdentifier" => $cnt++,
                    "ValueType" => "FT",
                    "SectionText" => 'T:',
                    "ObservationDate" => $curnt_date
                );

      if(empty($covid_subjective_detail['temperature'])) $covid_subjective_detail['temperature'] = 'none provided';
      $document_section[] =  array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  "SectionText" => $covid_subjective_detail['temperature'],
                  "ObservationDate" => $curnt_date
              );

      $document_section[] = array(
                    "SetIdentifier" => $cnt++,
                    "ValueType" => "FT",
                    "SectionText" => 'SpO2:',
                    "ObservationDate" => $curnt_date
                );

      if(empty($covid_subjective_detail['spo2'])) $covid_subjective_detail['spo2'] = 'none provided';
      $document_section[] =  array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  "SectionText" => $covid_subjective_detail['spo2'],
                  "ObservationDate" => $curnt_date
              );

}

if($user_detail->chief_compliant_userdetail->current_step_id->id == 19){



    $document_section[] =  array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#ROS (last 30 days)',
                "SectionText" => 'Assessments',
                "ObservationDate" => $curnt_date
            );

        $document_section[] =  array(
                      "SetIdentifier" => $cnt++,
                      "ValueType" => "FT",
                      // "SectionText" => '#ROS (last 30 days)',
                      "SectionText" => 'SIT',
                      "ObservationDate" => $curnt_date
                  );

        $document_section[] =  array(
                      "SetIdentifier" => $cnt++,
                      "ValueType" => "FT",
                      // "SectionText" => '#ROS (last 30 days)',
                      "SectionText" => 'Symptoms',
                      "ObservationDate" => $curnt_date
                  );

        $document_section[] =  array(
                      "SetIdentifier" => $cnt++,
                      "ValueType" => "FT",
                      // "SectionText" => '#ROS (last 30 days)',
                      "SectionText" => 'Severe',
                      "ObservationDate" => $curnt_date
                  );

        $cancer_server = empty($cancer_layman_detail['sti_severe_sym']) ? "none provided" : $cancer_layman_detail['sti_severe_sym'];

        $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $cancer_server,
                                "ObservationDate" => $curnt_date
                            );

        $document_section[] =  array(
                      "SetIdentifier" => $cnt++,
                      "ValueType" => "FT",
                      // "SectionText" => '#ROS (last 30 days)',
                      "SectionText" => 'Moderate',
                      "ObservationDate" => $curnt_date
                  );

        $cancer_Moderate = empty($cancer_layman_detail['sti_moderate_sym']) ? "none provided" : $cancer_layman_detail['sti_moderate_sym'];

        $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $cancer_Moderate,
                                "ObservationDate" => $curnt_date
                            );

        $document_section[] =  array(
                      "SetIdentifier" => $cnt++,
                      "ValueType" => "FT",
                      // "SectionText" => '#ROS (last 30 days)',
                      "SectionText" => 'Mild',
                      "ObservationDate" => $curnt_date
                  );

        $cancer_Mild = empty($cancer_layman_detail['sti_mild_sym']) ? "none provided" : $cancer_layman_detail['sti_mild_sym'];

        $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $cancer_Mild,
                                "ObservationDate" => $curnt_date
                            );

        $document_section[] =  array(
                      "SetIdentifier" => $cnt++,
                      "ValueType" => "FT",
                      // "SectionText" => '#ROS (last 30 days)',
                      "SectionText" => 'Negative',
                      "ObservationDate" => $curnt_date
                  );

        $cancer_Negative = empty($cancer_layman_detail['sti_neg_sym']) ? "none provided" : $cancer_layman_detail['sti_neg_sym'];

        $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $cancer_Negative,
                                "ObservationDate" => $curnt_date
                            );

        $document_section[] =  array(
                      "SetIdentifier" => $cnt++,
                      "ValueType" => "FT",
                      // "SectionText" => '#ROS (last 30 days)',
                      "SectionText" => 'QOL',
                      "ObservationDate" => $curnt_date
                  );

        $document_section[] =  array(
                      "SetIdentifier" => $cnt++,
                      "ValueType" => "FT",
                      // "SectionText" => '#ROS (last 30 days)',
                      "SectionText" => 'High',
                      "ObservationDate" => $curnt_date
                  );

        $cancer_High = empty($cancer_layman_detail['sti_high_qol']) ? "none provided" : $cancer_layman_detail['sti_high_qol'];

        $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $cancer_High,
                                "ObservationDate" => $curnt_date
                            );


        $document_section[] =  array(
                      "SetIdentifier" => $cnt++,
                      "ValueType" => "FT",
                      // "SectionText" => '#ROS (last 30 days)',
                      "SectionText" => 'Average',
                      "ObservationDate" => $curnt_date
                  );

        $cancer_Average = empty($cancer_layman_detail['sti_avg_qol']) ? "none provided" : $cancer_layman_detail['sti_avg_qol'];

        $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $cancer_Average,
                                "ObservationDate" => $curnt_date
                            );

        $document_section[] =  array(
                      "SetIdentifier" => $cnt++,
                      "ValueType" => "FT",
                      // "SectionText" => '#ROS (last 30 days)',
                      "SectionText" => 'Low',
                      "ObservationDate" => $curnt_date
                  );

        $cancer_Low = empty($cancer_layman_detail['sti_low_qol']) ? "none provided" : $cancer_layman_detail['sti_low_qol'];

        $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $cancer_Low,
                                "ObservationDate" => $curnt_date
                            );
      if(!empty($cancer_layman_detail['chemo_threatening']) || !empty($cancer_layman_detail['chemo_severe']) || !empty($cancer_layman_detail['chemo_moderate']) || !empty($cancer_layman_detail['chemo_mild']) || !empty($cancer_layman_detail['chemo_none'])){

        $document_section[] =  array(
                      "SetIdentifier" => $cnt++,
                      "ValueType" => "FT",
                      // "SectionText" => '#ROS (last 30 days)',
                      "SectionText" => 'CIPN',
                      "ObservationDate" => $curnt_date
                  );

        $document_section[] =  array(
                      "SetIdentifier" => $cnt++,
                      "ValueType" => "FT",
                      // "SectionText" => '#ROS (last 30 days)',
                      "SectionText" => 'Grade 4',
                      "ObservationDate" => $curnt_date
                  );

        $chemo_threatening = empty($cancer_layman_detail['chemo_threatening']) ? "none provided" : $cancer_layman_detail['chemo_threatening'];

        $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $chemo_threatening,
                                "ObservationDate" => $curnt_date
                            );

        $document_section[] =  array(
                      "SetIdentifier" => $cnt++,
                      "ValueType" => "FT",
                      // "SectionText" => '#ROS (last 30 days)',
                      "SectionText" => 'Grade 3',
                      "ObservationDate" => $curnt_date
                  );

        $chemo_severe = empty($cancer_layman_detail['chemo_severe']) ? "none provided" : $cancer_layman_detail['chemo_severe'];

        $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $chemo_severe,
                                "ObservationDate" => $curnt_date
                            );

        $document_section[] =  array(
                      "SetIdentifier" => $cnt++,
                      "ValueType" => "FT",
                      // "SectionText" => '#ROS (last 30 days)',
                      "SectionText" => 'Grade 2',
                      "ObservationDate" => $curnt_date
                  );

        $chemo_moderate = empty($cancer_layman_detail['chemo_moderate']) ? "none provided" : $cancer_layman_detail['chemo_moderate'];

        $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $chemo_moderate,
                                "ObservationDate" => $curnt_date
                            );

        $document_section[] =  array(
                      "SetIdentifier" => $cnt++,
                      "ValueType" => "FT",
                      // "SectionText" => '#ROS (last 30 days)',
                      "SectionText" => 'Grade 1',
                      "ObservationDate" => $curnt_date
                  );

        $chemo_mild = empty($cancer_layman_detail['chemo_mild']) ? "none provided" : $cancer_layman_detail['chemo_mild'];

        $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $chemo_mild,
                                "ObservationDate" => $curnt_date
                            );

        $document_section[] =  array(
                      "SetIdentifier" => $cnt++,
                      "ValueType" => "FT",
                      // "SectionText" => '#ROS (last 30 days)',
                      "SectionText" => 'Grade 0',
                      "ObservationDate" => $curnt_date
                  );

        $chemo_none = empty($cancer_layman_detail['chemo_none']) ? "none provided" : $cancer_layman_detail['chemo_none'];

        $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $chemo_none,
                                "ObservationDate" => $curnt_date
                            );
      }

}

$document_section[] =  array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#ROS (last 30 days)',
                "SectionText" => 'ROS (last 30 days)',
                "ObservationDate" => $curnt_date
            );

if($user_detail->specialization_id == 1 || $user_detail->specialization_id == 2 || $user_detail->specialization_id == 5 || $user_detail->specialization_id == 6){

          // For specialization id 1,2 related health questionaire logic


         if($user_detail->chief_compliant_userdetail->current_step_id->id == 11 || $user_detail->chief_compliant_userdetail->current_step_id->id == 20){


            $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'GEN:',
                          "ObservationDate" => $curnt_date
                      );
            if(empty($q_general)) $q_general = 'none provided';
            $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_general,
                          "ObservationDate" => $curnt_date
                      );


            $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'CV/RESP:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_CV_RESP)) $q_CV_RESP = 'none provided';
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_CV_RESP,
                          "ObservationDate" => $curnt_date
                      );



          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'GI:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_GIGU)) $q_GIGU = 'none provided';
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_GIGU,
                          "ObservationDate" => $curnt_date
                      );


          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'THROAT:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_THROAT)) $q_THROAT = 'none provided';
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_THROAT,
                          "ObservationDate" => $curnt_date
                      );
         }
         elseif($user_detail->chief_compliant_userdetail->current_step_id->id == 17){

          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Constitutional Symptoms:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_general)) $q_general = 'none provided';
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_general,
                          "ObservationDate" => $curnt_date
                      );
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Ears, nose, throat:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_ENT)) $q_ENT = 'none provided';
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_ENT,
                          "ObservationDate" => $curnt_date
                      );
          $document_section[] = array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Cardiovascular:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_CV)) $q_CV = 'none provided';
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_CV,
                          "ObservationDate" => $curnt_date
                      );
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Respiratory:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_RESP)) $q_RESP = 'none provided';
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_RESP,
                          "ObservationDate" => $curnt_date
                      );
          $document_section[] =    array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Gastrointestinal:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_GI)) $q_GI = 'none provided';
          $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_GI,
                          "ObservationDate" => $curnt_date
                      ) ;
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Genitourinary:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_GU)) $q_GU = 'none provided';
          $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_GU,
                          "ObservationDate" => $curnt_date
                      );
          $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Musculoskeletal:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_MSK)) $q_MSK = 'none provided';
          $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_MSK,
                          "ObservationDate" => $curnt_date
                      );
          $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Neurological:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_NEURO)) $q_NEURO = 'none provided';
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_NEURO,
                          "ObservationDate" => $curnt_date
                      );
          $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Integumentary:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_SKIN)) $q_SKIN = 'none provided';
          $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_SKIN,
                          "ObservationDate" => $curnt_date
                      );

          $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Psychiatric:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_PSYCH)) $q_PSYCH = 'none provided';
          $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_PSYCH,
                          "ObservationDate" => $curnt_date
                      );
        }
        elseif($user_detail->chief_compliant_userdetail->current_step_id->id == 18){

          if(!empty($temp_general_health_questionnaire_grp_arr)){

            if(array_key_exists("GEN", $temp_general_health_questionnaire_grp_arr)){

                $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Constitutional Symptoms:',
                          "ObservationDate" => $curnt_date
                      );
                if(empty($q_general)) $q_general = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $q_general,
                                "ObservationDate" => $curnt_date
                            );
            }

            if(array_key_exists("GI", $temp_general_health_questionnaire_grp_arr)){

                $document_section[] =    array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Gastrointestinal:',
                          "ObservationDate" => $curnt_date
                      );
                if(empty($q_GI)) $q_GI = 'none provided';
                $document_section[] =   array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $q_GI,
                                "ObservationDate" => $curnt_date
                            ) ;

            }

            if(array_key_exists("CV", $temp_general_health_questionnaire_grp_arr)){

                $document_section[] = array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Cardiovascular:',
                          "ObservationDate" => $curnt_date
                      );
                if(empty($q_CV)) $q_CV = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $q_CV,
                                "ObservationDate" => $curnt_date
                            );
            }

            if(array_key_exists("NEURO", $temp_general_health_questionnaire_grp_arr)){

                $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Neurological:',
                          "ObservationDate" => $curnt_date
                      );
                if(empty($q_NEURO)) $q_NEURO = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $q_NEURO,
                                "ObservationDate" => $curnt_date
                            );
            }

            if(array_key_exists("PSYCH", $temp_general_health_questionnaire_grp_arr)){

                $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Psychiatric:',
                          "ObservationDate" => $curnt_date
                      );
                if(empty($q_PSYCH)) $q_PSYCH = 'none provided';
                $document_section[] =   array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $q_PSYCH,
                                "ObservationDate" => $curnt_date
                            );
            }

            if(array_key_exists("RESP", $temp_general_health_questionnaire_grp_arr)){

                $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Respiratory:',
                          "ObservationDate" => $curnt_date
                      );
                if(empty($q_RESP)) $q_RESP = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $q_RESP,
                                "ObservationDate" => $curnt_date
                            );
            }

            if(array_key_exists("MSK", $temp_general_health_questionnaire_grp_arr)){

                $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Musculoskeletal:',
                          "ObservationDate" => $curnt_date
                      );
                if(empty($q_MSK)) $q_MSK = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $q_MSK,
                                "ObservationDate" => $curnt_date
                            );
            }

            if(array_key_exists("EYES", $temp_general_health_questionnaire_grp_arr)){

                $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'EYES:',
                          "ObservationDate" => $curnt_date
                      );
                if(empty($q_EYES)) $q_EYES = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $q_EYES,
                                "ObservationDate" => $curnt_date
                            );
            }

            if(array_key_exists("ENT", $temp_general_health_questionnaire_grp_arr)){

                $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Ears, nose, throat:',
                          "ObservationDate" => $curnt_date
                      );
                if(empty($q_ENT)) $q_ENT = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $q_ENT,
                                "ObservationDate" => $curnt_date
                            );
            }

            if(array_key_exists("SKIN", $temp_general_health_questionnaire_grp_arr)){

                $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'Integumentary:',
                          "ObservationDate" => $curnt_date
                      );
                if(empty($q_SKIN)) $q_SKIN = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $q_SKIN,
                                "ObservationDate" => $curnt_date
                            );
            }
          }
        }
         else{
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'GEN:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_general)) $q_general = 'none provided';
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_general,
                          "ObservationDate" => $curnt_date
                      );
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'GI/GU:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_GIGU)) $q_GIGU = 'none provided';
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_GIGU,
                          "ObservationDate" => $curnt_date
                      );
          $document_section[] = array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'HEENT:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_HEENT)) $q_HEENT = 'none provided';
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_HEENT,
                          "ObservationDate" => $curnt_date
                      );
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'HEME/ENDO:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_HEMEENDO)) $q_HEMEENDO = 'none provided';
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_HEMEENDO,
                          "ObservationDate" => $curnt_date
                      );
          $document_section[] =    array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'CV:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_CV)) $q_CV = 'none provided';
          $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_CV,
                          "ObservationDate" => $curnt_date
                      ) ;
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'NEURO/MSK:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_NEUROMSK)) $q_NEUROMSK = 'none provided';
          $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_NEUROMSK,
                          "ObservationDate" => $curnt_date
                      );
          $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'RESP:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_RESP)) $q_RESP = 'none provided';
          $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_RESP,
                          "ObservationDate" => $curnt_date
                      );
          $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'PSYCH:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_PSYCH)) $q_PSYCH = 'none provided';
          $document_section[] =  array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_PSYCH,
                          "ObservationDate" => $curnt_date
                      );
          $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => 'SKIN:',
                          "ObservationDate" => $curnt_date
                      );
          if(empty($q_SKIN)) $q_SKIN = 'none provided';
          $document_section[] =   array(
                          "SetIdentifier" => $cnt++,
                          "ValueType" => "FT",
                          "SectionText" => $q_SKIN,
                          "ObservationDate" => $curnt_date
                      );
        }
}
if($user_detail->specialization_id == 3){  // for specialization id 3 related logic for health questionaire

                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'GEN:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($ortho_GEN)) $ortho_GEN = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $ortho_GEN,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'EYES:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($ortho_EYES)) $ortho_EYES = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $ortho_EYES,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'ENT:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($ortho_ENT)) $ortho_ENT = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $ortho_ENT,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'CV:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($ortho_CV)) $ortho_CV = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $ortho_CV,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'RESP:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($ortho_RESP)) $ortho_RESP = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $ortho_RESP,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'NEURO:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($ortho_NEURO)) $ortho_NEURO = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $ortho_NEURO,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'MSK:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($ortho_MSK)) $ortho_MSK = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $ortho_MSK,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'GI:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($ortho_GI)) $ortho_GI = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $ortho_GI,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'GU:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($ortho_GU)) $ortho_GU = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $ortho_GU,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'SKIN/BREAST:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($ortho_SKINBREAST)) $ortho_SKINBREAST = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $ortho_SKINBREAST,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'ENDO:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($ortho_ENDO)) $ortho_ENDO = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $ortho_ENDO,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'HEME/LYMPH:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($ortho_HEMELYMPH)) $ortho_HEMELYMPH = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $ortho_HEMELYMPH,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'PSYCH:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($ortho_PSYCH)) $ortho_PSYCH = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $ortho_PSYCH,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'ALL/IMM:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($ortho_ALLIMM)) $ortho_ALLIMM = 'none provided';  // currently $ortho_ALLIMM varuable is empty because client not provided data for this seciton will provide in future
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $ortho_ALLIMM,
                                "ObservationDate" => $curnt_date
                            );



}

if($user_detail->specialization_id == 8){  // for specialization id 3 related logic for health questionaire

                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'GEN:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($oncology_GEN)) $oncology_GEN = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $oncology_GEN,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'EYES:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($oncology_EYE)) $oncology_EYE = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $oncology_EYE,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'ENT:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($oncology_ENT)) $oncology_ENT = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $oncology_ENT,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'CV:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($oncology_CV)) $oncology_CV = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $oncology_CV,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'RESP:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($oncology_RESP)) $oncology_RESP = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $oncology_RESP,
                                "ObservationDate" => $curnt_date
                            );

                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'GI:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($oncology_GI)) $oncology_GI = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $oncology_GI,
                                "ObservationDate" => $curnt_date
                            );

                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'GU:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($oncology_GU)) $oncology_GU = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $oncology_GU,
                                "ObservationDate" => $curnt_date
                            );

                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'MSK:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($oncology_MSK)) $oncology_MSK = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $oncology_MSK,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'SKIN:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($oncology_SKIN)) $oncology_SKIN = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $oncology_SKIN,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'BREAST:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($oncology_BREAST)) $oncology_BREAST = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $oncology_BREAST,
                                "ObservationDate" => $curnt_date
                            );

                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'NEURO:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($oncology_NEURO)) $oncology_NEURO = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $oncology_NEURO,
                                "ObservationDate" => $curnt_date
                            );

                 $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'PSYCH:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($oncology_PSYCH)) $oncology_PSYCH = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $oncology_PSYCH,
                                "ObservationDate" => $curnt_date
                            );

                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'ENDO:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($oncology_ENDO)) $oncology_ENDO = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $oncology_ENDO,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'HEME/LYMPH:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($oncology_HEME_LYMPH)) $oncology_HEME_LYMPH = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $oncology_HEME_LYMPH,
                                "ObservationDate" => $curnt_date
                            );

                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'ALL/IMM:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($oncology_ALL_IMM)) $oncology_ALL_IMM = 'none provided';  // currently $ortho_ALLIMM varuable is empty because client not provided data for this seciton will provide in future
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $oncology_ALL_IMM,
                                "ObservationDate" => $curnt_date
                            );

}

if($user_detail->specialization_id == 4 || $user_detail->specialization_id == 7){  // for specialization id 4 related logic for health questionaire

                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'MSK:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($spine_MSK)) $spine_MSK = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $spine_MSK,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'NEURO:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($spine_NEURO)) $spine_NEURO = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $spine_NEURO,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'GEN:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($spine_GEN)) $spine_GEN = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $spine_GEN,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'ENT:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($spine_ENT)) $spine_ENT = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $spine_ENT,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'CV:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($spine_CV)) $spine_CV = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $spine_CV,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'RESP:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($spine_RESP)) $spine_RESP = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $spine_RESP,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'GI:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($spine_GI)) $spine_GI = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $spine_GI,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'SKIN/BREAST:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($spine_SKINBREAST)) $spine_SKINBREAST = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $spine_SKINBREAST,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'ENDO:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($spine_ENDO)) $spine_ENDO = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $spine_ENDO,
                                "ObservationDate" => $curnt_date
                            );
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => 'HEME/LYMPH:',
                                "ObservationDate" => $curnt_date
                            );
                if(empty($spine_HEMELYMPH)) $spine_HEMELYMPH = 'none provided';
                $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $spine_HEMELYMPH,
                                "ObservationDate" => $curnt_date
                            );
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 17){

  $document_section[] =  array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#ROS (last 30 days)',
                "SectionText" => 'IMPRESSION:',
                "ObservationDate" => $curnt_date
            );

  $impression = $covid_risk." COVID-19 exposure risk ".(!empty($covid_layman) ? "due to ".$covid_layman: "").", ".$health_risk." mortality risk ".(!empty($health_layman) ? "due to ".$health_layman:"").". ";

  $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $impression,
                                "ObservationDate" => $curnt_date
                            );

  $document_section[] =  array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#ROS (last 30 days)',
                "SectionText" => 'OBJECTIVE:',
                "ObservationDate" => $curnt_date
            );

  $objective = '';
  $objective .= "Vitals: None reported by patient. ";
  $objective .= "Constitutional: Patient is speaking full sentences. No audible wheezing heard. ";
  $objective .= "Head and Face: No tenderness with guided palpation and percussion of frontal and maxillary sinuses. ";
  $objective .= "Ears, Nose, Mouth, Throat: No enlarged cervical and axillary lymph nodes felt on guided palpation. ";
  $objective .= "Neck: Full active ROM of neck in all directions without pain. ";
  $objective .= "Chest: No anterior chest wall tenderness on self-palpation. ";
  $objective .= "Abdomen: No tenderness with guided light and deep palpation of all abdominal quadrants. ";
  $objective .= "Musculoskeletal: Self-reports normal gait. Full active ROM of all extremities without pain or weakness. ";
  $objective .= "Psych: Oriented to time, place, person. Mood and affect appropriate. ";
  $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $objective,
                                "ObservationDate" => $curnt_date
                            );

  $document_section[] =  array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                // "SectionText" => '#ROS (last 30 days)',
                "SectionText" => 'RECOMMENDATIONS:',
                "ObservationDate" => $curnt_date
            );

  $recommandations = "";
  $recommandations .= "1. Obtain immediate medical care if any trouble breathing, persistent chest pain, confusion or worsening of condition. ";
  $recommandations .= "2. Call your local public health department to obtain a COVID-19 test. ";
  $recommandations .= "3. Take hydroxychloroquine 200 mg twice a day for 5 days, zinc 50 mg twice a day for 5 days. ";
  $recommandations .= "4. Take Tylenol (acetaminophen) 500mg to 1000g every 4 hours for temperature >100 degrees F. ";
  $recommandations .= "5. Drink plenty of fluids. ";
  $recommandations .= "6. Obtain as much rest as possible. ";
  $recommandations .= "7. Keep yourself nourished with a balanced diet and hydrated with water. ";
  $recommandations .= "8. Isolate yourself as much as possible until at least 3 days after the end of symptoms or 7 days from the beginning of symptoms. ";
  $recommandations .= "9. Avoid sharing dishes, towels, bed. ";
  $recommandations .= "10. Wear your own clean mask around others. ";
  $recommandations .= "11. Dispose of used tissue in a lined trash can. ";
  $recommandations .= "12. Wash your hands frequently, especially after blowing your nose. \n ";
  $recommandations .= "13. Disinfect all high-touch areas (e.g. phone, keyboard, tabletops, doorknobs) to prevent the spread of your infection to others. ";
  $recommandations .= "14. Call again if condition worsens or if no improvement in 2-3 days. ";
  $recommandations .= "15. Referral to telepsychiatry due to positive PHQ-2. ";

  $document_section[] =  array(
                                "SetIdentifier" => $cnt++,
                                "ValueType" => "FT",
                                "SectionText" => $recommandations,
                                "ObservationDate" => $curnt_date
                            );
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 18){

  $document_section[] =   array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => 'Glucose Log:',
                "ObservationDate" => $curnt_date
            );

  $glu_log = empty($cronic_subjective_text_detail['glu_log']) ? 'none provided' : $cronic_subjective_text_detail['glu_log'];
  $document_section[] =   array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $glu_log,
                "ObservationDate" => $curnt_date
            );


  $document_section[] =   array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => 'BP Log:',
                "ObservationDate" => $curnt_date
            );

  $bp_log = empty($cronic_subjective_text_detail['bp_log']) ? 'none provided' : $cronic_subjective_text_detail['bp_log'];
  $document_section[] =   array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $bp_log,
                "ObservationDate" => $curnt_date
            );

  $document_section[] =   array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => 'Peak Flow Log:',
                "ObservationDate" => $curnt_date
            );

  $peak_flow_log = empty($cronic_subjective_text_detail['peak_flow_log']) ? 'none provided' : $cronic_subjective_text_detail['peak_flow_log'];
  $document_section[] =   array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => $peak_flow_log,
                "ObservationDate" => $curnt_date
            );
}


$document_section[] =   array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => 'Final patient symptoms/comments:',
                "ObservationDate" => $curnt_date
            );
$document_section[] =   array(
                "SetIdentifier" => $cnt++,
                "ValueType" => "FT",
                "SectionText" => (!empty($user_detail->chief_compliant_userdetail->additional_comment) ? $user_detail->chief_compliant_userdetail->additional_comment : 'no additional comments' ),
                "ObservationDate" => $curnt_date
            );
// pr($login_user); die;

//pr($login_user);die;

if($user_detail->organization->make_test_clinic == 1 && $user_detail->organization->standard_openemr_output == 0 ){
// sending the standard json format
$mi7_api_array = array(
    "MessageType" => 5,
    "PatientID_EMR" => $internal_emr_id,
    "FirstName" => ucfirst($login_user->first_name),
    "LastName" => $login_user->last_name,
    "DOB" => $dob,
    "Gender" => $login_user->gender == 1 ? 'M' : 'F',
    "Document" => array(
        "Header" => array(
            "DocumentType" => "PR",
            "ActivityDate" => $curnt_date,
            "TranscribedDate" => $curnt_date,
            "CompletionStatus" => "IP",
        ),
        "DocumentSections" => $document_section
    )
);


} else{

// sending the OPEN EMR  output format
// prepare $document_section array for the OPEN EMR output , In OPEN EMR format all the patient data will provided in first array
$cnt = 1;
$document_section = array();

$section_text = '' ;

$section_text .= $line1." \n ";
$section_text .= $line2." \n ";
$section_text .= $line3." \n ";
$section_text .= $line4." \n ";
$section_text .= $line5." \n ";

if($user_detail->chief_compliant_userdetail->current_step_id['id'] != 18){

  $section_text .= (empty($cc) ? "" : "CC: \n ".$cc." \n  \n");
}

if($login_user->gender == 0 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 17 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 18 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 19){
  $section_text .= "BMI: \n ".(empty($bmi) ? "none provided" : $bmi)." \n  \n";
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 4){

  $section_text .= "SUBJECTIVE: ".(empty($hpi) ? "none provided" : $hpi)." \n  \n";

}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 17){

  $section_text .= "HPI: ".(empty($covid_subjective) ? "none provided" : $covid_subjective)." \n  \n";

}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 16){

    $section_text .= "REASON FOR VISIT: ".(empty($follow_up_sx_detial_res['all_cc_name']) ? "none provided" : "f/u ".$follow_up_sx_detial_res['all_cc_name'])." \n  \n";

    $section_text .= "SUBJECTIVE: ".(empty($follow_up_sx_detial_res['layman_summar']) ? "none provided" : $follow_up_sx_detial_res['layman_summar'])." \n  \n";
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 18){

    $section_text .= "REASON FOR VISIT: ".(empty($cronic_reason_for_visit) ? "none provided" : "f/u ".$cronic_reason_for_visit.' management.')." \n \n";

    $section_text .= "SUBJECTIVE: ".(empty($cronic_subjective_text) ? "none provided" : $cronic_subjective_text)." \n  \n";
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 20){

    $section_text .= "REASON FOR VISIT: ".(empty($pre_op_post_op_detial_res['reason_for_visit']) ? "none provided" : $pre_op_post_op_detial_res['reason_for_visit'])." \n";
    $section_text .= "SUBJECTIVE: ".$pre_op_post_op_subjective_text." \n";

}

if($user_detail->specialization_id == 6 && ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 11 ) || ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 12 && $user_detail->chief_compliant_userdetail->follow_up_step_id == 11)){

    $section_text .= "REASON FOR VISIT: ".(empty($procudure_name) && empty($procedure_date) ? "none provided" : $procudure_name." day ".$procudure_since_date)." \n  \n";

    $section_text .= "SUBJECTIVE: ".(empty($subjective) ? "none provided" : $subjective)." \n  \n";
}
else{

    if(!in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [4,16,17,18,20])){
      $section_text .= "HPI: \n ".(empty($hpi) ? "none provided" : $hpi)." \n  \n";
    }
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] != 17 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 18)
{
  // female related field not present in orthopedics and orthopedics spine
  if($login_user->gender == 0 && $user_detail->specialization_id != 3 && $user_detail->specialization_id != 4) { // only for female and not for orthopedic module

  // $section_text .= "#GYNHX: \n ".(empty($lmp) ? "none provided" : $lmp)." \n  <br />";
  // $section_text .= "#Paps: \n ".(empty($paps) ? "none provided" : $paps)." \n  <br />";
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] != 19){
      $section_text .= "GYNHX: \n ".(empty($lmp) ? "none provided" : $lmp)." \n  \n";
    }
  $section_text .= "Paps: \n ".(empty($paps) ? "none provided" : $paps)." \n  \n";
  }

  //16 sep 2019
  /*if($user_detail->specialization_id != 3 && $user_detail->specialization_id != 4) {*/
  if($user_detail->specialization_id == 2) {
  $section_text .= "STI: \n ".(empty($sti) ? "none provided" : $sti)." \n  \n";
  }
  if($login_user->gender == 0 && $user_detail->specialization_id != 3 && $user_detail->specialization_id != 4) {
  $section_text .= "Breast: \n ".(empty($breast) ? "none provided" : $breast)." \n  \n";
  }
   if($user_detail->specialization_id != 3 && $user_detail->specialization_id != 4) {
  $section_text .= "BCM: \n ".(empty($bcm) ? "none provided" : $bcm)." \n  \n";
  }
  if($login_user->gender == 0 && $user_detail->specialization_id != 3 && $user_detail->specialization_id != 4) { // only for female and not for orthopedic module
  // $section_text .= "#OBHX: \n ";
    $section_text .= "OBHX: \n ";
    if(!empty($prev_birth_data)){
        foreach ($prev_birth_data as $key => $value) {
          $section_text .= $value." \n ";
        }
           $section_text .= "  \n ";
    } else {
          $section_text .= "none provided \n  \n" ;
    }
  }
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19){


      $section_text .= "Assessments: \n ";
      $section_text .= "SIT: \n  ";
      $section_text .= "Symptoms: \n  ";
      $section_text .= "Severe: ".(empty($cancer_layman_detail['sti_severe_sym']) ? "" : $cancer_layman_detail['sti_severe_sym'])."\n  ";
      $section_text .= "Moderate: ".(empty($cancer_layman_detail['sti_moderate_sym']) ? "" : $cancer_layman_detail['sti_moderate_sym'])."\n  ";
      $section_text .= "Mild: ".(empty($cancer_layman_detail['sti_mild_sym']) ? "" : $cancer_layman_detail['sti_mild_sym'])."\n  ";
      $section_text .= "Negative: ".(empty($cancer_layman_detail['sti_neg_sym']) ? "" : $cancer_layman_detail['sti_neg_sym'])."\n ";
      $section_text .= "QOL: \n  ";
      $section_text .= "High: ".(empty($cancer_layman_detail['sti_high_qol']) ? "" : $cancer_layman_detail['sti_high_qol'])."\n  ";
      $section_text .= "Average: ".(empty($cancer_layman_detail['sti_avg_qol']) ? "" : $cancer_layman_detail['sti_avg_qol'])."\n  ";
      $section_text .= "Low: ".(empty($cancer_layman_detail['sti_low_qol']) ? "" : $cancer_layman_detail['sti_low_qol'])."\n ";

      if(!empty($cancer_layman_detail['chemo_threatening']) || !empty($cancer_layman_detail['chemo_severe']) || !empty($cancer_layman_detail['chemo_moderate']) || !empty($cancer_layman_detail['chemo_mild']) || !empty($cancer_layman_detail['chemo_none'])){

        $section_text .= "CIPN: \n ";
        $section_text .= "Grade 4: ".(empty($cancer_layman_detail['chemo_threatening']) ? "" : $cancer_layman_detail['chemo_threatening'])."\n ";
        $section_text .= "Grade 3: ".(empty($cancer_layman_detail['chemo_severe']) ? "" : $cancer_layman_detail['chemo_severe'])."\n ";
        $section_text .= "Grade 2: ".(empty($cancer_layman_detail['chemo_moderate']) ? "" : $cancer_layman_detail['chemo_moderate'])."\n ";
        $section_text .= "Grade 1: ".(empty($cancer_layman_detail['chemo_mild']) ? "" : $cancer_layman_detail['chemo_mild'])."\n ";
        $section_text .= "Grade 0: ".(empty($cancer_layman_detail['chemo_none']) ? "" : $cancer_layman_detail['chemo_none'])."\n \n";
      }
}

$section_text .= "MEDS: \n ".(empty($meds) ? "none provided" : $meds)." \n  \n";

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19){

  $section_text .= "Treatment Hx: ".(empty($cancer_layman_detail['treatment_hx']) ? "none provided" : $cancer_layman_detail['treatment_hx'])." \n \n";
}

$section_text .= "PMH: \n ".(empty($pmh) ? "none provided" : $pmh)." \n  \n";
$section_text .= "SH: \n ".(empty($sh) ? "none provided" : $sh)." \n \n";

if($user_detail->chief_compliant_userdetail->current_step_id['id'] != 17)
{
  $section_text .= "PSH: \n ".(empty($psh) ? "none provided" : $psh)." \n  \n";
}

$section_text .= "FH: \n ";

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19){

  if(empty($cancer_layman_detail['fh_positive']) && empty($cancer_layman_detail['fh_negative'])){

       $section_text .= "none provided \n \n" ;
    }
    else{

        $section_text .= !empty($cancer_layman_detail['fh_positive']) ? "Significant for ".trim($cancer_layman_detail['fh_positive'],"\n ").".\n": "";
        $section_text .= !empty($cancer_layman_detail['fh_negative']) ? "Denies ".$cancer_layman_detail['fh_negative'].".\n \n": "";
    }
}
else{

  if(!empty($fh)){
      foreach ($fh as $key => $value) {
          $section_text .= $value." \n ";
      }
       $section_text .= "  \n";
  }else{
          $section_text .= "none provided \n \n" ;
  }
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19){

  if($login_user['gender'] == 0){
      if(!empty($women_field) && isset($women_field->age_of_first_priod) && !empty($women_field->age_of_first_priod)) {

          $temp_menarche = "Menses at ".$women_field->age_of_first_priod.". ";
          $cancer_layman_detail['gyn_hx'] = str_replace("menarche ", $temp_menarche, $cancer_layman_detail['gyn_hx']);
      }
      else{

        $cancer_layman_detail['gyn_hx'] = str_replace("menarche ", "", $cancer_layman_detail['gyn_hx']);
      }
      $section_text .= "GYN Hx: ".(empty($cancer_layman_detail['gyn_hx']) ? "none provided" : $cancer_layman_detail['gyn_hx'])." \n";
    }
}

$section_text .= "ALL: \n ".(empty($all) ? "none provided" : $all)." \n \n";
if($user_detail->chief_compliant_userdetail->current_step_id['id'] != 17 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 19)
{
  $section_text .= "IMM: \n ".(empty($imm) ? "none provided" : $imm)." \n \n";
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 17)
{

  $section_text .= "\nVitals: ".($login_user->gender == 0 ? "BMI: ".(empty($bmi) ? 'none provided' : $bmi).', ' : "" )."T: ".(empty($covid_subjective_detail['temperature']) ? 'none provided' : $covid_subjective_detail['temperature']).", SpO2: ".(empty($covid_subjective_detail['spo2']) ? 'none provided' : $covid_subjective_detail['spo2'])."\n";
}


$section_text .= "ROS (last 30 days): \n ";
if($user_detail->specialization_id == 1 || $user_detail->specialization_id == 2 || $user_detail->specialization_id == 5 || $user_detail->specialization_id == 6){  // For specialization id 1,2 related health questionaire logic


  if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 11 || $user_detail->chief_compliant_userdetail->current_step_id['id'] == 20 || ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 12 && $user_detail->chief_compliant_userdetail->follow_up_step_id == 11)){

      $section_text .= "GEN: ".(empty($q_general) ? "none provided" : $q_general)." \n ";
      $section_text .= "CV/RESP: ".(empty($q_CV_RESP) ? "none provided" : $q_CV_RESP)." \n ";
      $section_text .= "GI: ".(empty($q_GIGU) ? "none provided" : $q_GIGU)." \n ";
      $section_text .= "THROAT: ".(empty($q_THROAT) ? "none provided" : $q_THROAT)." \n";

  }
  elseif($user_detail->chief_compliant_userdetail->current_step_id['id'] == 17){

        $q_general = rtrim($q_general,', ');
        $q_NEURO = rtrim($q_NEURO,', ');
        $q_MSK = rtrim($q_MSK,', ');
        $q_GI = rtrim($q_GI,', ');
        $q_GU = rtrim($q_GU,', ');
        $q_ENT = rtrim($q_ENT,', ');
        $q_CV = rtrim($q_CV,', ');
        $q_PSYCH = rtrim($q_PSYCH,', ');
        $q_SKIN = rtrim($q_SKIN,', ');
        $q_RESP = rtrim($q_RESP,', ');

      $section_text .= "Constitutional Symptoms: ".(empty($q_general) ? "none provided" : $q_general)." \n ";
      $section_text .= "Ears, nose, throat: ".(empty($q_ENT) ? "none provided" : $q_ENT)." \n ";
      $section_text .= "Cardiovascular: ".(empty($q_CV) ? "none provided" : $q_CV)." \n ";
      $section_text .= "Respiratory: ".(empty($q_RESP) ? "none provided" : $q_RESP)." \n ";
      $section_text .= "Gastrointestinal: ".(empty($q_GI) ? "none provided" : $q_GI)." \n ";
      $section_text .= "Genitourinary: ".(empty($q_GU) ? "none provided" : $q_GU)." \n ";
      $section_text .= "Musculoskeletal: ".(empty($q_MSK) ? "none provided" : $q_MSK)." \n ";
      $section_text .= "Neurological: ".(empty($q_NEURO) ? "none provided" : $q_NEURO)." \n ";
      $section_text .= "Integumentary: ".(empty($q_SKIN) ? "none provided" : $q_SKIN)." \n ";
      $section_text .= "Psychiatric: ".(empty($q_PSYCH) ? "none provided" : $q_PSYCH)." \n ";

  }
  elseif($user_detail->chief_compliant_userdetail->current_step_id['id'] == 18){

        $q_general = rtrim($q_general,', ');
        $q_NEURO = rtrim($q_NEURO,', ');
        $q_NEURO = str_replace("loc", "LOC", $q_NEURO);
        $q_GI = rtrim($q_GI,', ');
        $q_CV = rtrim($q_CV,', ');
        $q_PSYCH = rtrim($q_PSYCH,', ');
        $q_PSYCH = str_replace("si", "SI", $q_PSYCH);
        $q_RESP = rtrim($q_RESP,', ');
        $q_MSK = rtrim($q_MSK,', ');
        $q_SKIN = rtrim($q_SKIN,', ');
        $q_ENT = rtrim($q_ENT,', ');
        $q_EYES = rtrim($q_EYES,', ');


        if(!empty($temp_general_health_questionnaire_grp_arr)){

            if(array_key_exists("GEN", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "Constitutional Symptoms: ".(empty($q_general) ? "none provided" : $q_general)." \n ";
            }

            if(array_key_exists("GI", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "Gastrointestinal: ".(empty($q_GI) ? "none provided" : $q_GI)." \n ";
            }

            if(array_key_exists("CV", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "Cardiovascular: ".(empty($q_CV) ? "none provided" : $q_CV)." \n ";
            }

            if(array_key_exists("NEURO", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "Neurological: ".(empty($q_NEURO) ? "none provided" : $q_NEURO)." \n ";
            }

            if(array_key_exists("PSYCH", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "Psychiatric: ".(empty($q_PSYCH) ? "none provided" : $q_PSYCH)." \n ";
            }

            if(array_key_exists("RESP", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "Respiratory: ".(empty($q_RESP) ? "none provided" : $q_RESP)." \n ";
            }

            if(array_key_exists("MSK", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "Musculoskeletal: ".(empty($q_MSK) ? "none provided" : $q_MSK)." \n ";
            }

            if(array_key_exists("ENT", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "Ears, nose, throat: ".(empty($q_ENT) ? "none provided" : $q_ENT)." \n ";
            }

            if(array_key_exists("SKIN", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "Integumentary: ".(empty($q_SKIN) ? "none provided" : $q_SKIN)." \n ";
            }

            if(array_key_exists("EYES", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "EYES: ".(empty($q_EYES) ? "none provided" : $q_EYES)." \n ";
            }
        }

  }
  else{

      $section_text .= "GEN: \n ".(empty($q_general) ? "none provided" : $q_general)." \n ";
      $section_text .= "GI/GU: \n ".(empty($q_GIGU) ? "none provided" : $q_GIGU)." \n ";
      $section_text .= "HEENT: \n ".(empty($q_HEENT) ? "none provided" : $q_HEENT)." \n ";
      $section_text .= "HEME/ENDO: \n ".(empty($q_HEMEENDO) ? "none provided" : $q_HEMEENDO)." \n ";
      $section_text .= "CV: \n ".(empty($q_CV) ? "none provided" : $q_CV)." \n ";
      $section_text .= "NEURO/MSK: \n ".(empty($q_NEUROMSK) ? "none provided" : $q_NEUROMSK)." \n ";
      $section_text .= "RESP: \n ".(empty($q_RESP) ? "none provided" : $q_RESP)." \n ";
      $section_text .= "PSYCH: \n ".(empty($q_PSYCH) ? "none provided" : $q_PSYCH)." \n ";
      $section_text .= "SKIN: \n ".(empty($q_SKIN) ? "none provided" : $q_SKIN)." \n ";
    }
}

if($user_detail->specialization_id == 3){  // For specialization id 3 related health questionaire logic

 $section_text .= "GEN: \n ".(empty($ortho_GEN) ? "none provided" : $ortho_GEN)." \n ";
 $section_text .= "EYES: \n ".(empty($ortho_EYES) ? "none provided" : $ortho_EYES)." \n ";
 $section_text .= "ENT: \n ".(empty($ortho_ENT) ? "none provided" : $ortho_ENT)." \n ";
 $section_text .= "CV: \n ".(empty($ortho_CV) ? "none provided" : $ortho_CV)." \n ";
 $section_text .= "RESP: \n ".(empty($ortho_RESP) ? "none provided" : $ortho_RESP)." \n ";
 $section_text .= "NEURO: \n ".(empty($ortho_NEURO) ? "none provided" : $ortho_NEURO)." \n ";
 $section_text .= "MSK: \n ".(empty($ortho_MSK) ? "none provided" : $ortho_MSK)." \n ";
 $section_text .= "GI: \n ".(empty($ortho_GI) ? "none provided" : $ortho_GI)." \n ";
 $section_text .= "GU: \n ".(empty($ortho_GU) ? "none provided" : $ortho_GU)." \n ";
 $section_text .= "SKIN/BREAST: \n ".(empty($ortho_SKINBREAST) ? "none provided" : $ortho_SKINBREAST)." \n ";
 $section_text .= "ENDO: \n ".(empty($ortho_ENDO) ? "none provided" : $ortho_ENDO)." \n ";
 $section_text .= "HEME/LYMPH: \n ".(empty($ortho_HEMELYMPH) ? "none provided" : $ortho_HEMELYMPH)." \n ";
 $section_text .= "PSYCH: \n ".(empty($ortho_PSYCH) ? "none provided" : $ortho_PSYCH)." \n ";
 $section_text .= "ALL/IMM: \n ".(empty($ortho_ALLIMM) ? "none provided" : $ortho_ALLIMM)." \n ";  // currently $ortho_ALLIMM varuable is empty because client not provided data for this seciton will provide in future


}

if($user_detail->specialization_id == 4 || $user_detail->specialization_id == 7){  // For specialization id 4 related health questionaire logic

$section_text .= "MSK: \n ".(empty($spine_MSK) ? "none provided" : $spine_MSK)." \n ";
$section_text .= "NEURO: \n ".(empty($spine_NEURO) ? "none provided" : $spine_NEURO)." \n ";
$section_text .= "GEN: \n ".(empty($spine_GEN) ? "none provided" : $spine_GEN)." \n ";
$section_text .= "ENT: \n ".(empty($spine_ENT) ? "none provided" : $spine_ENT)." \n ";
$section_text .= "CV: \n ".(empty($spine_CV) ? "none provided" : $spine_CV)." \n ";
$section_text .= "RESP: \n ".(empty($spine_RESP) ? "none provided" : $spine_RESP)." \n ";
$section_text .= "GI: \n ".(empty($spine_GI) ? "none provided" : $spine_GI)." \n ";
$section_text .= "SKIN/BREAST: \n ".(empty($spine_SKINBREAST) ? "none provided" : $spine_SKINBREAST)." \n ";
$section_text .= "ENDO: \n ".(empty($spine_ENDO) ? "none provided" : $spine_ENDO)." \n ";
$section_text .= "HEME/LYMPH: \n ".(empty($spine_HEMELYMPH) ? "none provided" : $spine_HEMELYMPH)." \n ";

}
if($user_detail->specialization_id == 8)
{
  // For specialization id 8 related health questionaire logic
        $oncology_GEN   = rtrim($oncology_GEN , ', ');
        $oncology_EYE   = rtrim($oncology_EYE , ', ');
        $oncology_ENT   = rtrim($oncology_ENT , ', ');
        $oncology_CV   = rtrim($oncology_CV , ', ');
        $oncology_RESP   = rtrim($oncology_RESP , ', ');
        $oncology_GI   = rtrim($oncology_GI , ', ');
        $oncology_GU   = rtrim($oncology_GU , ', ');
        $oncology_MSK   = rtrim($oncology_MSK , ', ');
        $oncology_SKIN   = rtrim($oncology_SKIN , ', ');
        $oncology_BREAST   = rtrim($oncology_BREAST , ', ');
        $oncology_NEURO  = rtrim($oncology_NEURO , ', ');
        $oncology_PSYCH   = rtrim($oncology_PSYCH , ', ');
        $oncology_ENDO   = rtrim($oncology_ENDO , ', ');
        $oncology_HEME_LYMPH   = rtrim($oncology_HEME_LYMPH , ', ');
        $oncology_ALL_IMM   = rtrim($oncology_ALL_IMM , ', ');

        $section_text .= "GEN: ".(empty($oncology_GEN) ? "none provided" : $oncology_GEN)." \n ";
        $section_text .= "EYES: ".(empty($oncology_EYE) ? "none provided" : $oncology_EYE)." \n ";
        $section_text .= "ENT: ".(empty($oncology_ENT) ? "none provided" : $oncology_ENT)." \n ";
        $section_text .= "CV: ".(empty($oncology_CV) ? "none provided" : $oncology_CV)." \n ";
        $section_text .= "RESP: ".(empty($oncology_RESP) ? "none provided" : $oncology_RESP)." \n ";
        $section_text .= "GI: ".(empty($oncology_GI) ? "none provided" : $oncology_GI)." \n ";
        $section_text .= "GU: ".(empty($oncology_GU) ? "none provided" : $oncology_GU)." \n ";
        $section_text .= "MSK: ".(empty($oncology_MSK) ? "none provided" : $oncology_MSK)." \n ";
        $section_text .= "SKIN: ".(empty($oncology_SKIN) ? "none provided" : $oncology_SKIN)." \n ";
        $section_text .= "BREAST: ".(empty($oncology_BREAST) ? "none provided" : $oncology_BREAST)." \n ";
        $section_text .= "NEURO: ".(empty($oncology_NEURO) ? "none provided" : $oncology_NEURO)." \n ";
        $section_text .= "PSYCH: ".(empty($oncology_PSYCH) ? "none provided" : $oncology_PSYCH)." \n ";
        $section_text .= "ENDO: ".(empty($oncology_ENDO) ? "none provided" : $oncology_ENDO)." \n ";
        $section_text .= "HEME/LYMPH: ".(empty($oncology_HEME_LYMPH) ? "none provided" : $oncology_HEME_LYMPH)." \n ";
        $section_text .= "ALL/IMM: ".(empty($oncology_ALL_IMM) ? "none provided" : $oncology_ALL_IMM)." \n";
}

/*if(isset($patient_other_detail_score) && !empty($patient_other_detail_score)){

   $section_text .= "\nOther Details: \n ";
   $section_text .= 'SOAPP-R score:'.$patient_other_detail_score['soapp_score']."\n ";
   $section_text .= 'COMM score:'.$patient_other_detail_score['comm_score']."\n ";
   $section_text .= 'DAST-10 score:'.$patient_other_detail_score['dast_score']."\n \n";
}*/
if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 17){

    $temp_section_text = '';
    $temp_section_text .= "\nIMPRESSION: ".$covid_risk." COVID-19 exposure risk ".(!empty($covid_layman) ? "due to ".$covid_layman: "").", ".$health_risk." mortality risk ".(!empty($health_layman) ? "due to ".$health_layman:"").". \n";

    $temp_section_text .= "\nOBJECTIVE: \n ";
    $temp_section_text .= "Vitals: None reported by patient. \n ";
    $temp_section_text .= "Constitutional: Patient is speaking full sentences. No audible wheezing heard. \n ";
    $temp_section_text .= "Head and Face: No tenderness with guided palpation and percussion of frontal and maxillary sinuses. \n ";
    $temp_section_text .= "Ears, Nose, Mouth, Throat: No enlarged cervical and axillary lymph nodes felt on guided palpation. \n ";
    $temp_section_text .= "Neck: Full active ROM of neck in all directions without pain. \n ";
    $temp_section_text .= "Chest: No anterior chest wall tenderness on self-palpation. \n ";
    $temp_section_text .= "Abdomen: No tenderness with guided light and deep palpation of all abdominal quadrants. \n ";
    $temp_section_text .= "Musculoskeletal: Self-reports normal gait. Full active ROM of all extremities without pain or weakness. \n ";
    $temp_section_text .= "Psych: Oriented to time, place, person. Mood and affect appropriate. \n \n";

    $temp_section_text .= "\nRECOMMENDATIONS: \n ";
    $temp_section_text .= "1. Obtain immediate medical care if any trouble breathing, persistent chest pain, confusion or worsening of condition. \n ";
    $temp_section_text .= "2. Call your local public health department to obtain a COVID-19 test. \n ";
    $temp_section_text .= "3. Take hydroxychloroquine 200 mg twice a day for 5 days, zinc 50 mg twice a day for 5 days. \n ";
    $temp_section_text .= "4. Take Tylenol (acetaminophen) 500mg to 1000g every 4 hours for temperature >100 degrees F. \n ";
    $temp_section_text .= "5. Drink plenty of fluids. \n ";
    $temp_section_text .= "6. Obtain as much rest as possible. \n ";
    $temp_section_text .= "7. Keep yourself nourished with a balanced diet and hydrated with water. \n ";
    $temp_section_text .= "8. Isolate yourself as much as possible until at least 3 days after the end of symptoms or 7 days from the beginning of symptoms. \n ";
    $temp_section_text .= "9. Avoid sharing dishes, towels, bed. \n ";
    $temp_section_text .= "10. Wear your own clean mask around others. \n ";
    $temp_section_text .= "11. Dispose of used tissue in a lined trash can. \n ";
    $temp_section_text .= "12. Wash your hands frequently, especially after blowing your nose. \n ";
    $temp_section_text .= "13. Disinfect all high-touch areas (e.g. phone, keyboard, tabletops, doorknobs) to prevent the spread of your infection to others. \n ";
    $temp_section_text .= "14. Call again if condition worsens or if no improvement in 2-3 days. \n ";
    $temp_section_text .= "15. Referral to telepsychiatry due to positive PHQ-2. \n \n";

    $section_text.= $temp_section_text;
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 18){

        $temp_section_text = '';
        $temp_section_text .= "\nVitals: BMI: ".(empty($bmi) ? 'none provided' : $bmi).", GLU: ".(empty($cronic_subjective_text_detail['glu_layman']) ? 'none provided' : $cronic_subjective_text_detail['glu_layman']).", BP: ".(empty($cronic_subjective_text_detail['bp_layman']) ? 'none provided' : $cronic_subjective_text_detail['bp_layman']).", SPO2: ".(empty($cronic_subjective_text_detail['spo2_layman']) ? 'none provided' : $cronic_subjective_text_detail['spo2_layman'])."\n";

        $temp_section_text .= "Glucose Log: ".(empty($cronic_subjective_text_detail['glu_log']) ? 'none provided' : $cronic_subjective_text_detail['glu_log'])."\n";

        $temp_section_text .= "BP Log: ".(empty($cronic_subjective_text_detail['bp_log']) ? 'none provided' : $cronic_subjective_text_detail['bp_log'])."\n";

        $temp_section_text .= "Peak Flow Log: ".(empty($cronic_subjective_text_detail['peak_flow_log']) ? 'none provided' : "\n ".$cronic_subjective_text_detail['peak_flow_log'])."\n";

        $section_text.= $temp_section_text;
}

$section_text .= "Final patient symptoms/comments: \n ".(!empty($user_detail->chief_compliant_userdetail->additional_comment) ? $user_detail->chief_compliant_userdetail->additional_comment : "no additional comments" )." \n \n";


if($user_detail->organization->make_test_clinic == 1 && $user_detail->organization->standard_openemr_output == 1){
  // pr($section_text); die;
  $document_section[] = array(
                  "SetIdentifier" => $cnt++,
                  "ValueType" => "FT",
                  "IdentifierText" => $section_text,
                  "ObservationDate" => $curnt_date
              );

  $mi7_api_array = array(
    "SendingApplication" => "Valhalla",
      "MessageType" => 10,
      "TestingFlag" => false,
      "HL7MessageType" => 3,
      "PatientVisitSetIdentifier" => "1",
      "PatientID_EMR" => $internal_emr_id,
      // "FirstName" => $login_user->first_name,
      // "LastName" => $login_user->last_name,
      // "DOB" => $dob,
      // "Gender" => $login_user->gender == 1 ? "M" : "F",
      "Documents" => array(
          // "Header" => array(
          //     "DocumentType" => "PR",
          //     "ActivityDate" => $curnt_date,
          //     "TranscribedDate" => $curnt_date,
          //     "CompletionStatus" => "IP",
          // ),
         array("DocumentSections" => $document_section)
      )
  );
}else{

  $mi7_api_array = $section_text;
}

}

if($user_detail->organization->make_test_clinic == 1){

  if(is_array($mi7_api_array)){

    $mi7_api_array_json =  json_encode($mi7_api_array);

  }else{

    $mi7_api_array_json =$mi7_api_array;

  }

//die;
}else{

  $mi7_api_array_json =$mi7_api_array;
}

// saving the json data to the database
$mi7_api_array_json_to_save_encoded = base64_encode(Security::encrypt($mi7_api_array_json, SEC_KEY));
$this->ChiefCompliantUserdetails->query()
        ->update()
        ->set(['json_patient_note' => $mi7_api_array_json_to_save_encoded])
        ->where(['id' => $user_detail->chief_compliant_userdetail->id])
        ->execute();


if($user_detail->organization->make_test_clinic == 1){

  $this->Auth->logout();
  echo 'JSON TESTING : <br />';
  echo $mi7_api_array_json;
  die;

}else{

 return true;
}

$curl = curl_init();

curl_setopt_array($curl, array(
CURLOPT_URL => "http://ec2-54-85-97-18.compute-1.amazonaws.com/api/ToEHR",
CURLOPT_RETURNTRANSFER => true,
CURLOPT_ENCODING => "",
CURLOPT_MAXREDIRS => 10,
CURLOPT_TIMEOUT => 30,
CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
CURLOPT_CUSTOMREQUEST => "POST",

/*
CURLOPT_POSTFIELDS => "email=qwerty2222%40mailinator.com&password=123456&full_name=Pramod%20jangid&Kota%2C%20Rajasthan%2C%20India=&dob=05%2F25%2F1990&performer=1&service_provider=1&Teacher=1&last_confirm_terms=11%2F05%2F2018",
*/

CURLOPT_POSTFIELDS => $mi7_api_array_json ,

CURLOPT_HTTPHEADER => array(
    'APIKey: valhalladevelopment',
    'APISecret: valhallathebridge',
    // 'SystemID: 573602f4-aa6a-7e4f-ac36-7fdf6eb59e3c', // old system id
    'SystemID: 5062b7cf-eb57-16b5-c63d-f9b1c47bf211',
    'Content-Type: application/x-www-form-urlencoded',
    "cache-control: no-cache"
)

));



$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if(!empty($response)){
  $response = json_decode($response) ;
  if(strtolower($response->result) == "success")
    return $response->messageId ;
  else
    return false;
} else{
  return false ;
}

/*

if ($err) {
echo "cURL Error #:" . $err;
} else {
echo $response;
}

*/

return false ;
    }



    public function scheduledAppointments(){


      $this->viewBuilder()->setLayout('front');
      $session = $this->getRequest()->getSession();
       // $this->request->session();
     // pr($session);die;
      $USER    = $session->read('Auth.User');
      $userId = $USER['id'];

      //$curuser = $this->Users->find('all')->where(['id' => $userId])->first();
     // pr($userId);
      /*$all_field_atleast_click = 1 ; // 1 is for no error 0 is for error will show
      $tmp_check_emh_field_view = $curuser->check_emh_field_view;
      if(!empty($curuser->gender))
        $curuser->gender = Security::decrypt( base64_decode($curuser->gender), SEC_KEY);


      if(empty($tmp_check_emh_field_view))
      {
          $all_field_atleast_click = 0 ;
      }
      else
      {
        $tmp_check_emh_field_view  = unserialize($tmp_check_emh_field_view ) ;
        if(isset($tmp_check_emh_field_view['checkbasic']))
            unset($tmp_check_emh_field_view['checkbasic']); // removed basic tab check as basic tab visible on page load itself so no need to check
        if($curuser->gender == 1 || $curuser->gender == 2) unset($tmp_check_emh_field_view['checkobgyn']);
        foreach ($tmp_check_emh_field_view as $key => $value)
        {
            if($value == 0 ) $all_field_atleast_click = 0 ;
        }
      }
      $question_allergy = !empty($tmp_check_emh_field_view['checkallergy']) ? true : false ; // check the allergy tab is viewed
     $question_surgical = !empty($tmp_check_emh_field_view['checksurgical']) ? true : false ; // check the surical history tab is viewed

    // about this condition - ($curuser->gender == 0 && !( !is_null($curuser->is_uterus_removal) || $question_surgical ) )  -> client requirement is the question on surgical history is not mandatory to answer

   if($all_field_atleast_click != 1 ||
    is_null($curuser->is_retired) || $curuser->is_retired === '' ||
    ($curuser->is_retired == 0 && empty($curuser->occupation)) ||
    !(!empty($curuser->height) ||
      !empty($curuser->height_inches)) ||
    empty($curuser->weight) ||
     is_null($curuser->sexual_orientation) ||  $curuser->sexual_orientation === '' ||
     is_null($curuser->marital_status) ||  $curuser->marital_status === '' ||
     is_null($curuser->ethinicity) || $curuser->ethinicity === '' ||
     ($curuser->gender == 0 && !( !is_null($curuser->is_uterus_removal) || $question_surgical ) )  ||
      ($curuser->gender == 0 && !( !is_null($curuser->is_latex_allergy) || $question_allergy  ))   ||
       is_null($curuser->is_currentlysmoking)   ||  $curuser->is_currentlysmoking === '' ||
       is_null($curuser->is_pastsmoking)  || $curuser->is_pastsmoking === '' ||
        is_null($curuser->is_currentlydrinking)  || $curuser->is_currentlydrinking === '' ||
         is_null($curuser->is_pastdrinking)  || $curuser->is_pastdrinking === '' ||
          is_null($curuser->is_otherdrug)  ||  $curuser->is_otherdrug === '' ||
          is_null($curuser->is_otherdrugpast) ||   $curuser->is_otherdrugpast === '' ||
          empty($curuser->address) || empty($curuser->city) || empty($curuser->state) || empty($curuser->zip) || empty($curuser->guarantor) ||
           is_null($curuser->is_check_med_his) ||    $curuser->is_check_med_his === '' ||
           is_null($curuser->is_check_surg_his) ||   $curuser->is_check_surg_his === '' ||
           is_null($curuser->is_check_allergy_his)  ||  $curuser->is_check_allergy_his === '' ||
           is_null($curuser->is_family_his) ||  $curuser->is_family_his === '' || is_null($curuser->pharmacy) || empty($curuser->pharmacy))
    {
           $this->Flash->error('Please help out your doctor and fill in as much information as possible before clicking new appointment!');

               // return $this->redirect(['action' => 'medicalhistory']);
        return $this->redirect(['action' => 'editMedicalHistory',$curuser['id']]);

    }*/


      //pr($curuser);die;
      $scheduleTlb  = TableRegistry::get("Schedule");
      //$scheduleTlb = $this->loadModel('Schedule');
      //pr($scheduleTlb);die;
      $schedule_data = $scheduleTlb->find('all',array('order' => array('Schedule.id' => 'desc')))->where(['Date(Schedule.appointment_date)' => date('Y-m-d'),'Schedule.user_id' =>$userId, 'Schedule.status IN' => array(0,1,2)])->contain(['Organizations','Doctors'])->toArray();
        //->sql();
       // ->toArray();

     // pr($schedule_data);die;
      $this->set(compact('schedule_data'));
    }


    public function medicalhistory(){


      $loginuserid = $this->Auth->user('id');
      $session = $this->getRequest()->getSession();
      $iframe_api_data = null;
      if ($session->check('iframe_api_data')) {

          $iframe_api_data  = $session->read('iframe_api_data');
      }

      $this->viewBuilder()->setLayout('front');

      if(!$session->check('is_validate_editmedicalhistory') ||($session->check('is_validate_editmedicalhistory') && $session->read('is_validate_editmedicalhistory') != 1)){

          $session->write('validate_editmedicalhistory_user',  $loginuserid);
          return $this->redirect(array('action'=>'editMedicalHistory', 'prefix' => $this->prefix,$loginuserid));
      }

        $query = $this->Users->find('all')
                  ->where(['Users.id' => $loginuserid]);
        $users = $query->first();

        if(!empty($users) && empty($users['password'])){

          $session = $this->getRequest()->getSession();
          $session->write('validate_editmedicalhistory_user',  $users->id);
          return $this->redirect(['action' => 'editMedicalHistory', 'prefix' => $this->prefix ,$users['id']]);
        }


        if ($this->request->is(['patch', 'post', 'put'])) {


            $input_pass = $this->request->getData('password');
            $hasher = new DefaultPasswordHasher();
            $verify = $hasher->check($input_pass, $users->password);
            if($verify){

              $session = $this->getRequest()->getSession();
              $session->write('validate_editmedicalhistory_user',  $users->id);
              $session->write('is_validate_editmedicalhistory',1);
              return $this->redirect(array('action'=>'editMedicalHistory', 'prefix' => $this->prefix,$users['id']));

            } else {
               $this->Flash->error(__('Password is incorrect, please try again.'));

            }
        }

    }



    // prepare question in layman summary

public function prepare_other_question_layman($user_detail = null ){

// pr($user_detail);die('dfdf');

  if(!empty($user_detail->other_questions_treatment_detail))
  {
    $user_detail->other_questions_treatment_detail =@unserialize(Security::decrypt(base64_decode($user_detail->other_questions_treatment_detail) , SEC_KEY));
  }

  if(!empty($user_detail->taken_before_medicine_info))
  {
    $user_detail->taken_before_medicine_info =@unserialize(Security::decrypt(base64_decode($user_detail->taken_before_medicine_info) , SEC_KEY));
  }

  $layman_summar = '' ;

  if(!empty($user_detail->chief_compliant_other_details) && is_array($user_detail->chief_compliant_other_details)){

      $layman_summar .= 'You provided these other details: ' ;


      //set layman for medicine that taken before

      if(!empty($user_detail->taken_before_medicine_info) && is_array($user_detail->taken_before_medicine_info)){

        $layman_summar .= 'Medicine details taken before: ';

        $stop_reason = array(

          1 => "didn't work",
          2 => 'finished taking',
          3 => 'told to stop by doctor'
        );

        foreach ($user_detail->taken_before_medicine_info as $m_key => $m_value) {

          $layman_summar .= 'Medicine: '.$m_value['medicine_name'].', Dose: '.$m_value['medicine_dose'].', stop due to : '.$stop_reason[$m_value['medicine_stop_reason']].'. ';
        }
      }



      foreach ($user_detail->chief_compliant_other_details as $k => $singlelevel) {

          switch ($singlelevel['question_id'])
          {

            //quetion 1 2 3 are related to each other
            case 1:

              if($singlelevel['answer'] == 'Yes'){

                $ans2 = $user_detail->chief_compliant_other_details[$k+1]['answer'];
                if(is_array($ans2) && in_array('other',$ans2)){

                  $ans2 = $user_detail->chief_compliant_other_details[$k+2]['answer'];
                }

                $layman_summar .= ucfirst($singlelevel['answer']).', You have a hard time sleeping and '.(is_array($ans2) ? implode(',',$ans2) : $ans2).' are the reason for your sleep trouble. ' ;

              }else{

                $layman_summar .= ucfirst($singlelevel['answer']).', You have a hard time sleeping. ' ;
              }

                break;

            case 4:

                $layman_summar .= ucfirst($singlelevel['answer']).', You wake up still feeling tired. ';
                break;

            case 5:

                $layman_summar .= ucfirst($singlelevel['answer']).', you do for fun. ';
                break;

            case 6:

                $layman_summar .= ucfirst($singlelevel['answer']).', You always feel tired. ';
                break;

            case 7:

                $layman_summar .= ucfirst($singlelevel['answer']).", You ever feel depressed or have thoughts about hurting yourself. ";
                break;

            case 8:

                $layman_summar .= ucfirst($singlelevel['answer'])."% pain interfere you from interacting with others. ";
                break;

            case 9:

                $layman_summar .= ucfirst($singlelevel['answer'])."% pain interfere with your daily activities. " ;
                break;

            case 11:

                $layman_summar .= ucfirst($singlelevel['answer']).", You have a family history of any pain syndromes or arthritis. ";
                break;
            case 12:

                if(!empty($user_detail->other_questions_treatment_detail)){

                  $layman_summar .= ucfirst($singlelevel['answer']).", In the past you had taken: ";

                  foreach ($user_detail->other_questions_treatment_detail as $key => $value) {

                    $layman_summar .= ucfirst($value['treatment_type'])." at ".$value['treatment_date'].". ";

                  }

                }else{

                  $layman_summar .= ucfirst($singlelevel['answer']).", You had taken any injections, physical therapy, or chiropractic care in the past. ";
                }
              break;
          }
        }

       // $layman_summar .= '<br />';
  }
  //die;
  return array('layman_summar' => $layman_summar);
}


 //pain update tab of pain medicine mudule under follow up category
public function prepare_pain_update_question_layman($user_detail = null,$cur_cc_name = null ){

  //pr($user_detail);die;

  $layman_summar = '' ;

  if(!empty($user_detail->pain_update_question) && is_array($user_detail->pain_update_question)){

      $layman_summar .= ' You provided these pain update details: ' ;

      foreach ($user_detail->pain_update_question as $k => $singlelevel) {

          switch ($singlelevel['question_id'])
          {
            //quetion 1 2 are related to each other
            case 1:

              if($singlelevel['answer'] == 'Yes'){


                $layman_summar .= "Last time you reported ".$cur_cc_name.". You have ".$user_detail->pain_update_question[$k+1]['answer'].' new pain. ' ;

              }else{

                $layman_summar .= "Last time you reported ".$cur_cc_name.". ".$singlelevel['answer'].', You have any new pain. ' ;
              }

                break;

            case 3:

                 $layman_summar .= "Now, the pain ".$singlelevel['answer']." compared to when it first started. ";
                break;

            case 4:

                $layman_summar .= 'You rate your current pain level '.$singlelevel['answer'].' out of 10 . ';
                break;

            case 5:

                $layman_summar .= 'In the last 30 days, You rate your worst pain '.$singlelevel['answer'].' out of 10. ';
                break;

            case 6:

                $layman_summar .= "You rate your pain AFTER taking medication ".$singlelevel['answer'].' out of 10. ';
                break;

            case 7:

                $layman_summar .= ucfirst($singlelevel['answer'])."% pain affect your daily activities. ";
                break;

            case 8:

                $layman_summar .= ucfirst($singlelevel['answer'])."% pain affect social interactions with others. ";
                break;

            case 9:

                $layman_summar .= ucfirst($singlelevel['answer']).", You needed more pain medication than prescribed. " ;
                break;

            case 10:

                $layman_summar .= ucfirst($singlelevel['answer'])." makes your pain better. ";
                break;
            case 11:

                $layman_summar .= ucfirst($singlelevel['answer'])." makes your pain worse. ";

              break;

            case 12:

                $layman_summar .= "You check all those which apply: ".(is_array($singlelevel['answer']) ? implode(",", $singlelevel['answer']) : $singlelevel['answer'])."";

              break;
          }
        }

        $layman_summar .= ' ';
  }

  //echo $layman_summar;die;
  //die;
  return array('layman_summar' => $layman_summar);
}



//general update tab of pain medicine mudule under follow up category
public function prepare_general_update_question_layman($user_detail = null ){

  //pr($user_detail);die;

  $layman_summar = '' ;

  if(!empty($user_detail->general_update_question) && is_array($user_detail->general_update_question)){

      $layman_summar .= ' You provided these general update details: ';

      foreach ($user_detail->general_update_question as $k => $singlelevel) {

          switch ($singlelevel['question_id'])
          {
            //quetion 1 2 3 are related to each other
            case 13:

              if($singlelevel['answer'] == 'Yes'){


               $layman_summar .= "You been diagnosed with ".$user_detail->general_update_question[$k+1]['answer'].' new medical conditions since your last visit. ' ;

              }else{

                $layman_summar .= ucfirst($singlelevel['answer']).', You been diagnosed with any new medical conditions since your last visit. ' ;
              }

              break;


            case 15:

                 if($singlelevel['answer'] == 'Yes'){

                  if(!empty($user_detail->general_update_provider_info)){

                    $layman_summar .= 'Since your last visit, You seen '.(isset($user_detail->general_update_provider_info['provider_name']) ? $user_detail->general_update_provider_info['provider_name'] : "").' healthcare provider for '.(isset($user_detail->general_update_provider_info['speciality']) ? $user_detail->general_update_provider_info['speciality'] : "").' in '.(isset($user_detail->general_update_provider_info['address']) ? $user_detail->general_update_provider_info['address'] : "").', provider phone number is '.(isset($user_detail->general_update_provider_info['phone']) ? $user_detail->general_update_provider_info['phone'] : "").'. ';

                  }else{

                    $layman_summar .= ucfirst($singlelevel['answer']).', You seen any other healthcare providers since your last visit. ';
                  }

                 }else{

                  $layman_summar .= ucfirst($singlelevel['answer']).', You seen any other healthcare providers since your last visit. ';
                 }

                break;

            case 16:

                if($singlelevel['answer'] == 'Yes'){

                  if(isset($user_detail->general_update_question[$k+1])){

                    $layman_summar .= ucfirst($singlelevel['answer']).', You had any recent falls and fall due to : '.(isset($user_detail->general_update_question[$k+1]['answer']) ? implode(",", $user_detail->general_update_question[$k+1]['answer']) : $user_detail->general_update_question[$k+1]['answer']).'. ';

                  }else{

                     $layman_summar .= ucfirst($singlelevel['answer']).', You had any recent falls. ';

                  }

                }else{

                  $layman_summar .= ucfirst($singlelevel['answer']).', You had any recent falls. ';

                }


                break;

            case 18:

                if(!empty($user_detail->general_update_procedure_detail)){

                  $layman_summar .="You had taken recent surgeries or procedures: ";

                  foreach ($user_detail->general_update_procedure_detail as $key => $value) {

                    $layman_summar .= ucfirst($value['procedure_type'])." at ".$value['procedure_date'].". ";
                  }

                }else{

                  $layman_summar .= ucfirst($singlelevel['answer']).", You had taken any recent surgeries or procedures. ";
                }
              break;
          }
        }

        $layman_summar .= ' ';
  }

  // echo $layman_summar;die;
  // die;
  return array('layman_summar' => $layman_summar);
}



public function getUserProgress($step_id, $tab_number){

  $progress = "";

  switch($step_id){

    case 1: {

          switch($tab_number){

            case 1 :

                  $progress = "At Step 1: Chief Complaint";
                  break;
            case 2 :

                  $progress = "At Step 2: CC Details";
                  break;
            case 20 :

                  $progress = "At Step 3: Chronic pain assessment";
                  break;

            case 18 :

                  $progress = "At Step 4: COVID-19 Screening";
                  break;

            case 19 :

                  $progress = "At Step 5: PHQ-9";
                  break;
            case 3 :

                  $progress = "At Step 6: Associated Symptoms";
                  break;
            case 4 :

                  $progress = "At Step 7: Review of Systems";
                  break;

            case 5 :

                  $progress = "Completed";
                  break;
          }
    }
    break;

    case 2: {


          switch($tab_number){

            case 1 :

                  $progress = "At Step 1: Chief Complaint";
                  break;

            case 19 :

                  $progress = "At Step 2: PHQ-9";
                  break;

            case 4 :

                  $progress = "At Step 3: Review of Systems";
                  break;
            case 5 :

                  $progress = "Completed";
                  break;
          }
    }
    break;

    case 3: {

          switch($tab_number){

            case 4 :

                  $progress = "At Step 1: Review of Systems";
                  break;
            case 5 :

                  $progress = "Completed";
                  break;
          }
    }
    break;

    case 4: {

          switch($tab_number){

            case 4 :

                  $progress = "At Step 1: Review of Systems";
                  break;
            case 16 :

                  $progress = "At Step 2: Extra Detail";
                  break;
            case 5 :

                  $progress = "Completed";
                  break;
          }
    }
    break;

    case 5: {

          switch($tab_number){

            case 1 :

                  $progress = "At Step 1: Chief Complaint";
                  break;

            case 4 :

                  $progress = "At Step 2: Review of Systems";
                  break;
            case 5 :

                  $progress = "Completed";
                  break;
          }
    }
    break;

    case 6: {


          switch($tab_number){

            case 2 :

                  $progress = "At Step 1: CC Details";
                  break;
            case 4 :

                  $progress = "At Step 2: Review of Systems";
                  break;
            case 5 :

                  $progress = "Completed";
                  break;
          }
    }
    break;

    case 7: {

          switch($tab_number){

            case 1 :

                  $progress = "At Step 1: Chief Complaint";
                  break;
            case 2 :

                  $progress = "At Step 3: CC Details";
                  break;

            case 3 :

                  $progress = "At Step 4: Associated Symptoms";
                  break;
            case 4 :

                  $progress = "At Step 5: Review of Systems";
                  break;
            case 5 :

                  $progress = "Completed";
                  break;

            case 6 :

                  $progress = "At Step 2: CC Other Details";
                  break;
          }
    }
    break;

    case 8: {

        switch($tab_number){

            case 5 :

                  $progress = "Completed";
                  break;

            case 7 :

                  $progress = "At Step 1: General Updates";
                  break;
            case 8 :

                  $progress = "At Step 2: Pain Updates";
                  break;
          }
    }
    break;

    case 9: {

        switch($tab_number){

            case 5 :

                  $progress = "Completed";
                  break;

            case 9 :

                  $progress = "At Step 1: GI Health Checkup Screening";
                  break;

            case 4 :

                  $progress = "At Step 2: Review of Systems";
                  break;
          }
    }
    break;

    case 10: {

          switch($tab_number){

            case 1 :

                  $progress = "At Step 1: Chief Complaint";
                  break;
            case 4 :

                  $progress = "At Step 2: Review of Systems";
                  break;
            case 5 :

                  $progress = "Completed";
                  break;
          }
    }
    break;

    case 11: {

          switch($tab_number){

            case 10 :

                  $progress = "At Step 1: Post-procedure Checkup Detail";
                  break;
            case 4 :

                  $progress = "At Step 2: Review of Systems";
                  break;
            case 5 :

                  $progress = "Completed";
                  break;
          }
    }
    break;

    case 13: {

          switch($tab_number){

            case 11 :

                  $progress = "At Step 1: Pre-Operation Procedure Detail";
                  break;
            case 12 :

                  $progress = "At Step 2: Pre-Operation Medication";
                  break;

            case 13 :

                  $progress = "At Step 2: Pre-Operation Allergies";
                  break;
            case 5 :

                  $progress = "Completed";
                  break;
          }
    }
    break;

    case 14: {

          switch($tab_number){

            case 14 :

                  $progress = "At Step 1: Disease Selection";
                  break;
            case 15 :

                  $progress = "At Step 2: Disease Detail";
                  break;

            case 4 :

                  $progress = "At Step 3: Review of Systems";
                  break;
            case 5 :

                  $progress = "Completed";
                  break;
          }
    }
    break;

    case 15: {

          switch($tab_number){

            case 1 :

                  $progress = "At Step 1: Chief Complaint";
                  break;
            case 12 :

                  $progress = "At Step 2: Hospital/ER Follow Up Details";
                  break;

            case 4 :

                  $progress = "At Step 3: Review of Systems";
                  break;
            case 5 :

                  $progress = "Completed";
                  break;
          }
    }
    break;

    case 16: {

          switch($tab_number){

            case 4 :

                  $progress = "At Step 1: Review of Systems";
                  break;

            case 17 :

                  $progress = "At Step 2: Follow Up Details";
                  break;
            case 5 :

                  $progress = "Completed";
                  break;
          }
    }
    break;

    case 17: {

          switch($tab_number){

            case 1 :

                  $progress = "At Step 1: Chief Complaint";
                  break;

            case 2 :

                  $progress = "At Step 2: CC Details";
                  break;

            case 22 :

                  $progress = "At Step 3: Focused History Details";
                  break;

            case 18 :

                  $progress = "At Step 4: COVID-19 Screening";
                  break;

            case 3 :

                  $progress = "At Step 5: Associated Symptoms";
                  break;

            case 4 :

                  $progress = "At Step 6: Review of Systems";
                  break;

            case 5 :

                $progress = "Completed";
                break;

          }
    }
    break;

    case 18: {

          switch($tab_number){

            case 24 :

                  $progress = "At Step 1: Chronic Condition";
                  break;

            case 23 :

                  $progress = "At Step 2: Assessment";
                  break;

            case 3 :

                  $progress = "At Step 3: Associated Symptoms";
                  break;

            case 4 :

                  $progress = "At Step 4: Review of Systems";
                  break;

            case 5 :

                $progress = "Completed";
                break;
          }
    }
    break;

    case 19: {

          switch($tab_number){

            case 25 :

                  $progress = "At Step 1: Chief Complaint";
                  break;

            case 26 :

                  $progress = "At Step 2: Cancer History";
                  break;

            case 27 :

                  $progress = "At Step 3: Assessments";
                  break;
            case 28 :

                  $progress = "At Step 4: Medical History";
                  break;

            case 4 :

                  $progress = "At Step 5: Review of Systems";
                  break;
            case 5 :

                  $progress = "Completed";
                  break;
          }
    }
    break;

    case 22: {

        switch($tab_number){

            case 5 :

                  $progress = "Completed";
                  break;

            case 4 :

                  $progress = "At Step 2: Review of Systems";
                  break;
            case 33 :

                  $progress = "At Step 1: Hospital/Er Details";
                  break;
          }
    }
    break;
    case 25: {

        switch($tab_number){
            case 1 :

                  $progress = "At Step 1: Chief Complaint";
                  break;

            case 5 :

                  $progress = "Completed";
                  break;

            case 4 :

                  $progress = "At Step 8: Review of Systems";
                  break;
            case 34 :

                  $progress = "At Step 6: Assessments";
                  break;
            case 28 :

                  $progress = "At Step 5: Medical History";
                  break;
            case 3 :

                  $progress = "At Step 7: Associated Symptoms";
                  break;
            case 2 :

                  $progress = "At Step 2: CC Details";
                  break;

            case 22 :

                  $progress = "At Step 4: Focused History Details";
                  break;
            case 23 :

                  $progress = "At Step 3: Assessment/ACP";
                  break;
          }
    }
    break;
  }

  return $progress;
}


public function prepare_screening_question_layman($user_detail = null ){

//pr($user_detail);die;
  $layman_summar = '';

  if(!empty($user_detail->screening_questions_detail) && is_array($user_detail->screening_questions_detail)){

      $layman_summar .= ' You provided these GI health checkup screening details: ' ;

      foreach ($user_detail->screening_questions_detail as $k => $singlelevel) {

          switch ($singlelevel['question_id'])
          {
            //quetion 1 2 3 are related to each other
            case 1:

                $layman_summar .= ucfirst($singlelevel['answer']).', you have a family history of colon cancer in your immediate family. ' ;
              //  pr($user_detail->screening_questions_detail[$k+1]['question_id']);
                if($singlelevel['answer'] == 'Yes' && (isset($user_detail->screening_questions_detail[$k+1]['question_id']) && $user_detail->screening_questions_detail[$k+1]['question_id'] == 2)){
                 // die('cc');

                  $question_2 = array(

                    1 => '<50 years',
                    2 => '50-60 years',
                    3 => '>60 years'
                  );

                  $temp_ans2 = "";

                  foreach($user_detail->screening_questions_detail[$k+1]['answer'] as $que2_key => $que2_val){

                    $temp_ans2 .= $question_2[$que2_val].", ";

                  }
                  rtrim($temp_ans2,", ");
                  $layman_summar .= ucfirst($temp_ans2).' age were your relative diagnosed with colon cancer. ' ;

                }
                break;
            case 3:

                 $layman_summar .= "The last time you were screened for blood in your stools ".$singlelevel['answer'].'. ';
                break;
            case 4:

                $layman_summar .= ucfirst($singlelevel['answer']).', You have a history of anemia or require iron. ';
                break;

            case 5:

                $layman_summar .= 'Your last colonoscopy : '.ucfirst($singlelevel['answer']).'. ';
                break;

            case 6:

                $layman_summar .= ucfirst($singlelevel['answer']).', You had a previous colonoscopy. ';
                break;

            case 7:

                $layman_summar .= ucfirst($singlelevel['answer']).", You have a history of polyps. ";
                break;
          }
        }

        //$layman_summar .= '<br />';
  }
  //die;
  return array('layman_summar' => $layman_summar);
}


public function prepare_post_checkup_question_layman($user_detail = null, $gender = null){

//pr($user_detail);die;
  $layman_summar = '';
  $procudure = "";
  $procedure_date = "";

  if(!empty($user_detail->post_checkup_question_detail) && is_array($user_detail->post_checkup_question_detail)){

      foreach ($user_detail->post_checkup_question_detail as $k => $singlelevel) {

          switch ($singlelevel['question_id'])
          {
            //quetion 1 2 3 are related to each other
            case 13:

                if($singlelevel['answer'] == 'endoscopy (EGD)'){

                  $ans_13 = "EGD";

                }elseif($singlelevel['answer'] == 'other'){

                  $ans_13 = "";
                  if(isset($user_detail->post_checkup_question_detail[$k+1]['question_id']) && $user_detail->post_checkup_question_detail[$k+1]['question_id'] == 14){

                    $ans_13 = $user_detail->post_checkup_question_detail[$k+1]['answer'];
                  }
                }else{

                  $ans_13 = $singlelevel['answer'];
                }

                $procudure = $ans_13;

                $layman_summar .= ucfirst($ans_13).' performed ' ;
                break;
            case 15:

                 $layman_summar .= "on ".$singlelevel['answer'].'. ';
                 $procedure_date = $singlelevel['answer'];
                break;

            case 16:

                if($singlelevel['answer'] == 'Yes'){

                   $layman_summar .= 'Patient states being on anticoagulants ';
                }else{

                   $layman_summar .= ucfirst($singlelevel['answer']).', Patient does not take any blood thinners ';
                }

                break;

            case 17:

                $question_17 = $singlelevel['answer'];
                if($singlelevel['answer'] == 'Yes'){

                    $layman_summar .= "which were resumed ";

                }else{

                    $layman_summar .= "and has not resumed taking them.";

                }
                break;

            case 18:

                if(isset($question_17) && $question_17 == 'Yes'){

                  $layman_summar .= "on ".$singlelevel['answer'].". ";
                }

                 break;

            case 19:

                $question_19 = array(

                  'regular diet' => 'regular diet',
                  'soft foods only' => 'soft diet',
                  'clear liquids only' => 'liquid diet'
                );

                $diet = $question_19[$singlelevel['answer']];
                break;

            case 20:

                $question_20 = array(

                  'well' => 'tolerating',
                  'not well' => 'not tolerating'
                );

                $layman_summar .= ($gender == 0 ? 'She':'He')." is ".$question_20[$singlelevel['answer']];

                if(isset($diet)){

                    $layman_summar .= " a ".$diet.". ";
                }
                break;

            case 21:


                $apply_all = array('vomiting','abdominal pain','dark black stools','bright red blood in stools');
                $not_apply = is_array($singlelevel['answer']) ? array_diff($apply_all,$singlelevel['answer']):"";

                 $layman_summar .= "Patient is positive for ".(is_array($singlelevel['answer']) ? str_replace("dark black stools", "melena", implode(", ", $singlelevel['answer'])) : str_replace("dark black stools", "melena",$singlelevel['answer'])).'. ';

                 if(!empty($not_apply)){

                    $layman_summar .= ($gender == 0 ? 'She':"He")." denies ".(is_array($not_apply) ? implode(", ", $not_apply): $not_apply).". ";
                 }

                break;
            case 22:

                   $layman_summar .= ucfirst($singlelevel['answer']).' times patient have vomited. ';

                break;

            case 23:

              if($singlelevel['answer'] == 'Yes'){

                  $layman_summar .= 'Hematemesis, There was blood or coffee ground-looking stuff in the vomit. ';
              }else{

                $layman_summar .= ucfirst($singlelevel['answer']).', There was blood or coffee ground-looking stuff in the vomit. ';
              }

                break;

            case 24:

                $question_24 = array(

                  '1' => 'very well',
                  '2' => 'well',
                  '3' => 'unwell'
                );

                $layman_summar .= "Patient is feeling overall ".$question_24[$singlelevel['answer']].'. ';
                break;
          }
        }

        $layman_summar .= ' ';
  }

  //echo $layman_summar;die;
  //die;
  return array('layman_summar' => $layman_summar,'procudure' => $procudure,'procedure_date' => $procedure_date);
}

public function prepare_followup_post_checkup_question_layman($user_detail = null, $prev_visit_user_detail = null, $gender = null){

//     pr($prev_visit_user_detail);
// //pr($user_detail);
//     die;
    $prev_ccd = $prev_visit_user_detail->post_checkup_question_detail;
    $recent_ccd = $user_detail->post_checkup_question_detail;
    $temp_prev_ccd = array();

    if(is_array($prev_ccd) && !empty($prev_ccd))
    {
        // this block will replace the key of this array as question id so that we can use that in the coming block
        foreach ($prev_ccd as $key => $value) {

            if(is_array($value) && isset($value['question_id'])){

                $temp_prev_ccd[$value['question_id']] = $value;
            }
        }
    }

    $prev_ccd = $temp_prev_ccd ;
    $prev_recent_ccd = array();

    if(!empty($recent_ccd)){
    // get the prev and recent cc detials int the same array for comparison
        foreach ($recent_ccd as $key => $value) {
            // $prev_recent_ccd[$key] = $value ;
            if(is_array($value) && isset($value['question_id'])){

                $recent_ccd[$key]['prev_answer'] = (isset($prev_ccd[$value['question_id']]) && isset($prev_ccd[$value['question_id']]['answer']))? $prev_ccd[$value['question_id']]['answer'] : "";
            }
        }
    }

// pr($prev_ccd);
// pr($recent_ccd);die;
  $layman_summar = '';
  $procudure = "";
  $procedure_date = "";

  if(!empty($recent_ccd) && is_array($recent_ccd)){

      foreach ($recent_ccd as $k => $singlelevel) {

          switch ($singlelevel['question_id'])
          {
            //quetion 1 2 3 are related to each other
            case 13:

                $prev_answer = '';
                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;
                $prev_answer_13 = str_replace("endoscopy (EGD)",'EGD',$prev_answer);

                if(strpos($prev_answer_13,'other') !== false && isset($prev_ccd[14]) && isset($prev_ccd[14]['answer'])){

                    $prev_answer_13 = str_replace("other",$prev_ccd[14]['answer'],$prev_answer_13);
                }

                if($singlelevel['answer'] == 'endoscopy (EGD)'){

                  $ans_13 = "EGD";

                }elseif($singlelevel['answer'] == 'other'){

                  $ans_13 = "";
                  if(isset($user_detail->post_checkup_question_detail[$k+1]['question_id']) && $user_detail->post_checkup_question_detail[$k+1]['question_id'] == 14){

                    $ans_13 = $user_detail->post_checkup_question_detail[$k+1]['answer'];
                  }
                }else{

                  $ans_13 = $singlelevel['answer'];
                }

                $procudure = $ans_13;

                $layman_summar .= ucfirst($ans_13).$prev_answer_13.' performed ';
                break;

            case 15:

                $prev_answer = '';
                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                 $layman_summar .= "on ".$singlelevel['answer'].$prev_answer.'. ';
                 $procedure_date = $singlelevel['answer'];
                break;

            case 16:

                $prev_answer = '';
                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;
                $prev_answer = str_replace("Yes", "anticoagulants", $prev_answer);

                if($singlelevel['answer'] == 'Yes'){

                   $layman_summar .= 'Patient states being on anticoagulants'.$prev_answer.' ';
                }else{

                   $layman_summar .= ucfirst($singlelevel['answer']).$prev_answer.', Patient does not take any blood thinners ';
                }

                break;

            case 17:

                $question_17 = $singlelevel['answer'];

                if($singlelevel['answer'] == 'Yes'){

                    $layman_summar .= "which were resumed ";

                }else{

                    $layman_summar .= "and has not resumed taking them.";

                }
                break;

            case 18:

                if(isset($question_17) && $question_17 == 'Yes'){

                    $prev_answer = '';
                    $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                    $layman_summar .= "on ".$singlelevel['answer'].$prev_answer.". ";
                }

                 break;

            case 19:

                $question_19 = array(

                  'regular diet' => 'regular diet',
                  'soft foods only' => 'soft diet',
                  'clear liquids only' => 'liquid diet'
                );

                $prev_answer = '';
                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$question_19[$singlelevel['prev_answer']].')' ) ;

                $diet = $question_19[$singlelevel['answer']].$prev_answer;
                break;

            case 20:

                $question_20 = array(

                  'well' => 'tolerating',
                  'not well' => 'not tolerating'
                );

                $prev_answer = '';
                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$question_20[$singlelevel['prev_answer']].')' ) ;

                $layman_summar .= ($gender == 0 ? 'She':'He')." is ".$question_20[$singlelevel['answer']].$prev_answer;

                if(isset($diet)){

                    $layman_summar .= " a ".$diet.". ";
                }
                break;

            case 21:


                $apply_all = array('vomiting','abdominal pain','dark black stools','bright red blood in stools');

                $cur_apply = (is_array($singlelevel['answer']) ? str_replace("dark black stools", "melena", implode(", ", $singlelevel['answer'])) : str_replace("dark black stools", "melena",$singlelevel['answer']));

                $prev_apply = (is_array($singlelevel['prev_answer']) ? str_replace("dark black stools", "melena", implode(", ", $singlelevel['prev_answer'])) : str_replace("dark black stools", "melena",$singlelevel['prev_answer']));

                $prev_apply_ans = empty($prev_apply) ? '' : ( $cur_apply == $prev_apply ? ' (no change)' : ' (from '.$prev_apply.')' ) ;


                $not_apply = is_array($singlelevel['answer']) ? array_diff($apply_all,$singlelevel['answer']):"";
                $cur_not_apply = (is_array($not_apply) ? implode(", ", $not_apply): $not_apply);

                $prev_not_apply = is_array($singlelevel['prev_answer']) ? array_diff($apply_all,$singlelevel['answer']):"";
                $prev_not_apply = (is_array($prev_not_apply) ? implode(", ", $prev_not_apply): $prev_not_apply);

                $prev_not_apply_ans = empty($prev_not_apply) ? '' : ( $cur_not_apply == $prev_not_apply ? ' (no change)' : ' (from '.$prev_not_apply.')' ) ;

                 $layman_summar .= "Patient is positive for ".$cur_apply.$prev_apply_ans.'. ';

                 if(!empty($not_apply)){

                    $layman_summar .= ($gender == 0 ? 'She':"He")." denies ".$cur_not_apply.$prev_not_apply_ans.". ";
                 }

                break;
            case 22:


                    $prev_answer = '';
                    $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                   $layman_summar .= ucfirst($singlelevel['answer']).$prev_answer.' times patient have vomited. ';

                break;

            case 23:

                $prev_answer = '';
                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                $prev_answer = str_replace("Yes", "Hematemesis", $prev_answer);

              if($singlelevel['answer'] == 'Yes'){

                  $layman_summar .= 'Hematemesis'.$prev_answer.', There was blood or coffee ground-looking stuff in the vomit. ';
              }else{

                $layman_summar .= ucfirst($singlelevel['answer']).$prev_answer.', There was blood or coffee ground-looking stuff in the vomit. ';
              }

                break;

            case 24:

                $question_24 = array(

                  '1' => 'very well',
                  '2' => 'well',
                  '3' => 'unwell'
                );

                $prev_answer = '';
                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$question_24[$singlelevel['prev_answer']].')' ) ;

                $layman_summar .= "Patient is feeling overall ".$question_24[$singlelevel['answer']].$prev_answer.'. ';
                break;
          }
        }

        $layman_summar .= ' ';
  }
  return array('layman_summar' => $layman_summar,'procudure' => $procudure,'procedure_date' => $procedure_date);
}


public function prepare_pre_op_procedure_detail_question_layman($user_detail = null ){

//pr($user_detail);die;
  $layman_summar = '';

  if(!empty($user_detail->pre_op_procedure_detail) && is_array($user_detail->pre_op_procedure_detail)){

      $layman_summar .= ' You provided these procedure details: ' ;

      foreach ($user_detail->pre_op_procedure_detail as $k => $singlelevel) {

          switch ($singlelevel['question_id'])
          {
            //quetion 1 2 3 are related to each other
            case 13:

                if($singlelevel['answer'] == 'endoscopy (EGD)'){

                  $ans_13 = "EGD";

                }elseif($singlelevel['answer'] == 'other'){

                  $ans_13 = "";
                  if(isset($user_detail->pre_op_procedure_detail[$k+1]['question_id']) && $user_detail->pre_op_procedure_detail[$k+1]['question_id'] == 14){

                    $ans_13 = $user_detail->pre_op_procedure_detail[$k+1]['answer'];
                  }
                }else{

                  $ans_13 = $singlelevel['answer'];
                }

                $layman_summar .= "You have done ".$ans_13.' procedure. ' ;
                break;
            case 25:

                  if($singlelevel['answer'] == 'No'){

                      $layman_summar .= ucfirst($singlelevel['answer']).', You have not scheduled date for the procedure. ';
                  }else{


                    if(isset($user_detail->pre_op_procedure_detail[$k+1]['question_id']) && $user_detail->pre_op_procedure_detail[$k+1]['question_id'] == 26){

                      $layman_summar .= "You have scheduled procedure on ".$user_detail->pre_op_procedure_detail[$k+1]['answer'].'. ';
                    }else{

                      $layman_summar .= ucfirst($singlelevel['answer']).', You have scheduled date for the procedure. ';
                    }
                  }

                break;
          }
        }

        $layman_summar .= ' ';
  }
  //die;
  return array('layman_summar' => $layman_summar);
}


public function prepare_pre_op_medication_detail_question_layman
($user_detail = null ){

//pr($user_detail);die;
  $layman_summar = '';

  if(!empty($user_detail->pre_op_medications_question_detail) && is_array($user_detail->pre_op_medications_question_detail)){

      $layman_summar .= ' You provided these pre operation medications details: ' ;

      foreach ($user_detail->pre_op_medications_question_detail as $k => $singlelevel) {

          switch ($singlelevel['question_id'])
          {
            //quetion 27,28,29 are related to each other
            case 27:

                if($singlelevel['answer'] == 'Yes'){


                    if(isset($user_detail->pre_op_medications_question_detail[$k+1]['question_id']) && $user_detail->pre_op_medications_question_detail[$k+1]['question_id'] == 28){


                        $ans_28 = (is_array($user_detail->pre_op_medications_question_detail[$k+1]['answer']) ? implode(", ", $user_detail->pre_op_medications_question_detail[$k+1]['answer']) : $user_detail->pre_op_medications_question_detail[$k+1]['answer']);

                        if(isset($user_detail->pre_op_medications_question_detail[$k+2]['question_id']) && $user_detail->pre_op_medications_question_detail[$k+2]['question_id'] == 29){


                            $ans_28 = str_replace("Other", $user_detail->pre_op_medications_question_detail[$k+2]['answer'], $ans_28);
                        }


                        $layman_summar .= "Currently You take ".$ans_28." blood thinner medications like warfarin, heparin, Coumadin, Xarelto, or Lovenox. " ;

                    }else{

                         $layman_summar .= "Yes, Currently You take blood thinner medications like warfarin, heparin, Coumadin, Xarelto, or Lovenox. " ;
                    }
                }else{

                    $layman_summar .= "No, Currently You does not take any blood thinner medications like warfarin, heparin, Coumadin, Xarelto, or Lovenox. " ;
                }


                break;
            case 30:

                  if($singlelevel['answer'] == 'No'){

                      $layman_summar .= 'No, You do not take aspirin or baby aspirin regularly. ';
                  }else{

                    $layman_summar .= 'Yes, You take aspirin or baby aspirin regularly. ';

                  }

                break;

             case 31:

                  if($singlelevel['answer'] == 'No'){

                      $layman_summar .= 'No, You have not taken any NSAID pain medications like ibuprofen, Advil, Motrin, Alleve in the past week. ';
                  }else{

                      $layman_summar .= 'Yes, You have taken any NSAID pain medications like ibuprofen, Advil, Motrin, Alleve in the past week. ';

                  }

                break;

            case 32:

                if($singlelevel['answer'] == 'Yes'){


                    if(isset($user_detail->pre_op_medications_question_detail[$k+1]['question_id']) && $user_detail->pre_op_medications_question_detail[$k+1]['question_id'] == 33){


                        $ans_33 = (is_array($user_detail->pre_op_medications_question_detail[$k+1]['answer']) ? implode(", ", $user_detail->pre_op_medications_question_detail[$k+1]['answer']) : $user_detail->pre_op_medications_question_detail[$k+1]['answer']);

                        if(isset($user_detail->pre_op_medications_question_detail[$k+2]['question_id']) && $user_detail->pre_op_medications_question_detail[$k+2]['question_id'] == 34){


                            $ans_33 = str_replace("other", $user_detail->pre_op_medications_question_detail[$k+2]['answer'], $ans_33);
                        }


                        $layman_summar .= "Currently You taking ".$ans_33." herbal supplements such as garlic, ginko, ginseng. ";

                    }else{

                         $layman_summar .= "Yes, Currently You taking herbal supplements such as garlic, ginko, ginseng. " ;
                    }
                }else{

                    $layman_summar .= "No, Currently You does not taking any herbal supplements such as garlic, ginko, ginseng. " ;
                }


                break;


          }
        }

        $layman_summar .= ' ';
  }
  //die;
  return array('layman_summar' => $layman_summar);
}


//prepare layman for cronic illness module
public function prepare_chronic_illnesses_layman($user_detail = null ){

  $layman_summar = '';

  //pr($user_detail);die;

  if(!empty($user_detail->disease_questions_detail) && is_array($user_detail->disease_questions_detail)){

      foreach ($user_detail->disease_questions_detail as $disease_key => $disease_value) {

          $disease_layman_summar = '';
          $alarm_symptom_layman = "";
          $baseline_symptom_layman = "";
          $denies_alarm_symptom_layman = "";
          $denies_baseline_symptom_layman = "";
          //disease name layman
          if(isset($disease_value['disease']) && !empty($disease_value['disease'])){

              $disease_layman_summar .= ' You provided these '.$disease_value['disease']['name'].' details: ' ;
          }
          else{

            continue;
          }

          //disease detail alarm symptom detail
           if(isset($disease_value['alarm_sysmptom']) && !empty($disease_value['alarm_sysmptom'])){

                foreach ($disease_value['alarm_sysmptom'] as $alrmsymptn_key => $alrmsymptn_val) {

                  if($alrmsymptn_val['answer'] == 1){

                    $alarm_symptom_layman .= '+'.(!empty($alrmsymptn_val['medical_name']) ? $alrmsymptn_val['medical_name'] : $alrmsymptn_val['name']).', ';

                  }
                  else{

                        $denies_alarm_symptom_layman .= (!empty($alrmsymptn_val['medical_name']) ? $alrmsymptn_val['medical_name'] : $alrmsymptn_val['name']).', ';
                  }

                }
                $alarm_symptom_layman = rtrim($alarm_symptom_layman,', ');
                $denies_alarm_symptom_layman = rtrim($denies_alarm_symptom_layman,', ');
          }

          //disease detail baseline symptom detail
           if(isset($disease_value['baseline_sysmptom']) && !empty($disease_value['baseline_sysmptom'])){

                foreach ($disease_value['baseline_sysmptom'] as $baslinesysmptn_key => $baslinesysmptn_val) {

                  if($baslinesysmptn_val['answer'] == 1){

                    //$baseline_symptom_layman .= '+'.(!empty($baslinesysmptn_val['medical_name']) ? $baslinesysmptn_val['medical_name'] : $baslinesysmptn_val['name']).', ';

                    $baseline_symptom_layman .= '+'.(!empty($baslinesysmptn_val['medical_name']) ? $baslinesysmptn_val['medical_name'] : $baslinesysmptn_val['name']).' feels '.($baslinesysmptn_val['scale']== 'about the same' ? 'same' : $baslinesysmptn_val['scale']).', ';
                  }
                  else{

                    $denies_baseline_symptom_layman .= (!empty($baslinesysmptn_val['medical_name']) ? $baslinesysmptn_val['medical_name'] : $baslinesysmptn_val['name']).', ';
                  }

                }
                $baseline_symptom_layman = rtrim($baseline_symptom_layman,', ');
                $denies_baseline_symptom_layman = rtrim($denies_baseline_symptom_layman,', ');
          }

          //question detail layman

         if(isset($disease_value['multivitamin_detail'])){

            $detail_qestion_layman = $this->prepare_cronic_disease_question_layman($disease_value['disease_detail_question'],$disease_value['multivitamin_detail']);
          }
          else{

            $detail_qestion_layman = $this->prepare_cronic_disease_question_layman($disease_value['disease_detail_question']);
          }


          $layman_summar .= $disease_layman_summar;

          if(!empty($detail_qestion_layman['layman_summar'])){

              $layman_summar .= $detail_qestion_layman['layman_summar'];
          }

           if(!empty($baseline_symptom_layman)){

             $layman_summar .= 'You noticed the baseline symptoms of '.$baseline_symptom_layman.'. ';
          }

          if(!empty($denies_baseline_symptom_layman)){

            $layman_summar = rtrim($layman_summar,'. ');
            $layman_summar .= ', denies '.$denies_baseline_symptom_layman.'. ';
          }

          if(!empty($alarm_symptom_layman)){

             $layman_summar .= 'You noticed the alarm symptoms of '.$alarm_symptom_layman.'. ' ;
          }

          if(!empty($denies_alarm_symptom_layman)){

            $layman_summar = rtrim($layman_summar,'. ');
            $layman_summar .= ', denies '.$denies_alarm_symptom_layman.'. ';
          }
      }
    }

    $layman_summar .= ' ';
  return array('layman_summar' => $layman_summar);
  }



public function prepare_cronic_disease_question_layman($question_detail = null,  $multivitamin_detail = null){

  $layman_summar = '';

  if(!empty($question_detail) && is_array($question_detail)){

      foreach ($question_detail as $k => $singlelevel) {

          switch ($singlelevel['question_id'])
          {
            //quetion 27,28,29 are related to each other
            case 35:

                if($singlelevel['answer'] == 'Yes'){


                    if(isset($question_detail[$k+1]['question_id']) && $question_detail[$k+1]['question_id'] == 36){

                         $layman_summar .= "You had your last colonoscopy on ".$question_detail[$k+1]['answer']." in the last 10 years. " ;

                    }else{

                         $layman_summar .= "Yes, You had a colonoscopy in the last 10 years. " ;
                    }
                }else{

                    $layman_summar .= "No, You had not a colonoscopy in the last 10 years. " ;
                }


                break;
            case 37:

                  if($singlelevel['answer'] == 'Yes'){


                    if(isset($question_detail[$k+1]['question_id']) && $question_detail[$k+1]['question_id'] == 38){


                         $layman_summar .= "You have received genetic counseling on ".$question_detail[$k+1]['answer']." in the past. " ;

                    }else{

                         $layman_summar .= "Yes, You have received genetic counseling in the past. " ;
                    }
                }else{

                    $layman_summar .= "No, You have not received genetic counseling in the past. " ;
                }

                break;

             case 39:


                  if($singlelevel['answer'] == 'Yes'){


                      if(isset($question_detail[$k+1]['question_id']) && $question_detail[$k+1]['question_id'] == 40){


                           $layman_summar .= "You had genetic tests on ".$question_detail[$k+1]['answer']." for colon cancer. " ;

                      }else{

                           $layman_summar .= "Yes, You have done genetic tests for colon cancer. " ;
                      }
                  }else{

                      $layman_summar .= "No, You have not done any genetic tests for colon cancer. " ;
                  }

                break;

            case 41:

                if($singlelevel['answer'] == 'Yes'){


                  if(isset($question_detail[$k+1]['question_id']) && $question_detail[$k+1]['question_id'] == 42){


                           $layman_summar .= "You have ever had a flexible sigmoidoscopy done on ".$question_detail[$k+1]['answer'].". " ;

                      }else{

                           $layman_summar .= "Yes, You have ever had a flexible sigmoidoscopy done. " ;
                      }
                  }else{

                      $layman_summar .= "No, You have not ever had a flexible sigmoidoscopy done. ";
                  }

                break;
            case 43:

                  if($singlelevel['answer'] == 'Yes'){

                    if(!empty($multivitamin_detail) && isset($multivitamin_detail['name']) && !empty($multivitamin_detail['name'])){

                            $vitamin_detail = $multivitamin_detail['name'];

                            if(isset($multivitamin_detail['dose'])){

                                $vitamin_detail .=  ' '.$multivitamin_detail['dose'];
                            }

                            if(isset($multivitamin_detail['how_often'])){

                                $vitamin_detail .=  ' '.$multivitamin_detail['how_often'];
                            }

                            if(isset($multivitamin_detail['how_taken'])){

                                $vitamin_detail .=  ' '.$multivitamin_detail['how_taken'];
                            }

                      $layman_summar .= "You are taking supplements ".$vitamin_detail.". ";

                    }
                    else{

                      $layman_summar .= "Yes , You are taking supplements like a multivitamin, iron, or B12. ";
                    }

                  }
                  else{

                      $layman_summar .= "No, You are not taking any supplements like a multivitamin, iron, or B12. ";
                  }
                  break;

            case 44;


                if($singlelevel['answer'] == 'Yes'){

                  $layman_summar .= "Yes, You have noticed side effects when taking your medications. ";

                }else{

                  $layman_summar .= "No, You have not noticed any side effects when taking your medications. ";

                }
                break;

            case 45:

              $question_45 = array(

                'Much better' => 'significant improvement',
                'A little better' => 'mildly improved',
                'About the same' => 'stable',
                'A little worse' => 'mild worsening',
                'Much worse' => 'significantly worse'
              );

              $layman_summar .= "Overall you feels ".$question_45[$singlelevel['answer']]." since your last visit. ";

                break;
          }
        }

        $layman_summar .= ' ';
  }
  //die;
  return array('layman_summar' => $layman_summar);
}

public function verifyOtp($fun_name = null){

  $this->loadModel('Users');
  $this->viewBuilder()->setLayout('front');
  if($this->request->is(['post', 'put'])){

    $otp = $this->request->getData('otp');
    $user_data = $this->Users->find('all')->where(['otp' => $otp])->first();
    //pr($user_data);die;
    if(!empty($user_data)){

      $user_data->otp = "";

      if(base64_decode($fun_name) == 'forgotpassword'){

        $this->Users->save($user_data);
        $this->Flash->success(__("Please check your email for activation link or contact admin."));
        return $this->redirect(['controller' => 'users','action' => 'resetPassword', 'prefix' => $this->prefix,base64_encode($user_data['id'])]);

      }
      else{
        $mail_send = 0;
        if(!empty($user_data['email']) && $user_data['is_email_confirmed'] == 0){


          $hashCode = sha1(time() . rand(0, 100));
          $user_data->activation_link = $hashCode;
          $activationLink = Router::url(['controller' => 'Users','action' => 'activate',
                                       '?' => ['c' => $hashCode,'u' => $user_data['email']]], true);

          $mailData = array();
          $mailData['slug'] = 'activate-account';
          $mailData['email'] = $this->CryptoSecurity->decrypt(base64_decode($user_data['email']), SEC_KEY);
          $mailData['replaceString'] = array('{user}','{activation_link}');

          $first_name = "user";
          if(!empty($user_data['first_name']))
            $first_name = $this->CryptoSecurity->decrypt(base64_decode($user_data['first_name']), SEC_KEY);

          $mailData['replaceData'] = array($first_name,$activationLink);

          $this->MailSend->send( $mailData );
          $mail_send = 1;
        }
        $user_data->is_phone_confirmed =  1;
        if($this->Users->save($user_data)){

          $mail_send == 1 ? $this->Flash->success(__("Please check your email for activation link or contact admin.")) : $this->Flash->success(__("Account activated successfully."));
          return $this->redirect(['controller' => 'users','action' => 'login', 'prefix' => $this->prefix]);

        }
        else{

          $this->Flash->error(__("Something went wrong, please try again."));
          return $this->redirect($this->referer());
        }
      }

    }
    else{

      $this->Flash->error(__("Invalid otp."));
      return $this->redirect($this->referer());
    }
  }

}

public function resendOtp(){

  $this->viewBuilder()->setLayout('front');
  if($this->request->is(['post', 'put'])){

      $this->loadModel('Users');
      $phone = $this->request->getData('phone');
      if(empty($phone)){

          $this->Flash->error('Phone number is required.');
           return $this->redirect($this->referer());
      }

      $phone = base64_encode($this->CryptoSecurity->encrypt($phone,SEC_KEY));

      $user_data = $this->Users->find('all')->where(['phone' => $phone])->first();
      if(!empty($user_data)){

        $user_data->otp = rand(111111,999999);

        if($this->Users->save($user_data))
        {

          $username = 'user';
          if(!empty($user_data['first_name'])){

            $username = $this->CryptoSecurity->decrypt(base64_decode($user_data['first_name']), SEC_KEY);
          }

          $phone = $this->CryptoSecurity->decrypt(base64_decode($user_data['phone']), SEC_KEY);
          require_once(ROOT . DS  . 'vendor' . DS  .'twilio'.DS.'sdk'.DS. 'Twilio' . DS . 'autoload.php');
          $text_msg = "Dear ".$username."\n Use this otp ".$user_data->otp." to verify the phone number.";
          // Send an SMS using Twilio's REST API and PHP

          $this->sid = Configure::read('App.twilio_sid');
          // Your Account SID from www.twilio.com/console
          $this->token = Configure::read('App.twilio_access_token');
           // Your Auth Token from www.twilio.com/console
          $this->twilio_number = Configure::read('App.twilio_number');


          $client = new Client($this->sid, $this->token);
          try{

            $message = $client->messages->create(
              '+1'.$phone, // Text this number
              array(
                'from' => $this->twilio_number, // From a valid Twilio number
                'body' => $text_msg
              )
            );
          }
          catch(\Exception $e){

           $this->Flash->error('Invalid phone number');
           return $this->redirect($this->referer());
          }

        $this->Flash->success('Otp sent successfully.');
        return $this->redirect(array('controller' => 'users','action' => 'verifyOtp', 'prefix' => $this->prefix));
      }

      $this->Flash->error('Something went wrong, please try again.');
      return $this->redirect($this->referer());

      }

      $this->Flash->error('Phone number is not registered at allevia.');
      return $this->redirect($this->referer());
  }
}

public function signDocs($org_id,$doc_type = null){

  //echo $this->request->getParam('event');

  $this->loadModel('Organizations');
  $this->loadModel('UserSignedDocs');
  $this->viewBuilder()->setLayout('front');
  $session = $this->getRequest()->getSession();
  $USER    = $session->read('Auth.User');
 // pr($USER);die;
  $login_user = $this->Users->find('all')->where(['id'=>$USER['id']])->first();

  $org_id = base64_decode($org_id);
  $org_data = $this->Organizations->find('all')->where(['id' => $org_id])->first();
  $user_sign_data = $this->UserSignedDocs->find('all')->where(['user_id' => $login_user['id'],'organization_id' => $org_data['id']])->first();

  //check document is signed or not, if signed the redirect to all scheduled appointment screen
  /*if(!empty($org_data) && $org_data['is_show_ancillary_docs'] == 1 && !empty($user_sign_data) && $user_sign_data['patient_type'] == 1 && ((!empty($org_data['privacy_policy_docs']) && !empty($user_sign_data['privacy_policy_docs'])) || (!empty($org_data['treatment_consent_docs']) && !empty($user_sign_data['treatment_docs'])))){

        return $this->redirect(['action' => 'scheduledAppointments']);
    }


  if(!empty($this->request->query['event']) && $this->request->query['event'] == 'signing_complete'){

    require_once(ROOT . DS  . 'vendor' . DS  .'docusign'.DS.'esign-client'.DS.'autoload.php');

    // DocuSign account credentials & Integrator Key
    $username = "testingbydev@gmail.com";
    $password = "dev@12345678";
    $integrator_key = "85860b7a-e4df-498a-8761-a5d9d2876d4b";
    $host = "https://demo.docusign.net/restapi";

    try{
      //die;
      // create a new DocuSign configuration and assign host and header(s)
      $config = new \DocuSign\eSign\Configuration();
      $config->setHost($host);
      $config->addDefaultHeader("X-DocuSign-Authentication", "{\"Username\":\"" . $username . "\",\"Password\":\"" . $password . "\",\"IntegratorKey\":\"" . $integrator_key . "\"}");
      /////////////////////////////////////////////////////////////////////////
      // STEP 1:  Login() API
      /////////////////////////////////////////////////////////////////////////
      // instantiate a new docusign api client
      $apiClient = new \DocuSign\eSign\ApiClient($config);


      //get the envlope information
      $envelopeApi = new \DocuSign\eSign\Api\EnvelopesApi($apiClient);

      if($session->check('accountid') && $session->check('envelope_id') && !empty($session->read('accountid')) && !empty($session->read('envelope_id')))
      {

        $final_document = $envelopeApi->listDocuments($session->read('accountid'),$session->read('envelope_id'));
        // echo '<pre>';
        // print_r($final_document['envelope_documents']);die;
        if(isset($final_document['envelope_documents']) && !empty($final_document['envelope_documents'])){

          foreach ($final_document['envelope_documents'] as $key => $value) {
           // die('sds');
            // echo '<pre>';
            // print_r($value);
            // die;
            if(is_numeric($value['document_id'])){

              $file_name = 'uploads/user_signed_docs/'.$value['name'];

              if(empty($file_name)){

                $file_name = 'uploads/user_signed_docs/'.time().'-'.uniqid().'.pdf';
              }
              $document_data = $envelopeApi->getDocument($session->read('accountid'),$value['document_id'],$session->read('envelope_id'));

              $session->delete('accountid');
              $session->delete('envelope_id');
              //die;
              if(!empty($document_data)){

                $readDoc = file_get_contents($document_data->getPathname());
                file_put_contents($file_name,$readDoc);
                // $url = 'signed_docs/'.$value['name'];
                // header('Location:'.$url);

                $doc_type = base64_decode($doc_type);
                if(!empty($user_sign_data)){

                  if($doc_type == 'privacy'){

                    $user_sign_data->privacy_policy_docs = $value['name'];
                  }

                  if($doc_type == 'treatment'){

                    $user_sign_data->treatment_docs = $value['name'];
                  }

                }
                else{

                    $user_sign_data = $this->UserSignedDocs->newEntity();
                    $user_sign_data->organization_id = $org_data['id'];
                    $user_sign_data->user_id = $login_user['id'];
                    $user_sign_data->patient_type = 1;
                    if($doc_type == 'privacy'){

                      $user_sign_data->privacy_policy_docs = $value['name'];
                    }

                    if($doc_type == 'treatment'){

                      $user_sign_data->treatment_docs = $value['name'];
                    }

                }
                if($this->UserSignedDocs->save($user_sign_data)){

                    $this->Flash->success('Document signed successfully.');
                    return $this->redirect(['action' => 'signDocs',base64_encode($org_id)]);
                }
                else{

                  $this->Flash->error('Document not saved, Please try again.');
                  return $this->redirect(['action' => 'signDocs',base64_encode($org_id)]);
                }
              }

            }
          }
        }
        else{

          $this->Flash->error('Envelope not found.');
          return $this->redirect(['action' => 'signDocs',base64_encode($org_id)]);
        }
      }
      else{

        //envelop id and account id not found
          $this->Flash->error('Envelope id not found.');
          return $this->redirect(['action' => 'signDocs',base64_encode($org_id)]);
      }

    }
    catch(\Exception $e){

        //echo 'something went wrong.';
        $this->Flash->error('something went wrong.');
        return $this->redirect(['action' => 'signDocs',base64_encode($org_id)]);
    }
  }*/

  /*if(empty($org_data) || (!empty($org_data) && $org_data['is_show_ancillary_docs'] == 0) || (!empty($org_data) && $org_data['is_show_ancillary_docs'] == 1 && empty($org_data['treatment_consent_docs']) && empty($org_data['privacy_policy_docs']))){

    return $this->redirect(['action' => 'medicalhistory']);
  }*/

  //save the user signed data in database table
  if($this->request->is('post'))
  {

    $input = $this->request->data();

    /*if($input['new_patient'] == 1 && !empty($org_data) && (!empty($org_data['privacy_policy_docs']) && (!isset($input['privacy_policy_docs']) || (isset($input['privacy_policy_docs']) && empty($input['privacy_policy_docs'])))) && (!empty($org_data['treatment_consent_docs']) && (!isset($input['treatment_docs']) || (isset($input['treatment_docs']) && empty($input['treatment_docs'])))) ){


          $this->Flash->error('Data could not be saved.');
          return $this->redirect($this->referer());
      }*/

    if(!empty($user_sign_data)){

      $user_sign_data->patient_type = $input['new_patient'];
    }
    else{

      $user_sign_data = $this->UserSignedDocs->newEntity();
      $user_sign_data->organization_id = $org_data['id'];
      $user_sign_data->user_id = $login_user['id'];
      $user_sign_data->patient_type = $input['new_patient'];

    }

    if($this->UserSignedDocs->save($user_sign_data)){

      if($session->check('current_schedule_id') && !empty($session->read('current_schedule_id'))){
        $schedule_id = $session->read('current_schedule_id');
        $session->delete('current_schedule_id');
        $this->Flash->success('Data saved successfully.');
        return $this->redirect(['action' => 'newAppointment', 'prefix' => $this->prefix,$schedule_id]);

      }
      else{
          $this->Flash->success('Data saved successfully.');
          return $this->redirect(['action' => 'scheduledAppointments', 'prefix' => $this->prefix]);
      }

    }
    else{

        $this->Flash->error('Data could not be saved.');
        return $this->redirect($this->referer());
    }

  }

  $this->set(compact('org_data','user_sign_data'));

}

public function signedOrgDoc($org_id,$doc,$doc_type = null){

  $this->autoRender = false;
  $this->loadModel('Users');
  $org_id = base64_decode($org_id);
  $doc = base64_decode($doc);
  $session = $this->getRequest()->getSession();
  $USER    = $session->read('Auth.User');
 // pr($USER);die;
  $login_user = $this->Users->find('all')->where(['id'=>$USER['id']])->first();
 // pr($login_user);die;

  require_once(ROOT . DS  . 'vendor' . DS  .'docusign'.DS.'esign-client'.DS.'autoload.php');
  //require_once SITE_URL.'vendor/docusign/esign-client/autoload.php';
  // DocuSign account credentials & Integrator Key
  $username = "testingbydev@gmail.com";
  $password = "dev@12345678";
  $integrator_key = "85860b7a-e4df-498a-8761-a5d9d2876d4b";
  $host = "https://demo.docusign.net/restapi";
  try{


    $config = new \DocuSign\eSign\Configuration();
    $config->setHost($host);
    $config->addDefaultHeader("X-DocuSign-Authentication", "{\"Username\":\"" . $username . "\",\"Password\":\"" . $password . "\",\"IntegratorKey\":\"" . $integrator_key . "\"}");
    /////////////////////////////////////////////////////////////////////////
    // STEP 1:  Login() API
    /////////////////////////////////////////////////////////////////////////
    // instantiate a new docusign api client
    $apiClient = new \DocuSign\eSign\ApiClient($config);

    // we will first make the Login() call which exists in the AuthenticationApi...
    $authenticationApi = new \DocuSign\eSign\Api\AuthenticationApi($apiClient);
    // optional login parameters
    $options = new \DocuSign\eSign\Api\AuthenticationApi\LoginOptions();
    // call the login() API
    $loginInformation = $authenticationApi->login($options);
    // parse the login results
    if (isset($loginInformation) && count($loginInformation) > 0) {
        // note: defaulting to first account found, user might be a
        // member of multiple accounts
        $loginAccount = $loginInformation->getLoginAccounts()[0];
        if (isset($loginInformation)) {
            $accountId = $loginAccount->getAccountId();
            if (!empty($accountId)) {

              $session->write('accountid',$accountId);
              //$_SESSION['accountid'] = $accountId;
               // echo "Account ID = {$accountId}\n";
            }
        }
    }

    //die('sds');
    /////////////////////////////////////////////////////////////////////////
    // STEP 2:  Create & Send Envelope with Embedded Recipient
    /////////////////////////////////////////////////////////////////////////
    // set recipient information
    $first_name = 'User';
    if(!empty($login_user['first_name'])){

      $first_name = $this->CryptoSecurity->decrypt(base64_decode($login_user['first_name']),SEC_KEY);
    }
    $email = 'testingbydev@gmail.com';
    if(!empty($login_user['email'])){

      $email = $this->CryptoSecurity->decrypt(base64_decode($login_user['email']),SEC_KEY);
    }

    $recipientName = $first_name;
    $recipientEmail = $email;
    // configure the document we want signed
    $documentFileName = WEBROOT.'uploads/ancillary_docs/'.$doc;
    $documentName = time().'-'.uniqid().".pdf";
    // instantiate a new envelopeApi object
    $envelopeApi = new \DocuSign\eSign\Api\EnvelopesApi($apiClient);
    // echo '<pre>';
    // print_r($envelopeApi);die;
    // Add a document to the envelope
    $document = new \DocuSign\eSign\Model\Document();
    $document->setDocumentBase64(base64_encode(file_get_contents($documentFileName)));
    $document->setName($documentName);
    $document->setDocumentId("1");

    // $document_data = $document->getDocumentFields();
    // pr($document_data);die;

    // echo '<pre>';
    // print_r($document);die;
    // Create a |SignHere| tab somewhere on the document for the recipient to sign
    $signHere = new \DocuSign\eSign\Model\SignHere();
    $signHere->setXPosition("100");
    $signHere->setYPosition("550");
    $signHere->setDocumentId("1");
    $signHere->setPageNumber("1");
    $signHere->setRecipientId("1");
    // add the signature tab to the envelope's list of tabs
    $tabs = new \DocuSign\eSign\Model\Tabs();
    $tabs->setSignHereTabs(array($signHere));
    // add a signer to the envelope
    $signer = new \DocuSign\eSign\Model\Signer();
    $signer->setEmail($recipientEmail);
    $signer->setName($recipientName);
    $signer->setRecipientId("1");
    $signer->setTabs($tabs);
    $signer->setClientUserId("1234");
    // must set this to embed the recipient!
    // Add a recipient to sign the document
    $recipients = new \DocuSign\eSign\Model\Recipients();
    $recipients->setSigners(array($signer));
    $envelop_definition = new \DocuSign\eSign\Model\EnvelopeDefinition();
    $envelop_definition->setEmailSubject("Sign Ancillary Docs");
    // set envelope status to "sent" to immediately send the signature request
    $envelop_definition->setStatus("sent");
    $envelop_definition->setRecipients($recipients);
    $envelop_definition->setDocuments(array($document));
    // create and send the envelope! (aka signature request)
    $envelop_summary = $envelopeApi->createEnvelope($accountId, $envelop_definition, null);
    $envelope_id = $envelop_summary->getEnvelopeId();
    //$_SESSION['envelope_id'] = $envelope_id;
    $session->write('envelope_id',$envelope_id);

    /////////////////////////////////////////////////////////////////////////
    // STEP 3:  Request Recipient View (aka signing URL)
    /////////////////////////////////////////////////////////////////////////
    // instantiate a RecipientViewRequest object
    $recipient_view_request = new \DocuSign\eSign\Model\RecipientViewRequest();
    // set where the recipient is re-directed once they are done signing
    $return_url = SITE_URL.'users/sign-docs/'.base64_encode($org_id).'/'.$doc_type;
    $recipient_view_request->setReturnUrl($return_url);
    // configure the embedded signer
    $recipient_view_request->setUserName($recipientName);
    $recipient_view_request->setEmail($recipientEmail);
    // must reference the same clientUserId that was set for the recipient when they
    // were added to the envelope in step 2
    $recipient_view_request->setClientUserId("1234");
    // used to indicate on the certificate of completion how the user authenticated
    $recipient_view_request->setAuthenticationMethod("email");
    // generate the recipient view! (aka embedded signing URL)
    $signingView = $envelopeApi->createRecipientView($accountId, $envelop_summary->getEnvelopeId(), $recipient_view_request);

    $doc_url = $signingView->getUrl();
    if(!empty($doc_url)){

      return $this->redirect($doc_url);
    }
  }
  catch(\Exception $e){
    // pr($e->getResponseBody());
    // pr($e);die;
    $this->Flash->error($e->getResponseBody()->message);
    return $this->redirect(['action' => 'signDocs', 'prefix' => $this->prefix, base64_encode($org_id)]);
  }
  //echo $org_id.'  '.$doc;die;

}


    public function allSignedDocs(){


      $this->viewBuilder()->setLayout('front');
      $session = $this->getRequest()->getSession();
       // $this->request->session();
     // pr($session);die;
      $USER    = $session->read('Auth.User');
      $userId = $USER['id'];
      $this->loadModel('UserSignedDocs');
      $doc_data = $this->UserSignedDocs->find('all',array('order' => array('UserSignedDocs.id' => 'desc')))->contain(['Organizations'])->where(['user_id'=> $userId])->toArray();

      $this->set(compact('doc_data'));
    }



      public function synonyms()
    {
        $this->autoRender = false;
        $this->loadModel('ChiefCompliants');
        if ($this->request->is('post','ajax'))
        {
            $synonymsArray = array();
            $chiefCompliantsData = $this->ChiefCompliants->find('list', [
                                    'keyField' => 'id',
                                    'valueField' => 'synonyms'])->where(['name' =>$this->request->data['value']])->first();
            if(!empty($chiefCompliantsData))
            {
                $synonymsArray = explode(',',$chiefCompliantsData);
                echo  json_encode($synonymsArray);die;
            }
            else
            {
                echo  json_encode($synonymsArray);die;
            }
      }
    }


    public function checkSynonyms($all_cc, $i = 0)
    {
      //pr($all_cc);die;
      if(!empty($all_cc) && is_array($all_cc)){

        //$i = 0;
        while($i < count($all_cc)) {

          $symtoms =  strtolower(trim($all_cc[$i]));
            $chiefCompliantsData = $this->ChiefCompliants->find('list', [
                                    'keyField' => 'id',
                                    'valueField' => 'synonyms'])->where(['name' => trim($symtoms)])->first();
            //pr()
                if(!empty($chiefCompliantsData))
            {
                  $synonymsArray = explode(',',$chiefCompliantsData);
                 // pr($synonymsArray);
                  if(!empty($synonymsArray) && count($synonymsArray) > 0)
                  {
                    foreach ($all_cc as $k => $value) {

                      $value = strtolower(trim($value));
                      if(in_array($value, $synonymsArray))
                      {
                        unset($all_cc[$k]);
                        $all_cc = $this->checkSynonyms($all_cc);
                      }
                    }
                    $all_cc = array_values($all_cc);
                  }
            }
            $i++;
        }
      }
        return $all_cc;
    }

    public function timeManagement($timemanagementarray)
    {

          $timeManagementTbl = TableRegistry::get('time_management');
          $timeManagement = $timeManagementTbl->newEntity();
          $timeManagementPatchEntity = $timeManagementTbl->patchEntity($timeManagement,$timemanagementarray);
          $timeManagementTbl->save($timeManagementPatchEntity);
    }

    public function verifyUserDetails($user_id, $data = ''){


      $user_id = base64_decode($user_id);
      if(!empty($data)){

        $data = explode("-", base64_decode($data));
      }
      if(!empty($data[0]))
      {
        $this->Schedules = $this->loadModel('Schedules');
        $this->Organizations = $this->loadModel('Organizations');
        $schedule = $this->Schedules->find('all')->where(['id' => $data[0]])->first();
        $organization = $this->Organizations->find('all')->where(['id' => $schedule['organization_id']])->first();

        $clinic_color_scheme['heading_color'] = !empty($organization['heading_color']) ? $organization['heading_color'] : '' ;
        $clinic_color_scheme['general_title_color'] = !empty($organization['general_title_color']) ? $organization['general_title_color'] : '' ;
        $clinic_color_scheme['general_text_color'] = !empty($organization['general_text_color']) ? $organization['general_text_color'] : '' ;
        $clinic_color_scheme['background_color'] = !empty($organization['background_color']) ? $organization['background_color'] : '' ;
        $clinic_color_scheme['text_color'] = !empty($organization['text_color']) ? $organization['text_color'] : '' ;
        $clinic_color_scheme['button_gradient_color1'] = !empty($organization['button_gradient_color1']) ? $organization['button_gradient_color1'] : '' ;
        $clinic_color_scheme['button_gradient_color2'] = !empty($organization['button_gradient_color2']) ? $organization['button_gradient_color2'] : '' ;
        $clinic_color_scheme['button_gradient_color3'] = !empty($organization['button_gradient_color3']) ? $organization['button_gradient_color3'] : '' ;
        $clinic_color_scheme['active_button_color'] = !empty($organization['active_button_color']) ? $organization['active_button_color'] : '' ;
        $clinic_color_scheme['hover_state_color'] = !empty($organization['hover_state_color']) ? $organization['hover_state_color'] : '' ;
        $clinic_color_scheme['active_state_color'] = !empty($organization['active_state_color']) ? $organization['active_state_color'] : '' ;
        $clinic_color_scheme['link_color'] = !empty($organization['link_color']) ? $organization['link_color'] : '' ;
        $clinic_color_scheme['link_hover_color'] = !empty($organization['link_hover_color']) ? $organization['link_hover_color'] : '' ;
        $clinic_color_scheme['clinic_logo_status'] = !empty($organization['clinic_logo_status']) ? $organization['clinic_logo_status'] : '' ;
        $clinic_color_scheme['clinic_logo'] = !empty($organization['clinic_logo']) ? $organization['clinic_logo'] : '' ;
        $session = $this->getRequest()->getSession();
        $session->write([
        'clinic_color_scheme' => $clinic_color_scheme,
        ]);
      }
     // pr($data);die('xcxc');
      $this->loadModel('Users');
      $this->loadModel('Schedule');
      $this->viewBuilder()->setLayout('front');
      if($this->request->is(['post', 'put'])){

        $first_name_req = trim($this->request->getData('first_name'));
        $last_name_req = trim($this->request->getData('last_name'));
        $dob_req = trim($this->request->getData('dob'));
        $user_data = $this->Users->find('all')->where(['id' => $user_id])->first();
        //pr($user_data);die;
        if(!empty($user_data)){

          if(!empty($user_data['first_name'])){

            $first_name = $this->CryptoSecurity->decrypt(base64_decode($user_data['first_name']),SEC_KEY);
          }
          if(!empty($user_data['last_name'])){

            $last_name = $this->CryptoSecurity->decrypt(base64_decode($user_data['last_name']),SEC_KEY);
          }

          if(!empty($user_data['dob'])){
            $dob = $this->CryptoSecurity->decrypt(base64_decode($user_data['dob']),SEC_KEY);
          }

          //check user detail is valid or not
          if(strcasecmp($first_name_req, $first_name) == 0  && strcasecmp($last_name_req, $last_name) == 0 && strcasecmp($dob_req, $dob) == 0){

            $user_data->verify_detail = 0;
            $this->Users->save($user_data);

            $user_data = $user_data->toArray();
            //set the patient in auth
            $this->Auth->setUser($user_data);
            //save the patient login activity in database
            $this->General->userActivity(['action_performed' => 1, 'user_id' => $user_data['id']]);

            if(!empty($data) && is_array($data)){

              $query = $this->Schedule->query();
              $query->update()
                    ->set(['iframe_enid' => ""])
                    ->where(['id' => $data[0]])
                    ->execute();

              if(isset($data[1]) && $data[1] == 'editmedicalhistory'){

                return $this->redirect(['controller' => 'users', 'action' => 'editMedicalHistory', 'prefix' => $this->prefix, $user_data['id']]);
              }
              else{

                // return $this->redirect(['controller' => 'users', 'action' => 'newAppointment', 'prefix' => $this->prefix, base64_encode($data[0].'-'.time())]);
                 return $this->redirect(['controller' => 'users', 'action' => 'registeredUserQuestion', 'prefix' => $this->prefix, base64_encode($data[0].'-'.time())]);
              }
            }
            else{

              return $this->redirect(['controller' => 'users', 'action' => 'newAppointment', 'prefix' => $this->prefix]);
              // return $this->redirect(['controller' => 'users', 'action' => 'registeredUserQuestion', 'prefix' => false, base64_encode($data[0].'-'.time())]);
            }
          }
          else{

            /*$error_msg = "";
            if($user_data['first_name'] != $first_name){
              $error_msg = "Invalid first name.";
            }
            elseif($user_data['last_name'] != $last_name){
              $error_msg = "Invalid last name.";
            }
            elseif($user_data['dob'] != $dob){
              $error_msg = "Invalid DOB.";
            }*/

            if($user_data['verify_detail'] < 2){

              $user_data->verify_detail = $user_data['verify_detail']+1;
              $this->Users->save($user_data);
              $this->Flash->error("Invalid first name or last name or DOB.");
              $this->redirect($this->referer());

            }
            else{

              if(!empty($data) && isset($data[2]) && $data[2] == 'api'){

                $query = $this->Schedule->query();
                $query->update()
                    ->set(['iframe_enid' => ""])
                    ->where(['id' => $data[0]])
                    ->execute();
              }

              $user_data->verify_detail = 0;
              $this->Users->save($user_data);
              $this->Flash->error(__("Patient first name, last name, dob is not matched. Please contact the service provider to re-create the pre-appointment link and verify again."));
              $this->redirect(['controller' => 'Pages', 'action' => 'contactUs', 'prefix' => $this->prefix]);
            }
          }
        }
        else{

          $this->Flash->error(__("Please contact to service provider to create the pre-appointment link."));
          $this->redirect(['controller' => 'Pages', 'action' => 'contactUs', 'prefix' => $this->prefix]);
        }
      }

    }
    public function payment($apt_id,$schedule_id,$organization_id)
    {

      $this->viewBuilder()->setLayout('front');
      $organization_id = base64_decode($organization_id);
      $organization = $this->Organizations->find('all')->where(['id' => $organization_id])->first();
      $payment_amount = $organization->payment_amount;
      // if($this->request->is('post','put'))
      // {
      //     $this->Flash->success(__('Report sent successfully.'));
      //     $this->Auth->logout();
      //     return $this->redirect(['controller' => 'users','action' => 'login', 'prefix' => $this->prefix]);
      // }
      $this->set(compact('payment_amount'));
    }
    public function precedingSignup($schedule_id = null)
    {
        $this->viewBuilder()->setLayout('front');        
        $user = $this->Users->newEntity();
        $session = $this->getRequest()->getSession();
        $exist_zip_code_data = $session->read('zip_code_data');
        //pr($zip_code_data); die;
        $ex_zipcode = $exist_zip_code_data['zipcode'];
        $ex_session_schedule_id = $exist_zip_code_data['schedule_id'];
        if(!empty($ex_zipcode) && !empty($ex_session_schedule_id) && !empty($schedule_id) && $schedule_id != $ex_session_schedule_id)
        { 
          // die('dsfs');
          $session->delete('zip_code_data');
          return $this->redirect(array('action' => 'precedingSignup','prefix' => $this->prefix,$schedule_id));
        }
        $zip_code_data = $session->read('zip_code_data');
        //pr($zip_code_data); die;
        $zipcode = $zip_code_data['zipcode'];
        $session_schedule_id = $zip_code_data['schedule_id'];

        if(!empty($zipcode) && !empty($session_schedule_id) && !empty($schedule_id) && $schedule_id == $session_schedule_id)
        {
          return $this->redirect(array('action' => 'registerFrontUser','prefix' => $this->prefix,$schedule_id));
        }        
        elseif(!empty($zipcode) && !empty($session_schedule_id))
        {
          return $this->redirect(array('action' => 'registerFrontUser','prefix' => $this->prefix,$session_schedule_id));
        }
        elseif(!empty($zipcode))
        {
          return $this->redirect(array('action' => 'registerFrontUser','prefix' => $this->prefix));
        }
        if($this->request->is('post'))
        {
           $this->loadModel('ZipCodes');
           if(!empty($this->request->data('zipcode')))
           {
            $zipcode = $this->request->data('zipcode');
            $existzipcode = $this->ZipCodes->find('all')->where(['zipcode'=>$zipcode])->first();
            if(!empty($existzipcode))
            {
              $session = $this->getRequest()->getSession();
              $zip_code_data = array(
                'zipcode' => $zipcode ? $zipcode :'',
                'schedule_id' => $schedule_id ? $schedule_id :'',
              );
              $session->write('zip_code_data',$zip_code_data);
              if(!empty($schedule_id))
              {
                $this->redirect(['controller'=>'Users','action' => 'registerFrontUser', 'prefix' => $this->prefix,$schedule_id]);
              }
              else{
                $this->redirect(['controller'=>'Users','action' => 'registerFrontUser', 'prefix' => $this->prefix]);
              }
              
            }
            else
            {
              $this->redirect(['controller'=>'Users','action' => 'interestedUser', 'prefix' => $this->prefix, base64_encode($zipcode)]);
            }
           }
        }
        $this->set(compact('user'));
    }
    public function interestedUser($zipcode)
    {
        $this->viewBuilder()->setLayout('front'); 
        $this->loadModel('InterestedUser');
        $zipcode = $zipcode;
        $InterestedUser = $this->InterestedUser->newEntity();
        
        if($this->request->is('post'))
        {
           if(!empty($this->request->data('email')) || !empty($this->request->data('zipcode')))
           {
            $zipcode = base64_decode($this->request->data('zipcode'));
            $encrypt_zipcode = $zipcode ? base64_encode($this->CryptoSecurity->encrypt($zipcode,SEC_KEY)) :'';
            $encrypt_email = $this->request->data('email') ? base64_encode($this->CryptoSecurity->encrypt($this->request->data('email'),SEC_KEY)):'';
            $existInterestedUser = $this->InterestedUser->find('all')->where(['zipcode'=>$encrypt_zipcode,'email' =>$encrypt_email])->first();
            if(!empty($existInterestedUser))
            {
             $this->Flash->error(__("Request has been already sent.")); 
             return $this->redirect($this->referer());  
            }
            $this->request->data['zipcode'] = $encrypt_zipcode;
            $this->request->data['email'] = $encrypt_email;
            $interestedUser = $this->InterestedUser->patchEntity($InterestedUser,$this->request->data());
            if ($this->InterestedUser->save($interestedUser)) {
                $this->Flash->success(__('We are currently not operating in your zip code, but will be coming soon!'));

                return $this->redirect($this->referer());
            }
            $this->Flash->error(__("Request could not be sent. Please, try again."));
            return $this->redirect($this->referer());
           }
           $this->Flash->error(__("Request could not be sent. Please, try again."));
           return $this->redirect($this->referer());
        }
        $this->set(compact('InterestedUser','zipcode'));
    }
    public function paybycard()
    {
        $this->autoRender = false;
        // pr($this->request->data['data']['amount']); die;
        $amount = $this->request->data['data']['amount'];

        $payment_mode = Configure::read('App.payment_mode');
        $test_secret_key = Configure::read('App.test_secret_key');
        $live_secret_key = Configure::read('App.live_secret_key');
        if($payment_mode == 2) {
            $secret_key = $test_secret_key;
          }else
          {
            $secret_key = $live_secret_key;
          }
          // echo $secret_key; die;        
        require_once(ROOT . DS  .'vendor/stripe/stripe-php/init.php');
        \Stripe\Stripe::setApiKey($secret_key);
            try {
                  // retrieve JSON from POST body
                  $json_str = file_get_contents('php://input');
                  $json_obj = json_decode($json_str);

                  $paymentIntent = \Stripe\PaymentIntent::create([
                    'amount' => $amount*100,
                    'currency' => 'usd',
                    'description' => 'A demo of a card payment on Stripe',
                    // 'name' =>'tarannum',
                    // 'payment_method' => $json_obj->payment_method,

                  ]);
                  // pr($paymentIntent);
                  $output = [
                    'clientSecret' => $paymentIntent->client_secret,
                  ];

                  echo json_encode($output);
                } 
                catch(\Stripe\Exception\CardException $e) {
                  // Since it's a decline, \Stripe\Exception\CardException will be caught
                  echo 'Status is:' . $e->getHttpStatus() . '\n';
                  echo 'Type is:' . $e->getError()->type . '\n';
                  echo 'Code is:' . $e->getError()->code . '\n';
                  // param is '' in this case
                  echo 'Param is:' . $e->getError()->param . '\n';
                  echo 'Message is:' . $e->getError()->message . '\n';
                } catch (\Stripe\Exception\RateLimitException $e) {
                  // Too many requests made to the API too quickly
                } catch (\Stripe\Exception\InvalidRequestException $e) {
                  // Invalid parameters were supplied to Stripe's API
                } catch (\Stripe\Exception\AuthenticationException $e) {
                  // Authentication with Stripe's API failed
                  // (maybe you changed API keys recently)
                } catch (\Stripe\Exception\ApiConnectionException $e) {
                  // Network communication with Stripe failed
                } catch (\Stripe\Exception\ApiErrorException $e) {
                  // Display a very generic error to the user, and maybe send
                  // yourself an email
                } catch (Exception $e) {
                  // Something else happened, completely unrelated to Stripe
                }
    }

    public function transactionhistory()
    {
      $this->autoRender = false;
      if( $this->request->is(['post','put','ajax']) ){
        // pr($this->request->data()); die;
      $result = $this->request->data();
      $this->loadModel('TransactionHistory');
      $TransactionHistory = $this->TransactionHistory->newEntity();
      $this->request->data['paymentIntent_id'] =  $result['paymentIntent']['id'];
      $this->request->data['amount'] = $result['paymentIntent']['amount']/100;
      $this->request->data['capture_method'] = $result['paymentIntent']['capture_method'];
      $this->request->data['currency'] = $result['paymentIntent']['currency'];
      $this->request->data['payment_method'] = $result['paymentIntent']['payment_method'];
      $this->request->data['payment_method_types'] = $result['paymentIntent']['payment_method_types'][0];
      $this->request->data['status'] = $result['paymentIntent']['status'];
      $this->request->data['schedule_id'] = $result['schedule_id'];
            $TransactionHistory = $this->TransactionHistory->patchEntity($TransactionHistory,$this->request->data());
            if ($this->TransactionHistory->save($TransactionHistory) && !empty($result['paymentIntent']['status'])) {
                // $ ;
                echo json_encode($result);die;
            }
            else
            {
              echo 'fail';die;
            }
          
        }
    }
}
