<?php

namespace App\Controller\Component;

use Cake\Controller\Component;
use Cake\ORM\TableRegistry;
use Cake\Mailer\Email;
use Cake\Core\Configure;
use Cake\View\Helper;
use Cake\ORM\Table;
use Cake\I18n\Time;
use Cake\Controller\Controller;
use Cake\Controller\Component\CookieComponent;
use Cake\Controller\Component\PaginatorComponent;
use Cake\Utility\Security;
use Cake\Event\Event;
use Cake\Network\Exception\NotFoundException;
class GeneralComponent extends Component
{
    public $components = array('CryptoSecurity','CcDetail');

    public function send( $email12345 )
    {

        $mailMessage = '';
        $email = new Email('default');

        try{

            $result = $email->from(['vinod@devtechnosys.com' => 'dfd'])

                          ->to($email12345)

                          ->emailFormat('html')

                          ->subject('activate you account')

                          ->send($mailMessage);

            return true;

        }
        catch(Exception $e){
           return false;
        }
    }

    public function getUserName($id = null)
    {

         $blog = TableRegistry::get('Users');

         $data = $blog->find('all',['conditions'=>['id'=>$id]]);

         $num = $data->toArray();

         return $num[0]->username ;

    }

    public function staticPage(){

        $array = array();

        $array['homepage'] = 'Home Page';

        $array['login'] = 'Login Page';

        $array['registration'] = 'Registration Page';

        return $array;

    }



    public function is_completed_medical_history($curuser)

    {



        $all_field_atleast_click = 1 ; // 1 is for no error 0 is for error will show

        // pr($curuser) ; die;

        $tmp_check_emh_field_view = $curuser->check_emh_field_view;



        if(!empty($curuser->gender))

        $curuser->gender = Security::decrypt( base64_decode($curuser->gender), SEC_KEY);


        if(empty($tmp_check_emh_field_view)){

            $all_field_atleast_click = 0 ;

        }

        else

        {

            $tmp_check_emh_field_view  = unserialize($tmp_check_emh_field_view ) ;

            if(isset($tmp_check_emh_field_view['checkbasic']))

                unset($tmp_check_emh_field_view['checkbasic']); // removed basic tab check as basic tab visible on page load itself so no need to check

            if($curuser->gender == 1) unset($tmp_check_emh_field_view['checkobgyn']);



            foreach ($tmp_check_emh_field_view as $key => $value) {

                if($value == 0 ) $all_field_atleast_click = 0 ;

            }



        }



        $question_allergy = !empty($tmp_check_emh_field_view['checkallergy']) ? true : false ; // check the allergy tab is viewed

        $question_surgical = !empty($tmp_check_emh_field_view['checksurgical']) ? true : false ; // check the surical history tab is viewed

        if($all_field_atleast_click != 1 ||

        is_null($curuser->is_retired) || $curuser->is_retired === '' ||

        ($curuser->is_retired == 0 && empty($curuser->occupation)) ||

        !(!empty($curuser->height) ||

          !empty($curuser->height_inches)) ||

        empty($curuser->weight) ||

         is_null($curuser->sexual_orientation) ||  $curuser->sexual_orientation === '' ||

         is_null($curuser->marital_status) ||  $curuser->marital_status === '' ||

         is_null($curuser->ethinicity) || $curuser->ethinicity === '' ||

         ($curuser->gender == 0 && !( !is_null($curuser->is_uterus_removal) || $question_surgical ) )  ||

          ($curuser->gender == 0 && !( !is_null($curuser->is_latex_allergy) || $question_allergy  ))   ||

           is_null($curuser->is_currentlysmoking)   ||  $curuser->is_currentlysmoking === '' ||

           is_null($curuser->is_pastsmoking)  || $curuser->is_pastsmoking === '' ||

            is_null($curuser->is_currentlydrinking)  || $curuser->is_currentlydrinking === '' ||

             is_null($curuser->is_pastdrinking)  || $curuser->is_pastdrinking === '' ||

              is_null($curuser->is_otherdrug)  ||  $curuser->is_otherdrug === '' ||

              is_null($curuser->is_otherdrugpast) ||   $curuser->is_otherdrugpast === '' ||

              empty($curuser->address) || empty($curuser->city) || empty($curuser->state) || empty($curuser->zip) || empty($curuser->guarantor) ||

               is_null($curuser->is_check_med_his) ||    $curuser->is_check_med_his === '' ||

               is_null($curuser->is_check_surg_his) ||   $curuser->is_check_surg_his === '' ||

               is_null($curuser->is_check_allergy_his)  ||  $curuser->is_check_allergy_his === '' ||

               is_null($curuser->is_family_his) ||  $curuser->is_family_his === '' )

        {





            return 0;



        }



        return 1;

    }



    public function is_access_pre_appointment_link($schedule_id){



      $schedule = TableRegistry::get('Schedule');

      $schedule_data = $schedule->find('all')->where(['id'=> $schedule_id])->first();



        if(!empty($schedule_data) && date('Y-m-d',strtotime($schedule_data['created'])) >= date('Y-m-d') && ($schedule_data['status'] == 1 || $schedule_data['status'] == 2)){



          return true;

        }



      return false;

    }





    public function note_detail_in_open_emr_format($id = null , $atp_id = null, $mrn = "",$formatting = 'abbr'){



        $this->Users = TableRegistry::get('Users');
        $this->WomenSpecific = TableRegistry::get('WomenSpecific');

        $login_user = $this->Users->find('all')->contain('Organizations')->where(['Users.id' => $id])->first();
        $women_field =  $this->WomenSpecific->find('all')->where(['user_id' => $id ])->first();
        $cc = '';

        if(!empty( $women_field)){

            $womanrec = $women_field;

            if(!empty($womanrec->age_of_first_priod)){



                $womanrec->age_of_first_priod = Security::decrypt( base64_decode($womanrec->age_of_first_priod), SEC_KEY);

            }



            if(!empty($womanrec->no_of_pregnency)){

                $womanrec->no_of_pregnency = Security::decrypt( base64_decode($womanrec->no_of_pregnency), SEC_KEY);

            }



            if(!empty($womanrec->no_of_miscarriage)){

                $womanrec->no_of_miscarriage = Security::decrypt( base64_decode($womanrec->no_of_miscarriage), SEC_KEY);

            }

            if(!empty($womanrec->is_regular_papsmear)){

                $womanrec->is_regular_papsmear = Security::decrypt( base64_decode($womanrec->is_regular_papsmear), SEC_KEY);

            }



            if(!empty($womanrec->papsmear_finding)){



                $womanrec->papsmear_finding = Security::decrypt( base64_decode($womanrec->papsmear_finding), SEC_KEY);

            }



            if(!empty($womanrec->papsmear_month)){



                $womanrec->papsmear_month = Security::decrypt( base64_decode($womanrec->papsmear_month), SEC_KEY);

            }

            if(!empty($womanrec->papsmear_year)){

                $womanrec->papsmear_year = Security::decrypt( base64_decode($womanrec->papsmear_year), SEC_KEY);

            }





            if(!empty($womanrec->is_curently_pregnant)){

                $womanrec->is_curently_pregnant = Security::decrypt( base64_decode($womanrec->is_curently_pregnant), SEC_KEY);

            }

            if(!empty($womanrec->current_baby_sex)){

                $womanrec->current_baby_sex = Security::decrypt( base64_decode($womanrec->current_baby_sex), SEC_KEY);

            }

            if(!empty($womanrec->currently_pregnant_week)){



                $womanrec->currently_pregnant_week = Security::decrypt( base64_decode($womanrec->currently_pregnant_week), SEC_KEY);

            }



            if(!empty($womanrec->currently_pregnant_days)){

                $womanrec->currently_pregnant_days = Security::decrypt( base64_decode($womanrec->currently_pregnant_days), SEC_KEY);

            }



            if(!empty($womanrec->currently_pregnant_complication)){

                $womanrec->currently_pregnant_complication = Security::decrypt( base64_decode($womanrec->currently_pregnant_complication), SEC_KEY);

            }



            if(!empty($womanrec->is_previous_birth)){



                $womanrec->is_previous_birth = Security::decrypt( base64_decode($womanrec->is_previous_birth), SEC_KEY);

            }





            if(!empty($womanrec->previous_birth_sex)){



                $womanrec->previous_birth_sex = Security::decrypt( base64_decode($womanrec->previous_birth_sex), SEC_KEY);

            }

            if(!empty($womanrec->previous_delivery_method)){

                $womanrec->previous_delivery_method = Security::decrypt( base64_decode($womanrec->previous_delivery_method), SEC_KEY);

            }



            if(!empty($womanrec->previos_pregnancy_duration)){



                $womanrec->previos_pregnancy_duration = Security::decrypt( base64_decode($womanrec->previos_pregnancy_duration), SEC_KEY);

            }



            if(!empty($womanrec->previous_complication)){



                $womanrec->previous_complication = Security::decrypt( base64_decode($womanrec->previous_complication), SEC_KEY);



            }



            if(!empty($womanrec->previous_hospital)){



                $womanrec->previous_hospital = Security::decrypt( base64_decode($womanrec->previous_hospital), SEC_KEY);

            }



            if(!empty($womanrec->is_mammogram))

            {

                $womanrec->is_mammogram = Security::decrypt( base64_decode($womanrec->is_mammogram), SEC_KEY);

            }



            if(!empty($womanrec->mammogram_month))



            {

                $womanrec->mammogram_month = Security::decrypt( base64_decode($womanrec->mammogram_month), SEC_KEY);

            }

            if(!empty($womanrec->mammogram_year))

             {

                $womanrec->mammogram_year = Security::decrypt( base64_decode($womanrec->mammogram_year), SEC_KEY);

            }



            if(!empty($womanrec->previous_abnormal_breast_lump))

            {

                $womanrec->previous_abnormal_breast_lump = Security::decrypt( base64_decode($womanrec->previous_abnormal_breast_lump), SEC_KEY);

            }



            if(!empty($womanrec->any_biopsy))

            {

                $womanrec->any_biopsy = Security::decrypt( base64_decode($womanrec->any_biopsy), SEC_KEY);

            }



            if(!empty($womanrec->is_sti_std))

            {

                $womanrec->is_sti_std = Security::decrypt( base64_decode($womanrec->is_sti_std), SEC_KEY);

            }



            $women_field  = $womanrec  ;

        }





        if(!empty($login_user))

        {



          $user_data =  $login_user ;



            if(!empty($user_data->first_name))

            {

                $user_data->first_name = $this->CryptoSecurity->decrypt(base64_decode($user_data->first_name), SEC_KEY);

            }



            if(!empty($user_data->last_name))

            {

                $user_data->last_name = $this->CryptoSecurity->decrypt( base64_decode($user_data->last_name), SEC_KEY);

            }



            if(!empty($user_data->email))

            {

                $user_data->email = $this->CryptoSecurity->decrypt( base64_decode($user_data->email), SEC_KEY);

            }



            if(!empty($user_data->phone))

            {

                $user_data->phone = $this->CryptoSecurity->decrypt( base64_decode($user_data->phone), SEC_KEY);

            }



            if(!empty($user_data->dob))

            {

                $user_data->dob = $this->CryptoSecurity->decrypt( base64_decode($user_data->dob), SEC_KEY);

            }





            if(!empty($user_data->height))

            {

                $user_data->height = Security::decrypt( base64_decode($user_data->height), SEC_KEY);

            }



            if(!empty($user_data->weight))

            {

                $user_data->weight = Security::decrypt( base64_decode($user_data->weight), SEC_KEY);

            }



            if(!empty($user_data->address))

            {

                $user_data->address = Security::decrypt( base64_decode($user_data->address), SEC_KEY);

            }



            if(!empty($user_data->city))

            {

                $user_data->city = Security::decrypt( base64_decode($user_data->city), SEC_KEY);

            }



            if(!empty($user_data->state))

            {

                $user_data->state = Security::decrypt( base64_decode($user_data->state), SEC_KEY);

            }

            if(!empty($user_data->zip))

            {

                $user_data->zip = Security::decrypt( base64_decode($user_data->zip), SEC_KEY);

            }



            if(!empty($user_data->bmi))

            {

                $user_data->bmi = Security::decrypt( base64_decode($user_data->bmi), SEC_KEY);

            }





            if(!empty($user_data->is_uterus_removal))

            {

                $user_data->is_uterus_removal = Security::decrypt( base64_decode($user_data->is_uterus_removal), SEC_KEY);

            }





            if(!empty($user_data->is_latex_allergy))

            {

                $user_data->is_latex_allergy = Security::decrypt( base64_decode($user_data->is_latex_allergy), SEC_KEY);

            }



            if(!empty($user_data->is_retired))

            {

                $user_data->is_retired = Security::decrypt( base64_decode($user_data->is_retired), SEC_KEY);

            }



            if(!empty($user_data->occupation))

            {

                $user_data->occupation = Security::decrypt( base64_decode($user_data->occupation), SEC_KEY);

            }



            if(!empty($user_data->marital_status))

            {

                $user_data->marital_status = Security::decrypt( base64_decode($user_data->marital_status), SEC_KEY);

            }



            if(!empty($user_data->sexual_orientation))

            {

                $user_data->sexual_orientation = Security::decrypt( base64_decode($user_data->sexual_orientation), SEC_KEY);

            }



            if(!empty($user_data->ethinicity))

            {

                $user_data->ethinicity = Security::decrypt( base64_decode($user_data->ethinicity), SEC_KEY);

            }



            if(!empty($user_data->current_smoke_pack))

            {

                $user_data->current_smoke_pack = Security::decrypt( base64_decode($user_data->current_smoke_pack), SEC_KEY);

            }





            if(!empty($user_data->current_smoke_year))

            {

                $user_data->current_smoke_year = Security::decrypt( base64_decode($user_data->current_smoke_year), SEC_KEY);

            }



            if(!empty($user_data->past_smoke_pack))

            {

                $user_data->past_smoke_pack = Security::decrypt( base64_decode($user_data->past_smoke_pack), SEC_KEY);

            }



            if(!empty($user_data->past_smoke_year))

            {

                $user_data->past_smoke_year = Security::decrypt( base64_decode($user_data->past_smoke_year), SEC_KEY);

            }



            if(!empty($user_data->current_drink_pack))

            {

                $user_data->current_drink_pack = Security::decrypt( base64_decode($user_data->current_drink_pack), SEC_KEY);

            }



            if(!empty($user_data->current_drink_year))

            {

                $user_data->current_drink_year = Security::decrypt( base64_decode($user_data->current_drink_year), SEC_KEY);

            }



            if(!empty($user_data->past_drink_pack))

            {

                $user_data->past_drink_pack = Security::decrypt( base64_decode($user_data->past_drink_pack), SEC_KEY);

            }



            if(!empty($user_data->past_drink_year))

            {

                $user_data->past_drink_year = Security::decrypt( base64_decode($user_data->past_drink_year), SEC_KEY);

            }



            if(!empty($user_data->is_currentlysmoking))

            {

                $user_data->is_currentlysmoking = Security::decrypt( base64_decode($user_data->is_currentlysmoking), SEC_KEY);

            }



            if(!empty($user_data->is_pastsmoking))

            {

                $user_data->is_pastsmoking = Security::decrypt( base64_decode($user_data->is_pastsmoking), SEC_KEY);

            }



            if(!empty($user_data->is_currentlydrinking))

            {

                $user_data->is_currentlydrinking = Security::decrypt( base64_decode($user_data->is_currentlydrinking), SEC_KEY);

            }



            if(!empty($user_data->is_pastdrinking))

            {

                $user_data->is_pastdrinking = Security::decrypt( base64_decode($user_data->is_pastdrinking), SEC_KEY);

            }



            if(!empty($user_data->is_otherdrug))

            {

                $user_data->is_otherdrug = Security::decrypt( base64_decode($user_data->is_otherdrug), SEC_KEY);

            }



            if(!empty($user_data->is_otherdrugpast))

            {

                $user_data->is_otherdrugpast = Security::decrypt( base64_decode($user_data->is_otherdrugpast), SEC_KEY);

            }





            if(!empty($user_data->gender))

            {

                $user_data->gender = Security::decrypt( base64_decode($user_data->gender), SEC_KEY);

            }



            if(!empty($user_data->pharmacy))

            {

                $user_data->pharmacy = Security::decrypt( base64_decode($user_data->pharmacy), SEC_KEY);

            }



            if(!empty($user_data->insurance_company))

            {

                $user_data->insurance_company = Security::decrypt( base64_decode($user_data->insurance_company), SEC_KEY);

            }



            if(!empty($user_data->guarantor))

            {

                $user_data->guarantor = Security::decrypt( base64_decode($user_data->guarantor), SEC_KEY);

            }





            $login_user  = $user_data ;



        }





        $this->Appointments = TableRegistry::get('Appointments');

        $id = $atp_id ;

        $user_detail = $this->Appointments->find('all')->contain(['Doctors', 'Organizations', 'Specializations', 'Users', 'ChiefCompliantUserdetails'])->where(['Appointments.is_shown' => 1, 'Appointments.id' => $id])->first();

        $this->UserSignedDocs = TableRegistry::get('UserSignedDocs');

        $this->StepDetails = TableRegistry::get('StepDetails');

        $this->ChiefCompliants = TableRegistry::get('ChiefCompliants');

        $this->ChiefCompliantQuestionnaire = TableRegistry::get('ChiefCompliantQuestionnaire');

        $this->ChiefCompliantDetails = TableRegistry::get('ChiefCompliantDetails');

        $this->ChiefCompliantMedication = TableRegistry::get('ChiefCompliantMedication');

        $this->ChiefCompliantOtherDetails = TableRegistry::get('ChiefCompliantOtherDetails');

        $this->PainFollowupQuestionnaires = TableRegistry::get('PainFollowupQuestionnaires');

        $this->CommonQuestions = TableRegistry::get('CommonQuestions');

        $this->CommonConditions = TableRegistry::get('CommonConditions');

        $this->Diseases = TableRegistry::get('Diseases');

        $this->Symptoms = TableRegistry::get('Symptoms');

        $this->ChiefCompliantUserdetails = TableRegistry::get('ChiefCompliantUserdetails');



        $user_signed_data = '';



        if(!empty($user_detail['user']) && !empty($user_detail['organization'])){



            $user_signed_data = $this->UserSignedDocs->find('all')->where(['user_id' =>$user_detail['user']['id'],'organization_id' => $user_detail['organization']['id']])->first();

        }





        if(!empty($user_detail->chief_compliant_userdetail)){



            if(!empty($user_detail->chief_compliant_userdetail->current_step_id))

            {



                $user_detail->chief_compliant_userdetail->current_step_id = $this->StepDetails->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->current_step_id])->first();





            }



            if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_id))

            {

                $user_detail->chief_compliant_userdetail->chief_compliant_id = Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_id), SEC_KEY);

                $user_detail->chief_compliant_userdetail->chief_compliant_id = $this->ChiefCompliants->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->chief_compliant_id])->first();

            }



            if(!empty($user_detail->chief_compliant_userdetail->compliant_symptom_ids))

            {

                $user_detail->chief_compliant_userdetail->compliant_symptom_ids = explode(',', $user_detail->chief_compliant_userdetail->compliant_symptom_ids);



                $user_detail->chief_compliant_userdetail->compliant_symptom_ids =  $this->ChiefCompliants->find('all')->where(['id IN' => $user_detail->chief_compliant_userdetail->compliant_symptom_ids])->all();

            }



            if(isset($user_detail->chief_compliant_userdetail->compliant_length)){



                $user_detail->chief_compliant_userdetail->compliant_length = $user_detail->chief_compliant_userdetail->compliant_length;

            }



            if(!empty($user_detail->chief_compliant_userdetail->compliant_medication_detail))

            {



                $user_detail->chief_compliant_userdetail->compliant_medication_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->compliant_medication_detail), SEC_KEY)) ;

            }



            if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_symptoms))

            {



                $user_detail->chief_compliant_userdetail->chief_compliant_symptoms = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_symptoms), SEC_KEY)) ;

                foreach($user_detail->chief_compliant_userdetail->chief_compliant_symptoms as $key => $value){



                    foreach($value as $k =>$v) {



                        $user_detail->chief_compliant_userdetail->chief_compliant_symptoms[$key][$k] = $this->ChiefCompliants->find('all')->where(['id' => $v])->first();

                    }



                }

            }



            if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail))

            {



                $user_detail->chief_compliant_userdetail->questionnaire_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->questionnaire_detail), SEC_KEY)) ;



                foreach($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value){



                    foreach($value as $k =>$v) {



                        $user_detail->chief_compliant_userdetail->questionnaire_detail[$key][$k] = $this->ChiefCompliantQuestionnaire->find('all')->where(['id' => $v])->first();

                    }



                }



            }



            if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_details))

            {



                $user_detail->chief_compliant_userdetail->chief_compliant_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_details), SEC_KEY))) ;





                // below is the code to sort array according to our requirement, we need to sort the question id 42 and 47 according to this sequence - array(43,39,40,41,42)



                if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_details['42']))

                {

                    $temp   = $user_detail->chief_compliant_userdetail->chief_compliant_details['42'];



                    $ordered = array();

                    foreach (array(43,39,40,41,42) as $key)

                    {



                        if (array_key_exists($key, $temp))

                        {

                            $ordered[$key] = $temp[$key];

                            unset($temp[$key]);

                        }

                    }

                    $temp = $ordered + $temp;

                    $user_detail->chief_compliant_userdetail->chief_compliant_details['42'] =  $temp;

                    $temp = '';

                }



                if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_details['47']))

                {

                    $temp   = $user_detail->chief_compliant_userdetail->chief_compliant_details['47'];
                    $ordered = array();

                    foreach (array(43,39,40,41,42) as $key) {

                        if (array_key_exists($key, $temp)) {

                            $ordered[$key] = $temp[$key];

                            unset($temp[$key]);

                        }

                    }

                    $temp = $ordered + $temp;

                    $user_detail->chief_compliant_userdetail->chief_compliant_details['47'] =  $temp;

                    $temp = '';

                }



                $tempar = array();

                $more_options = array();

                foreach ($user_detail->chief_compliant_userdetail->chief_compliant_details as $key => $value)

                {

                    $i = 0 ;

                    foreach ($value as $k => $v)

                    {

                        if(!is_numeric($k) && $k == 'more_option'){

                            $more_options[$key] = $v ;

                            unset($value['more_option']);

                            continue;

                        }





                        $temp = $this->ChiefCompliantDetails->find('all')->where(['id'=> $k ])->first();

                        $tempcc = $this->ChiefCompliants->find('all')->where(['id'=> $key ])->first();

                        $tempar[$key]['cc_data'] = $tempcc ;

                        $tempar[$key][$i]['question_id'] = $temp->id ;

                        $tempar[$key][$i]['question'] = $temp->question ;

                        $tempar[$key][$i]['hpi_element'] = $temp->cpt_hpi_element_type ;

                        $tempar[$key][$i]['answer'] = $v ;

                        $i++;

                    }



                }



                $user_detail->chief_compliant_userdetail->more_options = $more_options ;

                $user_detail->chief_compliant_userdetail->chief_compliant_details = $tempar ;

            }



            if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_other_details))

            {



               $user_detail->chief_compliant_userdetail->chief_compliant_other_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_other_details), SEC_KEY))) ;

                $tempar = array();

                $i = 0;

                foreach ($user_detail->chief_compliant_userdetail->chief_compliant_other_details as $key => $value) {





                    $temp = $this->ChiefCompliantOtherDetails->find('all')->where(['id'=> $key ])->first();



                    $tempar[$i]['question_id'] = $temp->id ;

                    $tempar[$i]['question'] = $temp->question ;

                    $tempar[$i]['answer'] = $value ;

                    $i++;

                }



                $user_detail->chief_compliant_userdetail->chief_compliant_other_details = $tempar ;



            }



            if(!empty($user_detail->chief_compliant_userdetail->post_checkup_question_detail))

            {



               $user_detail->chief_compliant_userdetail->post_checkup_question_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->post_checkup_question_detail), SEC_KEY)));



               if(!empty($user_detail->chief_compliant_userdetail->post_checkup_question_detail)){



                    $i = 0;

                  foreach($user_detail->chief_compliant_userdetail->post_checkup_question_detail as $key => $val){





                      $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();

                      $tempar[$i]['question_id'] = $temp->id ;

                      $tempar[$i]['question'] = $temp->question ;

                      $tempar[$i]['answer'] = $val;

                      $i++;



                  }

                  $user_detail->chief_compliant_userdetail->post_checkup_question_detail = $tempar;

               }

            }



            if(!empty($user_detail->chief_compliant_userdetail->screening_questions_detail))

            {



                $user_detail->chief_compliant_userdetail->screening_questions_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->screening_questions_detail), SEC_KEY)));



               if(!empty($user_detail->chief_compliant_userdetail->screening_questions_detail)){



                  $i = 0;

                  foreach($user_detail->chief_compliant_userdetail->screening_questions_detail as $key => $val){





                      $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();

                      $tempar[$i]['question_id'] = $temp->id ;

                      $tempar[$i]['question'] = $temp->question ;

                      $tempar[$i]['answer'] = $val;

                      $i++;



                  }



                 $user_detail->chief_compliant_userdetail->screening_questions_detail = $tempar;

               }

            }





            if(!empty($user_detail->chief_compliant_userdetail->pain_update_question))

            {



                $user_detail->chief_compliant_userdetail->pain_update_question = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pain_update_question), SEC_KEY))) ;



                $tempar = array();

                $i = 0;

                foreach ($user_detail->chief_compliant_userdetail->pain_update_question as $key => $value)

                {





                  $temp = $this->PainFollowupQuestionnaires->find('all')->where(['id'=> $key ])->first();

                  $tempar[$i]['question_id'] = $temp->id ;

                  $tempar[$i]['question'] = $temp->question ;

                  $tempar[$i]['answer'] = $value ;

                  $i++;

                }



                $user_detail->chief_compliant_userdetail->pain_update_question = $tempar;

              }





            if(!empty($user_detail->chief_compliant_userdetail->general_update_question))

            {



                $user_detail->chief_compliant_userdetail->general_update_question = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->general_update_question), SEC_KEY))) ;



                $tempar = array();

                $i = 0;

                foreach ($user_detail->chief_compliant_userdetail->general_update_question as $key => $value)

                {

                  $temp = $this->PainFollowupQuestionnaires->find('all')->where(['id'=> $key ])->first();

                  $tempar[$i]['question_id'] = $temp->id ;

                  $tempar[$i]['question'] = $temp->question ;

                  $tempar[$i]['answer'] = $value ;

                  $i++;

                }



                $user_detail->chief_compliant_userdetail->general_update_question = $tempar;



            }





            if(isset($user_detail->chief_compliant_userdetail->pre_op_procedure_detail) && !empty($user_detail->chief_compliant_userdetail->pre_op_procedure_detail))

            {

              $user_detail->chief_compliant_userdetail->pre_op_procedure_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pre_op_procedure_detail), SEC_KEY))) ;



              $tempar = array();

              $i = 0;

              foreach ($user_detail->chief_compliant_userdetail->pre_op_procedure_detail as $key => $value)

              {

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();

                $tempar[$i]['question_id'] = $temp->id ;

                $tempar[$i]['question'] = $temp->question ;

                $tempar[$i]['answer'] = $value ;

                $i++;

              }

              $user_detail->chief_compliant_userdetail->pre_op_procedure_detail = $tempar;



            }



            if(isset($user_detail->chief_compliant_userdetail->pre_op_medications_question_detail) && !empty($user_detail->chief_compliant_userdetail->pre_op_medications_question_detail))

            {

              $user_detail->chief_compliant_userdetail->pre_op_medications_question_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pre_op_medications_question_detail), SEC_KEY))) ;



              $tempar = array();

              $i = 0;

              foreach ($user_detail->chief_compliant_userdetail->pre_op_medications_question_detail as $key => $value)

              {

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();

                $tempar[$i]['question_id'] = $temp->id ;

                $tempar[$i]['question'] = $temp->question ;

                $tempar[$i]['answer'] = $value ;

                $i++;

              }

              $user_detail->chief_compliant_userdetail->pre_op_medications_question_detail = $tempar;



            }



            if(isset($user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail) && !empty($user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail))

            {



              $user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail), SEC_KEY))) ;



              $tempar = array();

              $i = 0;

              foreach ($user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail as $key => $value)

              {

                $temp = $this->CommonConditions->find('all')->where(['id'=> $key ])->first();

                $tempar[$i]['condition_id'] = $temp->id ;

                $tempar[$i]['condition_name'] = $temp->name ;

                $tempar[$i]['medical_name'] = $temp->medical_name ;

                $tempar[$i]['answer'] = $value['name'] ;

                $tempar[$i]['year'] = $value['year'] ;

                $i++;

              }

              $user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail = $tempar;



            }



            if(isset($user_detail->chief_compliant_userdetail->pre_op_allergies_detail) && !empty($user_detail->chief_compliant_userdetail->pre_op_allergies_detail))

            {



              $user_detail->chief_compliant_userdetail->pre_op_allergies_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pre_op_allergies_detail), SEC_KEY))) ;



              $tempar = array();

              $i = 0;

              foreach ($user_detail->chief_compliant_userdetail->pre_op_allergies_detail as $key => $value)

              {





                $temp = $this->CommonConditions->find('all')->where(['id'=> $key ])->first();

                $tempar[$i]['condition_id'] = $temp->id ;

                $tempar[$i]['condition_name'] = $temp->name ;

                $tempar[$i]['medical_name'] = $temp->medical_name ;

                $tempar[$i]['answer'] = $value['name'] ;

                $tempar[$i]['reaction'] = $value['reaction'] ;

                $i++;

              }

              $user_detail->chief_compliant_userdetail->pre_op_allergies_detail = $tempar;



            }



            if(!empty($user_detail->chief_compliant_userdetail->general_update_provider_info))

            {



                $user_detail->chief_compliant_userdetail->general_update_provider_info =  unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->general_update_provider_info), SEC_KEY))) ;

            }



            if(!empty($user_detail->chief_compliant_userdetail->general_update_procedure_detail))

            {



                $user_detail->chief_compliant_userdetail->general_update_procedure_detail =  unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->general_update_procedure_detail), SEC_KEY))) ;

            }









            if(isset($user_detail->chief_compliant_userdetail->disease_questions_detail) && !empty($user_detail->chief_compliant_userdetail->disease_questions_detail))

             {



                  $user_detail->chief_compliant_userdetail->disease_questions_detail =  unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->disease_questions_detail), SEC_KEY))) ;



                  if(!empty($user_detail->chief_compliant_userdetail->disease_questions_detail)){



                    $temparr = array();



                    foreach ($user_detail->chief_compliant_userdetail->disease_questions_detail as $key => $value) {



                      $disease = $this->Diseases->find('all')->where(['id'=> $key])->first();

                      if(!empty($disease)){





                       $user_detail->chief_compliant_userdetail->disease_questions_detail[$key]['disease'] =  $disease;

                      }



                      //set question details

                      if(!empty($value['disease_detail_question'])){



                        $temparr = array();

                        $i = 0;

                        foreach ($value['disease_detail_question'] as $q_key => $que) {



                          $question = $this->CommonQuestions->find('all')->where(['id' => $q_key])->first();



                          if(!empty($question)){



                            $temparr[$i]['question_id'] = $question->id ;

                            $temparr[$i]['question'] = $question->question ;

                            $temparr[$i]['answer'] = $que ;

                            $i++;

                          }



                        }



                        $user_detail->chief_compliant_userdetail->disease_questions_detail[$key]['disease_detail_question'] = $temparr;

                      }



                      //set detail of alarm sysmptoms

                      if(!empty($value['alarm_sysmptom'])){



                        $temparr = array();

                        $i = 0;



                        foreach ($value['alarm_sysmptom'] as $asysmpt_key => $asysmpt_value) {



                          $alarm_sysmptom = $this->Symptoms->find('all')->where(['id'=> $asysmpt_key])->first();



                          if(!empty($alarm_sysmptom)){



                            $temparr[$i]['id'] = $alarm_sysmptom->id;

                            $temparr[$i]['name'] = $alarm_sysmptom->symptom;

                            $temparr[$i]['medical_name'] = $alarm_sysmptom->medical_name;

                            $temparr[$i]['answer'] = $asysmpt_value['answer'];

                            $i++;



                          }

                        }



                          $user_detail->chief_compliant_userdetail->disease_questions_detail[$key]['alarm_sysmptom'] = $temparr;

                      }



                      //set detail of base line sysmptoms

                      if(!empty($value['baseline_sysmptom'])){



                        $temparr = array();

                        $i = 0;



                        foreach ($value['baseline_sysmptom'] as $bsysmpt_key => $bsysmpt_value) {



                          $baseline_sysmptom = $this->Symptoms->find('all')->where(['id'=> $bsysmpt_key])->first();



                          if(!empty($baseline_sysmptom)){



                            $temparr[$i]['id'] = $baseline_sysmptom->id;

                            $temparr[$i]['name'] = $baseline_sysmptom->symptom;

                            $temparr[$i]['medical_name'] = $baseline_sysmptom->medical_name;

                            $temparr[$i]['answer'] = $bsysmpt_value['answer'];

                            $temparr[$i]['scale'] = $bsysmpt_value['scale'];

                            $i++;



                          }

                        }



                          $user_detail->chief_compliant_userdetail->disease_questions_detail[$key]['baseline_sysmptom'] = $temparr;

                      }

                    }

                  }

                }



                if(!empty($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details))

                {

                    $user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details), SEC_KEY)));



                    if(isset($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp'])){

                        $tempar = array();

                        foreach($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp'] as $key => $val){





                            $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();

                            $tempar[$key]['question_id'] = $temp->id ;

                            $tempar[$key]['question'] = $temp->question ;

                            $tempar[$key]['answer'] = $val;

                           // $i++;



                        }

                        //pr($tempar);die;

                        $user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp'] = $tempar;

                        //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;

                     }



                     if(isset($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm'])){

                        $tempar = array();

                        foreach($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm'] as $key => $val){





                            $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();

                            $tempar[$key]['question_id'] = $temp->id ;

                            $tempar[$key]['question'] = $temp->question ;

                            $tempar[$key]['answer'] = $val;

                           // $i++;



                        }

                        //pr($tempar);die;

                        $user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm'] = $tempar;

                        //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;

                     }



                }



                if(!empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details))

            {



                 $user_detail->chief_compliant_userdetail->medication_refill_extra_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->medication_refill_extra_details), SEC_KEY)));



                // pr($user_detail->medication_refill_extra_details);



                //pr($user_detail_old->chief_compliant_userdetail->general_update_question);die;





                 if(isset($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast'])){

                    $tempar = array();

                    foreach($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast'] as $key => $val){





                        $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();

                        $tempar[$key]['question_id'] = $temp->id ;

                        $tempar[$key]['question'] = $temp->question ;

                        $tempar[$key]['answer'] = $val;

                       // $i++;



                    }

                    //pr($tempar);die;

                    $user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast'] = $tempar;

                    //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;

                 }



                 if(isset($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt'])){

                    $tempar = array();

                    foreach($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt'] as $key => $val){





                        $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();

                        $tempar[$key]['question_id'] = $temp->id ;

                        $tempar[$key]['question'] = $temp->question ;

                        $tempar[$key]['answer'] = $val;
                    }

                    $user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt'] = $tempar;
                 }

        if(isset($user_detail->chief_compliant_userdetail->medication_refill_extra_details['ort']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['ort'])){
                $tempar = array();
                foreach($user_detail->chief_compliant_userdetail->medication_refill_extra_details['ort'] as $key => $val){
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $val;
                }
                $user_detail->chief_compliant_userdetail->medication_refill_extra_details['ort'] = $tempar;
            }
            if(isset($user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3'])){
                $tempar = array();
                foreach($user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3'] as $key => $val){
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $val;
                }
                $user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3'] = $tempar;
            }

               }

                if(!empty($user_detail->chief_compliant_userdetail->symptom_from_tab1)){

                    $temp_symptom_from_tab1 = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->symptom_from_tab1), SEC_KEY)));

                    if(!empty($temp_symptom_from_tab1)){

                        $temp_cc = implode(", ", $temp_symptom_from_tab1);
                        $user_detail->chief_compliant_userdetail->all_cc_detail_name = $temp_cc;
                    }
                }

                if(!empty($user_detail->chief_compliant_userdetail->covid_detail)){

                    $user_detail->chief_compliant_userdetail->covid_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->covid_detail), SEC_KEY));
                    $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->covid_detail as $key => $value)
                    {
                        if(!empty($value))
                        {

                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->covid_detail = $tempar;
                }
                /*Chronic Pain Assessment */

                if(!empty($user_detail->chief_compliant_userdetail->chronic_pain_assessment_tmb)){

                    $user_detail->chief_compliant_userdetail->chronic_pain_assessment_tmb = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_pain_assessment_tmb), SEC_KEY));
                    $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_pain_assessment_tmb as $key => $value)
                    {
                        if(!empty($value))
                        {

                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_pain_assessment_tmb = $tempar;
                }


                 if(!empty($user_detail->chief_compliant_userdetail->chronic_pain_assessment_pmh)){

                    $user_detail->chief_compliant_userdetail->chronic_pain_assessment_pmh = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_pain_assessment_pmh), SEC_KEY));
                 
                    $user_detail->chief_compliant_userdetail->chronic_pain_assessment_pmh = $user_detail->chief_compliant_userdetail->chronic_pain_assessment_pmh;
                }


                if(!empty($user_detail->chief_compliant_userdetail->chronic_pain_treatment_history)){

                    $user_detail->chief_compliant_userdetail->chronic_pain_treatment_history = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_pain_treatment_history), SEC_KEY));
                    $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_pain_treatment_history as $key => $value)
                    {
                        if(!empty($value))
                        {

                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_pain_treatment_history = $tempar;
                }


                  if(!empty($user_detail->chief_compliant_userdetail->chronic_pain_curr_treat_history)){

                    $user_detail->chief_compliant_userdetail->chronic_pain_curr_treat_history = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_pain_curr_treat_history), SEC_KEY));
                 
                    $user_detail->chief_compliant_userdetail->chronic_pain_curr_treat_history = $user_detail->chief_compliant_userdetail->chronic_pain_curr_treat_history;
                }

                  if(!empty($user_detail->chief_compliant_userdetail->chronic_pain_past_treat_history)){

                    $user_detail->chief_compliant_userdetail->chronic_pain_past_treat_history = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_pain_past_treat_history), SEC_KEY));
                 
                    $user_detail->chief_compliant_userdetail->chronic_pain_past_treat_history = $user_detail->chief_compliant_userdetail->chronic_pain_past_treat_history;
                }





                if(!empty($user_detail->chief_compliant_userdetail->chronic_pain_opioid_overdose_risk)){

                    $user_detail->chief_compliant_userdetail->chronic_pain_opioid_overdose_risk = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_pain_opioid_overdose_risk), SEC_KEY));
                    $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_pain_opioid_overdose_risk as $key => $value)
                    {
                        if(!empty($value))
                        {

                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_pain_opioid_overdose_risk = $tempar;
                }


                 if(!empty($user_detail->chief_compliant_userdetail->chronic_pain_assessment_ort)){

                    $user_detail->chief_compliant_userdetail->chronic_pain_assessment_ort = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_pain_assessment_ort), SEC_KEY));
                    $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_pain_assessment_ort as $key => $value)
                    {
                        if(!empty($value))
                        {

                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_pain_assessment_ort = $tempar;
                }

                /*Chronic Pain Assessment */

                if(!empty($user_detail->chief_compliant_userdetail->phq_9_detail))
                {
                    $user_detail->chief_compliant_userdetail->phq_9_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->phq_9_detail), SEC_KEY)));
                }

                if(!empty($user_detail->chief_compliant_userdetail->follow_up_sx_detail))
                {
                    $user_detail->chief_compliant_userdetail->follow_up_sx_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->follow_up_sx_detail), SEC_KEY)));
                    $tempar = array();
                    foreach ($user_detail->chief_compliant_userdetail->follow_up_sx_detail as $key => $value)
                    {

                        foreach ($value as $k => $v)
                        {
                            $temp = $this->CommonQuestions->find('all')->where(['id'=> $k ])->first();
                            $tempcc = $this->ChiefCompliants->find('all')->where(['id'=> $key ])->first();
                            $tempar[$key]['cc_data'] = $tempcc ;
                            $tempar[$key][$k]['question_id'] = $temp->id ;
                            $tempar[$key][$k]['question'] = $temp->question ;
                            $tempar[$key][$k]['answer'] = $v ;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->follow_up_sx_detail = $tempar;
                }



                if(!empty($user_detail->chief_compliant_userdetail->focused_history_detail)){



                    $user_detail->chief_compliant_userdetail->focused_history_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->focused_history_detail), SEC_KEY))  ;



                    //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;

                     $tempar = array();

                    foreach($user_detail->chief_compliant_userdetail->focused_history_detail as $key => $value){



                        if(!empty($value)){



                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();

                          $tempar[$key]['question_id'] = $temp->id ;

                          $tempar[$key]['question'] = $temp->question ;

                          $tempar[$key]['answer'] = $value;





                        }



                      }



                      $user_detail->chief_compliant_userdetail->focused_history_detail = $tempar;

                    //pr($user_detail_old->chief_compliant_userdetail->covid_detail);die;

                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_condition)){

                    $user_detail->chief_compliant_userdetail->chronic_condition = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_condition), SEC_KEY)));
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_dmii_detail))
                {
                    $user_detail->chief_compliant_userdetail->chronic_dmii_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_dmii_detail), SEC_KEY))  ;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_dmii_detail as $key => $value)
                    {
                        if(!empty($value))
                        {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_dmii_detail = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_cad_detail))
                {
                    $user_detail->chief_compliant_userdetail->chronic_cad_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_cad_detail), SEC_KEY))  ;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_cad_detail as $key => $value)
                    {
                        if(!empty($value))
                        {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_cad_detail = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_chf_detail))
                {
                    $user_detail->chief_compliant_userdetail->chronic_chf_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_chf_detail), SEC_KEY))  ;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_chf_detail as $key => $value)
                    {
                        if(!empty($value))
                        {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_chf_detail = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_htn_detail))
                {
                    $user_detail->chief_compliant_userdetail->chronic_htn_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_htn_detail), SEC_KEY))  ;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_htn_detail as $key => $value)
                    {
                        if(!empty($value))
                        {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_htn_detail = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_copd_detail))
                {
                    $user_detail->chief_compliant_userdetail->chronic_copd_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_copd_detail), SEC_KEY))  ;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_copd_detail as $key => $value)
                    {
                        if(!empty($value))
                        {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_copd_detail = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_asthma_detail))
                {
                    $user_detail->chief_compliant_userdetail->chronic_asthma_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_asthma_detail), SEC_KEY))  ;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_asthma_detail as $key => $value)
                    {
                        if(!empty($value))
                        {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_asthma_detail = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_general_detail))
                {
                    $user_detail->chief_compliant_userdetail->chronic_general_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_general_detail), SEC_KEY))  ;
                     $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_general_detail as $key => $value)
                    {
                        if(!empty($value))
                        {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_general_detail = $tempar;
                }



                if(!empty($user_detail->chief_compliant_userdetail->chronic_dmii_medication)){
                  $user_detail->chief_compliant_userdetail->chronic_dmii_medication = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_dmii_medication), SEC_KEY)) ;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_cad_medication)){
                  $user_detail->chief_compliant_userdetail->chronic_cad_medication = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_cad_medication), SEC_KEY)) ;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_chf_medication)){
                  $user_detail->chief_compliant_userdetail->chronic_chf_medication = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_chf_medication), SEC_KEY)) ;
                }

                if(!empty($user_detail->chief_compliant_userdetail->chronic_htn_medication)){
                  $user_detail->chief_compliant_userdetail->chronic_htn_medication = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_htn_medication), SEC_KEY)) ;
                }

                if(!empty($user_detail->chief_compliant_userdetail->glucose_reading_detail)){
                  $user_detail->chief_compliant_userdetail->glucose_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->glucose_reading_detail), SEC_KEY)) ;
                }


                if(!empty($user_detail->chief_compliant_userdetail->bp_reading_detail)){
                  $user_detail->chief_compliant_userdetail->bp_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->bp_reading_detail), SEC_KEY)) ;
                }

                if(!empty($user_detail->chief_compliant_userdetail->peak_flow_reading_detail)){
                  $user_detail->chief_compliant_userdetail->peak_flow_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->peak_flow_reading_detail), SEC_KEY)) ;
                }


                if(!empty($user_detail->chief_compliant_userdetail->cancer_cc_detail)){
                    $user_detail->chief_compliant_userdetail->cancer_cc_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_cc_detail), SEC_KEY));
                    $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->cancer_cc_detail as $key => $value){
                        if(!empty($value)){

                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          if(!empty($temp)){

                            $tempar[$temp->id]['question_id'] = $temp->id ;
                            $tempar[$temp->id]['question'] = $temp->question ;
                            $tempar[$temp->id]['answer'] = $value;
                          }
                        }
                      }
                      $user_detail->chief_compliant_userdetail->cancer_cc_detail = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->cancer_history_detail))
                {
                  $user_detail->chief_compliant_userdetail->cancer_history_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_history_detail), SEC_KEY))  ;

                  $tempar = array();
                  foreach($user_detail->chief_compliant_userdetail->cancer_history_detail as $key => $value){

                      if(!empty($value) && is_array($value)){

                        foreach ($value as $k => $v) {
                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $k])->first();
                          if(!empty($temp)){

                            $tempar[$key][$temp->id]['question_id'] = $temp->id ;
                            $tempar[$key][$temp->id]['question'] = $temp->question ;
                            $tempar[$key][$temp->id]['answer'] = $v;
                          }
                        }
                      }
                    }
                    $user_detail->chief_compliant_userdetail->cancer_history_detail = $tempar;
                }


                if(!empty($user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail))
                {
                  $user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail), SEC_KEY))  ;
                }

                if(!empty($user_detail->chief_compliant_userdetail->cancer_family_members))
                {
                  $i = 0;
                  $user_detail->chief_compliant_userdetail->cancer_family_members = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_family_members), SEC_KEY))  ;
                  $tempar = array();
                   $i = 0;
                  foreach($user_detail->chief_compliant_userdetail->cancer_family_members as $key => $value){

                      if(!empty($value)){

                        $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                        if(!empty($temp)){
                            $tempar[$temp->id]['question_id'] = $temp->id ;
                            $tempar[$temp->id]['question'] = $temp->question ;
                            $tempar[$temp->id]['answer'] = $value;
                        }
                        $i++;
                      }
                    }
                    $user_detail->chief_compliant_userdetail->cancer_family_members = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->cancer_medical_detail))
                {
                  $i = 0;
                  $user_detail->chief_compliant_userdetail->cancer_medical_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_medical_detail), SEC_KEY))  ;
                  $tempar = array();
                   $i = 0;
                  foreach($user_detail->chief_compliant_userdetail->cancer_medical_detail as $key => $value){

                      if(!empty($value)){

                        $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                        if(!empty($temp)){
                            $tempar[$temp->id]['question_id'] = $temp->id ;
                            $tempar[$temp->id]['question'] = $temp->question ;
                            $tempar[$temp->id]['answer'] = $value;
                        }
                        $i++;
                      }
                    }
                    $user_detail->chief_compliant_userdetail->cancer_medical_detail = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments))
                {
                 $user_detail->chief_compliant_userdetail->cancer_assessments = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->cancer_assessments), SEC_KEY))  ;
                  //pr($user_detail->chief_compliant_userdetail->cancer_assessments);die;
                  $assessment_history = array();
                  $life_assessment = array();
                  $chemo_assessment = array();

                  if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments['assessment_history']))
                  {
                    $i = 0;
                  foreach($user_detail->chief_compliant_userdetail->cancer_assessments['assessment_history'] as $key => $value){

                      if(!empty($value)){

                        $temp = $this->CommonConditions->find('all')->where(['id'=> $key])->first();
                        $assessment_history[$i]['symtoms_id'] = $temp->id ;
                        $assessment_history[$i]['name'] = !empty($temp->note_name) ? $temp->note_name : $temp->name ;
                        $assessment_history[$i]['answer'] = $value;
                        $i++;
                      }
                    }
                  }

                  if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments['life_assessment']))
                  {
                    $j = 0;
                  foreach($user_detail->chief_compliant_userdetail->cancer_assessments['life_assessment'] as $key => $value){

                      if(!empty($value)){

                        $temp = $this->CommonConditions->find('all')->where(['id'=> $key])->first();
                        $life_assessment[$j]['symtoms_id'] = $temp->id ;
                        $life_assessment[$j]['name'] = !empty($temp->note_name) ? $temp->note_name : $temp->name ;
                        $life_assessment[$j]['answer'] = $value;
                        $j++;
                      }
                    }
                   }

                   if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments['chemo_assessment']))
                  {
                    $j = 0;
                  foreach($user_detail->chief_compliant_userdetail->cancer_assessments['chemo_assessment'] as $key => $value){

                      if(!empty($value)){

                        $temp = $this->CommonConditions->find('all')->where(['id'=> $key])->first();
                        $chemo_assessment[$j]['symtoms_id'] = $temp->id ;
                        $chemo_assessment[$j]['name'] = !empty($temp->note_name) ? $temp->note_name : $temp->name ;
                        $chemo_assessment[$j]['answer'] = $value;
                        $j++;
                      }
                    }
                   }

                   $cancer_assessments = array('assessment_history' => $assessment_history,'life_assessment' => $life_assessment,'chemo_assessment' => $chemo_assessment);
                    $user_detail->chief_compliant_userdetail->cancer_assessments = $cancer_assessments;

                }


                /*if(!empty($user_detail->chief_compliant_userdetail->followup_assessment))
                {
                 $user_detail->chief_compliant_userdetail->followup_assessment = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->followup_assessment), SEC_KEY))  ;
                  //pr($user_detail->chief_compliant_userdetail->cancer_assessments);die;
                  $assessment_history = array();
                  $life_assessment = array();
                  $chemo_assessment = array();

                  if(!empty($user_detail->chief_compliant_userdetail->followup_assessment['assessment_history']))
                  {
                    $i = 0;
                  foreach($user_detail->chief_compliant_userdetail->followup_assessment['assessment_history'] as $key => $value){

                      if(!empty($value)){

                        $temp = $this->CommonConditions->find('all')->where(['id'=> $key])->first();
                        $assessment_history[$i]['symtoms_id'] = $temp->id ;
                        $assessment_history[$i]['name'] = !empty($temp->note_name) ? $temp->note_name : $temp->name ;
                        $assessment_history[$i]['answer'] = $value;
                        $i++;
                      }
                    }
                  }

                  if(!empty($user_detail->chief_compliant_userdetail->followup_assessment['life_assessment']))
                  {
                    $j = 0;
                  foreach($user_detail->chief_compliant_userdetail->followup_assessment['life_assessment'] as $key => $value){

                      if(!empty($value)){

                        $temp = $this->CommonConditions->find('all')->where(['id'=> $key])->first();
                        $life_assessment[$j]['symtoms_id'] = $temp->id ;
                        $life_assessment[$j]['name'] = !empty($temp->note_name) ? $temp->note_name : $temp->name ;
                        $life_assessment[$j]['answer'] = $value;
                        $j++;
                      }
                    }
                   }

                   if(!empty($user_detail->chief_compliant_userdetail->followup_assessment['chemo_assessment']))
                  {
                    $j = 0;
                  foreach($user_detail->chief_compliant_userdetail->followup_assessment['chemo_assessment'] as $key => $value){

                      if(!empty($value)){

                        $temp = $this->CommonConditions->find('all')->where(['id'=> $key])->first();
                        $chemo_assessment[$j]['symtoms_id'] = $temp->id ;
                        $chemo_assessment[$j]['name'] = !empty($temp->note_name) ? $temp->note_name : $temp->name ;
                        $chemo_assessment[$j]['answer'] = $value;
                        $j++;
                      }
                    }
                   }

                   $followup_assessment = array('assessment_history' => $assessment_history,'life_assessment' => $life_assessment,'chemo_assessment' => $chemo_assessment);
                   $user_detail->chief_compliant_userdetail->followup_assessment = $followup_assessment;

                }*/

                if(!empty($user_detail->chief_compliant_userdetail->pre_op_post_op))
                {
                    $user_detail->chief_compliant_userdetail->pre_op_post_op = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pre_op_post_op), SEC_KEY)));
                    $tempar = array();
                    foreach ($user_detail->chief_compliant_userdetail->pre_op_post_op as $key => $value)
                    {
                            $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                            $tempar[$key]['question_id'] = $temp->id ;
                            $tempar[$key]['question'] = $temp->question ;
                            $tempar[$key]['answer'] = $value ;

                    }
                    $user_detail->chief_compliant_userdetail->pre_op_post_op = $tempar;
                }

                if(!empty($user_detail->chief_compliant_userdetail->cancer_followup_general_detail))
                {
                    $user_detail->chief_compliant_userdetail->cancer_followup_general_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->cancer_followup_general_detail), SEC_KEY)));
                    $tempar = array();
                    foreach ($user_detail->chief_compliant_userdetail->cancer_followup_general_detail as $key => $value)
                    {
                            $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                            $tempar[$key]['question_id'] = $temp->id ;
                            $tempar[$key]['question'] = $temp->question ;
                            $tempar[$key]['answer'] = $value ;

                    }
                    $user_detail->chief_compliant_userdetail->cancer_followup_general_detail = $tempar;
                }
        // start internal medication module
        if(!empty($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor)){
            $user_detail->chief_compliant_userdetail->is_chief_complaint_doctor = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor), SEC_KEY))) ;         
            $tempar = array();
            foreach ($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor as $key => $value)
            {
                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                ///pr($temp); die;
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $value ;

            }
            $user_detail->chief_compliant_userdetail->is_chief_complaint_doctor = $tempar ;
            //pr($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor); die;
        }
        if(!empty($user_detail->chief_compliant_userdetail->internal_general_assessment_detail)){
            $user_detail->chief_compliant_userdetail->internal_general_assessment_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->internal_general_assessment_detail), SEC_KEY))) ;         
            $tempar = array();
            foreach ($user_detail->chief_compliant_userdetail->internal_general_assessment_detail as $key => $value)
            {
                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                ///pr($temp); die;
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $value ;

            }
            $user_detail->chief_compliant_userdetail->internal_general_assessment_detail = $tempar ;
            //pr($user_detail->chief_compliant_userdetail->internal_general_assessment_detail); die;
        } 
        if(!empty($user_detail->chief_compliant_userdetail->internal_taps1_assessment_detail)){
            $user_detail->chief_compliant_userdetail->internal_taps1_assessment_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->internal_taps1_assessment_detail), SEC_KEY))) ;
            $tempar = array();
            foreach ($user_detail->chief_compliant_userdetail->internal_taps1_assessment_detail as $key => $value)
            {
                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $value ;

            }
            $user_detail->chief_compliant_userdetail->internal_taps1_assessment_detail = $tempar ;
        }
        if(!empty($user_detail->chief_compliant_userdetail->internal_taps2_assessment_detail)){
            $user_detail->chief_compliant_userdetail->internal_taps2_assessment_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->internal_taps2_assessment_detail), SEC_KEY))) ;
            $tempar = array();
            foreach ($user_detail->chief_compliant_userdetail->internal_taps2_assessment_detail as $key => $value)
            {
                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $value ;

            }
            $user_detail->chief_compliant_userdetail->internal_taps2_assessment_detail = $tempar ;
        }
        // end Inetrnal medication module
        // psychiatric module start
        if(!empty($user_detail->chief_compliant_userdetail->chief_complaint_psychiatry)){
            $user_detail->chief_compliant_userdetail->chief_complaint_psychiatry = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chief_complaint_psychiatry), SEC_KEY))) ;         
            $tempar = array();
            foreach ($user_detail->chief_compliant_userdetail->chief_complaint_psychiatry as $key => $value)
            {
                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $value ;

            }
            $user_detail->chief_compliant_userdetail->chief_complaint_psychiatry = $tempar ;
        }
        // end psychiatric module
                if(!empty($user_detail->chief_compliant_userdetail->followup_medical_history_detail))
                {
                    $user_detail->chief_compliant_userdetail->followup_medical_history_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->followup_medical_history_detail), SEC_KEY)));

                    $tempar = array();
                    foreach ($user_detail->chief_compliant_userdetail->followup_medical_history_detail['followup_medical_history_detail'] as $key => $value)
                    {
                            $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                            $tempar[$key]['question_id'] = $temp->id ;
                            $tempar[$key]['question'] = $temp->question ;
                            $tempar[$key]['answer'] = $value ;

                    }
                    if(!empty($user_detail->chief_compliant_userdetail->followup_medical_history_detail['medical_history'])){
                    $tempar['medical_history'] = $user_detail->chief_compliant_userdetail->followup_medical_history_detail['medical_history'];
                    }
                    if(!empty($user_detail->chief_compliant_userdetail->followup_medical_history_detail['surgical_history'])){
                    $tempar['surgical_history'] = $user_detail->chief_compliant_userdetail->followup_medical_history_detail['surgical_history'];
                    }
                    if(!empty($user_detail->chief_compliant_userdetail->followup_medical_history_detail['allergy_history'])){
                    $tempar['allergy_history'] = $user_detail->chief_compliant_userdetail->followup_medical_history_detail['allergy_history'];
                    }
                    $user_detail->chief_compliant_userdetail->followup_medical_history_detail = $tempar;
                }



        }



        $length_arr =  '{"1x a day": "qd", "2x a day": "BID", "3x a day": "TID", "every 4 hours": "q4h", "every 6 hours": "q6h", "every 8 hours": "q8h", "every 12 hours": "q12h", "1x a week": "qwk", "2x a week": "2/wk", "3x a week": "3/wk", "4x a week": "q4wk", "5x a week": "q5wk", "6x a week": "q6wk", "at bedtime": "qhs", "in the morning": "qam", "as needed": "PRN","evening":"qpm"}' ;



        $length_arr = json_decode($length_arr, true);

        $length_arr = array_flip($length_arr);



      // getting data of new appointments end ****************************



//pr($login_user);die;



      // Pt: ObgynDemo, Female 25yo, F

      $now = Time::now();

      $age = abs($now->year - date('Y',strtotime($login_user->dob)));

    // Security::decrypt( base64_decode($login_user->last_name) , SEC_KEY)

      $pt = h(ucfirst($login_user->first_name)).', '.h($login_user->last_name).'   '.$age.'yo, '.($login_user->gender == 1 ? 'M' : 'F') ;

      // DOB: 8/18/1992

      $dob = date('Y-m-d',strtotime($login_user->dob));



    // MRN#:  P: 123123123  E: john@valhalla.healthcare  05/14/2018  07:33  BMI: 24.5

    $phone = $login_user->phone;

    $email = $login_user->email;

    $curdate = $now->i18nFormat('MM/dd/yyyy') ;

    $curtime = $now->i18nFormat('HH:mm');



    // bmi calculation url-http://extoxnet.orst.edu/faqs/dietcancer/web2/twohowto.html

    // Multiply the weight in pounds by 0.45 -> Multiply the height in inches by 0.025  -> Square the answer from step 2 -> Divide the answer from step 1 by the answer from step 3

    $bmi = "";

    $bmi = $login_user->bmi;

    $pharmacy = $login_user->pharmacy;

    // #CC obgyndemo



 if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_id)){

    $cc = !empty($user_detail->chief_compliant_userdetail->chief_compliant_id->doctor_specific_name) ? h($user_detail->chief_compliant_userdetail->chief_compliant_id->doctor_specific_name) : h($user_detail->chief_compliant_userdetail->chief_compliant_id->name) ;

  }



    if(!empty($user_detail->chief_compliant_userdetail->random_chief_compliant)){

$user_detail->chief_compliant_userdetail->random_chief_compliant = Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->random_chief_compliant), SEC_KEY);

      $cc .= (!empty($cc) ? ', ' : '').$user_detail->chief_compliant_userdetail->random_chief_compliant ;



    }



    // #HPI Female is a 25 y.o. G2P2 female student who is heterosexual and single, ...

$s_ori = array(0 => 'Heterosexual', 1 => 'Homosexual', 2 => 'Bisexual', 9 => 'Prefer not to say');

$mar_s = array(0 => 'Unmarried', 1 => 'Married', 2 => 'Divorced');





      $temp = '';

      if(is_array($user_detail->chief_compliant_userdetail->compliant_symptom_ids)){

       foreach($user_detail->chief_compliant_userdetail->compliant_symptom_ids as $k => $v)

        {

          $temp .= $v->name .', ' ;

        }

    }







if(!empty($user_detail->chief_compliant_userdetail->symptom_from_tab1)){

  // $tsym  = unserialize(base64_decode($user_detail->chief_compliant_userdetail->symptom_from_tab1));

$tsym  = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->symptom_from_tab1), SEC_KEY)));

$symtom_cc = array();
foreach ($tsym as $key => $value) {

  $chiefComplaint = $this->ChiefCompliants->find('all')->where(['name' => $value])->first();
  if(!empty($chiefComplaint))
  {
    $symtom_cc[] = !empty($chiefComplaint->doctor_specific_name) ? $chiefComplaint->doctor_specific_name : $chiefComplaint->name;

  }

}

// pr($tsym); die;

  $tsym = implode(', ', $symtom_cc) ;

  $temp .= $tsym ;

}



    $temp = rtrim($temp, ', ');

      // echo $temp ;



      $temp_associated_symp = $temp ;



      // associated symptom from tab 3

 // $res_ar = array(0 => 'NO', 1 => 'YES' , 2 => "I DON'T KNOW");

      $positive_symptom = '' ;

      $negative_symptom = '' ;

// pr($user_detail->chief_compliant_userdetail->compliant_symptom_ids); die ;

 if(!empty($user_detail->chief_compliant_userdetail->compliant_symptom_ids)){



    foreach ($user_detail->chief_compliant_userdetail->compliant_symptom_ids as $key => $value) {



      $positive_symptom .= $value->name;



    }

  }

$positive_symptom = !empty($positive_symptom)? $positive_symptom.', ' : '' ;

// pr($user_detail->chief_compliant_userdetail->chief_compliant_symptoms); die;

  if(is_array($user_detail->chief_compliant_userdetail->chief_compliant_symptoms)) {

     foreach ($user_detail->chief_compliant_userdetail->chief_compliant_symptoms as $key => $value) {

        foreach($value as $k =>$v) {

          if($key == 1)  // get the positive symptom

          $positive_symptom = $positive_symptom.$v->name ;

          else if($key == 0) // get the negative symptom

          $negative_symptom = $negative_symptom.$v->name.', ' ;



      }

     }

  }

$positive_symptom = !empty($positive_symptom)? $positive_symptom.', ' : '' ;

// get the python file related associated symptom start

// pr($user_detail->chief_compliant_userdetail->python_file_option_3rd_tab); die;

    if(!empty($user_detail->chief_compliant_userdetail->python_file_option_3rd_tab)){

    // $python_file_option_3rd_tab = unserialize(base64_decode($user_detail->chief_compliant_userdetail->python_file_option_3rd_tab));

  $python_file_option_3rd_tab = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->python_file_option_3rd_tab), SEC_KEY)));



    if( isset($python_file_option_3rd_tab[1]) && is_array($python_file_option_3rd_tab[1])){

        foreach ($python_file_option_3rd_tab[1] as $key => $value) {

            $positive_symptom .= $value['technical'].', ';

        }

    }



    if( isset($python_file_option_3rd_tab[0]) && is_array($python_file_option_3rd_tab[0])){

        foreach ($python_file_option_3rd_tab[0] as $key => $value) {

            $negative_symptom .= $value['technical'].', ';

        }

    }







    }





          $positive_symptom = rtrim($positive_symptom, ', ');

          $negative_symptom = rtrim($negative_symptom, ', ');

// preparing layman summary  for note purpose



if(isset($user_detail->chief_compliant_userdetail->all_cc_detail_name)){



    $all_cc_name = $user_detail->chief_compliant_userdetail->all_cc_detail_name;

}

else{



    $all_cc_name = '';

}



$all_cc_name = rtrim($all_cc_name,' ,');



if(!empty($all_cc_name)){

    $duration_arr = array('3 months','4 months','5 months','6 months','7 months','8 months','9 months','10 months','11 months','1 year','2 years','3 years','4 years','5 years','6 years','7 years','8 years','9 years','10 years','10+ years');

    $temp_all_cc_name = explode(", ", $all_cc_name);

    if(count($temp_all_cc_name) && !empty($user_detail->chief_compliant_userdetail->compliant_length) && in_array($user_detail->chief_compliant_userdetail->compliant_length, $duration_arr)){



        foreach ($temp_all_cc_name as $cckey => $ccvalue) {



            if(strrpos($ccvalue, 'pain') !== false ){



                $temp_all_cc_name[$cckey] = 'chronic '.$ccvalue;

            }



        }

    }



    $all_cc_name = implode(", ", $temp_all_cc_name);

    //pr($temp_all_cc_name);die;

}



$cc_header = '';

$question_detial_res = $this->CcDetail->prepare_question_layman($user_detail->chief_compliant_userdetail,$login_user['gender']);

if(!empty($question_detial_res) && isset($question_detial_res['all_cc_name'])){



    $all_cc_name = $question_detial_res['all_cc_name'].(!empty($all_cc_name) ? ', '.$all_cc_name : '');



}

$all_cc_name = trim($all_cc_name,' ,');



if(!empty($question_detial_res) && isset($question_detial_res['cc_header'])){



    $cc_header = $question_detial_res['cc_header'];



}



$other_question_detial_res = $this->prepare_other_question_layman($user_detail->chief_compliant_userdetail);





//pr($screening_question_detail_layman);

// pr($question_detial_res) ;die;

$question_detial_res = strip_tags($question_detial_res['layman_summar']);



$question_detial_res = str_replace("your","Patient's",$question_detial_res);

$question_detial_res = str_replace("you","Patient",$question_detial_res);





$other_question_detial_res = strip_tags($other_question_detial_res['layman_summar']);



$other_question_detial_res = str_replace("your","Patient's",$other_question_detial_res);

$other_question_detial_res = str_replace("you","Patient",$other_question_detial_res);

$other_question_detial_res = str_replace("Your","Patient's",$other_question_detial_res);

$other_question_detial_res = str_replace("You","Patient",$other_question_detial_res);







//echo $screening_question_detail_layman;die;





$general_update_question_layman = "";

$pain_update_question_layman = "";

$pre_visit_other_quarion = "";

$pre_visit_quarion = "";

$screening_question_detail_layman = "";

$pre_op_procedure_detail_question_layman = "";

$pre_op_medication_detail_question_layman = "";

$cronic_illness_layman = '';

$subjective = "";

$reason_for_visit = "";

//$pre_op_medical_conditions_layman = "";

//$pre_op_alleries_conditions_layman = "";





//if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 9){



if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 15){



    $er_followup_detail_question_layman = $this->prepare_er_followup_detail_question_layman($user_detail->chief_compliant_userdetail);

}



$screening_question_detail_layman = $this->prepare_screening_question_layman($user_detail->chief_compliant_userdetail);

//pr($screening_question_detail_layman);

  if(!empty($screening_question_detail_layman) && isset($screening_question_detail_layman['layman_summar'])){



    $screening_question_detail_layman = $screening_question_detail_layman['layman_summar'];

  }



      //$screening_question_detail_layman = strip_tags($screening_question_detail_layman);



    $screening_question_detail_layman = str_replace("your","Patient's",$screening_question_detail_layman);

    $screening_question_detail_layman = str_replace("you","Patient",$screening_question_detail_layman);

    $screening_question_detail_layman = str_replace("Your","Patient's",$screening_question_detail_layman);

    $screening_question_detail_layman = str_replace("You","Patient",$screening_question_detail_layman);





$pre_op_procedure_detail_question_layman = $this->prepare_pre_op_procedure_detail_question_layman($user_detail->chief_compliant_userdetail);

//pr($screening_question_detail_layman);

  if(!empty($pre_op_procedure_detail_question_layman) && isset($pre_op_procedure_detail_question_layman['layman_summar'])){



    $pre_op_procedure_detail_question_layman = $pre_op_procedure_detail_question_layman['layman_summar'];



    $pre_op_procedure_detail_question_layman = str_replace("your","Patient's",$pre_op_procedure_detail_question_layman);

    $pre_op_procedure_detail_question_layman = str_replace("you","Patient",$pre_op_procedure_detail_question_layman);

    $pre_op_procedure_detail_question_layman = str_replace("Your","Patient's",$pre_op_procedure_detail_question_layman);

    $pre_op_procedure_detail_question_layman = str_replace("You","Patient",$pre_op_procedure_detail_question_layman);

  }





  $pre_op_medication_detail_question_layman = $this->prepare_pre_op_medication_detail_question_layman($user_detail->chief_compliant_userdetail);

//pr($screening_question_detail_layman);

  if(!empty($pre_op_medication_detail_question_layman) && isset($pre_op_medication_detail_question_layman['layman_summar'])){



    $pre_op_medication_detail_question_layman = $pre_op_medication_detail_question_layman['layman_summar'];



    $pre_op_medication_detail_question_layman = str_replace("your","Patient's",$pre_op_medication_detail_question_layman);

    $pre_op_medication_detail_question_layman = str_replace("you","Patient",$pre_op_medication_detail_question_layman);

    $pre_op_medication_detail_question_layman = str_replace("Your","Patient's",$pre_op_medication_detail_question_layman);

    $pre_op_medication_detail_question_layman = str_replace("You","Patient",$pre_op_medication_detail_question_layman);

  }



  $cronic_illness_layman = $this->prepare_chronic_illnesses_layman($user_detail->chief_compliant_userdetail);

  if(!empty($cronic_illness_layman) && isset($cronic_illness_layman['layman_summar'])){



    $cronic_illness_layman = $cronic_illness_layman['layman_summar'];



    $cronic_illness_layman = str_replace("your","Patient's",$cronic_illness_layman);

    $cronic_illness_layman = str_replace("you","Patient",$cronic_illness_layman);

    $cronic_illness_layman = str_replace("Your","Patient's",$cronic_illness_layman);

    $cronic_illness_layman = str_replace("You","Patient",$cronic_illness_layman);

  }





//get layman for pain update question when pain follow up (step id = 8)

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 8){





   // pr($user_detail->chief_compliant_userdetail);

    $prev_visit_user_detail =  $this->ChiefCompliantUserdetails->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->followup_parent_id])->first();

    //$prev_visit_user_detail->chief_compliant_id =

    $prev_visit_user_detail = $this->prepare_user_detial_data_for_render($prev_visit_user_detail);



    $prev_cc_name = null;



    if(!empty($prev_visit_user_detail) && !empty($prev_visit_user_detail->chief_compliant_details)){



        foreach ($prev_visit_user_detail->chief_compliant_details as $key => $value) {



            if(isset($value['cc_data']['name']) && !empty($value['cc_data']['name'])){



                $prev_cc_name[] = $value['cc_data']['name'];

            }

        }

    }



    if(!empty($prev_cc_name)){



        $prev_cc_name = implode(", ", $prev_cc_name);

    }

    //pr($prev_visit_user_detail);die;

    $prev_visit_user_detail->chief_compliant_id = $user_detail->chief_compliant_userdetail->chief_compliant_id;

    //pr($prev_visit_user_detail);



    $prev_visit_question_detial_res = $this->CcDetail->prepare_question_layman($prev_visit_user_detail,$login_user['gender']);

    if(!empty($prev_visit_question_detial_res) && isset($prev_visit_question_detial_res['layman_summar']) && isset($prev_visit_question_detial_res['all_cc_name']) &&  !empty($prev_visit_question_detial_res['layman_summar']) && !empty($prev_visit_question_detial_res['all_cc_name'])){



        $pre_visit_cc = $prev_visit_question_detial_res['all_cc_name'];

        $pre_visit_cc = rtrim($pre_visit_cc, ', ');



        $prev_visit_question_detial_res = strip_tags($prev_visit_question_detial_res['layman_summar']);

        $prev_visit_question_detial_res = str_replace("your","Patient's",$prev_visit_question_detial_res);

        $prev_visit_question_detial_res = str_replace("you","Patient",$prev_visit_question_detial_res);



        $pre_visit_quarion = " In your previous visit you provided these details for ".$pre_visit_cc .": ".$prev_visit_question_detial_res;

    }

   // pr($pre_visit_quarion);die;

    $prev_visit_other_question_detial_res = $this->prepare_other_question_layman($prev_visit_user_detail);

    //pr($prev_visit_other_question_detial_res);die;





    if(!empty($prev_visit_other_question_detial_res) && isset($prev_visit_other_question_detial_res['layman_summar']) &&  !empty($prev_visit_other_question_detial_res['layman_summar'])){



        $prev_visit_other_question_detial_res = strip_tags($prev_visit_other_question_detial_res['layman_summar']);

        $prev_visit_other_question_detial_res = str_replace("your","Patient's",$prev_visit_other_question_detial_res);

        $prev_visit_other_question_detial_res = str_replace("you","Patient",$prev_visit_other_question_detial_res);

        $prev_visit_other_question_detial_res = str_replace("Your","Patient's",$prev_visit_other_question_detial_res);

        $prev_visit_other_question_detial_res = str_replace("You","Patient",$prev_visit_other_question_detial_res);



        $pre_visit_other_quarion = " In your previous visit ".$prev_visit_other_question_detial_res." ";

        //pr($pre_visit_other_quarion);die;

    }



    $pain_update_question_layman = $this->prepare_pain_update_question_layman($user_detail->chief_compliant_userdetail,$prev_cc_name);

   // pr($pain_update_question_layman);die;

    $pain_update_question_layman = $pain_update_question_layman['layman_summar'];





    $pain_update_question_layman = strip_tags($pain_update_question_layman);



    $pain_update_question_layman = str_replace("your","Patient's",$pain_update_question_layman);

    $pain_update_question_layman = str_replace("you","Patient",$pain_update_question_layman);

    $pain_update_question_layman = str_replace("Your","Patient's",$pain_update_question_layman);

    $pain_update_question_layman = str_replace("You","Patient",$pain_update_question_layman);



    $general_update_question_layman = $this->prepare_general_update_question_layman($user_detail->chief_compliant_userdetail);

    $general_update_question_layman = $general_update_question_layman['layman_summar'];



    $general_update_question_layman = strip_tags($general_update_question_layman);



    $general_update_question_layman = str_replace("your","Patient's",$general_update_question_layman);

    $general_update_question_layman = str_replace("you","Patient",$general_update_question_layman);

    $general_update_question_layman = str_replace("Your","Patient's",$general_update_question_layman);

    $general_update_question_layman = str_replace("You","Patient",$general_update_question_layman);

}



if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 12){





   // pr($user_detail->chief_compliant_userdetail);

    if(isset($user_detail->chief_compliant_userdetail->follow_up_step_id) && $user_detail->chief_compliant_userdetail->follow_up_step_id == 9){



        $prev_visit_user_detail =  $this->ChiefCompliantUserdetails->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->followup_parent_id])->first();

        $prev_visit_user_detail = $this->prepare_user_detial_data_for_render($prev_visit_user_detail);



        $prev_visit_question_detial_res = $this->prepare_screening_question_layman($prev_visit_user_detail,1);



        $prev_visit_question_detial_res = $prev_visit_question_detial_res['layman_summar'];

        //pr($prev_visit_question_detial_res);die;

        $prev_visit_question_detial_res = str_replace("your","Patient's",$prev_visit_question_detial_res);

        $prev_visit_question_detial_res = str_replace("you","Patient",$prev_visit_question_detial_res);

        $pre_visit_quarion = $prev_visit_question_detial_res;

    }

}



//generate follow up sx note output

$follow_up_sx_detial_res = $this->follow_up_sx_detail_layman($user_detail->chief_compliant_userdetail);



    $hpi = h(ucfirst($login_user->first_name)).' is a '.$age.' y.o.'.($login_user->gender == 1 ? ' MALE' : ' FEMALE').($login_user->is_retired == 1 ? ' retired' : '').( !empty($login_user->occupation) ? ' '.strtolower(h($login_user->occupation)): '' );





      $coming_in_for = strtolower(trim($user_detail->chief_compliant_userdetail->current_step_id->step_name)) ;

      // commented for now as not needed according to client

    // $hpi .= ' who is '.strtolower($mar_s[$login_user->marital_status]);

// pr($coming_in_for); die;



      // below code commented for this reason - According to clinet new reqirement change is -

// If the person is coming in for symptom complaints change  coming in for symptom complaints, and has a chief complaint of back pain. The back pain started 3 days ago. -> presenting with back pain for 3 days.
 //pr($cc_header); die;
$reff_doctor ='';
if(!empty($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor) && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 25)
    { 
        // pr($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor);
        if(!empty($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor[605]))
        {
            $reff_doctor = " referred by ".ucfirst($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor[605]['answer']);
        }
    }
if(stripos($coming_in_for, 'symptom') !== false){  // if the person is coming in for symptom complaint



    $cc = strtolower($cc);



    if($user_detail->chief_compliant_userdetail->current_step_id->id == 1 && !empty($cc_header)){



        $hpi .= $cc_header;

    }

    else

    {

        $hpi .= ' presenting with '.$cc.' for '.h($user_detail->chief_compliant_userdetail->compliant_length).'.' ;

    }





}else {

  if($user_detail->chief_compliant_userdetail->current_step_id->id == 21)
  {
      $hpi .= ' coming in for'.($coming_in_for[0] == 'a' ? ' an ' : ($coming_in_for[0] == 's' ? ' ' : ' a ') ).$coming_in_for.'. ';

  }
  else{

    $hpi .= ' coming in for'.($coming_in_for[0] == 'a' ? ' an ' : ($coming_in_for[0] == 's' ? ' ' : ' a ') ).$coming_in_for.(!empty($cc) ? ', ' : '. ');

    $cc = strtolower($cc);

     $hpi .= !empty($cc) ? 'and has a chief complaint of '.$cc.$reff_doctor.'. ' : '';



     $hpi .= !empty($user_detail->chief_compliant_userdetail->compliant_length) ? 'The '.$cc.' started '.h($user_detail->chief_compliant_userdetail->compliant_length).' ago.' : '';
   }


}

// pr($hpi); die;  

    $hpi .= $question_detial_res."".$other_question_detial_res."".$general_update_question_layman."".$pain_update_question_layman.''.$screening_question_detail_layman.''.$pre_op_procedure_detail_question_layman.''.$pre_op_medication_detail_question_layman.''.$pre_visit_quarion."".$pre_visit_other_quarion.''.$cronic_illness_layman;


//count cpt hpi element count

$cpt_hpi_elements = array();

//pr($user_detail->chief_compliant_userdetail->chief_compliant_details);

if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_details)){

    if(!empty($user_detail->chief_compliant_userdetail->compliant_length)){

        $cpt_hpi_elements[] = 'duration';
    }

    foreach ($user_detail->chief_compliant_userdetail->chief_compliant_details as $key => $value) {

        foreach ($value as $k => $v) {

            if(isset($v['hpi_element']) && !empty($v['hpi_element'])){

                $cpt_hpi_elements[] = $v['hpi_element'];

            }

        }

    }

    $cpt_hpi_elements = array_unique(array_filter($cpt_hpi_elements));
}



if(!empty($user_detail->chief_compliant_userdetail->follow_up_sx_detail)){



    foreach ($user_detail->chief_compliant_userdetail->follow_up_sx_detail as $key => $value) {



        foreach ($value as $k => $v) {



            if($k != 'cc_data' && isset($v['question_id'])){



                if($v['question_id'] == 134){



                    $cpt_hpi_elements[] = 'pain_best_scale';

                }

                elseif($v['question_id'] == 135){



                    $cpt_hpi_elements[] = 'pain_worst_scale';

                }

                elseif($v['question_id'] == 136){



                    $cpt_hpi_elements[] = 'temporal';

                }

                elseif($v['question_id'] == 133){



                    $cpt_hpi_elements[] = 'location';

                }

            }

        }

    }



    $cpt_hpi_elements = array_unique(array_filter($cpt_hpi_elements));



}

$cpt_hpi_elements_count = count($cpt_hpi_elements);

//pr($cpt_hpi_elements_count);die;



    // (!empty($question_detial_res) ? '. ' : '');

$he = 'He'; $she = 'She';
$covid_associated_symp = "";
$covid_associated_symptom_trans = array(

    'shortness of breath' => 'SOB',
    'blue face or lips' => 'cyanosis',
    'coughing up blood' => 'hemoptysis',
    'nausea or vomiting' => 'n/v',
    'phlegm production' => 'sputum production',
    'weight loss' => 'anorexia'
);

if(!empty($temp_associated_symp) || !empty($positive_symptom) ){

    //pr($positive_symptom);
    $hpi = trim($hpi);

 $hpi .= ' Associated symptoms include '.strtolower(htmlspecialchars($temp_associated_symp)).(!empty($temp_associated_symp)&& !empty($positive_symptom) ? ', ' : '').strtolower(htmlspecialchars($positive_symptom)).', ';
 $covid_associated_symp .= 'Associated symptoms include '.strtolower(htmlspecialchars($temp_associated_symp)).(!empty($temp_associated_symp)&& !empty($positive_symptom) ? ', ' : '');
    $temp_pos_sym = explode(", ", $positive_symptom);

    if(!empty($temp_pos_sym)){
        foreach ($temp_pos_sym as $key => $value) {
            $value = strtolower(trim($value));
            $covid_associated_symp .= (isset($covid_associated_symptom_trans[$value]) ? $covid_associated_symptom_trans[$value] : $value).", ";
        }


        $covid_associated_symp = rtrim($covid_associated_symp,', ');
    }
 //$covid_associated_symp .= 'Associated symptoms include '.strtolower(htmlspecialchars($temp_associated_symp)).(!empty($temp_associated_symp)&& !empty($positive_symptom) ? ', ' : '').strtolower(htmlspecialchars($positive_symptom)).', ';
 $covid_associated_symp = rtrim($covid_associated_symp,', ').". ";


 $hpi = rtrim($hpi,', ');

 //pr($hpi);die;

 $hpi .= ". ";

$he = 'He'; $she = 'She';

}



if(!empty($positive_symptom) || !empty($negative_symptom) || !empty($temp_associated_symp)){

    $cpt_hpi_elements_count = $cpt_hpi_elements_count + 1;
}

//increase cpt_hpi_elements_count by  for labcovid in covid module

if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){

    if(!empty($user_detail->chief_compliant_userdetail->covid_detail) && isset($user_detail->chief_compliant_userdetail->covid_detail[207])){

        $cpt_hpi_elements_count = $cpt_hpi_elements_count + 1;
    }

}

 if(!empty($negative_symptom)){

    $hpi .=  ($login_user->gender == 1 ? $he : $she).' denies '.htmlspecialchars($negative_symptom) .'. ' ;
    $covid_associated_symp .= ($login_user->gender == 1 ? $he : $she).' denies ';
    $temp_nag_sym = explode(", ", $negative_symptom);
    if(!empty($temp_nag_sym)){

        foreach ($temp_nag_sym as $key => $value) {

           $covid_associated_symp .= (isset($covid_associated_symptom_trans[$value]) ? $covid_associated_symptom_trans[$value] : $value).", ";
        }

        $covid_associated_symp = rtrim($covid_associated_symp,', ');
    }
    $covid_associated_symp .= ". ";
 }



$hpi = rtrim($hpi, ', ');

  // $hpi = strtolower($hpi);

     // pr($hpi); die;

$cpt_mild_count = 0;

$cpt_serve_count = 0;

$cpt_dast_available = 0;



if($user_detail->chief_compliant_userdetail->current_step_id->id == 4 || $user_detail->chief_compliant_userdetail->current_step_id->id == 26){



    if(!empty($user_detail->chief_compliant_userdetail->compliant_medication_detail) && $user_detail->chief_compliant_userdetail->current_step_id->id != 26){

        $hpi = rtrim($hpi,'.');

        $hpi .= ' of ';

        foreach ($user_detail->chief_compliant_userdetail->compliant_medication_detail as $key => $value) {



            $hpi .= trim($value['medication_name_id']).', ';

        }



        $hpi = rtrim($hpi,', ');

        $hpi .= '.';

    }



    if(!empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details)){



        if(isset($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast'])){



            $cpt_dast_available = 1;

        }



        if(!empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt'])){



            foreach ($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt'] as $key => $value) {



               if(isset($value['answer']) && strtolower($value['answer']) == 'mild'){



                 $cpt_mild_count++;

               }



               if(isset($value['answer']) && strtolower($value['answer']) == 'severe'){



                 $cpt_serve_count++;

               }

            }

        }





        $patient_other_detail_score = $this->prepare_medication_refill_extra_details_layman($user_detail->chief_compliant_userdetail->medication_refill_extra_details, $user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details);

    }



 }



 //pr();die;



 $subjective = "";

$procudure_name = "";

$procudure_since_date = "";





if($user_detail->chief_compliant_userdetail->current_step_id->id == 4 && !empty($user_detail->chief_compliant_userdetail->medication_side_effects)){



    //$subjective .= $user_detail->chief_compliant_userdetail->medication_side_effects.'. ';

}



if(isset($patient_other_detail_score) && !empty($patient_other_detail_score)){







   $temp_soapp_hpi = '';

      $temp_comm_hpi = '';

      $temp_dast_hpi = '';

      $temp_padt_hpi = '';



       if(!empty($patient_other_detail_score['padt_description'])){

            $temp_padt_hpi .= "PADT";



            $hpi .= ' PADT was performed. ';

            $hpi .= $patient_other_detail_score['padt_description'];

           // $temp_padt_hpi = $patient_other_detail_score['padt_description'];

       }

      //pr($patient_other_detail_score);die;

      if(!empty($patient_other_detail_score['soapp_summary'])){



           $hpi .= " SOAPP-R, ";



            $temp_soapp_hpi .= 'SOAPP-R score is '.$patient_other_detail_score['soapp_score'].", ".($patient_other_detail_score['soapp_score'] >= 18 ? "positive" : "negative").' indication. ';



          //$temp_soapp_hpi .= 'SOAPP-R indication&nbsp;is '.($patient_other_detail_score['soapp_score'] >= 18 ? "positive" : "negative").". ";

      }



      if(!empty($patient_other_detail_score['comm_summary'])){



           $hpi .= "COMM, ";



          $temp_comm_hpi .= 'COMM score is '.$patient_other_detail_score['comm_score'].", ".($patient_other_detail_score['comm_score'] >= 9 ? "positive" : "negative").' indication. ';

         // $temp_comm_hpi .= 'COMM indication&nbsp;is '.($patient_other_detail_score['comm_score'] >= 9 ? "positive" : "negative").". ";

      }



      if(!empty($patient_other_detail_score['dast_summary'])){



           $hpi .= "DAST-10, ";



          $temp_dast_hpi .= 'DAST-10 score is '.$patient_other_detail_score['dast_score'].", ";

          if($patient_other_detail_score['dast_score'] == 0){



            $temp_dast_hpi .= 'low degree of problems related to drug abuse.';

          }

          elseif($patient_other_detail_score['dast_score'] >= 1 && $patient_other_detail_score['dast_score'] <= 2){



            $temp_dast_hpi .= 'low degree of problems related to drug abuse.';

          }

          elseif($patient_other_detail_score['dast_score'] >= 3 && $patient_other_detail_score['dast_score'] <= 5){



            $temp_dast_hpi .= 'moderate degree of problems related to drug abuse.';

          }

          elseif($patient_other_detail_score['dast_score'] >= 6 && $patient_other_detail_score['dast_score'] <= 8){



            $temp_dast_hpi .= 'substantial degree of problems related to drug abuse.';

          }

          elseif($patient_other_detail_score['dast_score'] >= 9 && $patient_other_detail_score['dast_score'] <= 10){



            $temp_dast_hpi .= 'severe degree of problems related to drug abuse.';

          }

      }



    //$hpi .= $temp_padt_hpi;

    $hpi = trim($hpi,', ');

    $hpi .= " performed. ";

    $hpi .= $temp_soapp_hpi.$temp_comm_hpi.$temp_dast_hpi;

}



if($user_detail->specialization_id == 6 && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 11){



    $post_checkup_layman = $this->prepare_post_checkup_question_layman($user_detail->chief_compliant_userdetail,$login_user->gender);



    if(!empty($post_checkup_layman) && isset($post_checkup_layman['layman_summar'])){



        $procudure_name = $post_checkup_layman['procudure'];

        $procudure_date = $post_checkup_layman['procedure_date'];

        $procudure_date = new \DateTime($procudure_date);

        $now_date = new \DateTime();

        $procudure_since_date = $now_date->diff($procudure_date)->format('%a');

        $post_checkup_layman = $post_checkup_layman['layman_summar'];

    }



    $subjective .= h(ucfirst($login_user->first_name))." is following up ".$post_checkup_layman;

}



if($user_detail->specialization_id == 6 && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 12 && $user_detail->chief_compliant_userdetail->follow_up_step_id == 11 ){

    //die('dfdf');

    $prev_visit_user_detail =  $this->ChiefCompliantUserdetails->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->followup_parent_id])->first();

      $prev_visit_user_detail = $this->prepare_user_detial_data_for_render($prev_visit_user_detail);



     // pr($prev_visit_user_detail);die;



    $post_checkup_layman = $this->prepare_followup_post_checkup_question_layman($user_detail->chief_compliant_userdetail,$prev_visit_user_detail,$login_user->gender);



    // echo '<pre>';

    // pr($post_checkup_layman);die;



    if(!empty($post_checkup_layman) && isset($post_checkup_layman['layman_summar'])){



        $procudure_name = $post_checkup_layman['procudure'];

        $procudure_date = $post_checkup_layman['procedure_date'];

        $procudure_date = new \DateTime($procudure_date);

        $now_date = new \DateTime();

        $procudure_since_date = $now_date->diff($procudure_date)->format('%a');

        $post_checkup_layman = $post_checkup_layman['layman_summar'];

    }



    $subjective .= h(ucfirst($login_user->first_name))." is following up ".$post_checkup_layman;

}







    // #GYNHX : LMP Paps STI Breast BCM

      // LMP 05/04, menses at 11, 24 interval, 11 duration, Regular



$period_specific_label = array('was_it_regular_or_not' => 'Was it regular or not ?', 'cycle_length_in_days' => 'Cycle length (In Days)', 'flow_duration_in_days' => 'Flow duration (In Days)' );



  $lmp = '' ; $lmp_reg = '' ; $lmp_interval = '' ; $lmp_duration = '' ;



if(!empty($user_detail->chief_compliant_userdetail->last_period_info)){

  $user_detail->chief_compliant_userdetail->last_period_info = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->last_period_info), SEC_KEY)) ;

  // pr($user_detail->chief_compliant_userdetail->last_period_info); die;



  // $user_detail->chief_compliant_userdetail->last_period_info = array_filter($user_detail->chief_compliant_userdetail->last_period_info) ;

 if(is_array($user_detail->chief_compliant_userdetail->last_period_info)){

  foreach ($user_detail->chief_compliant_userdetail->last_period_info as $key => $value) {



    if($key == 'was_it_regular_or_not'){

      if($value == 1)   $lmp_reg =  'regular'; else if($value == 0)   $lmp_reg =  'irregular';

    }

    if($key == 'cycle_length_in_days')

      $lmp_interval =  ' interval '.h($value).' days, ';

    if($key == 'flow_duration_in_days')

      $lmp_duration =  ' duration '.h($value).' days, ';

   }

 }

}





    $lmp =  "LMP ".(!empty($user_detail->chief_compliant_userdetail->last_period_date) ? $user_detail->chief_compliant_userdetail->last_period_date->i18nFormat('MM-dd-yyyy').', ' : ' not provided, ');

    // pr($women_field);



    // pr($user_detail);

    // die ;

if(!empty($women_field)) {

       $lmp .= 'menses at '.h($women_field->age_of_first_priod).', '.$lmp_interval.$lmp_duration.$lmp_reg ;

}



$lmp = rtrim($lmp, ', ');



    // Paps: Last pap 04/2017, abnormal, Findings/Procedures: None







// pr($women_field);die;



  $paps = ''; $paps_reg = '' ; $paps_finding = '' ;



  $papsmear_specific_label = array('was_it_regular_or_not' => 'Was it regular or not ?', 'any_findings_or_procedures' => 'Any Findings/Procedures?' );



 if(!empty($user_detail->chief_compliant_userdetail->last_pap_smear_info)){

    // $user_detail->chief_compliant_userdetail->last_pap_smear_info = unserialize($user_detail->chief_compliant_userdetail->last_pap_smear_info) ;



$user_detail->chief_compliant_userdetail->last_pap_smear_info = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->last_pap_smear_info), SEC_KEY)) ;

}







// papsmear_month

// papsmear_year

// was_it_regular_or_not

// any_findings_or_procedures

// pr($women_field->papsmear_month); die;

$papsmear_month = isset($user_detail->chief_compliant_userdetail->last_pap_smear_info['papsmear_month']) ? $user_detail->chief_compliant_userdetail->last_pap_smear_info['papsmear_month'] : ( !empty($women_field->papsmear_month) ? $women_field->papsmear_month : '') ;



// pr($user_detail); die;



$papsmear_year = isset($user_detail->chief_compliant_userdetail->last_pap_smear_info['papsmear_year']) ? $user_detail->chief_compliant_userdetail->last_pap_smear_info['papsmear_year'] :  ( !empty($women_field->papsmear_year) ? $women_field->papsmear_year : '');



$any_findings_or_procedures = isset($user_detail->chief_compliant_userdetail->last_pap_smear_info['any_findings_or_procedures']) ? $user_detail->chief_compliant_userdetail->last_pap_smear_info['any_findings_or_procedures'] : ( !empty($women_field->papsmear_finding) ? $women_field->papsmear_finding : '');



$was_it_regular_or_not = isset($user_detail->chief_compliant_userdetail->last_pap_smear_info['was_it_regular_or_not']) ? $user_detail->chief_compliant_userdetail->last_pap_smear_info['was_it_regular_or_not'] : ( !empty($women_field->is_regular_papsmear) ? $women_field->is_regular_papsmear : '');





    // Paps: Last pap 04/2017, abnormal, Findings/Procedures: None

$paps = 'Last pap '.(!empty($papsmear_month)&&!empty($papsmear_year) ? ($papsmear_month<10 ? "0" : "").($papsmear_month+1).'/'.$papsmear_year : 'none provided').', ' ;

$paps .= (is_null($was_it_regular_or_not) ? '' : ($was_it_regular_or_not == 1 ? 'regular' : 'not regular' )).', ';

$paps .= 'Findings/Procedures: '.(!empty($any_findings_or_procedures) ? $any_findings_or_procedures : 'none provided') ;



// pr($paps); die;

     // STI: HPV (2014)







    $sti = '' ;

if(!empty($women_field) && !empty($women_field->sti_std_detail)){

          // $women_field->sti_std_detail = unserialize(base64_decode($women_field->sti_std_detail)) ;

$women_field->sti_std_detail = unserialize((Security::decrypt(base64_decode($women_field->sti_std_detail), SEC_KEY))) ;

// pr($women_field->sti_std_detail);

    $sti_std_disease = array("Human papillomavirus (HPV)", "Gonorrhea", "Chlamydia", "Genital herpes", "Syphilis", "Trichomoniasis", "HIV/AIDS", "OTHER");



  if(is_array($women_field->sti_std_detail)){

        foreach ($women_field->sti_std_detail as $key => $value) {

             if(is_numeric($key)){

              if($key != 7)

                $sti .=  $sti_std_disease[$key].(!empty($value) ? ' ('.$value.')' : '').', ' ;

               if($key == 7)  // because other sti std serial no is 7 in array

                $sti .=  h($women_field->sti_std_detail['other']).(!empty($value) ? ' ('.$value.')' : '').', ' ;



             }

    }

  }

}



  $sti = rtrim($sti, ', ');

// pr($sti); die;

      // Breast: abnormal lumps, 1 biopsy, no result

$biopsy_rsult = ''; $count_biopsy = '';

if(!empty($women_field) && !empty($women_field->breast_lump_biopsy_result)){

    // $women_field->breast_lump_biopsy_result = unserialize(base64_decode($women_field->breast_lump_biopsy_result))  ;

$women_field->breast_lump_biopsy_result = unserialize((Security::decrypt(base64_decode($women_field->breast_lump_biopsy_result), SEC_KEY)))  ;





$month_name = ['January', 'February', 'March', 'April','May', 'June', 'July','August', 'September', 'October','Nobember', 'December']  ;

                  // pr( $women_field->breast_lump_biopsy_result );



   if(isset($women_field->breast_lump_biopsy_result['biopsy_result']) && is_array($women_field->breast_lump_biopsy_result['biopsy_result'])){

    foreach ($women_field->breast_lump_biopsy_result['biopsy_result'] as $key => $value) {



      $biopsy_rsult .= h(trim($value)).' ('.$women_field->breast_lump_biopsy_result['biopsy_year'][$key].'), ';

    }



    $count_biopsy = count($women_field->breast_lump_biopsy_result['biopsy_result']) ;

    $biopsy_rsult = rtrim($biopsy_rsult, ', ');

              }

}

$breast = '';

if(!empty($women_field))

      $breast = ($women_field->previous_abnormal_breast_lump == 1 ? 'abnormal lumps, ' : 'No abnormal lumps, ').$count_biopsy.(empty($count_biopsy) ? 'no biopsy, ' : ($count_biopsy>1 ? ' biopsies, ' : ' biopsy, ')).$biopsy_rsult ;



$breast = rtrim($breast, ', ') ;

// pr($breast); die ;

    // BCM: condom





   $bcm = '' ;



    if(!empty($user_detail->chief_compliant_userdetail->sexual_info)) {







    // $user_detail->chief_compliant_userdetail->sexual_info = unserialize(base64_decode($user_detail->chief_compliant_userdetail->sexual_info)) ;



      $user_detail->chief_compliant_userdetail->sexual_info = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->sexual_info), SEC_KEY))) ;







    $sexual_info_label = array('sexual_active_or_not' => 'Are you sexually active?', 'no_of_partner' => 'Number of sexual partner', 'protection_used_or_not' => 'Do you use protection?', 'protection_method' => 'Protection method(s)' );

  if(is_array($user_detail->chief_compliant_userdetail->sexual_info)) {

    foreach ($user_detail->chief_compliant_userdetail->sexual_info as $key => $value) {



      if($key == 'protection_method')

           $bcm .= h($value).', ' ;



    }

  }



    $bcm = rtrim($bcm, ',') ;

     }



// 1. Currently pregnant 34 weeks 0 days, M, no complications

// 2. 8/2016 Vaginal delivery, no complications, Ben Taub hospital birthed





// pr($user_detail->chief_compliant_userdetail); die;

     // #OBHX

    // if(!empty($women_field)) {

$tmp = $user_detail->chief_compliant_userdetail ;



if(!empty($tmp->is_curently_pregnant))

  $tmp->is_curently_pregnant = Security::decrypt( base64_decode($tmp->is_curently_pregnant), SEC_KEY);

if(!empty($tmp->currently_pregnant_week))

  $tmp->currently_pregnant_week = Security::decrypt( base64_decode($tmp->currently_pregnant_week), SEC_KEY);

if(!empty($tmp->currently_pregnant_days))

  $tmp->currently_pregnant_days = Security::decrypt( base64_decode($tmp->currently_pregnant_days), SEC_KEY);

if(!empty($tmp->currently_pregnant_complication))

  $tmp->currently_pregnant_complication = Security::decrypt( base64_decode($tmp->currently_pregnant_complication), SEC_KEY);

// pr($tmp) ;die;

// Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_id), SEC_KEY)

         // Currently pregnant 34 weeks 0 days, M, no complications

$i = 1;

        $cur_preg_info =   ($tmp->is_curently_pregnant == 1 ? $i++.'. Currently pregnant, ' : 'Not currently pregnant, ');

        if($tmp->is_curently_pregnant == 1){

          $cur_preg_info .=   (empty($tmp->currently_pregnant_week)? '0' : h($tmp->currently_pregnant_week) ).' weeks, '.(empty($tmp->currently_pregnant_days) ? '0' : h($tmp->currently_pregnant_days) ).' days, ';





          // if(!empty($tmp->current_baby_sex)){

          //   $cur_preg_info .= $tmp->current_baby_sex ;

          // }





          // code commented as now we are using tagsinput instead of multiselect input

          if(!empty($tmp->current_baby_sex)){

      $tmp->current_baby_sex = rtrim($tmp->current_baby_sex, ', ');

      // pr($tmp->current_baby_sex) ;die ;

            $cur_preg_info .=  $tmp->current_baby_sex.', ';



            // commented as we changed input type on front end

            // $tmp->current_baby_sex = explode(',',$tmp->current_baby_sex) ;



            // foreach ($tmp->current_baby_sex as $key => $value) {

            //   $cur_preg_info .=  $value == 1 ? 'M, ' : 'F, ';

            // }



          }



          // commented as multiple gender is required

          // $cur_preg_info .=  ($tmp->current_baby_sex == 1 ? 'M, ' : ( !is_null($tmp->current_baby_sex) && $tmp->current_baby_sex == 0 ?  'F, ' : ''));



           $cur_preg_info .=  (empty($tmp->currently_pregnant_complication)? 'no complications' : h($tmp->currently_pregnant_complication) ) ;

        }



     $cur_preg_info = rtrim($cur_preg_info, ', ')    ;



        // pr($cur_preg_info); die;



    // }

// echo $cur_preg_info ; die;



    // 8/2016 Vaginal delivery, no complications, Ben Taub hospital birthed



    $prev_birth_data = array(); // as multiple birth will be inserted as separate array



        $prev_birth_data[] = $cur_preg_info ;

        $prev_birth_detail = array();

    if(!empty($women_field) && $women_field->is_previous_birth ==1) {

      if(!empty($women_field->prev_birth_detail))

        $prev_birth_detail  = unserialize((Security::decrypt(base64_decode($women_field->prev_birth_detail), SEC_KEY))) ;

// pr($prev_birth_detail); die;





        // pr($prev_birth_detail); die;

$month_name = ['January', 'February', 'March', 'April','May', 'June', 'July','August', 'September', 'October','Nobember', 'December']  ;



  if(!empty($prev_birth_detail) && is_array($prev_birth_detail['previous_birth_sex'])) {

        // $i = 2;

        foreach ($prev_birth_detail['previous_birth_sex'] as $key => $value) {

// 2. 8/2016 Vaginal delivery, no complications, Ben Taub hospital birthed



$tempp = $i++.'. '.((is_numeric($prev_birth_detail['previous_birth_month'][$key]) && is_numeric($prev_birth_detail['previous_birth_year'][$key])) ? ($prev_birth_detail['previous_birth_month'][$key]+1).'/'.$prev_birth_detail['previous_birth_year'][$key] : 'date not provided, ').' ';



$tempp .= ($prev_birth_detail['previous_delivery_method'][$key] === 0 ? 'Vaginal delivery, ' : ($prev_birth_detail['previous_delivery_method'][$key] == 1 ? 'C-section, ' : 'delivery method not provided, ' ));



$tempp .= (!empty($prev_birth_detail['previous_complication'][$key])? h($prev_birth_detail['previous_complication'][$key]).', ' : 'no complications, ').h($prev_birth_detail['previous_hospital'][$key]).', '  ;



$prev_birth_data[]  = rtrim($tempp, ', ') ;

// $prev_birth_data .= ($prev_birth_detail['previous_birth_month'][$key]+1).'/'.$prev_birth_detail['previous_birth_year'][$key].', '.($prev_birth_detail['previous_delivery_method'][$key] == 0 ? 'Vaginal delivery' : ($prev_birth_detail['previous_delivery_method'][$key] == 1 ? 'C-section' : '' )).', '.h($prev_birth_detail['previous_complication'][$key]).', '.h($prev_birth_detail['previous_hospital'][$key]).', '  ;





        }

    }

        // $prev_birth_data =  '2. '.rtrim($prev_birth_data, ', ') ;

        }

// pr($prev_birth_data); die ;



        // #MEDS birth control pill 2mg prn po

//echo 'hghgf<pre>'; print_r($user_detail->chief_compliant_userdetail->compliant_medication_detail); die;

$med_how_tken_arr = array("mouth"=>"PO","nasal spray"=>"IN","both ears" => "AU","right ear" => "AD","left ear" => "AS","both eyes" => "OU","right eye" => "OD","left eye" => "OS","muscle injection"=>"IM","subcutaneously"=>"SUBQ","under the skin"=>"SUBQ","under tongue"=>"sublingual","topical"=>"TD","suppository"=>"SUPP") ;

$meds = '' ;
//pr($user_detail->chief_compliant_userdetail->compliant_medication_detail); die;
if(is_array($user_detail->chief_compliant_userdetail->compliant_medication_detail)) {



        foreach ($user_detail->chief_compliant_userdetail->compliant_medication_detail as $key => $value) {



// $value['medication_how_taken'] = !empty($med_how_tken_arr[$value['medication_how_taken']]) ? $med_how_tken_arr[$value['medication_how_taken']] : $value['medication_how_taken'] ;
$value['medication_how_taken'] = !empty($value['medication_how_taken']) ? $value['medication_how_taken'] : $value['medication_how_taken'] ;

    // pr($value) ;die;
            $rxnormid = '';
            $medication_name = '';
            if(!empty($value['medication_name_name'])){
                // $meds .= h($value['medication_name_name']);
                $value['medication_name_name'] = ltrim($value['medication_name_name']);
                $chief_compliant_medication_Tbl = TableRegistry::get('chief_compliant_medication');
                $chief_compliant_medication_rec = $chief_compliant_medication_Tbl->find('all')->where(['layman_name' =>$value['medication_name_name']])->first();
                //pr($chief_compliant_medication_rec); 
                $medication_name  = !empty($value['medication_name_name']) ? $value['medication_name_name'] : '';
                $rxnormid = !empty($chief_compliant_medication_rec['rxnormid']) ? $chief_compliant_medication_rec['rxnormid'] :'';
                $meds .= '{"rxnormid": '.'"'.$rxnormid.'"'.', "medication": '.'"'.h($medication_name).'"';
                // $meds .= h($value['medication_name_name']);

            }
            if(!empty($value['medication_dose'])){
                // $meds .= ' '.h($value['medication_dose']);
                $meds .= ', "dose": '.'"'.h($value['medication_dose']).'"';

            }

            if(!empty($value['medication_how_often'])){
                // $meds .= ' '.h($value['medication_how_often']);
                $meds .= ', "frequency": '.'"'.h($value['medication_how_often']).'"';
            }

            if(!empty($value['medication_how_taken'])){
                // $meds .= ' '.h($value['medication_how_taken']);
                $meds .= ', "route": '.'"'.h($value['medication_how_taken']).'"';
            }
            if(!empty($meds))
            {
                $meds .="}";
            }


            $meds .= ',';

           // $meds .=  h($value['medication_name_name']).' '.h($value['medication_dose']).' '.h($value['medication_how_often']).' '.h($value['medication_how_taken']).', ' ;

            // h($length_arr[$value['medication_how_often']])

             }

         $meds = "[".rtrim($meds, ', ')."]" ;

       }

       if(is_array($user_detail->chief_compliant_userdetail->chronic_dmii_medication))
        {
            foreach ($user_detail->chief_compliant_userdetail->chronic_dmii_medication as $key => $value)
            {

                // $value['medication_how_taken'] = !empty($med_how_tken_arr[$value['medication_how_taken']]) ? $med_how_tken_arr[$value['medication_how_taken']] : $value['medication_how_taken'] ;
                // if(!empty($value['medication_name_name']))
                // {
                //     $meds .= h($value['medication_name_name']);
                // }
                // if(!empty($value['medication_dose']))
                // {
                //     $meds .= ' '.h($value['medication_dose']);
                // }

                // if(!empty($value['medication_how_often']))
                // {
                //     $meds .= ' '.h($value['medication_how_often']);
                // }

                // if(!empty($value['medication_how_taken']))
                // {
                //     $meds .= ' '.h($value['medication_how_taken']);
                // }

                // $meds .= ', ';
                $value['medication_how_taken'] = !empty($value['medication_how_taken']) ? $value['medication_how_taken'] : $value['medication_how_taken'] ;
                $rxnormid = '';
                $medication_name = '';
                if(!empty($value['medication_name_name'])){
                $value['medication_name_name'] = ltrim($value['medication_name_name']);
                $chief_compliant_medication_Tbl = TableRegistry::get('chief_compliant_medication');
                $chief_compliant_medication_rec = $chief_compliant_medication_Tbl->find('all')->where(['layman_name' =>$value['medication_name_name']])->first();
                //pr($chief_compliant_medication_rec); 
                $medication_name  = !empty($value['medication_name_name']) ? $value['medication_name_name'] : '';
                $rxnormid = !empty($chief_compliant_medication_rec['rxnormid']) ? $chief_compliant_medication_rec['rxnormid'] :'';
                $meds .= '{"rxnormid": '.'"'.$rxnormid.'"'.', "medication": '.'"'.h($medication_name).'"';

            }
            if(!empty($value['medication_dose'])){
                $meds .= ', "dose": '.'"'.h($value['medication_dose']).'"';

            }

            if(!empty($value['medication_how_often'])){
                $meds .= ', "frequency": '.'"'.h($value['medication_how_often']).'"';

            }

            if(!empty($value['medication_how_taken'])){
                $meds .= ', "route": '.'"'.h($value['medication_how_taken']).'"';

            }
            if(!empty($meds))
            {
                $meds .="}";
            }


            $meds .= ',';
            }

            $meds = "[".rtrim($meds, ', ')."]" ;
        }




// pr($meds); die;



       // #PMH Chicken Pox (2002), DM2 (2015)

    $commonTable = TableRegistry::get('common_conditions');





    $tmp_common_medical_cond = $commonTable->find('list', [

                        // 'keyField' => 'name',

                        'keyField' => function ($row) {

                return strtolower(preg_replace('/\s+/', '', trim($row['name'])))  ;  // we are trimming and lowercase key to match the user supplied  medical history

                                    } ,

                        'valueField' => 'note_name'

                    ])->toArray();





 // if($tk = array_search(strtolower(preg_replace('/\s+/', '', $value)), $chief_compliant_arr)){





    // pr($tmp_common_medical_cond);



    $cpt_pmfsh_count = 0;
    $pmh = '';
    $cpt_cronic_condition_count = 0;
    $cpt_cronic_condition_arr = array('hypertension','diabetes','congestive heart failure','coronary artery disease','asthma');



if($user_detail->chief_compliant_userdetail->current_step_id->id == 17)
{

    if(!empty($user_detail->chief_compliant_userdetail->focused_history_detail))
    {

        $cpt_pmfsh_count++;
         $ques_213_translate = array(



                    'Chronic obstructive pulmonary disease (COPD)' => 'COPD',

                    'Asthma' => 'asthma',

                    'Heart disease (coronary artery disease)' => 'CAD',

                    'Heart attacks' => 'MI',

                    'Heart failure' => 'CHF',

                    'High blood pressure (hypertension)' => 'HTN',

                    'Diabetes' => 'DM2',

                    'Multiple sclerosis' => 'MS',

                    "Lou Gehrig's disease (ALS)" => 'ALS',

                    "Myasthenia gravis" => 'myasthenia gravis',

                    'Immunsuppression therapy' => 'immunsuppression therapy',

                    'Cirrhosis' => 'cirrhosis',

                    'Chronic kidney disease' => 'CKD',

                    'Obesity' => 'obesity'

                );



        $patient_chronic_conditions = array();

        if(isset($user_detail->chief_compliant_userdetail->focused_history_detail[212]) && !empty($user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer']) && is_array($user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer'])){



           $patient_chronic_conditions = array_merge($patient_chronic_conditions, $user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer']);

        }



        if(isset($user_detail->chief_compliant_userdetail->focused_history_detail[213]) && !empty($user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer']) && is_array($user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer'])){



            $patient_chronic_conditions = array_merge($patient_chronic_conditions, $user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer']);



            foreach ($user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer'] as $key => $value) {

                $pmh .= (isset($ques_213_translate[$value])? $ques_213_translate[$value] : $value).", ";
            }

            $pmh = rtrim($pmh,', ');

        }
        /*else{

            $pmh = $user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer'] ;

        }*/



        if(isset($patient_chronic_conditions['members'])){

            unset($patient_chronic_conditions['members']);

        }



        $patient_chronic_conditions = array_filter(array_unique($patient_chronic_conditions));

        if(!empty($patient_chronic_conditions)){



            foreach ($patient_chronic_conditions as $key => $value) {

               $value = strtolower($value);

               foreach ($cpt_cronic_condition_arr as $chronic_cond_key => $chronic_cond_value) {

                    $chronic_cond_value = strtolower($chronic_cond_value);

                    if(strpos($value, $chronic_cond_value) !== false)

                    {

                        $cpt_cronic_condition_count++;

                    }

                }

            }

        }



    }

}
else
{

    if(!empty($login_user->is_check_med_his)){



        $cpt_pmfsh_count++;

    }

    if(!empty($login_user->medical_history)){

    // $medical_history = unserialize(base64_decode($login_user->medical_history));

      $medical_history = unserialize((Security::decrypt(base64_decode($login_user->medical_history), SEC_KEY)));


    if(!empty($medical_history)){

        foreach ($medical_history as $key => $value) {

            //count the cpt cronic condition

            if(in_array(strtolower($value['name']), $cpt_cronic_condition_arr)){



               $cpt_cronic_condition_count++;

            }

        // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose



        //$value['name'] =   !empty($tmp_common_medical_cond[strtolower(preg_replace('/\s+/', '', $value['name']))]) ? $tmp_common_medical_cond[strtolower(preg_replace('/\s+/', '', $value['name']))] : $value['name'] ;



          //$pmh .= h($value['name']).(!empty(trim($value['year'])) ? ' ('.h($value['year']).'), ' : ', ' );



        }
    }

      // $pmh = strtolower(rtrim($pmh, ', ')) ;

    //$pmh = (rtrim($pmh, ', ')) ;

    }

}

if(!empty($login_user->medical_history)){
     $pmh .= !empty($pmh) ? ', ': '';
      $medical_history = unserialize((Security::decrypt(base64_decode($login_user->medical_history), SEC_KEY)));


    if(!empty($medical_history)){

        foreach ($medical_history as $key => $value) {


        // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose



        $value['name'] =   !empty($tmp_common_medical_cond[strtolower(preg_replace('/\s+/', '', $value['name']))]) ? $tmp_common_medical_cond[strtolower(preg_replace('/\s+/', '', $value['name']))] : $value['name'] ;



          $pmh .= h($value['name']).(!empty(trim($value['year'])) ? ' ('.h($value['year']).'), ' : ', ' );




        }
        ;
    }

}

    $pmh = (rtrim($pmh, ', ')) ;
    $pmh = str_replace(', none of these','',$pmh);

    // #PSH  - it has same structure as #PMH

    $psh = '';

    if(!empty($login_user->surgical_history)){

    // $medical_history = unserialize(base64_decode($login_user->medical_history));

      $surgical_history = unserialize((Security::decrypt(base64_decode($login_user->surgical_history), SEC_KEY)));





    foreach ($surgical_history as $key => $value) {



    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

     // strtolower(preg_replace('/\s+/', '', trim($value['name'])))

    $value['name'] =   !empty($tmp_common_medical_cond[strtolower(preg_replace('/\s+/', '', trim($value['name'])))]) ? $tmp_common_medical_cond[strtolower(preg_replace('/\s+/', '', $value['name']))] : $value['name'] ;





      $psh .= h($value['name']).(!empty(trim($value['year'])) ? ' ('.h($value['year']).'), ' : ', ' );



    }

      // $psh = strtolower(rtrim($psh, ', ')) ;

    $psh = (rtrim($psh, ', ')) ;

    //$cpt_pmfsh_count++;

    }



    // #FH PGM - Breast cancer, MGM (d/c 85, natural) - Diabetes,

        // PGF (d/c 31, acute rheumatic fever)

    $fh = array() ;  // we are using array becasue each case will be in separate array



     if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){

        //pr($user_detail->chief_compliant_userdetail->focused_history_detail);die;

        if(isset($user_detail->chief_compliant_userdetail->focused_history_detail[212]) && !empty($user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer'])){



            $cpt_pmfsh_count++;

            $ques_213_translate = array(



                    'Chronic obstructive pulmonary disease (COPD)' => 'COPD',

                    'Asthma' => 'asthma',

                    'Heart disease (coronary artery disease)' => 'CAD',

                    'Heart attacks' => 'MI',

                    'Heart failure' => 'CHF',

                    'High blood pressure (hypertension)' => 'HTN',

                    'Diabetes' => 'DM2',

                    'Multiple sclerosis' => 'MS',

                    "Lou Gehrig's disease (ALS)" => 'ALS',

                    "Myasthenia gravis" => 'myasthenia gravis',

                    'Immunsuppression therapy' => 'immunsuppression therapy',

                    'Cirrhosis' => 'cirrhosis',

                    'Chronic kidney disease' => 'CKD',

                    'Obesity' => 'obesity'

                );



            $family_members_translate = array(



                'Father' => 'F',

                'Mother' => 'M',

                'Paternal grandmother' => 'PGM',

                'Paternal grandfather' => 'PGF',

                'Maternal grandmother' => 'MGM',

                'Maternal grandfather' => 'MGF',

                'Brother' => 'brother',

                'Sister' => 'sister',

                'Son' => 'son',

                'Daughter' => 'daughter'

            );

            foreach ($user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer'] as $key => $value) {



                if($key != 'members'){

                    $cond = isset($ques_213_translate[$value]) ? $ques_213_translate[$value] : "";

                    if(!empty($cond) && isset($user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer']['members'][$key])){



                        $members = array();

                        foreach ($user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer']['members'][$key] as $k => $v) {



                            $members[] = isset($family_members_translate[$v]) ? $family_members_translate[$v] : $v;

                        }



                        $members = array_filter($members);

                        $temp_fh = $cond.(!empty($members) ? "(".implode(", ", $members).")":"");

                        $fh[]  = $temp_fh;

                    }

                }

            }

        }

    }

    else{



       if(!empty($login_user->is_family_his)){



            $cpt_pmfsh_count++;

        }
    }

     if(!empty($login_user->family_history)){

            // $family_history = unserialize(base64_decode($login_user->family_history));

              $family_history = unserialize((Security::decrypt(base64_decode($login_user->family_history), SEC_KEY)));



                // pr($family_history); die;

             //$family_relation = [1=>'F', 2=>'M', 3=>'PGM', 4=>'PGF', 5=>'MGM', 6=>'MGF', 7=>'Brother', 8=>'Sister', 9=>'Son', 10=>'Daughter'];
             $family_relation = [1=>'F', 2=>'M', 3=>'PGM', 4=>'PGF', 5=>'MGM', 6=>'MGF', 7=>'Brother', 8=>'Sister', 9=>'Son', 10=>'Daughter',11 =>"Cousin(mom's side)",12 =>"Cousin(dad's side)",13 =>"Aunt(mom's side)",14 =>"Aunt(dad's side)",15=>"Uncle(mom's side)",16 =>"Uncle(dad's side)"];



          // $family_relation = [1=>'Father', 2=>'Mother', 3=>'Grandmother (Dad-side)', 4=>'Grandfather (Dad-side)', 5=>'Grandmother (Mom-side)', 6=>'Grandfather (Mom-side)', 7=>'Brother', 8=>'Sister', 9=>'Son', 10=>'Daughter'];





            foreach ($family_history as $key => $value)
            {

                $tmp = '';
                $start_bracket = "";
                $end_bracket = "";
                $tempfh = '';
                if(isset($value['alive_status']) && !empty($value['alive_status']))
                {
                  if(($value['alive_status'] == 0 || $value['alive_status'] == 1  || !empty($value['decease_year'])) && !empty($value['cause_of_death']))
                  {
                      $tmp = ', ';
                  }
                }
                $tempfh .= h($family_relation[$value['name']]);
                if(isset($value['alive_status']) && !empty($value['alive_status']))
                {
                $tempfh  .= ' ('.($value['alive_status'] == 1 ? "alive" : "d/c".($value['decease_year'] == 999 ? ' childhood' : ($value['decease_year'] == 911  ? '' : (!empty($value['decease_year']) ? ' '.h($value['decease_year'] ) : '' ))).$tmp.h(trim(strtolower(implode(', ', explode(",", $value['cause_of_death']))))) ).')';
                }
                $tempfh  .= !empty($value['disease']) ? ' - '.h(trim(strtolower(implode(', ', explode(",", $value['disease']))))).', ' : '' ;

                $tempfh = rtrim($tempfh, ', ');
                $fh[] = $tempfh ;
            }

        }

    // #SH heterosexual, sexually active, 1 partner, protection: condom, denies EtOH and 1 drinks/wk for 3 years, denies current smoking, denies past smoking, denies IDU



    $sh = '';





        // sexually active, 1 partner, protection: condom,

        $sx_act = '';

        if(!empty($user_detail->chief_compliant_userdetail->sexual_info)){

            $tmp_sx = $user_detail->chief_compliant_userdetail->sexual_info ;

            if(isset($tmp_sx['sexual_active_or_not'])){

$sx_act .= ($tmp_sx['sexual_active_or_not'] == 1 ? 'sexually active, ' : 'sexually inactive, ' );





 if(isset($tmp_sx['no_of_partner']) && $tmp_sx['sexual_active_or_not'] == 1 ){

$sx_act .= ($tmp_sx['no_of_partner'] >= 1 ? $tmp_sx['no_of_partner'].' partners, ' : 'no partner, ') ;

            }

    if(isset($tmp_sx['protection_used_or_not']) && $tmp_sx['protection_used_or_not'] == 0 && $tmp_sx['sexual_active_or_not'] == 1 ){



       $sx_act .= 'protection: none, ' ;

    }

    if( isset($tmp_sx['protection_used_or_not'])  && $tmp_sx['protection_used_or_not'] == 1 && $tmp_sx['sexual_active_or_not'] == 1 ){



        $sx_act .= !empty(trim($tmp_sx['protection_method'])) ? 'protection: '.$tmp_sx['protection_method'].', ' : 'protection: not provided, ' ;



    }



            }





        }



        //pr($cpt_pmfsh_count);die;





        // $sx_act = rtrim($sx_act, ', ');

// pr( $sx_act); die ;

        // pr($sx_act) ;die;

  $s_ori = array(0 => 'Heterosexual', 1 => 'Homosexual', 2 => 'Bisexual', 9 => 'Prefer not to say');



  //  denies EtOH and 1 drinks/wk for 3 years,

 // here EtOH refers to current drinking

if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){



    if(!empty($user_detail->chief_compliant_userdetail->focused_history_detail)){



        foreach ($user_detail->chief_compliant_userdetail->focused_history_detail as $key => $value) {



            if(in_array($key, [214,215,216,217])){



                $cpt_pmfsh_count++;



                switch ($key) {

                    case 214:

                        $sh.= !empty($value) && $value['answer'] == 'Yes' ? '+current smoking, ' : "denies current smoking, ";

                        break;



                    case 215:

                        $sh.= !empty($value) && $value['answer'] == 'Yes' ? '+past smoking, ' : "denies past smoking, ";

                        break;



                    case 216:

                        $sh.= !empty($value) && $value['answer'] == 'Yes' ? '+current vaping, ' : "denies current vaping, ";

                        break;



                    case 217:

                        $sh.= !empty($value) && $value['answer'] == 'Yes' ? '+past vaping, ' : "denies past vaping, ";

                        break;



                }

            }

        }

    }

}

else

{

  if(($login_user->is_currentlysmoking != '' && in_array($login_user->is_currentlysmoking, [0,1])) || ($login_user->is_pastsmoking != '' && in_array($login_user->is_pastsmoking, [0,1])) || ($login_user->is_currentlydrinking != '' && in_array($login_user->is_currentlydrinking, [0,1])) || ($login_user->is_pastdrinking != '' && in_array($login_user->is_pastdrinking, [0,1])) || ($login_user->is_otherdrug != '' && in_array($login_user->is_otherdrug, [0,1])) || ($login_user->is_otherdrugpast != '' && in_array($login_user->is_otherdrugpast, [0,1]))){



        $cpt_pmfsh_count++;

    }



    if($login_user->is_currentlysmoking == 1){

        if(!empty($login_user->current_smoke_pack)){

            $sh .= 'currently smoking : ';

            $sh .= ($login_user->current_smoke_pack == 'morethan10' ? 'more than 10' : h($login_user->current_smoke_pack) ).', ' ;

            //$sh .= ($login_user->current_smoke_pack == 'morethan10' ? 'more than 10' : h($login_user->current_smoke_pack) ).'  packs/wk for '.($login_user->current_smoke_year == "morethan10" ? 'more than 10' : h($login_user->current_smoke_year) ).' years, ' ;

        }else {

            $sh .= 'currently smoking: consumes but frequency not provided, ';

        }

     } else{

            $sh .= 'denies current smoking, ';

     }



     if($login_user->is_pastsmoking == 1){

        if(!empty($login_user->past_smoke_pack)){

            $sh .= 'past smoking: ';

             $sh .= ($login_user->past_smoke_pack == 'morethan10' ? 'more than 10' : h($login_user->past_smoke_pack) ).' packs/wk for '.($login_user->past_smoke_year == "morethan10" ? 'more than 10' : h($login_user->past_smoke_year) ).' years, ' ;

        }else{

            $sh .= 'past smoking: consumes but frequency not provided, ';

        }

     }else{

            $sh .= 'denies past smoking, ';

     }
}

 if($login_user->is_currentlydrinking == 1 ){

        if(!empty($login_user->current_drink_pack)){

            // $sh .= ($login_user->current_drink_pack == 'morethan10' ? 'EtOH: more than 14 ' : 'EtOH: '.h($login_user->current_drink_pack) ).'  drinks/wk for '.($login_user->current_drink_year == "morethan10" ? 'more than 10' : h($login_user->current_drink_year) ).' years, ' ;

             $sh .= ($login_user->current_drink_pack == 'morethan10' ? 'EtOH: more than 14' : 'EtOH: '.h($login_user->current_drink_pack) ).' drinks/wk, ' ;



        }else{

            $sh .= 'EtOH: consumes but frequency not provided, ';

        }

     }else{

            $sh .= 'denies EtOH, ';

     }

     if($login_user->is_pastdrinking == 1 ){

        if(!empty($login_user->past_drink_pack)){

            $sh .= ($login_user->past_drink_pack == 'morethan10' ? 'past drinking : more than 14' : h($login_user->past_drink_pack) ).'  drinks/wk for '.($login_user->past_drink_year == "morethan10" ? 'more than 10' : h($login_user->past_drink_year) ).' years, ' ;

        }else{

              $sh .= 'past drinking: consumes but frequency not provided, ';

        }

     }else{

         $sh .= 'denies past drinking, ';

     }

     $other_drug_history = $login_user->other_drug_history ;



      if($login_user->is_otherdrug == 1){



        if(!empty($other_drug_history)){

            // $other_drug_history = unserialize($other_drug_history) ;

           $other_drug_history = unserialize(Security::decrypt(base64_decode($other_drug_history), SEC_KEY)) ;





            if(!empty($other_drug_history))  {

                  $sh .= 'IDU: ';

                 foreach ($other_drug_history as $key => $value) {



                  // $sh .= h($value['name']).' '.($value['quantity'] == 'morethan10' ? 'more than 10' : h($value['quantity'] )).' for '.h($value['year']).' year, ' ;

                    $sh .= h($value['name']).' for '.($value['year'] == "morethan10" ? 'more than 10' : h($value['year']) ).' years, ' ;



                }

            } else {



                 $sh .= 'IDU: consumes but frequency not provided, ';



            }



        }else{

            $sh .= 'IDU: consumes but frequency not provided, ';

        }



      } else {



         $sh .= 'denies IDU, ';



      }

      $other_drug_history_past = $login_user->other_drug_history_past ;

      if($login_user->is_otherdrugpast == 1){



        if(!empty($other_drug_history_past)){





        $other_drug_history_past = unserialize(Security::decrypt(base64_decode($other_drug_history_past), SEC_KEY)) ;



        if(!empty($other_drug_history_past)) {

          $sh .= 'past drug use: ';



              foreach ($other_drug_history_past as $key => $value) {



              // $sh .= h($value['name']).' '.($value['quantity'] == 'morethan10' ? 'more than 10' : h($value['quantity'] )).' for '.h($value['year']).' year, ' ;



                $sh .= h($value['name']).' for '.($value['year'] == "morethan10" ? 'more than 10' : h($value['year']) ).' years, ' ;

            }

        } else {

            $sh .= 'past drug use: consumes but frequency not provided, ';

          }

        }else{

             $sh .= 'past drug use: consumes but frequency not provided, ';

        }

      } else {



         $sh .= 'denies past drug use, ';



      }

      if($login_user->sexual_orientation != ""){



        $sh = $s_ori[$login_user->sexual_orientation].($login_user->sexual_orientation == 9 ? ' sexual orientation' : '').', '.$sx_act.$sh ;

      }

$sh = rtrim($sh, ', ') ;

// #SH heterosexual, sexually active, 1 partner, protection: condom, denies EtOH and 1 drinks/wk for 3 years, denies current smoking, denies past smoking, denies IDU



        // pr($sh); die ;



  // #ALL latex (Dry skin), Eggs (Diarrhea)



    $all = '' ;



    if(!empty($login_user->allergy_history)){

    // $allergy_history = unserialize(base64_decode($login_user->allergy_history));

          $allergy_history = unserialize((Security::decrypt(base64_decode($login_user->allergy_history), SEC_KEY)));

    if(!empty($allergy_history)){

      foreach ($allergy_history as $key => $value) {







        $all .= h($value['name']).(!empty(trim($value['reaction'])) ? ' ('.h($value['reaction']).'), ' : ', ' ) ;



      }
    }


      $all = rtrim($all, ', ') ;



    }

// pr($pmh);

// pr($psh);

// pr($all); die ;

  // #IMM +Hepatitis A (2015), +Hepatitis B (2018), +Measles (2012), +Meningococcal (2015), +Mumps (2011)





    $commonTable = TableRegistry::get('common_conditions');





    $shot_cond = $commonTable->find('list', [

                        'keyField' => 'id',

                        'valueField' => 'name'

                    ])->where(['cond_type' => 4])->toArray();

    // pr($shot_cond);



    $imm = '' ;


    //pr($login_user);die;
  if(!empty($login_user->shots_history)){

    // $medical_history = unserialize(base64_decode($login_user->medical_history));

      $shots_history = unserialize((Security::decrypt(base64_decode($login_user->shots_history), SEC_KEY)));

// pr($shots_history); die;
      if(!empty($shots_history) && is_array($shots_history)){
          foreach ($shots_history as $key => $value) {

            if(isset($shot_cond[$key])){
                $imm .=  $shot_cond[$key].''.(h($value) == 1 ? " (childhood)" : (!empty($value) ? ' ('.h($value).')' : '') ).', ';
            }

          }
      }

      $imm = rtrim($imm, ', ') ;
  }

  if(!empty($login_user->other_shots_history)){

      $other_shots_history = unserialize((Security::decrypt(base64_decode($login_user->other_shots_history), SEC_KEY)));
      if(!empty($other_shots_history) && is_array($other_shots_history)){
          foreach ($other_shots_history as $key => $value) {

            if(isset($value['name'])){

                $imm .= $value['name'];
            }
            else{

                continue;
            }

            if(isset($value['year']) && !empty($value['year'])){

                $imm .= $value['year'] == 1 ? " (childhood)" : " (".$value['year'].")";
            }

            $imm .= ", ";

          }
      }

      $imm = rtrim($imm, ', ') ;
  }

// pr($pmh);

// pr($imm); die;



  // #ROS GEN  GI/GU  HEENT  HEME/ENDO  CV  NEURO/MSK  RESP  PSYCH  SKIN



  $all_questionnaire = $this->ChiefCompliantQuestionnaire->find('all');

  // pr($all_questionnaire); die;

  $all_questionnaire_arr = array();

  $positive_ros_count = 0;
  $temp_spine_questionnaire_grp_arr = array();
  $temp_ortho_questionnaire_grp_arr = array();
  $temp_general_health_questionnaire_grp_arr = array();

  foreach ($all_questionnaire as $key => $value) {

    // pr($value); die;

    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

    // $value->questionnaire_text = (!empty($value->note_name) ? $value->note_name  : (!empty($value->medical_name) ? $value->medical_name : $value->questionnaire_text )) ;



    $all_questionnaire_arr[$value->questionnaire_type_id][] = $value->id ;

  }

  // pr($all_questionnaire_arr); die;



$positive_questionnaire = '' ;

$negative_questionnaire = '' ;

$spine_MSK              = '';

$spine_NEURO            = '';

$spine_GEN              = '';

$spine_ENT              = '';

$spine_CV               = '';

$spine_RESP             = '';

$spine_GI               = '';

$spine_SKINBREAST       = '';

$spine_ENDO             = '';

$spine_HEMELYMPH        = '';





if($user_detail->specialization_id == 4 || $user_detail->specialization_id == 7){  // for specialization id 3 related logic for health questionaire





//John: However, we may specify it to be different for specific orthopedics modules, such as in this case with the spine module we want 5 of MSK, 5 of NEURO,  and two from each of the following :GEN, ENT, CV, RESP, GI, SKIN/BREAST, ENDO, HEME/LYMPH



 // we are creating new source array and take only those  options that are needed in orthopedic spine module

$temp_spine_questionnaire_grp_arr['MSK'] = $all_questionnaire_arr[21] ;

$temp_spine_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[20] ;

$temp_spine_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[32] ;

$temp_spine_questionnaire_grp_arr['ENT'] = array_merge($all_questionnaire_arr[13], $all_questionnaire_arr[14], $all_questionnaire_arr[16])  ;

$temp_spine_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[18] ;

$temp_spine_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[19] ;

$temp_spine_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[22] ;

$temp_spine_questionnaire_grp_arr['SKIN_BREAST'] = array_merge($all_questionnaire_arr[24], $all_questionnaire_arr[25]) ;

$temp_spine_questionnaire_grp_arr['ENDO'] = $all_questionnaire_arr[28] ;

$temp_spine_questionnaire_grp_arr['HEME_LYMPH'] = $all_questionnaire_arr[26]; //  array_merge($all_questionnaire_arr[26], $all_questionnaire_arr[27]) ; there is no data in the id 27 so we commented this temporarily , when client provide data we will uncomment it











// pr($temp_ortho_questionnaire_grp_arr);





// pr($user_detail->chief_compliant_userdetail->questionnaire_detail); die;

if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail)) {



             $res_ar = array(0 => 'NO', 1 => 'YES' , 2 => "I DON'T KNOW");



$spine_MSK  = '';  $spine_NEURO  = '';  $spine_GEN  = '';  $spine_ENT  = '';  $spine_CV  = '';  $spine_RESP  = '';  $spine_GI  = '';  $spine_SKINBREAST  = '';  $spine_ENDO  = '';  $spine_HEMELYMPH  = '';



             foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value) {

              foreach($value as $k =>$v) {

// pr($v); die;



    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

    $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;



    $v->questionnaire_text = strtolower($v->questionnaire_text);





                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['MSK'])){

 if($key == 1) $spine_MSK .= '+'.$v->questionnaire_text.', ';

                  }



                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['NEURO'])){

 if($key == 1) $spine_NEURO .= '+'.$v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['GEN'])){

 if($key == 1) $spine_GEN .= '+'.$v->questionnaire_text.', ';

                  }

                  if(in_array($v->id, $temp_spine_questionnaire_grp_arr['ENT'])){

 if($key == 1) $spine_ENT .= '+'.$v->questionnaire_text.', ';

                  }

                  if(in_array($v->id, $temp_spine_questionnaire_grp_arr['CV'])){

 if($key == 1) $spine_CV .= '+'.$v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['RESP'])){

 if($key == 1) $spine_RESP .= '+'.$v->questionnaire_text.', ';

                  }

                  if(in_array($v->id, $temp_spine_questionnaire_grp_arr['GI'])){

 if($key == 1) $spine_GI .= '+'.$v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['SKIN_BREAST'])){

 if($key == 1) $spine_SKINBREAST .= '+'.$v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['ENDO'])){

 if($key == 1) $spine_ENDO .= '+'.$v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['HEME_LYMPH'])){

 if($key == 1) $spine_HEMELYMPH .= '+'.$v->questionnaire_text.', ';

                  }



      }

   }







$spine_MSK  = rtrim($spine_MSK , ', ');  $spine_NEURO  = rtrim($spine_NEURO , ', ');  $spine_GEN  = rtrim($spine_GEN , ', ');  $spine_ENT  = rtrim($spine_ENT , ', ');  $spine_CV  = rtrim($spine_CV , ', ');  $spine_RESP  = rtrim($spine_RESP , ', ');  $spine_GI  = rtrim($spine_GI , ', ');  $spine_SKINBREAST  = rtrim($spine_SKINBREAST , ', ');  $spine_ENDO  = rtrim($spine_ENDO , ', ');  $spine_HEMELYMPH  = rtrim($spine_HEMELYMPH , ', ');



$spine_MSK  .= '. Denies ';  $spine_NEURO  .= '. Denies ';  $spine_GEN  .= '. Denies ';  $spine_ENT  .= '. Denies ';  $spine_CV  .= '. Denies ';  $spine_RESP  .= '. Denies ';  $spine_GI  .= '. Denies ';  $spine_SKINBREAST  .= '. Denies ';  $spine_ENDO  .= '. Denies ';  $spine_HEMELYMPH  .= '. Denies ';





             foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value) {

              foreach($value as $k =>$v) {

// pr($v); die;



    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

    $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;



    $v->questionnaire_text = strtolower($v->questionnaire_text);





                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['MSK'])){

 if($key == 0) $spine_MSK .= $v->questionnaire_text.', ';

                  }



                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['NEURO'])){

 if($key == 0) $spine_NEURO .= $v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['GEN'])){

 if($key == 0) $spine_GEN .= $v->questionnaire_text.', ';

                  }

                  if(in_array($v->id, $temp_spine_questionnaire_grp_arr['ENT'])){

 if($key == 0) $spine_ENT .= $v->questionnaire_text.', ';

                  }

                  if(in_array($v->id, $temp_spine_questionnaire_grp_arr['CV'])){

 if($key == 0) $spine_CV .= $v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['RESP'])){

 if($key == 0) $spine_RESP .= $v->questionnaire_text.', ';

                  }

                  if(in_array($v->id, $temp_spine_questionnaire_grp_arr['GI'])){

 if($key == 0) $spine_GI .= $v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['SKIN_BREAST'])){

 if($key == 0) $spine_SKINBREAST .= $v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['ENDO'])){

 if($key == 0) $spine_ENDO .= $v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['HEME_LYMPH'])){

 if($key == 0) $spine_HEMELYMPH .= $v->questionnaire_text.', ';

                  }



      }

   }



   //calculate the ROS count, we calculate the number of group of health questionnaire to generate the cpt code

        $temp_health_questionnaire_grp = array();

        if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail) && !empty($temp_ortho_questionnaire_grp_arr)){
            foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)

            {

                foreach($value as $k =>$v)

                {
                    foreach ($temp_ortho_questionnaire_grp_arr as $gkey => $gvalue) {



                        if(in_array($v->id, $gvalue)){



                           $temp_health_questionnaire_grp[] = $gkey;

                           break;

                        }

                    }

                }

            }
        }

        $positive_ros_count = count(array_unique($temp_health_questionnaire_grp));





}

 // pr($q_general); pr($q_GIGU); pr($q_HEENT); pr($q_HEMEENDO); pr($q_CV); pr($q_NEUROMSK); pr($q_RESP); pr($q_PSYCH); pr($q_SKIN);   die;







$spine_MSK  = rtrim($spine_MSK , ', ');  $spine_NEURO  = rtrim($spine_NEURO , ', ');  $spine_GEN  = rtrim($spine_GEN , ', ');  $spine_ENT  = rtrim($spine_ENT , ', ');  $spine_CV  = rtrim($spine_CV , ', ');  $spine_RESP  = rtrim($spine_RESP , ', ');  $spine_GI  = rtrim($spine_GI , ', ');  $spine_SKINBREAST  = rtrim($spine_SKINBREAST , ', ');  $spine_ENDO  = rtrim($spine_ENDO , ', ');  $spine_HEMELYMPH  = rtrim($spine_HEMELYMPH , ', ');



$spine_MSK  = ltrim($spine_MSK , '. ');

$spine_NEURO  = ltrim($spine_NEURO , '. ');

$spine_GEN  = ltrim($spine_GEN , '. ');

$spine_ENT  = ltrim($spine_ENT , '. ');

$spine_CV  = ltrim($spine_CV , '. ');

$spine_RESP  = ltrim($spine_RESP , '. ');

$spine_GI  = ltrim($spine_GI , '. ');

$spine_SKINBREAST  = ltrim($spine_SKINBREAST , '. ');

$spine_ENDO  = ltrim($spine_ENDO , '. ');

$spine_HEMELYMPH  = ltrim($spine_HEMELYMPH , '. ');









$spine_MSK  = preg_replace('/Denies$/', '', $spine_MSK);  $spine_NEURO  = preg_replace('/Denies$/', '', $spine_NEURO);  $spine_GEN  = preg_replace('/Denies$/', '', $spine_GEN);  $spine_ENT  = preg_replace('/Denies$/', '', $spine_ENT);  $spine_CV  = preg_replace('/Denies$/', '', $spine_CV);  $spine_RESP  = preg_replace('/Denies$/', '', $spine_RESP);  $spine_GI  = preg_replace('/Denies$/', '', $spine_GI);  $spine_SKINBREAST  = preg_replace('/Denies$/', '', $spine_SKINBREAST);  $spine_ENDO  = preg_replace('/Denies$/', '', $spine_ENDO);  $spine_HEMELYMPH  = preg_replace('/Denies$/', '', $spine_HEMELYMPH);



}


if($user_detail->specialization_id == 3){



  // for specialization id 3 related logic for health questionaire



// John:The default for orthopedics modules is 2 from each of the following:

// GEN, EYES, ENT, CV, RESP, NEURO, MSK, GI, GU, SKIN/BREAST, ENDO, HEME/LYMPH, ALL/IMM, PSYCH



      // pr($all_questionnaire_arr); die;

        // we are creating new source array and take only those  options that are needed in orthopedic module

      $temp_ortho_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[32] ;

      $temp_ortho_questionnaire_grp_arr['EYES'] = $all_questionnaire_arr[12] ;

      $temp_ortho_questionnaire_grp_arr['ENT'] = array_merge($all_questionnaire_arr[13], $all_questionnaire_arr[14], $all_questionnaire_arr[16])  ;

      $temp_ortho_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[18] ;

      $temp_ortho_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[19] ;

      $temp_ortho_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[20] ;

      $temp_ortho_questionnaire_grp_arr['MSK'] = $all_questionnaire_arr[21] ;

      $temp_ortho_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[22] ;

      $temp_ortho_questionnaire_grp_arr['GU'] = $all_questionnaire_arr[23] ;

      $temp_ortho_questionnaire_grp_arr['SKIN_BREAST'] = array_merge($all_questionnaire_arr[24], $all_questionnaire_arr[25])  ;

      $temp_ortho_questionnaire_grp_arr['ENDO'] = $all_questionnaire_arr[28] ;

      $temp_ortho_questionnaire_grp_arr['HEME_LYMPH'] = $all_questionnaire_arr[26] ;

      // for 27, 30, 31 there is no  data so we commented it temporarily, when client provide data then we will uncomment it

      // $temp_ortho_questionnaire_grp_arr['HEME_LYMPH'] = $all_questionnaire_arr[27] ;

      // $temp_ortho_questionnaire_grp_arr['ALL_IMM'] = $all_questionnaire_arr[30] ;

      // $temp_ortho_questionnaire_grp_arr['ALL_IMM'] = $all_questionnaire_arr[31] ;

      $temp_ortho_questionnaire_grp_arr['PSYCH'] = $all_questionnaire_arr[29] ;



// pr($temp_ortho_questionnaire_grp_arr);





// pr($user_detail->chief_compliant_userdetail->questionnaire_detail); die;

if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail)) {



             $res_ar = array(0 => 'NO', 1 => 'YES' , 2 => "I DON'T KNOW");



$ortho_GEN  = '';  $ortho_EYES  = '';  $ortho_ENT  = '';  $ortho_CV  = '';  $ortho_RESP  = '';  $ortho_NEURO  = '';  $ortho_MSK  = '';  $ortho_GI  = '';  $ortho_GU  = '';  $ortho_SKINBREAST  = '';  $ortho_ENDO = '';  $ortho_HEMELYMPH  = '';  $ortho_PSYCH  = '';



             foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value) {

              foreach($value as $k =>$v) {

// pr($v); die;



    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

    $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;

    $v->questionnaire_text = strtolower($v->questionnaire_text);





                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GEN'])){

 if($key == 1) $ortho_GEN .= '+'.$v->questionnaire_text.', ';

                  }



                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['EYES'])){

 if($key == 1) $ortho_EYES .= '+'.$v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['ENT'])){

 if($key == 1) $ortho_ENT .= '+'.$v->questionnaire_text.', ';

                  }

                  if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['CV'])){

 if($key == 1) $ortho_CV .= '+'.$v->questionnaire_text.', ';

                  }

                  if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['RESP'])){

 if($key == 1) $ortho_RESP .= '+'.$v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['NEURO'])){

 if($key == 1) $ortho_NEURO .= '+'.$v->questionnaire_text.', ';

                  }

                  if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['MSK'])){

 if($key == 1) $ortho_MSK .= '+'.$v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GI'])){

 if($key == 1) $ortho_GI .= '+'.$v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GU'])){

 if($key == 1) $ortho_GU .= '+'.$v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['SKIN_BREAST'])){

 if($key == 1) $ortho_SKINBREAST .= '+'.$v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['ENDO'])){

 if($key == 1) $ortho_ENDO .= '+'.$v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['HEME_LYMPH'])){

 if($key == 1) $ortho_HEMELYMPH .= '+'.$v->questionnaire_text.', ';

                  }

                  if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['PSYCH'])){

 if($key == 1) $ortho_PSYCH .= '+'.$v->questionnaire_text.', ';

                  }







      }

   }





$ortho_GEN   = rtrim($ortho_GEN , ', ');  $ortho_EYES   = rtrim($ortho_EYES , ', ');  $ortho_ENT   = rtrim($ortho_ENT , ', ');  $ortho_CV   = rtrim($ortho_CV , ', ');  $ortho_RESP   = rtrim($ortho_RESP , ', ');  $ortho_NEURO   = rtrim($ortho_NEURO , ', ');  $ortho_MSK   = rtrim($ortho_MSK , ', ');  $ortho_GI   = rtrim($ortho_GI , ', ');  $ortho_GU   = rtrim($ortho_GU , ', ');  $ortho_SKINBREAST   = rtrim($ortho_SKINBREAST , ', ');  $ortho_ENDO  = rtrim($ortho_ENDO , ', ');  $ortho_HEMELYMPH   = rtrim($ortho_HEMELYMPH , ', ');   $ortho_PSYCH   = rtrim($ortho_PSYCH , ', ');



$ortho_GEN  .= '. Denies ';  $ortho_EYES  .= '. Denies ';  $ortho_ENT  .= '. Denies ';  $ortho_CV  .= '. Denies ';  $ortho_RESP  .= '. Denies ';  $ortho_NEURO  .= '. Denies ';  $ortho_MSK  .= '. Denies ';  $ortho_GI  .= '. Denies ';  $ortho_GU  .= '. Denies ';  $ortho_SKINBREAST  .= '. Denies ';  $ortho_ENDO .= '. Denies ';  $ortho_HEMELYMPH  .= '. Denies '; $ortho_PSYCH  .= '. Denies ';







             foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value) {

              foreach($value as $k =>$v) {

// pr($v); die;



    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

    $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;

    $v->questionnaire_text = strtolower($v->questionnaire_text);





                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GEN'])){

 if($key == 0) $ortho_GEN .= $v->questionnaire_text.', ';

                  }



                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['EYES'])){

 if($key == 0) $ortho_EYES .= $v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['ENT'])){

 if($key == 0) $ortho_ENT .= $v->questionnaire_text.', ';

                  }

                  if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['CV'])){

 if($key == 0) $ortho_CV .= $v->questionnaire_text.', ';

                  }

                  if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['RESP'])){

 if($key == 0) $ortho_RESP .= $v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['NEURO'])){

 if($key == 0) $ortho_NEURO .= $v->questionnaire_text.', ';

                  }

                  if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['MSK'])){

 if($key == 0) $ortho_MSK .= $v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GI'])){

 if($key == 0) $ortho_GI .= $v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GU'])){

 if($key == 0) $ortho_GU .= $v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['SKIN_BREAST'])){

 if($key == 0) $ortho_SKINBREAST .= $v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['ENDO'])){

 if($key == 0) $ortho_ENDO .= $v->questionnaire_text.', ';

                  }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['HEME_LYMPH'])){

 if($key == 0) $ortho_HEMELYMPH .= $v->questionnaire_text.', ';

                  }

                  if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['PSYCH'])){

 if($key == 0) $ortho_PSYCH .= $v->questionnaire_text.', ';

                  }

      }

   }



   //calculate the ROS count, we calculate the number of group of health questionnaire to generate the cpt code

        $temp_health_questionnaire_grp = array();


        if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail) && !empty($temp_ortho_questionnaire_grp_arr)){
            foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)

            {

                foreach($value as $k =>$v)

                {



                    foreach ($temp_ortho_questionnaire_grp_arr as $gkey => $gvalue) {



                        if(in_array($v->id, $gvalue)){



                           $temp_health_questionnaire_grp[] = $gkey;

                           break;

                        }

                    }

                }

            }
        }

        $positive_ros_count = count(array_unique($temp_health_questionnaire_grp));





}

 // pr($q_general); pr($q_GIGU); pr($q_HEENT); pr($q_HEMEENDO); pr($q_CV); pr($q_NEUROMSK); pr($q_RESP); pr($q_PSYCH); pr($q_SKIN);   die;



$ortho_GEN   = rtrim($ortho_GEN , ', ');  $ortho_EYES   = rtrim($ortho_EYES , ', ');  $ortho_ENT   = rtrim($ortho_ENT , ', ');  $ortho_CV   = rtrim($ortho_CV , ', ');  $ortho_RESP   = rtrim($ortho_RESP , ', ');  $ortho_NEURO   = rtrim($ortho_NEURO , ', ');  $ortho_MSK   = rtrim($ortho_MSK , ', ');  $ortho_GI   = rtrim($ortho_GI , ', ');  $ortho_GU   = rtrim($ortho_GU , ', ');  $ortho_SKINBREAST   = rtrim($ortho_SKINBREAST , ', ');  $ortho_ENDO  = rtrim($ortho_ENDO , ', ');  $ortho_HEMELYMPH   = rtrim($ortho_HEMELYMPH , ', ');   $ortho_PSYCH   = rtrim($ortho_PSYCH , ', ');



$ortho_GEN   = ltrim($ortho_GEN , '. ');

$ortho_EYES   = ltrim($ortho_EYES , '. ');

$ortho_ENT   = ltrim($ortho_ENT , '. ');

$ortho_CV   = ltrim($ortho_CV , '. ');

$ortho_RESP   = ltrim($ortho_RESP , '. ');

$ortho_NEURO   = ltrim($ortho_NEURO , '. ');

$ortho_MSK   = ltrim($ortho_MSK , '. ');

$ortho_GI   = ltrim($ortho_GI , '. ');

$ortho_GU   = ltrim($ortho_GU , '. ');

$ortho_SKINBREAST   = ltrim($ortho_SKINBREAST , '. ');

$ortho_ENDO  = ltrim($ortho_ENDO , '. ');

$ortho_HEMELYMPH   = ltrim($ortho_HEMELYMPH , '. ');

$ortho_PSYCH   = ltrim($ortho_PSYCH , '. ');

$ortho_GEN  = preg_replace('/Denies$/', '', $ortho_GEN);  $ortho_EYES  = preg_replace('/Denies$/', '', $ortho_EYES);  $ortho_ENT  = preg_replace('/Denies$/', '', $ortho_ENT);  $ortho_CV  = preg_replace('/Denies$/', '', $ortho_CV);  $ortho_RESP  = preg_replace('/Denies$/', '', $ortho_RESP);  $ortho_NEURO  = preg_replace('/Denies$/', '', $ortho_NEURO);  $ortho_MSK  = preg_replace('/Denies$/', '', $ortho_MSK);  $ortho_GI  = preg_replace('/Denies$/', '', $ortho_GI);  $ortho_GU  = preg_replace('/Denies$/', '', $ortho_GU);  $ortho_SKINBREAST  = preg_replace('/Denies$/', '', $ortho_SKINBREAST);  $ortho_ENDO = preg_replace('/Denies$/', '', $ortho_ENDO);  $ortho_HEMELYMPH  = preg_replace('/Denies$/', '', $ortho_HEMELYMPH);   $ortho_PSYCH  = preg_replace('/Denies$/', '', $ortho_PSYCH);

}


$oncology_GEN  = ''; $oncology_EYE = ''; $oncology_ENT = ''; $oncology_CV = ''; $oncology_RESP = ''; $oncology_GI = ''; $oncology_GU = ''; $oncology_MSK = ''; $oncology_SKIN = ''; $oncology_BREAST = ''; $oncology_NEURO = ''; $oncology_PSYCH = ''; $oncology_ENDO = ''; $oncology_HEME_LYMPH = ''; $oncology_ALL_IMM = '';


$cancer_followup_positive_ROS = [];
$cancer_followup_negative_ROS = [];

$healthscreening_uremia_negative_ROS = [];
$healthscreening_volume_negative_ROS = [];

if($user_detail->specialization_id == 8)

{
    // we are creating new source array and take only those  options that are needed in cancer module
    $temp_cancer_questionnaire_grp_arr = array();
    if(isset($all_questionnaire_arr[36])){
      $temp_cancer_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[36] ;
    }

    if(isset($all_questionnaire_arr[37])){
      $temp_cancer_questionnaire_grp_arr['EYES'] = $all_questionnaire_arr[37] ;
    }

    if(isset($all_questionnaire_arr[38])){
      $temp_cancer_questionnaire_grp_arr['ENT'] = $all_questionnaire_arr[38] ;
    }

    if(isset($all_questionnaire_arr[39])){
      $temp_cancer_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[39] ;
    }

    if(isset($all_questionnaire_arr[40])){
      $temp_cancer_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[40] ;
    }

    if(isset($all_questionnaire_arr[41])){
      $temp_cancer_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[41] ;
    }
    if(isset($all_questionnaire_arr[42])){
      $temp_cancer_questionnaire_grp_arr['GU'] = $all_questionnaire_arr[42] ;
    }
    if(isset($all_questionnaire_arr[43])){
      $temp_cancer_questionnaire_grp_arr['MSK'] = $all_questionnaire_arr[43] ;
    }
    if(isset($all_questionnaire_arr[44])){
      $temp_cancer_questionnaire_grp_arr['SKIN'] = $all_questionnaire_arr[44] ;
    }
    if(isset($all_questionnaire_arr[45])){
      $temp_cancer_questionnaire_grp_arr['BREAST'] = $all_questionnaire_arr[45] ;
    }
    if(isset($all_questionnaire_arr[46])){
      $temp_cancer_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[46] ;
    }

    if(isset($all_questionnaire_arr[47])){
      $temp_cancer_questionnaire_grp_arr['PSYCH'] = $all_questionnaire_arr[47] ;
    }
    if(isset($all_questionnaire_arr[48])){
      $temp_cancer_questionnaire_grp_arr['ENDO'] = $all_questionnaire_arr[48] ;
    }
    if(isset($all_questionnaire_arr[49])){
      $temp_cancer_questionnaire_grp_arr['HEME_LYMPH'] = $all_questionnaire_arr[49] ;
    }
    if(isset($all_questionnaire_arr[50])){

      $temp_cancer_questionnaire_grp_arr['ALL_IMM'] = $all_questionnaire_arr[50] ;
    }

    if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail))
    {
        $res_ar = array(0 => 'NO', 1 => 'YES' , 2 => "I DON'T KNOW");

        foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)
        {
            foreach($value as $k =>$v)
            {
                // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose
                if(empty($v)){

                    continue;
                }

                $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;

                $v->questionnaire_text  = strtolower($v->questionnaire_text);



                if(isset($temp_cancer_questionnaire_grp_arr['GEN']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GEN']))
                {

                    if($key == 1){

                      $oncology_GEN .= '+'.$v->questionnaire_text.', ';
                      $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                    }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['EYES']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['EYES']))
                {

                    if($key == 1){

                        $oncology_EYE .= '+'.$v->questionnaire_text.', ';
                        $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                    }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['ENT']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ENT']))
                {

                    if($key == 1){
                        $oncology_ENT .= '+'.$v->questionnaire_text.', ';
                        $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                    }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['CV']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['CV']))
                {

                    if($key == 1){
                        $oncology_CV .= '+'.$v->questionnaire_text.', ';
                        $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                    }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['RESP']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['RESP']))
                {

                    if($key == 1){
                         $oncology_RESP .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['GI']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GI']))
                {

                    if($key == 1){
                        $oncology_GI .= '+'.$v->questionnaire_text.', ';
                        $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                    }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['GU']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GU']))
                {

                    if($key == 1){
                         $oncology_GU .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['MSK']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['MSK']))
                {

                    if($key == 1){
                         $oncology_MSK .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['SKIN']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['SKIN']))
                {

                    if($key == 1){
                        $oncology_SKIN .= '+'.$v->questionnaire_text.', ';
                        $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                    }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['BREAST']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['BREAST']))
                {

                    if($key == 1){
                         $oncology_BREAST .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['NEURO']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['NEURO']))
                {

                    if($key == 1){
                         $oncology_NEURO .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['PSYCH']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['PSYCH']))
                {

                    if($key == 1){
                         $oncology_PSYCH .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['ENDO']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ENDO']))
                {

                    if($key == 1){
                         $oncology_ENDO .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['HEME_LYMPH']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['HEME_LYMPH']))
                {

                    if($key == 1){
                         $oncology_HEME_LYMPH .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['ALL_IMM']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ALL_IMM']))
                {

                    if($key == 1){
                         $oncology_ALL_IMM .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }


            }

        }

        $oncology_GEN   = rtrim($oncology_GEN , ', ');  $oncology_EYE   = rtrim($oncology_EYE , ', ');  $oncology_ENT   = rtrim($oncology_ENT , ', ');  $oncology_CV   = rtrim($oncology_CV , ', ');  $oncology_RESP   = rtrim($oncology_RESP , ', ');  $oncology_GI   = rtrim($oncology_GI , ', ');  $oncology_GU   = rtrim($oncology_GU , ', ');  $oncology_MSK   = rtrim($oncology_MSK , ', ');  $oncology_SKIN   = rtrim($oncology_SKIN , ', ');  $oncology_BREAST   = rtrim($oncology_BREAST , ', ');  $oncology_NEURO  = rtrim($oncology_NEURO , ', ');  $oncology_PSYCH   = rtrim($oncology_PSYCH , ', ');   $oncology_ENDO   = rtrim($oncology_ENDO , ', '); $oncology_HEME_LYMPH   = rtrim($oncology_HEME_LYMPH , ', ');   $oncology_ALL_IMM   = rtrim($oncology_ALL_IMM , ', ');


        $oncology_GEN  .= '. Denies ';  $oncology_EYE  .= '. Denies ';  $oncology_ENT  .= '. Denies ';  $oncology_CV  .= '. Denies ';  $oncology_RESP  .= '. Denies ';  $oncology_GI  .= '. Denies ';  $oncology_GU  .= '. Denies ';  $oncology_MSK  .= '. Denies ';  $oncology_SKIN  .= '. Denies ';  $oncology_BREAST  .= '. Denies ';  $oncology_NEURO .= '. Denies ';  $oncology_PSYCH  .= '. Denies '; $oncology_ENDO  .= '. Denies '; $oncology_HEME_LYMPH  .= '. Denies '; $oncology_ALL_IMM  .= '. Denies ';


        foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)

        {

            foreach($value as $k =>$v)

            {
                // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose
                if(empty($v)){

                    continue;
                }
                $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;

                if(isset($temp_cancer_questionnaire_grp_arr['GEN']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GEN']))
                {

                    if($key == 0){
                         $oncology_GEN .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['EYES']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['EYES']))
                {

                    if($key == 0){
                         $oncology_EYE .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['ENT']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ENT']))
                {

                    if($key == 0){
                         $oncology_ENT .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['CV']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['CV']))
                {

                    if($key == 0){
                         $oncology_CV .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['RESP']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['RESP']))
                {

                    if($key == 0){
                         $oncology_RESP .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['GI']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GI']))
                {

                    if($key == 0){
                         $oncology_GI .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['GU']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GU']))
                {

                    if($key == 0){
                         $oncology_GU .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['MSK']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['MSK']))
                {

                    if($key == 0){
                         $oncology_MSK .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['SKIN']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['SKIN']))
                {

                    if($key == 0){
                         $oncology_SKIN .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['BREAST']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['BREAST']))
                {

                    if($key == 0){
                         $oncology_BREAST .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['NEURO']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['NEURO']))
                {

                    if($key == 0){
                         $oncology_NEURO .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['PSYCH']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['PSYCH']))
                {

                    if($key == 0){
                         $oncology_PSYCH .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['ENDO']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ENDO']))
                {

                    if($key == 0){
                         $oncology_ENDO .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['HEME_LYMPH']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['HEME_LYMPH']))
                {

                    if($key == 0){
                         $oncology_HEME_LYMPH .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['ALL_IMM']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ALL_IMM']))
                {

                    if($key == 0){
                         $oncology_ALL_IMM .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }

            }

        }

        //calculate the ROS count, we calculate the number of group of health questionnaire to generate the cpt code
        $positive_ros_count = count($temp_cancer_questionnaire_grp_arr);
    }

   $oncology_GEN   = rtrim($oncology_GEN , ', ');  $oncology_EYE   = rtrim($oncology_EYE , ', ');  $oncology_ENT   = rtrim($oncology_ENT , ', ');  $oncology_CV   = rtrim($oncology_CV , ', ');  $oncology_RESP   = rtrim($oncology_RESP , ', ');  $oncology_GI   = rtrim($oncology_GI , ', ');  $oncology_GU   = rtrim($oncology_GU , ', ');  $oncology_MSK   = rtrim($oncology_MSK , ', ');  $oncology_SKIN   = rtrim($oncology_SKIN , ', ');  $oncology_BREAST   = rtrim($oncology_BREAST , ', ');  $oncology_NEURO  = rtrim($oncology_NEURO , ', ');  $oncology_PSYCH   = rtrim($oncology_PSYCH , ', ');   $oncology_ENDO   = rtrim($oncology_ENDO , ', '); $oncology_HEME_LYMPH   = rtrim($oncology_HEME_LYMPH , ', ');   $oncology_ALL_IMM   = rtrim($oncology_ALL_IMM , ', ');

    $oncology_GEN   = ltrim($oncology_GEN , '. ');
    $oncology_EYE   = ltrim($oncology_EYE , '. ');
    $oncology_ENT   = ltrim($oncology_ENT , '. ');
    $oncology_CV   = ltrim($oncology_CV , '. ');
    $oncology_RESP   = ltrim($oncology_RESP , '. ');
    $oncology_GI   = ltrim($oncology_GI , '. ');
    $oncology_GU   = ltrim($oncology_GU , '. ');
    $oncology_MSK   = ltrim($oncology_MSK , '. ');
    $oncology_SKIN   = ltrim($oncology_SKIN , '. ');
     $oncology_BREAST   = ltrim($oncology_BREAST , '. ');
     $oncology_NEURO  = ltrim($oncology_NEURO , '. ');
     $oncology_PSYCH   = ltrim($oncology_PSYCH , '. ');
     $oncology_ENDO   = ltrim($oncology_ENDO , '. ');
    $oncology_HEME_LYMPH   = ltrim($oncology_HEME_LYMPH , '. ');
    $oncology_ALL_IMM   = ltrim($oncology_ALL_IMM , '. ');

    $oncology_GEN  = preg_replace('/Denies$/', '', $oncology_GEN);
    $oncology_EYE  = preg_replace('/Denies$/', '', $oncology_EYE);
    $oncology_ENT  = preg_replace('/Denies$/', '', $oncology_ENT);
    $oncology_CV  = preg_replace('/Denies$/', '', $oncology_CV);
    $oncology_RESP  = preg_replace('/Denies$/', '', $oncology_RESP);
    $oncology_GI  = preg_replace('/Denies$/', '', $oncology_GI);
    $oncology_GU  = preg_replace('/Denies$/', '', $oncology_GU);
    $oncology_MSK  = preg_replace('/Denies$/', '', $oncology_MSK);
    $oncology_SKIN  = preg_replace('/Denies$/', '', $oncology_SKIN);
    $oncology_BREAST  = preg_replace('/Denies$/', '', $oncology_BREAST);
    $oncology_NEURO  = preg_replace('/Denies$/', '', $oncology_NEURO);
    $oncology_PSYCH = preg_replace('/Denies$/', '', $oncology_PSYCH);
    $oncology_ENDO  = preg_replace('/Denies$/', '', $oncology_ENDO);
    $oncology_HEME_LYMPH  = preg_replace('/Denies$/', '', $oncology_HEME_LYMPH);
    $oncology_ALL_IMM  = preg_replace('/Denies$/', '', $oncology_ALL_IMM);

}


if($user_detail->specialization_id == 1 || $user_detail->specialization_id == 2 || $user_detail->specialization_id == 5 || $user_detail->specialization_id == 6 || $user_detail->specialization_id == 9){



  // For specialization id 1,2 related health questionaire logic

    $temp_general_health_questionnaire_grp_arr = array();
    // we are creating new source array and take only those  options that are needed in chronic condition module
    //copd condition additional health questionnaire
    $health_associated_sym = array(

        'CV' => array('chest tightness'),
        'RESP' => array('SOB','cough','cyanosis','dyspnea at rest','DOE','hemoptysis')
    );

    if($user_detail->chief_compliant_userdetail->current_step_id->id == 18 && !empty($user_detail->chief_compliant_userdetail->chronic_condition) && is_array($user_detail->chief_compliant_userdetail->chronic_condition)){

        if(in_array("dmii", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[2] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[6] ;
        }

        if(in_array("cad", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[2] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[6] ;

        }

        if(in_array("chf", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['PSYCH'] = $all_questionnaire_arr[8] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[6] ;
        }

        if(in_array("htn", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[7] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[6] ;
        }

        if(in_array("copd", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[2] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['MSK'] = $all_questionnaire_arr[21] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = isset($temp_general_health_questionnaire_grp_arr['NEURO']) ? array_merge($temp_general_health_questionnaire_grp_arr['NEURO'], $all_questionnaire_arr[20]) : $all_questionnaire_arr[20];
            $temp_general_health_questionnaire_grp_arr['SKIN'] = $all_questionnaire_arr[24] ;
            $temp_general_health_questionnaire_grp_arr['PSYCH'] = $all_questionnaire_arr[8] ;
            $temp_general_health_questionnaire_grp_arr['ENT'] = $all_questionnaire_arr[35] ;

            $temp_general_health_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[7] ;
        }

        if(in_array("asthma", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[7] ;
            $temp_general_health_questionnaire_grp_arr['PSYCH'] = $all_questionnaire_arr[8] ;
            $temp_general_health_questionnaire_grp_arr['EYES'] = $all_questionnaire_arr[12] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = isset($temp_general_health_questionnaire_grp_arr['NEURO']) ? array_merge($temp_general_health_questionnaire_grp_arr['NEURO'], $all_questionnaire_arr[20]) : $all_questionnaire_arr[20];
            $temp_general_health_questionnaire_grp_arr['MSK'] = $all_questionnaire_arr[21] ;
            $temp_general_health_questionnaire_grp_arr['GI'] = isset($temp_general_health_questionnaire_grp_arr['GI']) ? array_merge($temp_general_health_questionnaire_grp_arr['GI'], $all_questionnaire_arr[22]) : $all_questionnaire_arr[22];
            $temp_general_health_questionnaire_grp_arr['SKIN'] = $all_questionnaire_arr[24] ;
            $temp_general_health_questionnaire_grp_arr['ENT'] = $all_questionnaire_arr[35] ;
        }
    }

        $q_general = ''; 
        $q_GIGU = '';  
        $q_HEENT = '';
        $q_HEMEENDO = ''; 
        $q_CV = ''; 
        $q_NEUROMSK = ''; 
        $q_RESP = ''; 
        $q_PSYCH = '' ; 
        $q_SKIN = ''; 
        $q_CV_RESP = '';
        $q_THROAT = "";
        $q_ENT = '';
        $q_MSK = ''; 
        $q_NEURO = '';
        $q_GI = '';
        $q_GU = '';
        $q_EYES = '';
        $q_MOUTH = "";
        $ortho_MSK = '';



if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail)) {



             $res_ar = array(0 => 'NO', 1 => 'YES' , 2 => "I DON'T KNOW");



             foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value) {

              foreach($value as $k =>$v) {

 //pr($v); die;



    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

    $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;



    $v->questionnaire_text = strtolower($v->questionnaire_text);

    if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){



                    if(in_array($v->id, $all_questionnaire_arr[1])){

                        if($key == 1) $q_general .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[5])){

                        if($key == 1) $q_CV .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[7])){

                        if($key == 1) $q_RESP .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[8])){

                        if($key == 1) $q_PSYCH .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[9])){

                        if($key == 1) $q_SKIN .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[20])){

                        if($key == 1) $q_NEURO .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[21])){

                        if($key == 1) $q_MSK .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[22])){

                        if($key == 1) $q_GI .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[23])){

                        if($key == 1) $q_GU .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[35])){

                        if($key == 1) $q_ENT .= '+'.$v->questionnaire_text.', ';

                    }

                }
                elseif($user_detail->chief_compliant_userdetail->current_step_id->id == 18)
                {
                     if(isset($temp_general_health_questionnaire_grp_arr['GEN']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['GEN'])){
                        if($key == 1) $q_general .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['GI']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['GI'])){
                        if($key == 1) $q_GI .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['CV']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['CV'])){
                        if($key == 1) $q_CV .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['NEURO']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['NEURO'])){
                        if($key == 1) $q_NEURO .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['RESP']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['RESP'])){
                        if($key == 1) $q_RESP .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['PSYCH']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['PSYCH'])){
                        if($key == 1) $q_PSYCH .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['MSK']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['MSK'])){
                        if($key == 1) $q_MSK .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['SKIN']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['SKIN'])){
                        if($key == 1) $q_SKIN .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['ENT']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['ENT'])){
                        if($key == 1) $q_ENT .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['EYES']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['EYES'])){
                        if($key == 1) $q_EYES .= '+'.$v->questionnaire_text.', ';
                    }
                }
                elseif($user_detail->chief_compliant_userdetail->current_step_id->id == 23)
                {
                        if(in_array($v->id, $all_questionnaire_arr[1])){

                       if($key == 1) $q_general .= '+'.$v->questionnaire_text.', ';                      

                    }

                    if(in_array($v->id, $all_questionnaire_arr[22])){

                    if($key == 1) $q_GI .= '+'.$v->questionnaire_text.', ';                    

                    }

                    if(in_array($v->id, $all_questionnaire_arr[23])){

                        if($key == 1) $q_GU .= '+'.$v->questionnaire_text.', ';                        

                    }

                    if(in_array($v->id, $all_questionnaire_arr[6])){

                        if($key == 1) $q_NEURO .= '+'.$v->questionnaire_text.', ';                     

                    }


                    if(in_array($v->id, $all_questionnaire_arr[2])){

                    if($key == 1) $q_GIGU .= '+'.$v->questionnaire_text.', ';                

                    }

                    if(in_array($v->id, $all_questionnaire_arr[3])){

                    if($key == 1) $q_HEENT .= '+'.$v->questionnaire_text.', ';                   

                    }

                    if(in_array($v->id, $all_questionnaire_arr[52])){

                    if($key == 1) $q_MOUTH .= '+'.$v->questionnaire_text.', ';                

                    }

                    if(in_array($v->id, $all_questionnaire_arr[12])){

                    if($key == 1) $q_EYES .= '+'.$v->questionnaire_text.', ';                    

                    }

                    if(in_array($v->id, $all_questionnaire_arr[4])){

                    if($key == 1) $q_HEMEENDO .= '+'.$v->questionnaire_text.', ';                   

                    }

                    if(in_array($v->id, $all_questionnaire_arr[5])){

                    if($key == 1) $q_CV .= '+'.$v->questionnaire_text.', ';                    

                    }

                    if(in_array($v->id, $all_questionnaire_arr[6])){

                    if($key == 1) $q_NEUROMSK .= '+'.$v->questionnaire_text.', ';                    

                    }

                    // if(in_array($v->id, $all_questionnaire_arr[7])){

                    // if($key == 1) $q_RESP .= '+'.$v->questionnaire_text.', ';                    

                    // }
                    if(in_array($v->id, $all_questionnaire_arr[7]) || (in_array($v->id, $all_questionnaire_arr[5]) && strpos($v->questionnaire_text, 'pleurisy') !== false)  ){

                        if($key == 1) $q_RESP .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[8])){

                    if($key == 1) $q_PSYCH .= '+'.$v->questionnaire_text.', ';                    

                    }

                    if(in_array($v->id, $all_questionnaire_arr[9])){

                    if($key == 1) $q_SKIN .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[33])){

                    if($key == 1) $q_CV_RESP .= '+'.$v->questionnaire_text.', ';                    

                    }



                    if(in_array($v->id, $all_questionnaire_arr[34])){

                    if($key == 1) $q_THROAT .= '+'.$v->questionnaire_text.', ';
                    $healthscreening_positive_ROS[] = $v->questionnaire_text;

                    }
                }

                else{

                    if(in_array($v->id, $all_questionnaire_arr[1])){

                       if($key == 1) $q_general .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[22])){

                    if($key == 1) $q_GI .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[23])){

                        if($key == 1) $q_GU .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[6])){

                        if($key == 1) $q_NEURO .= '+'.$v->questionnaire_text.', ';

                    }


                    if(in_array($v->id, $all_questionnaire_arr[2])){

                    if($key == 1) $q_GIGU .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[3])){

                    if($key == 1) $q_HEENT .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[52])){

                    if($key == 1) $q_MOUTH .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[12])){

                    if($key == 1) $q_EYES .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[4])){

                    if($key == 1) $q_HEMEENDO .= '+'.$v->questionnaire_text.', ';

                    }

                              if(in_array($v->id, $all_questionnaire_arr[5])){

             if($key == 1) $q_CV .= '+'.$v->questionnaire_text.', ';

                              }

                            if(in_array($v->id, $all_questionnaire_arr[6])){

             if($key == 1) $q_NEUROMSK .= '+'.$v->questionnaire_text.', ';

                              }

                              if(in_array($v->id, $all_questionnaire_arr[7])){

             if($key == 1) $q_RESP .= '+'.$v->questionnaire_text.', ';

                              }

                            if(in_array($v->id, $all_questionnaire_arr[8])){

             if($key == 1) $q_PSYCH .= '+'.$v->questionnaire_text.', ';

                              }

                            if(in_array($v->id, $all_questionnaire_arr[9])){

             if($key == 1) $q_SKIN .= '+'.$v->questionnaire_text.', ';

                              }



                              if(in_array($v->id, $all_questionnaire_arr[33])){

             if($key == 1) $q_CV_RESP .= '+'.$v->questionnaire_text.', ';

                              }



                            if(in_array($v->id, $all_questionnaire_arr[34])){

             if($key == 1) $q_THROAT .= '+'.$v->questionnaire_text.', ';

                              }

            }



      }

   }

//set some associated symptom at end of healthquestionnaire
        $temp_posivite_sym = explode(", ", $positive_symptom);
        if($user_detail->chief_compliant_userdetail->current_step_id->id == 18 && !empty($temp_posivite_sym) && in_array("copd", $user_detail->chief_compliant_userdetail->chronic_condition)){

            foreach ($temp_posivite_sym as $sym_key => $sym_value) {

               //set the CV symptoms
                if(isset($temp_general_health_questionnaire_grp_arr['CV']) && isset($health_associated_sym['CV']) && in_array($sym_value, $health_associated_sym['CV'])){

                    $q_CV .= '+'.$sym_value.', ';
                }

                if(isset($temp_general_health_questionnaire_grp_arr['RESP']) && isset($health_associated_sym['RESP']) && in_array($sym_value, $health_associated_sym['RESP'])){

                    $q_RESP .= '+'.$sym_value.', ';
                }
            }
        }

   $q_general = rtrim($q_general , ', '); $q_GIGU = rtrim($q_GIGU , ', ');  $q_HEENT = rtrim($q_HEENT , ', ');  $q_HEMEENDO = rtrim($q_HEMEENDO , ', '); $q_CV = rtrim($q_CV , ', '); $q_NEUROMSK = rtrim($q_NEUROMSK , ', '); $q_RESP = rtrim($q_RESP , ', '); $q_PSYCH = rtrim( $q_PSYCH , ', ') ; $q_SKIN = rtrim($q_SKIN , ', '); $q_CV_RESP = rtrim($q_CV_RESP , ', '); $q_THROAT = rtrim($q_THROAT , ', ');

   $q_NEURO = rtrim($q_NEURO , ', '); $q_GI = rtrim($q_GI , ', ');  $q_GU = rtrim($q_GU , ', ');  $q_MSK = rtrim($q_MSK , ', '); $q_ENT = rtrim($q_ENT , ', '); $q_EYES = rtrim($q_EYES , ', ');$q_MOUTH = rtrim($q_MOUTH , ', ');



$q_general .= '. Denies '; 
$q_GIGU .= '. Denies ';
$q_HEENT .= '. Denies ';
$q_HEMEENDO .= '. Denies ';
$q_CV .= '. Denies ';  
$q_NEUROMSK .= '. Denies '; 
$q_RESP .= '. Denies ';  
$q_PSYCH .= '. Denies ';  
$q_SKIN .= '. Denies '; 
$q_CV_RESP .= '. Denies ';
$q_THROAT .= '. Denies ';
$q_NEURO .= '. Denies ';  
$q_MSK .= '. Denies ';  
$q_GU .= '. Denies ';  
$q_GI .= '. Denies ';  
$q_ENT .= '. Denies ';
$q_EYES .= '. Denies ';
$q_MOUTH .= '. Denies ';



      foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value) {

              foreach($value as $k =>$v) {

// pr($v);

//                 pr($v->questionnaire_text) ;

    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

    $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;



    $v->questionnaire_text = strtolower($v->questionnaire_text);

    if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){



                    if(in_array($v->id, $all_questionnaire_arr[1])){

                        if($key == 0) $q_general .= $v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[5])){

                        if($key == 0) $q_CV .= $v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[7])){

                        if($key == 0) $q_RESP .= $v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[8])){

                        if($key == 0) $q_PSYCH .= $v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[9])){

                        if($key == 0) $q_SKIN .= $v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[20])){

                        if($key == 0) $q_NEURO .= $v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[21])){

                        if($key == 0) $q_MSK .= $v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[22])){

                        if($key == 0) $q_GI .= $v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[23])){

                        if($key == 0) $q_GU .= $v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[35])){

                        if($key == 0) $q_ENT .= $v->questionnaire_text.', ';

                    }

                }
                elseif($user_detail->chief_compliant_userdetail->current_step_id->id == 18)
                {
                    if(isset($temp_general_health_questionnaire_grp_arr['GEN']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['GEN'])){
                        if($key == 0) $q_general .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['GI']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['GI'])){
                        if($key == 0) $q_GI .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['CV']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['CV'])){
                        if($key == 0) $q_CV .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['NEURO']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['NEURO'])){
                        if($key == 0) $q_NEURO .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['RESP']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['RESP'])){
                        if($key == 0) $q_RESP .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['PSYCH']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['PSYCH'])){
                        if($key == 0) $q_PSYCH .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['MSK']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['MSK'])){
                        if($key == 0) $q_MSK .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['SKIN']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['SKIN'])){
                        if($key == 0) $q_SKIN .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['ENT']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['ENT'])){
                        if($key == 0) $q_ENT .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['EYES']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['EYES'])){
                        if($key == 0) $q_EYES .= $v->questionnaire_text.', ';
                    }
                } 
                elseif($user_detail->chief_compliant_userdetail->current_step_id->id == 23)
                {
                          if(in_array($v->id, $all_questionnaire_arr[1])){

                            if($key == 0) { $q_general .= $v->questionnaire_text.', ';
                            $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                            }

                            }

                        if(in_array($v->id, $all_questionnaire_arr[12])){

                        if($key == 0) { $q_EYES .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                        }

                        }

                        if(in_array($v->id, $all_questionnaire_arr[52])){                  

                        if($key == 0) { $q_MOUTH .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                        }

                        }

                        if(in_array($v->id, $all_questionnaire_arr[2])){

                        if($key == 0) { $q_GIGU .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                        }

                        }

                        if(in_array($v->id, $all_questionnaire_arr[3])){

                        if($key == 0) { $q_HEENT .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                        }

                        }

                        if(in_array($v->id, $all_questionnaire_arr[22])){

                        if($key == 0) { $q_GI .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                        }

                        }



                        if(in_array($v->id, $all_questionnaire_arr[23])){

                        if($key == 0) { $q_GU .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                        }

                        }

                        if(in_array($v->id, $all_questionnaire_arr[4])){

                        if($key == 0) { $q_HEMEENDO .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                        }

                        }

                        if(in_array($v->id, $all_questionnaire_arr[5])){

                        if($key == 0) { $q_CV .= $v->questionnaire_text.', ';
                        $healthscreening_volume_negative_ROS[] = $v->questionnaire_text;
                        }

                        }

                        if(in_array($v->id, $all_questionnaire_arr[6])){

                        if($key == 0) { $q_NEUROMSK .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                        }

                        }

                        // if(in_array($v->id, $all_questionnaire_arr[7])){

                        // if($key == 0) { $q_RESP .= $v->questionnaire_text.', ';
                        // $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                        // }

                        // }

                        if(in_array($v->id, $all_questionnaire_arr[7]) || (in_array($v->id, $all_questionnaire_arr[5]) && strpos($v->questionnaire_text, 'pleurisy') !== false)  ){

                        if($key == 0) {$q_RESP .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;}

                        }


                        if(in_array($v->id, $all_questionnaire_arr[8])){

                        if($key == 0) { $q_PSYCH .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                        }

                        }

                        if(in_array($v->id, $all_questionnaire_arr[9])){

                        if($key == 0) { $q_SKIN .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                        }

                        }

                        if(in_array($v->id, $all_questionnaire_arr[33])){

                        if($key == 0) {$q_CV_RESP .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                        }

                        }

                        if(in_array($v->id, $all_questionnaire_arr[34])){

                        if($key == 0) { $q_THROAT .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                        }

                        }
                }           

                else
                {

                if(in_array($v->id, $all_questionnaire_arr[1])){

                if($key == 0) $q_general .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $all_questionnaire_arr[12])){

                if($key == 0) $q_EYES .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $all_questionnaire_arr[52])){                  

                if($key == 0) $q_MOUTH .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $all_questionnaire_arr[2])){

                if($key == 0) $q_GIGU .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $all_questionnaire_arr[3])){

                if($key == 0) $q_HEENT .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $all_questionnaire_arr[22])){

                if($key == 0) $q_GI .= $v->questionnaire_text.', ';

                }



                if(in_array($v->id, $all_questionnaire_arr[23])){

                if($key == 0) $q_GU .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $all_questionnaire_arr[4])){

                if($key == 0) $q_HEMEENDO .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $all_questionnaire_arr[5])){

                if($key == 0) $q_CV .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $all_questionnaire_arr[6])){

                if($key == 0) $q_NEUROMSK .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $all_questionnaire_arr[7])){

                if($key == 0) $q_RESP .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $all_questionnaire_arr[8])){

                if($key == 0) $q_PSYCH .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $all_questionnaire_arr[9])){

                if($key == 0) $q_SKIN .= $v->questionnaire_text.', ';

                }



                if(in_array($v->id, $all_questionnaire_arr[33])){

                if($key == 0) $q_CV_RESP .= $v->questionnaire_text.', ';

                }



                if(in_array($v->id, $all_questionnaire_arr[34])){

                if($key == 0) $q_THROAT .= $v->questionnaire_text.', ';

                }

             }



      }

   }


   


   //set some associated symptom at end of healthquestionnaire
        $temp_negative_symptom = explode(", ", $negative_symptom);
        if($user_detail->chief_compliant_userdetail->current_step_id->id == 18 && !empty($temp_negative_symptom) && in_array("copd", $user_detail->chief_compliant_userdetail->chronic_condition)){

            foreach ($temp_negative_symptom as $sym_key => $sym_value) {

               //set the CV symptoms
                if(isset($temp_general_health_questionnaire_grp_arr['CV']) && isset($health_associated_sym['CV']) && in_array($sym_value, $health_associated_sym['CV'])){

                    $q_CV .= $sym_value.', ';
                }

                if(isset($temp_general_health_questionnaire_grp_arr['RESP']) && isset($health_associated_sym['RESP']) && in_array($sym_value, $health_associated_sym['RESP'])){

                    $q_RESP .= $sym_value.', ';
                }
            }
        }


   //calculate the ROS count, we calculate the number of group of health questionnaire to generate the cpt code

        $temp_health_questionnaire_grp = array();



        foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)

        {

            foreach($value as $k =>$v)

            {



                foreach ($all_questionnaire_arr as $gkey => $gvalue) {



                    if(in_array($v->id, $gvalue)){



                       $temp_health_questionnaire_grp[] = $gkey;

                       break;

                    }

                }

            }

        }

        $positive_ros_count = count(array_unique($temp_health_questionnaire_grp));



}

 //pr($q_general); pr($q_GIGU); pr($q_HEENT); pr($q_HEMEENDO); pr($q_CV); pr($q_NEUROMSK); pr($q_RESP); pr($q_PSYCH); pr($q_SKIN);   die;

$q_general = rtrim($q_general , ', '); $q_GIGU = rtrim($q_GIGU , ', ');  $q_HEENT = rtrim($q_HEENT , ', ');  $q_HEMEENDO = rtrim($q_HEMEENDO , ', '); $q_CV = rtrim($q_CV , ', '); $q_NEUROMSK = rtrim($q_NEUROMSK , ', '); $q_RESP = rtrim($q_RESP , ', '); $q_PSYCH = rtrim( $q_PSYCH , ', ') ; $q_SKIN = rtrim($q_SKIN , ', '); $q_CV_RESP = rtrim($q_CV_RESP , ', '); $q_THROAT = rtrim($q_THROAT , ', ');

$q_NEURO = rtrim($q_NEURO , ', '); $q_GI = rtrim($q_GI , ', ');  $q_GU = rtrim($q_GU , ', ');  $q_MSK = rtrim($q_MSK , ', '); $q_ENT = rtrim($q_ENT , ', '); $q_EYES = rtrim($q_EYES, ', ');$q_MOUTH = rtrim($q_MOUTH, ', ');



$q_general = ltrim($q_general , '. ');

$q_GIGU = ltrim($q_GIGU , '. ');

$q_HEENT = ltrim($q_HEENT , '. ');

$q_HEMEENDO = ltrim($q_HEMEENDO , '. ');

$q_CV = ltrim($q_CV , '. ');

$q_NEUROMSK = ltrim($q_NEUROMSK , '. ');

$q_RESP = ltrim($q_RESP , '. ');

$q_PSYCH = ltrim( $q_PSYCH , '. ') ;

$q_SKIN = ltrim($q_SKIN , '. ');

$q_CV_RESP = ltrim($q_CV_RESP , '. ');

$q_THROAT = ltrim($q_THROAT , '. ');

$q_NEURO = ltrim($q_NEURO , '. '); $q_GI = ltrim($q_GI , '. ');  $q_GU = ltrim($q_GU , '. ');  $q_MSK = ltrim($q_MSK , '. '); $q_ENT = ltrim($q_ENT , '. ');
$q_EYES = ltrim($q_EYES , '. ');
$q_MOUTH = ltrim($q_MOUTH , '. ');



//echo $q_general;die;

$q_general = preg_replace('/Denies$/', '', $q_general);

$q_GIGU = preg_replace('/Denies$/', '', $q_GIGU);

$q_HEENT = preg_replace('/Denies$/', '', $q_HEENT);

$q_HEMEENDO = preg_replace('/Denies$/', '', $q_HEMEENDO);

$q_CV = preg_replace('/Denies$/', '', $q_CV);

$q_NEUROMSK = preg_replace('/Denies$/', '', $q_NEUROMSK);

$q_RESP = preg_replace('/Denies$/', '', $q_RESP);

$q_PSYCH = preg_replace('/Denies$/', '', $q_PSYCH);

$q_SKIN = preg_replace('/Denies$/', '', $q_SKIN);

$q_CV_RESP = preg_replace('/Denies$/', '', $q_CV_RESP);

$q_THROAT = preg_replace('/Denies$/', '', $q_THROAT);

$q_MOUTH = preg_replace('/Denies$/', '', $q_MOUTH);

$q_NEURO = preg_replace('/Denies$/', '', $q_NEURO);

$q_GI = preg_replace('/Denies$/', '', $q_GI);

$q_GU = preg_replace('/Denies$/', '', $q_GU);

$q_MSK = preg_replace('/Denies$/', '', $q_MSK);

$q_ENT = preg_replace('/Denies$/', '', $q_ENT);
$q_EYES = preg_replace('/Denies$/', '', $q_EYES);

}



  $curnt_date = date('Y-m-d\TH:i:s');



  // preparing array that will finally convert into json







// get emr id as database



$internal_emr_id = '' ;

if(!empty($login_user->internal_emr_id)){



  $internal_emr_id =  Security::decrypt( base64_decode($login_user->internal_emr_id), SEC_KEY);





} else {

    $clinic_data_dump = '' ;

            $phone_no = $login_user->phone ;

              if(strlen($phone_no) == 10){

                  $phone_no_with_extra_1 = '1'.$phone_no ;

              }


    if(!empty($login_user->organization->clinic_data_dump))

      $clinic_data_dump = $login_user->organization->clinic_data_dump;

      $file_name = WWW_ROOT.'clinic_data_dump/'.$clinic_data_dump;

          if(is_file($file_name) && file_exists($file_name)){

              $file = fopen($file_name, 'r');

              while (($line = fgetcsv($file)) !== FALSE) {
             

                  if(

                  in_array($phone_no, $line) ||

              (!empty($phone_no_with_extra_1) &&  in_array($phone_no_with_extra_1, $line))

           // (!empty($phone_no_without_extra_1) &&  in_array($phone_no_without_extra_1, $line))



                  ){

                    $internal_emr_id = $line[3]; // in the array index of emr id is 3

                    break;

                  }

              }

              // die;

              fclose($file);

          }





}

// pr($phone);

$ph_prefix = '+1 ';



if(strlen($phone) > 10 && $phone[0] == '1'){

  $phone = substr($phone, 1);

}

  $phone = substr_replace($phone, ' - ', 3, 0);

  $phone = substr_replace($phone, ' - ', 9, 0);

  $phone = $ph_prefix.$phone;



//pr($user_detail);die;

$cpt_cc_count = count(array_unique(array_filter(explode(", ", $all_cc_name))));



  //Logic for calculate the E/M CPT Code



  $cpt_code = '';

  $text_condition = '';


if(!empty($user_signed_data)){





    if($user_signed_data['patient_type'] == 1){



        //generate code for new patient



        if(($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 1 || $user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 17) && $positive_ros_count < 1 && $cpt_pmfsh_count < 1 && $cpt_cc_count == 1 && $cpt_hpi_elements_count >= 1 && $cpt_hpi_elements_count <= 3)

        {



            $cpt_code .= '99201 (if examine 1+ systems, 1-5 PE elements), ';

        }

       if(($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 1 || $user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 17) && $positive_ros_count >= 1 && $cpt_pmfsh_count >= 0 && $cpt_cc_count >= 1 && $cpt_hpi_elements_count >= 1 && $cpt_hpi_elements_count <= 3){



            $cpt_code .= '99202 (if examine 1+ systems, 6-11 PE elements), ';

        }

        if(($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 1 || $user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 17) && $positive_ros_count >= 2 && $positive_ros_count <= 9 && $cpt_pmfsh_count >= 1 && ($cpt_cc_count > 1 || $cpt_cronic_condition_count >= 1) && ($cpt_hpi_elements_count >= 4 || $cpt_cronic_condition_count >= 3)){



            $cpt_code .= '99203 (if examine 2+ systems, 12+ PE elements; OTC meds, PT/OT), ';



        }

        if(($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 1 || $user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 17) && $positive_ros_count >= 10 && $cpt_pmfsh_count >= 3 && ($cpt_hpi_elements_count >= 4 || $cpt_cronic_condition_count >= 3)){



            $cpt_code .= '99204 (if examine 9+ systems, 18+ PE elements; Rx), 99205 (if examine 9+ systems, 18+ PE elements; angio, endoscopies w/ risk fx, or major surgery ordered), ';

        }

       if($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 2 && $positive_ros_count >= 10 && $age >= 18 && $age <= 39 && $cpt_pmfsh_count >= 2 && $cpt_hpi_elements_count >= 4){



            $cpt_code .= '99385 (if counseling/anticipatory guidance/risk factor reduction interventions), ';

        }

       if($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 2 && $positive_ros_count >= 10 && $age >= 40 && $age <= 64 && $cpt_pmfsh_count >= 2 && $cpt_hpi_elements_count >= 4){



            $cpt_code .= '99386 (if counseling/anticipatory guidance/risk factor reduction interventions), ';

        }



        if($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 2 && $positive_ros_count >= 10 && $age >= 65 && $cpt_pmfsh_count >= 2 && $cpt_hpi_elements_count >= 4){



            $cpt_code .= '99387 (if counseling/anticipatory guidance/risk factor reduction interventions), ';

        }





    }



    if($user_signed_data['patient_type'] == 2){



        //generate code for established patient



         $previous_annual_exam = $this->ChiefCompliantUserdetails->find('all')->where(['ChiefCompliantUserdetails.current_step_id' => 4,'ChiefCompliantUserdetails.id !='=> $user_detail['chief_compliant_userdetail']['id']]);



          $userId = $user_detail['user_id'];

          // compare previous appointement user id with the current appointemet user id

          $previous_annual_exam = $previous_annual_exam->matching('Appointments', function(\Cake\ORM\Query $q) use ($userId) {

                    return $q->where(['Appointments.user_id' =>$userId ]);

                });



          $previous_annual_exam = $previous_annual_exam->order(['ChiefCompliantUserdetails.id' => 'desc'])->first();



          $previous_annual_exam_diff = 0;

          if(!empty($previous_annual_exam)){



            $current_date = strtotime(date('Y-m-d'));

            $previous_date = strtotime(date('Y-m-d',strtotime($previous_annual_exam['created'])));

            $previous_annual_exam_diff = (($current_date-$previous_date)/60/60/24);

          }

          // pr($positive_ros_count);
          // pr($cpt_hpi_elements_count);
          // die('xc');

        if(in_array($user_detail['chief_compliant_userdetail']['current_step_id']['id'], [6,16,17]) && $positive_ros_count < 1 && $cpt_pmfsh_count < 1 && $cpt_hpi_elements_count < 1)

        {
            $cpt_code .= '99211 (if 5 minutes), ';
        }

        if(in_array($user_detail['chief_compliant_userdetail']['current_step_id']['id'], [6,16,17]) && $positive_ros_count < 1 && $cpt_pmfsh_count < 1 && $cpt_hpi_elements_count >= 1 && $cpt_hpi_elements_count <= 3)

        {
            $cpt_code .= '99212 (if examine 1+ systems, 1-5 PE elements), ';
        }

        if((in_array($user_detail['chief_compliant_userdetail']['current_step_id']['id'], [1,6,16,17]) || ($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 4 && $cpt_mild_count >= 1)) && $positive_ros_count >= 2 && $positive_ros_count < 10 && $cpt_pmfsh_count >= 1 && ($cpt_hpi_elements_count >= 4 || $cpt_cronic_condition_count >= 3))

        {
            $cpt_code .= '99214 (if examine 2+ systems, 12+ PE elements; or Rx given), ';

        }

        if((in_array($user_detail['chief_compliant_userdetail']['current_step_id']['id'], [6,16,17]) || ($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 4 && $cpt_serve_count >= 1)) && $positive_ros_count >= 10 && $cpt_pmfsh_count >= 2 && ($cpt_hpi_elements_count >= 4 || $cpt_cronic_condition_count >= 3))

        {
            $cpt_code .= '99215 (if examine 9+ systems, 18+ PE elements; or major surgery ordered), ';
        }

        if((in_array($user_detail['chief_compliant_userdetail']['current_step_id']['id'], [6,16,17]) || ($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 4 && empty($user_detail['chief_compliant_userdetail']['medication_side_effects']))) && $positive_ros_count >= 1 && $cpt_pmfsh_count == 0 && $cpt_hpi_elements_count <= 1)

        {
            $cpt_code .= '99213 (if examine 1+ systems, 6-11 PE elements; or PT/OT ordered), ';
        }

        if($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 2 && $positive_ros_count >= 10 && $age >= 18 && $age <= 39 && $previous_annual_exam_diff >= 365 && $cpt_pmfsh_count >= 2 && $cpt_hpi_elements_count >= 4 )
        {

            $cpt_code .= '99395 (if counseling/anticipatory guidance/risk factor reduction interventions), ';
        }

        if($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 2 && $positive_ros_count >= 10 && $age >= 40 && $age <= 64 && $previous_annual_exam_diff >= 365 && $cpt_pmfsh_count >= 2 && $cpt_hpi_elements_count >= 4 )
        {
            $cpt_code .= '99396 (if counseling/anticipatory guidance/risk factor reduction interventions), ';
        }

        elseif($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 2 && $positive_ros_count >= 10 && $age >= 65 && $previous_annual_exam_diff >= 365 && $cpt_pmfsh_count >= 2 && $cpt_hpi_elements_count >= 4)
        {
            $cpt_code = '99397 (if counseling/anticipatory guidance/risk factor reduction interventions), ';
        }

    }



    $cpt_code = rtrim($cpt_code,', ');



}




//logic for calculate cpt  Assessments/Inventories code



$cpt_assessment_code = '';



$previous_phq_9 = $this->ChiefCompliantUserdetails->find('all')->where(['ChiefCompliantUserdetails.id !='=> $user_detail['chief_compliant_userdetail']['id'], 'ChiefCompliantUserdetails.phq_9_detail !='=> null, 'ChiefCompliantUserdetails.phq_9_detail !='=> '']);



$userId = $user_detail['user_id'];

// compare previous appointement user id with the current appointemet user id

$previous_phq_9 = $previous_phq_9->matching('Appointments', function(\Cake\ORM\Query $q) use ($userId) {

        return $q->where(['Appointments.user_id' =>$userId ]);

    });



$previous_phq_9 = $previous_phq_9->order(['ChiefCompliantUserdetails.id' => 'desc'])->first();



$previous_phq_9_diff = 0;

if(!empty($previous_phq_9))

{



    $current_date = strtotime(date('Y-m-d'));

    $previous_date = strtotime(date('Y-m-d',strtotime($previous_phq_9['created'])));

    $previous_phq_9_diff = (($current_date-$previous_date)/60/60/24);

}



if($login_user['guarantor'] == 'health insurance' && (!empty($user_detail->chief_compliant_userdetail->phq_9_detail))){



    $cpt_assessment_code .= '96127, ';

}

if($login_user['guarantor'] == 'medicare' && !empty($user_detail->chief_compliant_userdetail->phq_9_detail) && $previous_phq_9_diff >= 365){



    $cpt_assessment_code .= 'G0444 (if 15 min intervention), ';



}

if($login_user['guarantor'] == 'health insurance'){



    $cpt_assessment_code .= '96160, ';

}

if($login_user['guarantor'] == 'health insurance' && $cpt_dast_available == 1){



    $cpt_assessment_code .= '99408 (if 15-30 min intervention), 99409 (if >30 min intervention), ';

}



$cpt_assessment_code = rtrim($cpt_assessment_code, ', ');



$cnt = 1;

$document_section = array();



$covid_screening = '';

$covid_layman = '';

$covid_detail_layman = array();
$chronic_pain_assessment_detail_layman = array();

$covid_risk = '';

//pr($user_detail->chief_compliant_userdetail);die;
// Pain management
if(($user_detail->chief_compliant_userdetail->current_step_id->id == 1 || $user_detail->chief_compliant_userdetail->current_step_id->id == 20) && !empty($user_detail->chief_compliant_userdetail->chronic_pain_assessment_tmb) && !empty($user_detail->chief_compliant_userdetail->chronic_pain_assessment_pmh)) {

    $chronic_pain_assessment_detail_layman = $this->chronic_pain_assessment_layman($user_detail,$user_detail->chief_compliant_userdetail->chronic_pain_assessment_tmb,$user_detail->chief_compliant_userdetail->chronic_pain_assessment_pmh,$user_detail->chief_compliant_userdetail->chronic_pain_treatment_history,$user_detail->chief_compliant_userdetail->chronic_pain_curr_treat_history,$user_detail->chief_compliant_userdetail->chronic_pain_past_treat_history,$user_detail->chief_compliant_userdetail->chronic_pain_opioid_overdose_risk,$user_detail->chief_compliant_userdetail->chronic_pain_assessment_ort);

    }
// End pain management

if(($user_detail->chief_compliant_userdetail->current_step_id->id == 1 || $user_detail->chief_compliant_userdetail->current_step_id->id == 17) && !empty($user_detail->chief_compliant_userdetail->covid_detail)){

     $covid_screening = 0;
    if($user_detail->chief_compliant_userdetail->current_step_id->id == 1){



       foreach ($user_detail->chief_compliant_userdetail->covid_detail as $key => $value) {



            if($value['answer'] == 'Yes' && ($key == 141 || $key == 142)){



                $covid_screening = 1;

                //break;

            }



            if($key == 141 && $value['answer'] == 'Yes'){



                $covid_layman .= 'recent travel to affected geographical areas';

            }



            if($key == 142 && $value['answer'] == 'Yes'){



                $covid_layman .= ', close contact with laboratory-confirmed COVID-19 patient';

            }

        }



        if($covid_screening == 0){



            $hpi .= ' COVID-19 screening is negative. ';

            //$hpi .= $covid_layman;

        }

        else{



            $covid_layman = trim($covid_layman,', ');

            $hpi .= ' COVID-19 screening is positive for '.$covid_layman.'. ';

        }



        $covid_detail_layman = $this->covid_detail_layman($user_detail->chief_compliant_userdetail->covid_detail);

    }



    if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){



        $covid_risk = 'Low';

        $covid_layman = '';



        foreach ($user_detail->chief_compliant_userdetail->covid_detail as $key => $value) {



            switch ($value['question_id']) {

                case 201:



                    if($value['answer'] == 'Yes'){



                      $covid_risk = 'High';

                      $covid_layman .= 'recent international travel, ';

                    }



                    break;



                case 204:



                    if($value['answer'] == 'Yes'){



                      $covid_risk = 'High';

                      $covid_layman .= 'recent domestic travel, ';

                    }

                    break;



                case 207:



                    if($value['answer'] == 'Yes'){



                      $covid_risk = 'High';

                      $covid_layman .= 'exposure to lab-confirmed COVID-19, ';

                    }

                    break;



                case 208:



                   if($value['answer'] == 'Yes'){



                      $covid_risk = 'High';

                      $covid_layman .= 'health care provider or first responder, ';

                    }

                    break;

            }



        }



        $covid_layman = rtrim($covid_layman,', ');

    }



}



//calculate the health exposure risk for covid module (step_id = 17)

$health_risk = '';

$health_layman  = '';

if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){



    $health_risk_score = 0;



    if($age >= 60 && $age < 70){



        $health_risk_score += 1;

    }

    elseif($age >= 70 && $age < 80){



        $health_risk_score += 2;

    }

    elseif($age >= 80){



        $health_risk_score += 4;

    }



    if(!empty($user_detail->chief_compliant_userdetail->focused_history_detail)){



        if(isset($user_detail->chief_compliant_userdetail->focused_history_detail[213])){



            $health_conditions = $user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer'];

            if(in_array("Chronic obstructive pulmonary disease (COPD)", $health_conditions)){



                $health_risk_score += 3;

                $health_layman .= 'COPD, ';

            }

            if(in_array("Heart disease (coronary artery disease)", $health_conditions)){



                $health_risk_score += 4;

                $health_layman .= 'CAD, ';

            }

            if(in_array("High blood pressure (hypertension)", $health_conditions)){



                $health_risk_score += 2;

                $health_layman .= 'HTN, ';

            }

            if(in_array("Diabetes", $health_conditions)){



                $health_risk_score += 2;

                $health_layman .= 'Diabetes, ';

            }

        }



        if(isset($user_detail->chief_compliant_userdetail->focused_history_detail[214]) && $user_detail->chief_compliant_userdetail->focused_history_detail[214]['answer'] == 'Yes'){



            $health_risk_score += 1;

            $health_layman .= 'current smoking';

        }



    }



    if($health_risk_score == 0){



        $health_risk = 'Low';

    }

    elseif($health_risk_score == 1){



        $health_risk = 'Moderate';

    }

    elseif($health_risk_score == 2 || $health_risk_score == 3){



        $health_risk = 'High';

    }

    else{



        $health_risk = 'Very high';

    }

    $health_layman = rtrim($health_layman,', ');

}





$phq_9_layman = '';

$phq_score = '';
// pr($phq_9_layman); die;
if(!empty($user_detail->chief_compliant_userdetail->phq_9_detail) && ($user_detail->chief_compliant_userdetail->current_step_id->id == 1 || $user_detail->chief_compliant_userdetail->current_step_id->id == 2 || $user_detail->chief_compliant_userdetail->current_step_id->id == 17)){



    $phq_score = array_sum($user_detail->chief_compliant_userdetail->phq_9_detail);

    // pr($user_detail->chief_compliant_userdetail->phq_9_detail);
    // die;

    if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){



        if($phq_score >= 2){

            $phq_9_layman = 'PHQ-2 is positive';
        }
        else{
            $phq_9_layman = 'PHQ-2 is negative';
        }

    }

    else

    {

        if($user_detail->chief_compliant_userdetail->current_step_id->id == 1){



            $phq_9_layman .= 'Score is '.$phq_score.", Depression severity is ";

        }

        if($user_detail->chief_compliant_userdetail->current_step_id->id == 2){



            $phq_9_layman .= 'The PHQ-9 score is '.$phq_score.". Depression severity is ";

        }





        if($phq_score <= 4){



            $phq_9_layman  .= 'Minimal or none: Monitor; may not require treatment';

        }

        elseif($phq_score >= 5 && $phq_score <= 9)

        {



            $phq_9_layman  .= 'Mild: Use clinical judgment (symptom duration, functional impairment) to determine necessity of treatment';

        }

        elseif($phq_score >= 10 && $phq_score <= 14)

        {



            $phq_9_layman  .= 'Moderate: Use clinical judgment (symptom duration, functional impairment) to determine necessity of treatment';

        }

        elseif($phq_score >= 15 && $phq_score <= 19)

        {



            $phq_9_layman  .= 'Moderately severe: Warrants active treatment with psychotherapy, medications, or combination';

        }

        elseif($phq_score >= 10 && $phq_score <= 27)

        {



            $phq_9_layman  .= 'Severe: Warrants active treatment with psychotherapy, medications, or combination';

        }

    }



    $phq_9_layman = rtrim($phq_9_layman,', ').'. ';

}



if($user_detail->chief_compliant_userdetail->current_step_id->id == 2 || $user_detail->chief_compliant_userdetail->current_step_id->id == 17){

    $hpi .= ' '.$phq_9_layman;

}

if(!empty($hpi))
{
    $hpi = $this->sentence_uppercase($hpi);
    $hpi = str_replace(['y. O. Male','y. O. Female'], ['y.o. male','y.o. female'],$hpi);
}
if($user_detail->chief_compliant_userdetail->current_step_id->id == 21){

      $hpi = str_replace(['coming in for a'], ['here for'],$hpi);

}
// pr($hpi); die;
$cronic_subjective_text_detail = $this->chronic_condition_subjective($user_detail->chief_compliant_userdetail,$positive_symptom,$negative_symptom,$meds);
//pr($login_user);die;
$cancer_layman_detail = $this->cancer_layman($user_detail->chief_compliant_userdetail,$login_user->gender);
$pre_op_post_op_detial_res = $this->pre_op_post_op_detail_layman($user_detail->chief_compliant_userdetail,$login_user->gender);
$oncologyfollowup = $this->oncology_follow_up_detail_layman($user_detail->chief_compliant_userdetail,$login_user->gender);

$RaceValue = array('1' =>'American Indian or Alaska Native','2' =>'Asian', '3' => 'Black or African American', '4' =>'Native Hawaiian or Other Pacific Islander', '5' =>'White' , '6' =>'Other Race');
$ethinicityValue = array('1' =>'Hispanic or Latino', '2' =>'Not Hispanic or Latino');

$em_line = '<strong>Recommended E/M CPT Code:</strong> '.$cpt_code.(!empty($text_condition) ? '(if '.$text_condition.')' : "")."\n<strong>Other Codes:</strong> ".$cpt_assessment_code."\n<strong>Insurance information:</strong> ".$login_user['guarantor'];
$line1 = '<strong>Patient:</strong> '.h(ucfirst($login_user->last_name)).', '.h(ucfirst($login_user->first_name))."\n<strong>DOB:</strong> ".(date('m-d-Y',strtotime($login_user->dob))  )."\n<strong>Age:</strong> ".$age."\n<strong>Sex:</strong> ".($login_user->gender == 0 ? 'F' : 'M');
$line2 = '<strong>MRN:</strong> '.$mrn."\n<strong>Phone:</strong> ".$phone ;
$address = '';
$address.= !empty($login_user->address)?$login_user->address.', ':'';
$address.= !empty($login_user->city)?$login_user->city.', ':'';
$address.= !empty($login_user->state)?$login_user->state.', ':'';
$address.= !empty($login_user->zip)?$login_user->zip.', ':'';


$clinical_race = !empty($login_user->clinical_race) ? $RaceValue[$login_user->clinical_race] : '';
$clinical_ethnicity = !empty($login_user->clinical_ethnicity) ? $ethinicityValue[$login_user->clinical_ethnicity] : '';

$line3 = '<strong>Address: </strong> '.$address."\n<strong>Preferred Pharmacy:</strong> ".(!empty($login_user->pharmacy) ? $login_user->pharmacy : "");
$line4 = '<strong>Encounter Date:</strong> '.$curdate."\n<strong>Provider:</strong> ".$user_detail->doctor->doctor_name.' '.$user_detail->doctor->credentials;
$line5 = '<strong>Facility:</strong> '.$user_detail->organization->organization_name ;
$line6 = '<strong>Race:</strong> '.$clinical_race;
$line7 = '<strong>Ethnicity:</strong> '.$clinical_ethnicity;


$format = 1;



if($format !=  1 ){

// sending the standard json format

//die('xxzc');

$mi7_api_array = array(

    "MessageType" => 5,

    "PatientID_EMR" => $internal_emr_id,

    "FirstName" => ucfirst($login_user->first_name),

    "LastName" => $login_user->last_name,

    "DOB" => $dob,

    "Gender" => $login_user->gender == 1 ? 'M' : 'F',

    "Document" => array(

        "Header" => array(

            "DocumentType" => "PR",

            "ActivityDate" => $curnt_date,

            "TranscribedDate" => $curnt_date,

            "CompletionStatus" => "IP",

        ),

        "DocumentSections" => $document_section

    )

);





} else{

// sending the OPEN EMR  output format

// prepare $document_section array for the OPEN EMR output , In OPEN EMR format all the patient data will provided in first array

$cnt = 1;

$document_section = array();



$section_text = '' ;
$company_name = '';
$dementia_screnning = '';
$informant_present = '';


$section_text .= $line1."\n";

$section_text .= $line2."\n";

$section_text .= $line3."\n";

$section_text .= $line4."\n";

$section_text .= $line5."\n";

$section_text .= $line6."\n";

$section_text .= $line7."\n";
//pr($user_detail->chief_compliant_userdetail->chief_complaint_psychiatry); die;

$section_text .= (empty($company_name) ? "" : "<strong>Informant/Present:</strong> ".rtrim(strtolower($company_name),', ')." \n  \n");
    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [26,27])){
        $all_inf_pre = array();
        $all_inf_pre = $user_detail->chief_compliant_userdetail->chief_complaint_psychiatry[614]['answer'] ? $user_detail->chief_compliant_userdetail->chief_complaint_psychiatry[614]['answer']:'';
        $informant_present .= (empty($user_detail->chief_compliant_userdetail->chief_complaint_psychiatry[614]) ? "" : $this->natural_word_join($all_inf_pre));
        $informant_present .= (empty($user_detail->chief_compliant_userdetail->chief_complaint_psychiatry[615]) ? "" :($informant_present ? ' and ' : ''). $user_detail->chief_compliant_userdetail->chief_complaint_psychiatry[615]['answer']);

        $section_text .= "<strong>Informant/Present:</strong> ".(empty($informant_present) ? "none provided" : $informant_present)."\n \n";
    }

if($login_user->gender == 0 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 17){
    $section_text .= "<strong>BMI:</strong> ".(empty($bmi) ? "none provided" : $bmi)." \n  \n";
}

    $section_text .= (empty($all_cc_name) ? "" : "<strong>CC:</strong> ".rtrim(strtolower($all_cc_name),', ')." \n  \n");
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19){

        $section_text .= "<strong>CC:</strong> ".(empty($cancer_layman_detail['cancer_cc']) ? "none provided" : ucfirst($cancer_layman_detail['cancer_cc']))."\n \n";
    }

    // $section_text .= "#HPI: \n ".(empty($hpi) ? "none provided" : $hpi)." \n  <br />";

    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 4){
        $section_text .= "<strong>SUBJECTIVE:</strong> ".(empty($hpi) ? "none provided" : $hpi)." \n  \n";
    }

    $covid_subjective_detail = null;
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 17){

        $covid_subjective_detail = $this->covid_module_subjective($user_detail->chief_compliant_userdetail);

        $subjective = "This is a ";

        if($covid_subjective_detail['is_pregnate'] == 1){
            $subjective .= "currently pregnant ";
        }

        $subjective .= $age." y.o. ".($login_user->gender == 0 ? 'F ': "M ");
       // pr($subjective);die;

        $subjective .= $covid_subjective_detail['layman_summar'];
        $subjective.= $covid_associated_symp;
        $subjective .= $phq_9_layman;

        $section_text .= "<strong>HPI:</strong> ".(empty($subjective) ? "none provided" : $subjective)." \n\n";

    }

    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 18 || $user_detail->chief_compliant_userdetail->current_step_id['id'] == 25)
    {


        $chronic_cond_name = (str_replace("DMII", 'DM',strtoupper(is_array($user_detail->chief_compliant_userdetail->chronic_condition) ? implode(", ", $user_detail->chief_compliant_userdetail->chronic_condition) : $user_detail->chief_compliant_userdetail->chronic_condition)));



        $section_text .= "<strong>REASON FOR VISIT:</strong> f/u ".$chronic_cond_name." management.\n";
        $ethinicity_trans = array(

            0 => 'asian',
            1 => 'caucasian',
            2 => 'hispanic',
            3 => 'pacific',
            4 => 'native american',
            5 => 'african american',
            9 => 'prefer not to say'
        );

        $ethinicity = !empty($login_user->ethinicity) && isset($ethinicity_trans[$login_user->ethinicity]) ? ucfirst($ethinicity_trans[$login_user->ethinicity]) : '';
        $cronic_subjective_text ='';
        $cronic_subjective_text .= h(ucfirst($login_user->first_name)).' is a '.$age." y.o. ".(!empty($ethinicity) ? $ethinicity.' ' : '').($login_user->gender == 0 ? 'female': "male");

       /* $cronic_subjective_text ='';
        $cronic_subjective_text .= $login_user->first_name.' is a '.$age." y.o. ".($login_user->race == 1 ? "hispanic" : "non hispanic").' '.($login_user->gender == 0 ? 'female': "male");*/

        if(!empty($pmh)){

            $cronic_subjective_text .= ' with a PMH significant for '.$pmh;
        }

        if(isset($cronic_subjective_text_detail['layman_summar'])){

            $cronic_subjective_text .= ' '.$cronic_subjective_text_detail['layman_summar'];
        }

        $cronic_subjective_text = str_replace(["dmii","Dm"], ['DM','DM'], $cronic_subjective_text);

        $section_text .= "<strong>SUBJECTIVE:</strong> ".(empty($cronic_subjective_text) ? "none provided" : $cronic_subjective_text)." \n\n";

        $section_text .= "<strong>CC:</strong> ".(empty($chronic_cond_name) ? "none provided" : ucfirst($chronic_cond_name))."\n \n";


    }



    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 16){



        $section_text .= "<strong>REASON FOR VISIT:</strong> ".(empty($follow_up_sx_detial_res['all_cc_name']) ? "none provided" : "f/u ".$follow_up_sx_detial_res['all_cc_name'])." \n";



        $section_text .= "<strong>SUBJECTIVE:</strong> ".(empty($follow_up_sx_detial_res['layman_summar']) ? "none provided" : $follow_up_sx_detial_res['layman_summar'])." \n";

    }

    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 20){

        $section_text .= "<strong>REASON FOR VISIT:</strong> ".(empty($pre_op_post_op_detial_res['reason_for_visit']) ? "none provided" : $pre_op_post_op_detial_res['reason_for_visit'])." \n";

        $pre_op_post_op_subjective_text = (empty($pre_op_post_op_detial_res['layman_summar']) ? "none provided" : $login_user->first_name.' is a who is following up '.$pre_op_post_op_detial_res['layman_summar']);

        $section_text .= "<strong>SUBJECTIVE:</strong> ".$pre_op_post_op_subjective_text." \n";

    }


    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 21){

            if(!empty($cancer_followup_positive_ROS)){

                $oncologyfollowup['layman_summar'] = $oncologyfollowup['layman_summar']." ROS is significant for ".(implode(", ", $cancer_followup_positive_ROS)).".";
            }

            if(!empty($cancer_followup_negative_ROS)){

                $oncologyfollowup['layman_summar'] = $oncologyfollowup['layman_summar']." Denies ".(implode(", ", $cancer_followup_negative_ROS)).". ";
            }

            $oncology_followup_subjective_text = (empty($oncologyfollowup['layman_summar']) ? "none provided" : $hpi." ".$oncologyfollowup['layman_summar']);

            $section_text .= "<strong>SUBJECTIVE:</strong> ".$oncology_followup_subjective_text." \n";
            $section_text .= "".(empty($oncologyfollowup['hpi']) ? "" : $oncologyfollowup['hpi'])."\n";
            
            $section_text .= "<strong>Assessments:</strong> \n ";
            $section_text .= "<strong>SIT:</strong> \n&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Symptoms:</strong> \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Severe:</strong> ".(empty($oncologyfollowup['sti_severe_sym']) ? "" : $oncologyfollowup['sti_severe_sym'])."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Moderate:</strong> ".(empty($oncologyfollowup['sti_moderate_sym']) ? "" : $oncologyfollowup['sti_moderate_sym'])."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Mild:</strong> ".(empty($oncologyfollowup['sti_mild_sym']) ? "" : $oncologyfollowup['sti_mild_sym'])."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Negative:</strong> ".(empty($oncologyfollowup['sti_neg_sym']) ? "" : $oncologyfollowup['sti_neg_sym'])."\n&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>QOL:</strong> \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>High:</strong> ".(empty($oncologyfollowup['sti_high_qol']) ? "" : $oncologyfollowup['sti_high_qol'])."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Average:</strong> ".(empty($oncologyfollowup['sti_avg_qol']) ? "" : $oncologyfollowup['sti_avg_qol'])."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Low:</strong> ".(empty($oncologyfollowup['sti_low_qol']) ? "" : $oncologyfollowup['sti_low_qol'])."\n \n";

            if(!empty($oncologyfollowup['chemo_threatening']) || !empty($oncologyfollowup['chemo_severe']) || !empty($oncologyfollowup['chemo_moderate']) || !empty( $oncologyfollowup['chemo_mild']) || !empty($oncologyfollowup['chemo_none'])){            
            
                $section_text .= "<strong>CIPN:</strong> \n&nbsp;&nbsp;&nbsp;";
                $section_text .= "<strong>Grade 4:</strong> ".(empty($oncologyfollowup['chemo_threatening']) ? "" : $oncologyfollowup['chemo_threatening'])."\n&nbsp;&nbsp;&nbsp;";
                $section_text .= "<strong>Grade 3:</strong> ".(empty($oncologyfollowup['chemo_severe']) ? "" : $oncologyfollowup['chemo_severe'])."\n&nbsp;&nbsp;&nbsp;";
                $section_text .= "<strong>Grade 2:</strong> ".(empty($oncologyfollowup['chemo_moderate']) ? "" : $oncologyfollowup['chemo_moderate'])."\n&nbsp;&nbsp;&nbsp;";
                $section_text .= "<strong>Grade 1:</strong> ".(empty($oncologyfollowup['chemo_mild']) ? "" : $oncologyfollowup['chemo_mild'])."\n&nbsp;&nbsp;&nbsp;";
                $section_text .= "<strong>Grade 0:</strong> ".(empty($oncologyfollowup['chemo_none']) ? "" : $oncologyfollowup['chemo_none'])."\n \n";
            }
            $section_text .= "<strong>MEDS:</strong> ".(empty($meds) ? "none provided" : $meds)." \n";
            $section_text .= "<strong>Treatment Hx:</strong> ".(empty($oncologyfollowup['treatment_hx']) ? "none provided" : $oncologyfollowup['treatment_hx'])." \n";
            $section_text .= "<strong>Preventative Health:</strong> ".(empty($oncologyfollowup['preventative_health']) ? "none provided" : $oncologyfollowup['preventative_health'])." \n";
        
    }

    // Hospital er detail subject and reason
if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 22){

    $hospital_er_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->hospital_er_detail), SEC_KEY));
    //pr($hospital_er_detail); die;
    $reason_for_visit_section = empty($hospital_er_detail[516]) ? "" : "f/u ".($hospital_er_detail[516] == "Hospital stay (inpatient)" ? "hospital dx" : "ed visit") ;
    $subjective_section = h(ucfirst($login_user->first_name)).' is a '.$age.' y.o.'.($login_user->gender == 1 ? ' MALE' : ' FEMALE')." here for f/u from ";
    if($hospital_er_detail[516] == "Emergency room visit only")
    {
        $subjective_section .= $hospital_er_detail[525].". ";               
        $subjective_section .= "Patient went to the ED at ".$hospital_er_detail[523].' on '.$hospital_er_detail[524].' for '.$hospital_er_detail[525].'. ';
        switch ($hospital_er_detail[527]) {
            case 'Yes':
                $subjective_section .= "Procedures were performed according to the patient".'. ';
                break;
                case 'No':
                $subjective_section .= "No procedure were performed according to the patient".'. ';
                break;
            
            default:
                
                $subjective_section .= "Patient does not recall if any procedures were performed".'. ';
                break;
        }
        switch ($hospital_er_detail[526]) {
            case 'Yes':
                $subjective_section .= "Lab tests were performed according to the patient".'. ';
                break;
                case 'No':
                $subjective_section .= "No test were done according to the patient".'. ';
                break;
            
            default:
                
                $subjective_section .= "Patient does not recall if any tests were performed".'. ';
                break;
        }
        
    }
    else if($hospital_er_detail[516] == "Hospital stay (inpatient)")
    {   
        $subjective_section .= $hospital_er_detail[520].". ";
        $subjective_section .= "Patient was admitted to ".$hospital_er_detail[517].' on '.$hospital_er_detail[518].' for '.$hospital_er_detail[520].'. ';
        switch ($hospital_er_detail[521]) {
            case 'Yes':
                $subjective_section .= "Procedures were performed according to the patient".'. ';
                break;
                case 'No':
                $subjective_section .= "No procedure were performed according to the patient".'. ';
                break;
            
            default:
                
                $subjective_section .= "Patient does not recall if any procedures were performed".'. ';
                break;
    }
    $subjective_section .= "Patient was discharged on ".$hospital_er_detail[519].'. ';
    }
}
if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 23){

     if(!empty($healthscreening_uremia_negative_ROS)){     
     $uremia = ''; 
     $volume = '';  

                $uremia = "Uremia ROS is negative. Uremia ROS is significant for ".(implode(", ", $healthscreening_uremia_negative_ROS)).".";
            }
            if(!empty($healthscreening_volume_negative_ROS)){        

                $volume = "Volume overload ROS is negative. Volume overload is significant for ".(implode(", ", $healthscreening_volume_negative_ROS)).".";
            }
            if(!empty($uremia)){
               $section_text .= "<strong>Summary:</strong> ".$uremia." \n";
            } 
            if(!empty($volume))
            {
               $section_text .= $volume." \n\n";
            }    
}
// end
// Hospital ER Note Detail
    if($user_detail->specialization_id == 1 && ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 22 ) || ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 22 && $user_detail->chief_compliant_userdetail->hospital_er_detail))
    {
        // $hospital_er_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->hospital_er_detail), SEC_KEY));
        //pr($hospital_er_detail); die;
        $section_text .= "<strong>REASON FOR VISIT:</strong> ".(empty($reason_for_visit_section) ? "none provided" : $reason_for_visit_section)." \n";
        $section_text .= "<strong>SUBJECTIVE:</strong> ".(empty($subjective_section) ? "none provided" : $subjective_section)." \n";

    }
    // ObGyn Dysurea module
    if(in_array($user_detail->specialization_id,[1,2]) && ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 1 )){

      $coming_in_for = strtolower(trim($user_detail->chief_compliant_userdetail->current_step_id->step_name)) ;
        if(!empty($tmp->is_curently_pregnant))

        $curr_preg_info =   ($tmp->is_curently_pregnant == 1 ? 'currently pregnant ' : 'not currently pregnant ');

        $hpi = h(ucfirst($login_user->first_name)).' is a '.(!empty($curr_preg_info) && $login_user->gender == 0 ? $curr_preg_info : '').$age.' y.o.'.($login_user->gender == 1 ? ' MALE' : ' FEMALE');

        if(stripos($coming_in_for, 'symptom') !== false){  // if the person is coming in for symptom complaint

        $cc = strtolower($cc);

            $hpi .= ' with complaints of '.$cc.' for '.h($user_detail->chief_compliant_userdetail->compliant_length).'.' ;

        }
        //pr($temp_obgyn_question = $user_detail->chief_compliant_userdetail->chief_compliant_details[116]); die;
        if(isset($user_detail->chief_compliant_userdetail->chief_compliant_details[116]))
            {
                $temp_obgyn_question = $user_detail->chief_compliant_userdetail->chief_compliant_details[116];

                foreach ($temp_obgyn_question as $cc_key => $cc_value)
                {
                        if(in_array($cc_value['question_id'], [182])){
                            if($cc_value['answer'] == "Yes") {
                                    $hpi .= ($login_user->gender == 1 ? ' He' : ' She')." is sexually active with "; 
                            }
                            else
                            {
                                    $hpi .= ($login_user->gender == 1 ? ' He' : ' She')." is not sexually active.";
                            }

                              
                        }
                        if(in_array($cc_value['question_id'], [183])){
                            if(!empty($cc_value['answer'])) {
                            
                                    $hpi .= $cc_value['answer']." sexual partner(s) in 2 month and";
                                }
                              
                        }
                        if(in_array($cc_value['question_id'], [184])){
                            if($cc_value['answer'] == "No") {
                                    $hpi .= " does not use condemns.";
                            }
                              
                        }
                        if(in_array($cc_value['question_id'], [185])){
                                if($cc_value['answer'] == "Always")
                                { 
                                $hpi .= " uses condemns consistently.";
                                }
                                elseif($cc_value['answer'] == "Sometimes")
                                {
                                    $hpi .= " uses condemns inconsistently.";
                                }
                            }

                }

            }
            // For Associated symptomps
            $positive_python_symp = '';
            $negative_python_symp = '';
            $positive_python_symp_arr = array();
            $negative_python_symp_arr = array();

            if(!empty($user_detail->chief_compliant_userdetail->python_file_option_3rd_tab))
            {
                $python_symptom_question = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->python_file_option_3rd_tab), SEC_KEY)));
                if(!empty($python_file_option_3rd_tab[1]))
                {
                    foreach ($python_file_option_3rd_tab[1] as $key => $value) {
                        $positive_python_symp_arr[] = $value['technical'];
                    }
                    $positive_python_symp = implode(', ', $positive_python_symp_arr);
                    $hpi .= " Associated symptoms include ".$positive_python_symp.'.';
                }
                if(!empty($python_file_option_3rd_tab[0]))
                {
                    foreach ($python_file_option_3rd_tab[0] as $key => $value) {
                        $negative_python_symp_arr[]= $value['technical'];
                    }
                    $negative_python_symp = implode(', ', $negative_python_symp_arr);
                    $hpi .= " Denies ".$negative_python_symp.'.';
                    
                }
            }
            // End associated symptoms

    }
    // End
    // start psychiatric module
    $pph = '';
    $pos_pph = '';
    $neg_pph = '';
    $neg_followup_hpi = array();
    $pos_followup_hpi = array();
     if(!empty($user_detail->chief_compliant_userdetail->chief_complaint_psychiatry) && in_array($user_detail->chief_compliant_userdetail->current_step_id['id'],[26, 27]))
    {
        $psychiatric_hist = Array("ADD/ADHD","Depression","Chronic pain","Bipolar","Anxiety Problems","PTSD");
        foreach($user_detail->chief_compliant_userdetail->chief_complaint_psychiatry as $key => $value)
        {
            switch ($value['question_id']) {
                case 612:
                            $singlelevel_ans = array();
                            $singlelevel_ans = $value['answer'];
                            if(in_array('Other',$value['answer']))
                            {
                                $singlelevel_ans = array_diff($singlelevel_ans,['Other']);
                            }
                            if(!in_array('None', $value['answer']))
                            {
                                $pph .= "Positive ".implode(', ', $singlelevel_ans);
                                $pos_pph .= (!empty($singlelevel_ans) ? implode(', ', $singlelevel_ans):'');
                            }
                            if(in_array('None',$value['answer']))
                            {
                                $singlelevel_ans = array_diff($singlelevel_ans,['Other','None']);
                            }
                            $neg_pph .= ($value['answer'] ? (!empty(array_diff($psychiatric_hist,$singlelevel_ans)) ? implode(', ', array_diff($psychiatric_hist,$singlelevel_ans)):'') :'');
                    break;
                case 696:                        
                        if($value['answer'] == "Yes")
                        {
                            $pos_followup_hpi[] = "psych hospitalization";
                        }else
                        {
                            $neg_followup_hpi[] = "psych hospitalization";
                        }
                        break;
                case 697:                        
                        if($value['answer'] == "Yes")
                        {
                            $pos_followup_hpi[] = "SI";
                        }else
                        {
                            $neg_followup_hpi[] = "SI";
                        }
                        break;
                case 698:                        
                        if($value['answer'] == "Yes")
                        {
                            $pos_followup_hpi[] = "HI";
                        }else
                        {
                            $neg_followup_hpi[] = "HI";
                        }
                        break;
                case 699:                        
                        if($value['answer'] == "Yes")
                        {
                            $pos_followup_hpi[] = "hallucinations";
                        }else
                        {
                            $neg_followup_hpi[] = "hallucinations";
                        }
                        break;
                        
                default:
                    // code...
                    break;
            }
        }
        $hpi .= $pos_followup_hpi ? " History positive for ".$this->natural_word_join($pos_followup_hpi).". " :'';
        $hpi .= $neg_followup_hpi ? "Denies ".$this->natural_word_join($neg_followup_hpi).". ":'';
    }
    $social = '';
    $idu = '';
    $pos_idu = '';
    $neg_idu = '';
    $past_idu = '';
    $past_pos_idu = '';
    $past_neg_idu = '';
    $mari_edu = '';
     if(!empty($user_detail->chief_compliant_userdetail->cancer_medical_detail) && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 26)
    {
        // pr($user_detail->chief_compliant_userdetail->cancer_medical_detail);die;
        foreach($user_detail->chief_compliant_userdetail->cancer_medical_detail as $key => $value)
        {
            switch ($value['question_id']) {
                case 613:
                    $pph .= ($pos_pph ? " and ":" ").$value['answer'];
                    $pos_pph .= ($pos_pph ? " and ":" ").$value['answer'];
                    break;
                case 616:
                    $pph .= (!empty($pph) ? '. ':'').($value['answer'] == "No" ? "Denies psychiatric input hx." :'');
                    break;
                case 617:
                    $pph .= ($login_user->gender == 0 ? 'She':"He")." has ".$value['answer']." time(s) ever stayed in a psychiatric hospital. ";
                    break;   
                case 683:
                    $pmh .= !empty($pmh) ? ', '.strtolower(implode(', ', $value['answer'])):strtolower(implode(', ', $value['answer']));
                    break;  
                case 684:
                    $pmh .= !empty($pmh) ? ' and '.$value['answer']:$value['answer'];
                case 618:
                    $social .= $value['answer'] == "Yes" ? "Positive currently smoking. " : "Denies currently smoking. ";
                    break;
                case 619:
                    $social .= $value['answer'] == "Yes" ? "Positive currently stopped smoking. " : "Denies currently stopped smoking. ";
                    break; 
                case 681:
                    $social .= $value['answer'] == "Yes" ? "Positive currently drink alcohol. " : "Denies currently drink alcohol. ";
                    break;  
                case 682:
                    $social .= $value['answer'] == "Yes" ? "Positive drink alcohol in the past. " : "Denies drink alcohol in the past. ";
                    break; 
                case 620:
                        $singlelevel_ans = array();
                            $singlelevel_ans = $value['answer'];
                            if(in_array('Other',$value['answer']))
                            {
                                $singlelevel_ans = array_diff($singlelevel_ans,['Other']);
                            }
                            if(!in_array('None', $value['answer']))
                            {
                                $idu .= implode(', ', $singlelevel_ans);
                            }
                            if(in_array('None', $value['answer']))
                            {
                                $neg_idu .= "Denies current IDU. ";
                            }
                    break;
                case 679:
                    $idu .= ($idu ? " and ":" ").$value['answer'];
                    break;
                case 621:
                        $singlelevel_ans = array();
                            $singlelevel_ans = $value['answer'];
                            if(in_array('Other',$value['answer']))
                            {
                                $singlelevel_ans = array_diff($singlelevel_ans,['Other']);
                            }
                            if(!in_array('None', $value['answer']))
                            {
                                $past_idu .= implode(', ', $singlelevel_ans);
                            }
                            if(in_array('None', $value['answer']))
                            {
                                $past_neg_idu .= "Denies past IDU. ";
                            }
                    break;
                case 680:
                    $past_idu .= ($past_idu ? " and ":" ").$value['answer'];
                    break; 
                case 622:
                    $mari_edu .= ($login_user->gender == 0 ? 'She':"He"). ' is '.strtolower($value['answer']).'. ';
                    break;
                case 623:
                    $mari_edu .= ($login_user->gender == 0 ? 'She':"He").$value['answer'] == "No" ? " hasn't children. ": '';
                    break;    
                case 624:
                    $mari_edu .= ($login_user->gender == 0 ? 'She':"He")." has ".$value['answer']." children. ";
                    break; 
                case 625:
                    $mari_edu .= "Highest grade level passed was ".$value['answer'].", ";
                    break;
                case 626:
                    $question_626 = array(
                          "1" => "Mostly A's",
                          "2" => "Mostly B's",
                          "3" => "Mostly C's",
                          "4" => "Mostly D's",
                          "5" => "Mostly F's",
                          );
                    $mari_edu .= "grades were ".$question_626[$value['answer']].", ";
                    break; 
                case 627:
                    $mari_edu .= $value['answer'] == "No" ? "denies special education. ":"special education. "; 
                    break;
                case 628:                           
                        if(in_array("None", $value['answer']))
                        {
                            $mari_edu .= "Denies legal history. ";
                        }
                        else
                        {
                            $array_ans = array_diff($value['answer'],['DWI']);
                            if(!empty($array_ans))
                            {
                                $mari_edu .= ($login_user->gender == 0 ? 'She':"He")." has ever had or been to ".$this->natural_word_join($array_ans).'. ';
                            }
                        }
                        break;
                case 629:
                    $mari_edu .= ($login_user->gender == 0 ? 'She':"He")." has ever had or been to ".($value['answer'] != '4+' ? $value['answer']:'4 or more')." time(s) DWI. ";
                    // $mari_edu .= str_replace('DWI',(($value['answer'] == "4+" ? " 4 or more " : $value['answer'])." DWI "));
                    break;
                case 631:
                    $mari_edu .= $value['answer'] == "No" ? "Denies physical abuse hx. " : "Positive physical abuse hx. ";
                    break;
                case 632:
                    $mari_edu .= $value['answer'] == "No" ? "Denies sexual abuse hx. " : "Positive sexual abuse hx. ";
                    break;
                case 633:
                    $mari_edu .= in_array("None (civillian)",$value['answer']) ? "No military hx. " : "";
                    if(in_array("Reserves",$value['answer']))
                    {
                        $mari_edu .= "Positive military personnel. ";
                    }
                    break;
                case 634:
                    $mari_edu .= $value['answer'] == "No" ? "Active duty : never deployed. " : "Active duty : with deployments, ";
                    break;
                case 635:
                    $mari_edu .= $value['answer'] == "No" ? "no combat. " : "combat exposure";
                    break;
                case 636:
                    $mari_edu .= $value['answer'] == "No" ? ", denies flashbacks. " : ", flashbacks. ";
                    break;
                case 637:
                    $mari_edu .= $value['answer'] == "No" ? "Veteran : never deployed. " : "Veteran : with deployments, ";
                    break;
                case 638:
                    $mari_edu .= $value['answer'] == "No" ? "no combat. " : "combat exposure";
                    break;
                case 695:
                    $mari_edu .= $value['answer'] == "No" ? ", denies flashbacks, " : ", flashbacks. ";
                    break;
                case 639:
                    $discharge_status = Array(1 => "Honorable discharge", 2 => "Bad conduct discharge", 3 => "Dishonorable discharge",4 => "Separation (entry level medical)");
                        
                    $mari_edu .= strtolower($discharge_status[$value['answer']]).". ";
                    break;
                default:
                    // code...
                    break;
            }
        }
    }
    $pos_idu .= (!empty($idu) ? ($login_user->gender == 0 ? 'She':"He")." has used following current IDU street drugs ".$idu.' in the past 30 days. ' :'');
    $past_pos_idu .= (!empty($past_idu) ? ($login_user->gender == 0 ? 'She':"He")." has past IDU ever used of these ".$past_idu.'. ' :'');
    $social .= $pos_idu.$neg_idu.$past_pos_idu.$past_neg_idu.$mari_edu;

    $hpi .= !empty($pos_pph) ? ($hpi ? ' ':'')."History is positive for ".$pos_pph:'';
    $hpi .= !empty($neg_pph) ? ($hpi ? '. ':'')."History is negative for ".$neg_pph.'.':'';
    if(!empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3']) && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 26)
    {
        $pos_dementia_screnning = "";
        $neg_dementia_screnning = "";
        $pos_m3_dementia_summary ="";
        $neg_m3_dementia_summary = "";
        foreach($user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3'] as $key => $value)
        {
            if($value['answer'] == "Yes, A change")
            {
                $pos_m3_dementia_summary = $this->m3_dementia_summary($value['question_id']);
                $pos_dementia_screnning .= ($pos_dementia_screnning ? ", ".$pos_m3_dementia_summary : $pos_m3_dementia_summary);
            }else if($value['answer'] == "No, No change")
            {
                $neg_m3_dementia_summary = $this->m3_dementia_summary($value['question_id']);
                $neg_dementia_screnning .= ($neg_dementia_screnning ? ", ".$neg_m3_dementia_summary : $neg_m3_dementia_summary);
            }
        }

        if(!empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3'])){            
            $hpi .= (empty($pos_dementia_screnning) ? "" : " Patient-administered dementia screen is positive for changes in ".$pos_dementia_screnning.'.');
            $hpi .= (empty($neg_dementia_screnning) ? "" : " Patient-administered dementia screen is negative for changes in ".$neg_dementia_screnning.'.');

        }
    }
    // end psychiatric module
    // End Hospital ER Note detail
        if($user_detail->specialization_id == 6 && ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 11 ) || ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 12 && $user_detail->chief_compliant_userdetail->follow_up_step_id == 11)){



        $section_text .= "<strong>REASON FOR VISIT:</strong> ".(empty($procudure_name) && empty($procedure_date) ? "none provided" : $procudure_name." day ".$procudure_since_date)." \n  \n";



         $section_text .= "<strong>SUBJECTIVE:</strong> ".(empty($subjective) ? "none provided" : $subjective)." \n  \n";

    }
    else{
        if(!in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [4,16,17,18,19,20,21,22])){            
            $section_text .= "<strong>HPI:</strong> ".(empty($hpi) ? "none provided" : $hpi)." \n  \n";
        }
    }
    $marketing = "";
    $ques_ans_706_707 = "";
    $mpoa = array();
    // Internal medication ACPSTATUS of chief complaint
    if(!empty($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor) && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 25)
    {
        // pr($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor);die;
        $advncd_dir = "";
        foreach($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor as $key => $value)
        {
            switch ($value['question_id']) {
                case 559:
                    $advncd_dir .= ($value['answer'] == "No" ? "" : "Patient attests to completing the ACP in the past.");
                    break;
                case 560:
                    $advncd_dir .= ($value['answer'] == "No" ? "Declined ACP" : "Requested ACP");
                    break;
                case 704:
                    $marketing .= $this->natural_word_join($value['answer']);
                    break;
                case 705:
                    $marketing .= !empty($marketing) ? " and ".$value['answer'] : $value['answer'];
                    break;
                case 706:
                    $ques_ans_706_707 .= $value['answer'] ? ucfirst($value['answer']) : "";
                    break;
                case 707:
                    $ques_ans_706_707 .= $value['answer'] ? " ".ucfirst($value['answer']) : "";
                    break;
                case 708:
                    $mpoa[] = $ques_ans_706_707;
                    // pr($value['answer']);die;
                    $mpoa_rel = array_diff($value['answer'],['Other']);
                    // pr($mpoa_rel);die;
                    $mpoa = array_merge($mpoa,$mpoa_rel);
                    break;
                case 709:
                    $mpoa[] = $value['answer'] ? ucfirst($value['answer']):'';
                    break;
                default:
                    // code...
                    break;
            }
        }
        if(!in_array($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor, [559,560])){            
            $section_text .= "<strong>Advanced Directives:</strong> ".(empty($advncd_dir) ? "none provided" : $advncd_dir)." \n  \n";
            $section_text .= "<strong>MPOA:</strong> ".(empty($mpoa) ? "none provided" : $this->natural_word_join($mpoa))." \n  \n";
        }
        $section_text .= "<strong>Marketing:</strong> ".(empty($marketing) ? "none provided" : $marketing)." \n  \n";
    }
    // end ACPSTSTUS

    //set the chronic pain assessment

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 1 && !empty($chronic_pain_assessment_detail_layman)){
   // pr($chronic_pain_assessment_detail_layman);die;

        $section_text .= "<strong>Chronic Pain Hx & Assessment:</strong>\n ";

        $section_text .= '<strong>Severity: </strong>'.$chronic_pain_assessment_detail_layman['sevrity'].'.'."\n";

        $section_text .= '<strong> Comorbidities: </strong>'.$chronic_pain_assessment_detail_layman['comorbidities'].'.'."\n ";

        $section_text .= '<strong>Current Tx: </strong>'.$chronic_pain_assessment_detail_layman['currentTx']."\n";

        $section_text .= '<strong>Past Tx: </strong>'.$chronic_pain_assessment_detail_layman['pastTx'].'.'."\n"; 

        $section_text .= '<strong>Physical/Psychosocial fx: </strong>'.$chronic_pain_assessment_detail_layman['physicalPhychological']."\n";                

        $section_text .= '<strong>Opioid Overdose Risks: </strong>'.$chronic_pain_assessment_detail_layman['opoidOverdoseRisk'].'.'."\n ";

        $section_text .= '<strong>Opioid Risk Tool (ORT) score: </strong>'.$chronic_pain_assessment_detail_layman['ortTool'].', '.$chronic_pain_assessment_detail_layman['ortIndication'].'.'."\n\n";

}


    //set the covid section and show when covid tab is shown

    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 1 && !empty($covid_detail_layman)){



        $section_text .= "<strong>COVID-19 Screening Tool:</strong>\n ";

        $dom_cluster_covid = '';

        if(!empty($covid_detail_layman['positive_sym'])){



            $dom_cluster_covid .= 'Significant for '.$covid_detail_layman['positive_sym'].'. ';

        }



        if(!empty($covid_detail_layman['negative_sym'])){



            $dom_cluster_covid .= 'Denies '.$covid_detail_layman['negative_sym'].'. ';

        }



        $comorbidities_covid = '';

        $temp_comob = array();

        if(!empty($covid_detail_layman['positive_cond'])){



            $comorbidities_covid .= 'Significant for '.$covid_detail_layman['positive_cond'].'. ';

            $temp_comob = explode(", ",$covid_detail_layman['positive_cond']);

        }



        if(!empty($covid_detail_layman['negative_cond'])){



            $comorbidities_covid .= 'Denies '.$covid_detail_layman['negative_cond'].'. ';

        }



        $covid_exposure_risk = '';

        if(empty($covid_detail_layman['positive_sym']) && $covid_screening == 0){



            $covid_exposure_risk = 'Low';

        }

        elseif(!empty($covid_detail_layman['positive_sym']) || $covid_screening == 1)

        {

            $covid_exposure_risk = 'High';

        }



        $covid_mortality_risk = '';



        if($age < 60 && count($temp_comob) < 1 && $covid_detail_layman['is_user_current_smoke'] == 'No'){



            $covid_mortality_risk = 'Low';

        }

        elseif(count($temp_comob) < 1 && (($age >= 60 && $age < 80) || ($age < 60 && $covid_detail_layman['is_user_current_smoke'] == 'Yes')) ){



            $covid_mortality_risk = 'Moderate';

        }

        elseif((count($temp_comob) >= 1 || $covid_detail_layman['is_user_current_smoke'] == 'Yes') && $age >= 80){



            $covid_mortality_risk = 'Very High';

        }

        elseif(count($temp_comob) >= 1 || $age >= 80 || ($age >= 60 && $age < 80 && $covid_detail_layman['is_user_current_smoke'] == 'Yes')){



            $covid_mortality_risk = 'High';

        }



        $section_text .= "<strong>Exposure Risk:</strong> ".$covid_exposure_risk."\n ";

        //$section_text .= "<strong>Mortality Risk:</strong> \n ";

        $section_text .= "<strong>Mortality Risk:</strong> ".$covid_mortality_risk."\n ";

        $section_text .= "<strong>Domestic Cluster Exposure:</strong> ".(empty($dom_cluster_covid) ? "none provided" : $dom_cluster_covid)."\n ";

        $section_text .= "<strong>M&M Comorbidities:</strong> ".(empty($comorbidities_covid) ? "none provided" : $comorbidities_covid)."\n ";
        $section_text .= "<strong>PHQ-9:</strong> ".(empty($phq_9_layman) ? "none provided" : $phq_9_layman)."\n \n";
    }

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19){

    $cancer_hpi = "This is a ".$age." y.o. ".($login_user->gender == 0 ? "female" : 'male')." ".$cancer_layman_detail['hpi'];
    $cancer_hpi = trim($cancer_hpi,' ');
    $section_text .= "<strong>HPI:</strong> ".(empty($cancer_hpi) ? "" : $cancer_hpi)." \n \n";

    

        $section_text .= "<strong>Assessments:</strong> \n ";
        $section_text .= "<strong>SIT:</strong> \n&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>Symptoms:</strong> \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>Severe:</strong> ".(empty($cancer_layman_detail['sti_severe_sym']) ? "" : $cancer_layman_detail['sti_severe_sym'])."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>Moderate:</strong> ".(empty($cancer_layman_detail['sti_moderate_sym']) ? "" : $cancer_layman_detail['sti_moderate_sym'])."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>Mild:</strong> ".(empty($cancer_layman_detail['sti_mild_sym']) ? "" : $cancer_layman_detail['sti_mild_sym'])."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>Negative:</strong> ".(empty($cancer_layman_detail['sti_neg_sym']) ? "" : $cancer_layman_detail['sti_neg_sym'])."\n&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>QOL:</strong> \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>High:</strong> ".(empty($cancer_layman_detail['sti_high_qol']) ? "" : $cancer_layman_detail['sti_high_qol'])."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>Average:</strong> ".(empty($cancer_layman_detail['sti_avg_qol']) ? "" : $cancer_layman_detail['sti_avg_qol'])."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>Low:</strong> ".(empty($cancer_layman_detail['sti_low_qol']) ? "" : $cancer_layman_detail['sti_low_qol'])."\n ";

        if(!empty($cancer_layman_detail['chemo_threatening']) || !empty($cancer_layman_detail['chemo_severe']) || !empty($cancer_layman_detail['chemo_moderate']) || !empty( $cancer_layman_detail['chemo_mild']) || !empty($cancer_layman_detail['chemo_none'])){

            $section_text .= "<strong>CIPN:</strong> \n&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Grade 4:</strong> ".(empty($cancer_layman_detail['chemo_threatening']) ? "" : $cancer_layman_detail['chemo_threatening'])."\n&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Grade 3:</strong> ".(empty($cancer_layman_detail['chemo_severe']) ? "" : $cancer_layman_detail['chemo_severe'])."\n&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Grade 2:</strong> ".(empty($cancer_layman_detail['chemo_moderate']) ? "" : $cancer_layman_detail['chemo_moderate'])."\n&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Grade 1:</strong> ".(empty($cancer_layman_detail['chemo_mild']) ? "" : $cancer_layman_detail['chemo_mild'])."\n&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Grade 0:</strong> ".(empty($cancer_layman_detail['chemo_none']) ? "" : $cancer_layman_detail['chemo_none'])."\n \n";
        }
}


//not for covid module
if( $user_detail->chief_compliant_userdetail->current_step_id['id'] != 17)
{

    // female related field not present in orthopedics and orthopedics spine

    if($login_user->gender == 0 && $user_detail->specialization_id != 3 && $user_detail->specialization_id != 4 && $user_detail->specialization_id != 7 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 18) { // only for female and not for orthopedic module

        // pr($lmp);

    // $section_text .= "#GYNHX: \n ".(empty($lmp) ? "none provided" : $lmp)." \n  <br />";

    // $section_text .= "#Paps: \n ".(empty($paps) ? "none provided" : $paps)." \n  <br />";
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] != 19 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 21){

        $section_text .= "<strong>GYNHX:</strong> ".(empty($lmp) ? "none provided" : $lmp)." \n  \n";
    }

    if(!in_array($user_detail->chief_compliant_userdetail->current_step_id['id'],[19,21])){
    $section_text .= "<strong>Paps:</strong> ".(empty($paps) ? "none provided" : $paps)." \n  \n";
    }

    }

    if($user_detail->specialization_id == 2) {

    $section_text .= "<strong>STI:</strong> ".(empty($sti) ? "none provided" : $sti)." \n  \n";

    }

    if($login_user->gender == 0 && $user_detail->specialization_id != 3 && $user_detail->specialization_id != 4 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 18)
    {
        if(!in_array($user_detail->chief_compliant_userdetail->current_step_id['id'],[19,21])){

        $section_text .= "<strong>Breast:</strong> ".(empty($breast) ? "none provided" : $breast)." \n  \n";
        $section_text .= "<strong>BCM:</strong> ".(empty($bcm) ? "none provided" : $bcm)." \n  \n";

       // only for female and not for orthopedic module

        // $section_text .= "#OBHX: \n ";

          $section_text .= "<strong>OBHX:</strong> ";

          if(!empty($prev_birth_data)){

              foreach ($prev_birth_data as $key => $value) {

                $section_text .= $value." \n ";

              }

            $section_text .= "  \n";

          } else {

                $section_text .= "none provided \n  \n" ;

          }
        }

    }
}
    if(isset($cronic_subjective_text_detail['med_layman'])){

        $meds = (!empty($cronic_subjective_text_detail['med_layman']) ? $cronic_subjective_text_detail['med_layman'].', ': '').$meds;
        $meds = rtrim($meds,', ');
    }

  //

    //$section_text .= "<strong>Preventative Health:</strong> ".(empty($oncologyfollowup['preventative_health']) ? "none provided" : $oncologyfollowup['preventative_health'])." \n \n";
    // pr($meds); die;
    if(in_array($user_detail->specialization_id,[1,2]) && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 1)
    {
        $section_text .= "<strong>MEDS:</strong> ".(empty($meds) ? "none provided" : $meds)." \n  \n";
    }
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19)
    {
        $section_text .= "<strong>MEDS:</strong> ".(empty($meds) ? "none provided" : $meds)." \n  \n";
        $section_text .= "<strong>Treatment Hx:</strong> ".(empty($cancer_layman_detail['treatment_hx']) ? "none provided" : $cancer_layman_detail['treatment_hx'])." \n  \n";
    }

    /*if(isset($cancer_layman_detail['pmh']) && !empty($cancer_layman_detail['pmh'])){

        $pmh .= ", ".$cancer_layman_detail['pmh'];
    }*/

    $pmh = trim($pmh,', ');
    // ****
    $negpmh = '';
    $domInter_sh = '';
    if($user_detail->chief_compliant_userdetail->current_step_id['id']  == 19)
    {
        if(!empty($user_detail->chief_compliant_userdetail->cancer_medical_detail))
        {
            foreach ($user_detail->chief_compliant_userdetail->cancer_medical_detail as $key => $value) {
                //pr($value); die;
               if(in_array($key, [528,529,530,531,532,533,534,535,536,537]) && $value['answer'] == "No")  
               {
                    $negpmh .= ($negpmh ? ", " :'').$value['question'];
               }
            }
            // SH TYpe Question Note
            foreach ($user_detail->chief_compliant_userdetail->cancer_medical_detail as $key => $value) {
               if(in_array($key, [538,539,540,541,542,543]))  
               {    
                    switch ($key) {
                            case 538:
                            $domInter_sh .= ($value['answer'] == "Yes" ? "Significant for recent domestic travel." : "Denies recent domestic travel.");
                            break;
                            case 539:
                            $domInter_sh .= $value['answer'] == "Yes" ? " Significant for recent international travel" : " Denies recent international travel.";

                            break;
                            case 540:
                            $domInter_sh .= $value['answer'] == "Yes" ? " Zika" : "";
                            $is_int_tra = $value['answer'] == "Yes" ? 1:'';
                            break;
                            case 541:
                            $domInter_sh .= ($value['answer'] == "Yes" &&  $is_int_tra == 1 ? ", Ebola" :($value['answer'] == "No" ? '':' Ebola'));
                            $is_int_tra = $value['answer'] == "Yes" ? 2:'';
                            break;
                            case 542:
                            $domInter_sh .= ($value['answer'] == "Yes" &&  $is_int_tra == 2) ? ". Contact with lab confirmed Ebola in past 30 days" : ($value['answer'] == "No" ? ".  Denies contact with lab confirmed Ebola in past 30 days" :'');
                            break;
                            case 543:
                            $domInter_sh .= $value['answer'] == "Yes" ? ". Sexual activity with international residents in past 6 months." :". Denies sexual activity with international residents in past 6 months.";
                            break;
                        
                        default:
                            break;
                    }
                    
               }
            }
            // End SH TYpe Question Note
        }
      
    }
    // Internal medicine module nutrition 
    $pos_int_nutri = "";
    $neg_int_nutri = "";
    if($user_detail->chief_compliant_userdetail->current_step_id['id']  == 25)
    {
        //pr($user_detail->chief_compliant_userdetail->cancer_medical_detail); die;
        if(!empty($user_detail->chief_compliant_userdetail->cancer_medical_detail))
        {
            foreach ($user_detail->chief_compliant_userdetail->cancer_medical_detail as $key => $value) {
                //pr($value); die;
               if(in_array($key, [562,563,564,565,566,567]) && $value['answer'] == "No")  
               {
                    $negpmh .= ($negpmh ? ", " :'').$value['question'];
               }
            }
            // SH TYpe Question Note
            foreach ($user_detail->chief_compliant_userdetail->cancer_medical_detail as $key => $value) {
               if(in_array($key, [562,563,564,565,566,567]))  
               {    
                    switch ($key) {
                            case 562:
                            $pos_int_nutri .= "Patient drinks ".$value['answer']." cups of water each day. ";
                            break;
                            case 563:
                            $drink_item = '';
                            //pr($singlelevel['answer']['time']);die;
                            if(!empty($value['answer']['time']))
                            { 
                              $count_item = count($value['answer']['time']);
                              $i = 1;
                              foreach($value['answer']['time'] as $k => $v)
                              {
                                $drink_item .= " ".$k." ".$v;
                                if($i < $count_item)
                                $drink_item .= ",";
                                $i++;
                              }

                            }
                            $pos_int_nutri .= ($login_user->gender == 0 ? 'She':'He')." drinks".$drink_item.". ";

                            break;
                            case 564:
                            $neg_int_nutri .= $value['answer'] == "Yes" ? "":'currently smoking';
                            break;
                            case 565:
                            $pos_int_nutri .= ($login_user->gender == 0 ? 'She':'He')." smokes ".(strtolower(implode(", ",$value['answer'])))." currently. ";
                            break;
                            case 566:
                            $neg_int_nutri .= $value['answer'] == "Yes" ? "" :(!empty($neg_int_nutri) ? ", past smoking" : 'past smoking');
                            $pos_int_nutri .= $value['answer'] == "Yes" ? (($login_user->gender == 0 ? 'She':'He')." smoked in the past. ") :'';
                            break;
                            case 567:
                            $pos_int_nutri .= ($login_user->gender == 0 ? 'She':'He')." smoked ".(strtolower(implode(", ",$value['answer'])))." in the past. ";
                            break;
                        
                        default:
                            break;
                    }
                    
               }
            }
            // End nutrition Question Note
        }
      
    }
    $nutrition = "";
    //  nutrition for internal medication module
    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [25])){

        // Add Negative PMH ONcology with Positive PMH For  19 current_step_id

        if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 25)
        {
            //pr($pmh); die;
            if(!empty($pos_int_nutri))
            {
                $nutrition .= ($pos_int_nutri ? $pos_int_nutri:'');
                $nutrition .= ($neg_int_nutri ? "Denies ".$neg_int_nutri.'.':'');
            }
        }
        // End Adding nutrition

    }
    // ****
    //  End negtaive PMH Oncology
    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [19])){

        // Add Negative PMH ONcology with Positive PMH For  19 current_step_id

        if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19)
        {
            //pr($pmh); die;
            if(!empty($negpmh))
            {
                $pmh .= ($pmh ? ". ":'')."Denies ".$negpmh.'.';
            }
            // nutrition Question Note
            if(!empty($domInter_sh))
            {
                $sh .= ($sh ? ". ":'').$domInter_sh;
            }
            // End SH TYpe Question Note
        }
        // End Adding PMH Oncology

    }
    // ****    
    // $section_text .= "<strong>Nutrition:</strong> ".(empty($nutrition) ? "none provided" : $nutrition)." \n  \n";
    $fph = array();
    if(!empty($user_detail->chief_compliant_userdetail->cancer_family_members) && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 26)
    {
        
        $familyMemberDisease = array();
        // pr($user_detail->chief_compliant_userdetail->cancer_family_members); die;
        if (!empty($user_detail->chief_compliant_userdetail->cancer_family_members) && !in_array($user_detail->chief_compliant_userdetail->cancer_family_members,[692])) {
            foreach ($user_detail->chief_compliant_userdetail->cancer_family_members as $key => $value) {

                if(isset($value['answer']) && !empty($value['answer']) && is_array($value['answer'])){

                  foreach ($value['answer'] as $fkey => $fvalue) {
                    $familyMemberDisease[$fvalue][] = $value['question'];
                  }
                }
            }
        }
        if(!empty($familyMemberDisease))
        {
            foreach ($familyMemberDisease as $fkey => $fvalue) {

                    $temp_fh = ucfirst($fkey).' - ';
                    $temp_fh .= $this->natural_word_join($fvalue);
                    $fph[] = $temp_fh;
                  }
        }
        
        
    }
    $section_text .= "<strong>FPH:</strong> ".(empty($fph) ? "none provided" : implode("\n",$fph))." \n  \n";
    $section_text .= "<strong>Social/Marital/Education/Legal/Abuse/Military:</strong> ".(empty($social) ? "none provided" : $social)." \n  \n";
    $section_text .= "<strong>PMH:</strong> ".(empty($pmh) ? "none provided" : $pmh)." \n  \n";

    if(isset($cronic_subjective_text_detail['sh_layman'])){

        $sh = $cronic_subjective_text_detail['sh_layman'].''.$sh;
        //$sh = $cronic_subjective_text_detail['sh_layman'];
        $sh = str_replace(". aerobic", ". Aerobic", $sh);
        $sh = str_replace(". patient", ". Patient", $sh);
    }

    $section_text .= "<strong>SH:</strong> ".(empty($sh) ? "none provided" : $sh)." \n \n";

    /*if(isset($cancer_layman_detail['sargical_hx']) && !empty($cancer_layman_detail['sargical_hx'])){

        $psh = !empty($cancer_layman_detail['sargical_hx']) ? $cancer_layman_detail['sargical_hx'].", ".$psh : $psh;
    }*/
    $psh = trim($psh,', ');

    if( $user_detail->chief_compliant_userdetail->current_step_id['id'] != 17)
    {
        $section_text .= "<strong>PSH:</strong> ".(empty($psh) ? "none provided" : $psh )." \n  \n";
    }

    $section_text .= "<strong>FH:</strong> ";
    //update fh for chronic conditions module
    if(isset($cronic_subjective_text_detail['fh_cond']) && !empty($cronic_subjective_text_detail['fh_cond'])){

        $family_history = array();
        //$family_relation = [1=>'F', 2=>'M', 3=>'PGM', 4=>'PGF', 5=>'MGM', 6=>'MGF', 7=>'Brother', 8=>'Sister', 9=>'Son', 10=>'Daughter'];
        $family_relation = [1=>'F', 2=>'M', 3=>'PGM', 4=>'PGF', 5=>'MGM', 6=>'MGF', 7=>'Brother', 8=>'Sister', 9=>'Son', 10=>'Daughter',11 =>"Cousin(mom's side)",12 =>"Cousin(dad's side)",13 =>"Aunt(mom's side)",14 =>"Aunt(dad's side)",15=>"Uncle(mom's side)",16 =>"Uncle(dad's side)"];
        if(!empty($login_user->family_history)){

            $family_history = unserialize((Security::decrypt(base64_decode($login_user->family_history), SEC_KEY)));
        }

        if(empty($family_history)){

            foreach ($cronic_subjective_text_detail['fh_cond'] as $key => $value) {

                if(isset($value['members']) && !empty($value['members']) && is_array($value['members'])){

                  foreach ($value['members'] as $fkey => $fvalue) {

                    $temp_fh = $fvalue.' - ';
                    $temp_fh .= $value['name'];
                    $fh[] = $temp_fh;
                  }
                }
                else{

                    $temp_fh = $value['name'];
                    $fh[] = $temp_fh;
                }
            }

        }
        else{

            $temp_chronic_fh = array_column($family_history, 'disease');

            foreach ($cronic_subjective_text_detail['fh_cond'] as $key => $value) {

                $temp_fh_cond_key = array_search($value['name'], $temp_chronic_fh);

                if($temp_fh_cond_key === false || (isset($value['members']) && $temp_fh_cond_key !== false && $value['members'] != $family_history[$temp_fh_cond_key]['name'])){

                    if(isset($value['members']) && !empty($value['members']) && is_array($value['members'])){

                      foreach ($value['members'] as $fkey => $fvalue) {

                        $temp_fh = $fvalue.' - ';
                        $temp_fh .= $value['name'];
                        $fh[] = $temp_fh;
                      }
                    }
                    else{

                        $temp_fh = $value['name'];
                        $fh[] = $temp_fh;
                    }
                }
            }
        }
        // pr($cronic_subjective_text_detail['fh_cond']);
        // pr($family_history);die;
        
    }
    

    /*if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19)
    {
        if(empty($cancer_layman_detail['fh_positive']) && empty($cancer_layman_detail['fh_negative'])){

           $section_text .= "none provided \n \n" ;
        }
        else{

            $section_text .= !empty($cancer_layman_detail['fh_positive']) ? "Significant for ".trim($cancer_layman_detail['fh_positive'],"\n ").".\n ": "";
            $section_text .= !empty($cancer_layman_detail['fh_negative']) ? "Denies ".$cancer_layman_detail['fh_negative'].".\n ": "";
            $section_text .= "\n";
        }

    }
    else{*/

    if(isset($cancer_layman_detail['fh_negative']) && !empty($cancer_layman_detail['fh_negative'])){

        $temp_fh = 'Denies '.$cancer_layman_detail['fh_negative'];
        array_push($fh, $temp_fh);
    }
        if(!empty($fh)){
          
            $i = 1;
            $count_fh = count($fh);
            foreach ($fh as $key => $value) {

                $section_text .= $value;
                if($i < $count_fh)
                {
                    $section_text .=" \n ";
                }
                $i++;

            }            
            $section_text .= "  \n";
        }
        else
        {
            $section_text .= "none provided \n \n" ;
        }
    //}

    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19)
    {
        if($login_user['gender'] == 0){


            if(!empty($women_field) && isset($women_field->age_of_first_priod) && !empty($women_field->age_of_first_priod)) {

                $temp_menarche = "Menses at ".$women_field->age_of_first_priod.". ";
                $cancer_layman_detail['gyn_hx'] = str_replace("menarche ", $temp_menarche, $cancer_layman_detail['gyn_hx']);
            }
            else{

                $cancer_layman_detail['gyn_hx'] = str_replace("menarche ", "", $cancer_layman_detail['gyn_hx']);
            }
            $section_text .= "<strong>GYN Hx:</strong> ".(empty($cancer_layman_detail['gyn_hx']) ? "none provided" : $cancer_layman_detail['gyn_hx'])." \n \n";
        }
    }

    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 21)
    {
        if($login_user['gender'] == 0){

            if(!empty($women_field) && isset($women_field->age_of_first_priod) && !empty($women_field->age_of_first_priod)) {

                $temp_menarche = "Menses at ".$women_field->age_of_first_priod.". ";
                $oncologyfollowup['gyn_hx'] = str_replace("menarche ", $temp_menarche, $oncologyfollowup['gyn_hx']);
            }
            else{


                $oncologyfollowup['gyn_hx'] = str_replace("menarche ", "", $oncologyfollowup['gyn_hx']);
            }
            $section_text .= "<strong>GYN Hx :</strong> ".(empty($oncologyfollowup['gyn_hx']) ? "none provided" : $oncologyfollowup['gyn_hx'])." \n \n";
        }
    }
    $section_text .= "<strong>PPH:</strong> ".(empty($pph) ? "none provided" : $pph)." \n \n";
    $section_text .= "<strong>ALL:</strong> ".(empty($all) ? "none provided" : $all)." \n \n";

    if($user_detail->chief_compliant_userdetail->current_step_id['id'] != 17 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 19 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 21)
    {

        $section_text .= "<strong>IMM:</strong> ".(empty($imm) ? "none provided" : $imm)." \n \n";
    }
    // psychiatric module
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 26)
    {
        $section_text .= "\n<strong>My Mood Monitor (M3):</strong> \n ";       
        $m3_deme_screen_scoring = array("Yes, A change" =>1,"No, No change" =>0,"N/A, Don't know" =>0);
        $m3_scoring = array("Not at all" =>0,"Rarely" =>0,'Sometimes'=>1,'Often'=>2,'Most of the time'=>2);
        $anxiety_whole_score = 0;
        $depression_whole_score = 0;
        $bipolar_score = 0;
        $PTSD_score = 0;
        $total_score = 0;
        $AD8_score = 0;
        $i = 1;
        $dementia_screen_ques = "";
        $anxiety_interpretation = '';   
        $depression_interpretation = '';  
        $bipolar_interpretation= '';  
        $PTSD_interpretation= '';
        $yes_a_change = '';
        $no_no_chnage = '';
        $na_dont_know = '';
         // pr($user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3']); die;
        foreach ($user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3'] as $key => $value) {
            if(in_array($value['question_id'], [647,648,649,650,651,652,653,654,655,656,657,658]))
            {
                $anxiety_whole_score = $anxiety_whole_score + $m3_scoring[$value['answer']];
            }
            if(in_array($value['question_id'], [640,641,642,643,644,645,646]))
            {
                $depression_whole_score = $depression_whole_score + $m3_scoring[$value['answer']];
            }
            if(in_array($value['question_id'], [658,659,660,661,662]))
            {
                $bipolar_score = $bipolar_score + $m3_scoring[$value['answer']];
            }
            if(in_array($value['question_id'], [652,653,654,655]))
            {
                $PTSD_score = $PTSD_score + $m3_scoring[$value['answer']];
            }
            if($value['question_id'] >= 647 && $value['question_id'] <= 670)
            {
                $total_score = $total_score + $m3_scoring[$value['answer']];
            }
            if($value['question_id'] >= 671 && $value['question_id'] <= 678)
            {
                $AD8_score = $AD8_score + $m3_deme_screen_scoring[$value['answer']];
                if($value['answer'] == "Yes, A change")
                {
                    $yes_m3_dementia_summary = $this->m3_dementia_summary($value['question_id']);
                    $yes_a_change .= $yes_a_change ? ', '.$yes_m3_dementia_summary :$yes_m3_dementia_summary;
                }
                else if($value['answer'] == "No, No change")
                {
                    $no_m3_dementia_summary = $this->m3_dementia_summary($value['question_id']);
                    $no_no_chnage .= $no_no_chnage ? ', '.$no_m3_dementia_summary :$no_m3_dementia_summary;
                }
                else if($value['answer'] == "N/A, Don't know")
                {
                    $na_m3_dementia_summary = $this->m3_dementia_summary($value['question_id']);
                    $na_dont_know .= $na_dont_know ? ', '.$na_m3_dementia_summary :$na_m3_dementia_summary;
                }
                $dementia_screen_ques .= "<strong>Q".$i++.":</strong> ".(empty($value['question']) ? "" : $value['question'])."<strong>  A:</strong> ".(!empty($value['answer']) ? $value['answer'] :"none provided")." \n ";                
            }
        }
        $anxiety_interpretation = $this->m3_score_range('anxiety',$anxiety_whole_score);
        $depression_interpretation = $this->m3_score_range('depression',$depression_whole_score);
        $bipolar_interpretation = $this->m3_score_range('bipolar',$bipolar_score);
        $PTSD_interpretation = $this->m3_score_range('PTSD',$PTSD_score);

        $section_text .= "\n<strong>Anxiety Score [M3]:</strong> ".$anxiety_whole_score." \n";   

        $section_text .= "<strong>Score out of Range [M3]:</strong> 60 \n";
        $section_text .= "<strong>Score Interpretation [M3]:</strong> ".$anxiety_interpretation." \n";


        $section_text .= "\n<strong>Depression Score [M3]:</strong> ".$depression_whole_score." \n";   

        $section_text .= "<strong>Score out of Range [M3]:</strong> 35 \n";
        $section_text .= "<strong>Score Interpretation [M3]:</strong> ".$depression_interpretation." \n";

        $section_text .= "\n<strong>Bipolar Score [M3]:</strong> ".$bipolar_score." \n";   

        $section_text .= "<strong>Score out of Range [M3]:</strong> 25 \n";
        $section_text .= "<strong>Score Interpretation [M3]:</strong> ".$bipolar_interpretation." \n";

        $section_text .= "\n<strong>PTSD Score [M3]:</strong> ".$PTSD_score." \n";   

        $section_text .= "<strong>Score out of Range [M3]:</strong> 20 \n";
        $section_text .= "<strong>Score Interpretation [M3]:</strong> ".$PTSD_interpretation." \n";

        $section_text .= "\n<strong>Total Score [M3]:</strong> ".$total_score." \n";
        $section_text .= "\n<strong>Ascertain Dementia 8 (AD8) Screening</strong> \n";
        $section_text .= "<strong>AD8 Score:</strong> ".$AD8_score." \n";        
        $section_text .= "<strong>AD8 Interpretation:</strong> ".($AD8_score <=1 ? 'Normal cognition':'Cognitive impairment is likely to be present.')." \n";
        $section_text .= "\n<strong>Summary:</strong> \n ";
        $section_text .= "<strong>Yes, A change:</strong> ".(empty($yes_a_change) ? "none provided" : $yes_a_change)." \n ";
        $section_text .= "<strong>No, No change:</strong> ".(empty($no_no_chnage) ? "none provided" : $no_no_chnage)." \n ";
        $section_text .= "<strong>N/A, Don't Know:</strong> ".(empty($na_dont_know) ? "none provided" : $na_dont_know)." \n ";
        $section_text .= "\n<strong>Submissions:</strong> \n ";
        
        $section_text .= (empty($dementia_screen_ques) ? "none provided" : $dementia_screen_ques)." \n ";
        
    }
    // end
    // Internal medication assessment note section
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 25)
    {
        // pr($user_detail->chief_compliant_userdetail->internal_general_assessment_detail);die;
        $internal_ehr_note = array();
        $section_text .= "\n<strong>Other Notes:</strong> \n ";
        
        // General Note
        foreach ($user_detail->chief_compliant_userdetail->internal_general_assessment_detail as $key => $value) {
                switch ($value['question_id']) {
                    case 568:
                    $section_text .= "<strong>Overall Energy Level:</strong> ".(empty($value['answer']) ? "none provided" : $value['answer'])." \n ";
                    $internal_ehr_note['oher_note']['general']['overall_energy_level'] = (empty($value['answer']) ? "none provided" : $value['answer']);
                        break;
                    case 607:
                        $section_text .= (!empty($value['answer']) && $value['answer'] == 'About my age' ? "<strong>Subjective Age:</strong> ".$value['answer']." \n" : "");      
                        $internal_ehr_note['oher_note']['general']['subjective_age'] = (!empty($value['answer']) && $value['answer'] == 'About my age' ? $value['answer']: "");
                        break;
                    case 569:
                        $section_text .= (!empty($value['answer']) ? "<strong>Subjective Age:</strong> ".$value['answer']." years older"." \n" : "");
                        $internal_ehr_note['oher_note']['general']['subjective_age'] = (!empty($value['answer']) ? $value['answer']." years older" : "");
                        break;
                    case 570:
                        $section_text .= (!empty($value['answer']) ? "<strong>Subjective Age:</strong> ".$value['answer']." years younger"." \n" : "");      
                        $internal_ehr_note['oher_note']['general']['subjective_age'] = (!empty($value['answer']) ? $value['answer']." years younger" : "");                  
                        break;

                    default:
                        // code...
                        break;
                }
        }        
        // TAPS-1 Note
        $scoring = array("Daily or Almost" =>1,"Daily" =>1,"Weekly" =>1,"Monthly" =>1,"Less Than Monthly" =>1,"Never" => 0);
        $taps2_scoring = array("Yes" =>1,"No" =>0);
        $summary_scale = array(571 =>"tobacco use (12 months)",572 =>"binge drinking male (12 months)",573 =>"binge drinking female (12 months)",574 =>"IDU (12 months)",575 =>"prescription drug abuse (12 months)");
        $whole_score = 0;
        $i = 1;
        $taps1_ques = "";
        $ehr_note_taps1_ques = array();
        $Daily_or_Almost = array();
        $Daily = array();
        $Weekly = array();
        $Monthly = array();
        $Less_Than_Monthly = array();
        $Never = array();
        foreach ($user_detail->chief_compliant_userdetail->internal_taps1_assessment_detail as $key => $value) {
            $whole_score = $whole_score + $scoring[$value['answer']];
            $taps1_ques .= "<strong>Q".$i++.":</strong> ".(empty($value['question']) ? "" : $value['question'])."<strong>  A:</strong> ".(!empty($value['answer']) ? $value['answer'] :"none provided")." \n ";

            $ehr_note_taps1_ques['taps1_ques']['ques'] = (empty($value['question']) ? "" : $value['question']);
            $ehr_note_taps1_ques['taps1_ques']['ans'] = (!empty($value['answer']) ? $value['answer'] :"none provided"); 

            if($value['answer'] == "Daily or Almost")
            {
                $Daily_or_Almost[] = $summary_scale[$value['question_id']];
            }
            else if($value['answer'] == "Daily")
            {
                $Daily[] = $summary_scale[$value['question_id']];
            }
            else if($value['answer'] == "Weekly")
            {
                $Weekly[] = $summary_scale[$value['question_id']];
            }
            else if($value['answer'] == "Monthly")
            {
                $Monthly[] = $summary_scale[$value['question_id']];
            }
            else if($value['answer'] == "Less Than Monthly")
            {
                $Less_Than_Monthly[] = $summary_scale[$value['question_id']];
            }
            else if($value['answer'] == "Never")
            {
                $Never[] = $summary_scale[$value['question_id']];
            }

        }
        $section_text .= "<strong>TAPS-1 Score:</strong> ".($whole_score == 1 ? $whole_score : ($whole_score > 1 ? "2+" : 0))." \n";   
        $internal_ehr_note['oher_note']['taps1_score'] = ($whole_score == 1 ? $whole_score : ($whole_score > 1 ? "2+" : 0));
        $section_text .= "<strong>Risk Category:</strong> ".($whole_score == 1 ? "Problem Use" : ($whole_score > 1 ? "Higher Risk" : "No Use Past 3 Months"))." \n";
        $internal_ehr_note['oher_note']['risk_category'] = ($whole_score == 1 ? "Problem Use" : ($whole_score > 1 ? "Higher Risk" : "No Use Past 3 Months"));
        $section_text .= "\n<strong>Summary:</strong> \n ";
        $section_text .= "<strong>Daily or Almost:</strong> ".(empty($Daily_or_Almost) ? "none provided" : implode(", ",$Daily_or_Almost))." \n ";
        $internal_ehr_note['oher_note']['summary']['daily_or_almost'] = (empty($Daily_or_Almost) ? "none provided" : implode(", ",$Daily_or_Almost));
        $section_text .= "<strong>Daily:</strong> ".(empty($Daily) ? "none provided" : implode(", ",$Daily))." \n ";
        $internal_ehr_note['oher_note']['summary']['daily'] = (empty($Daily) ? "none provided" : implode(", ",$Daily));
        $section_text .= "<strong>Weekly:</strong> ".(empty($Weekly) ? "none provided" : implode(", ",$Weekly))." \n "; 
        $internal_ehr_note['oher_note']['summary']['weekly'] = (empty($Weekly) ? "none provided" : implode(", ",$Weekly));
        $section_text .= "<strong>Monthly:</strong> ".(empty($Monthly) ? "none provided" : implode(", ",$Monthly))." \n ";
        $internal_ehr_note['oher_note']['summary']['monthly'] = (empty($Monthly) ? "none provided" : implode(", ",$Monthly));
        $section_text .= "<strong>Less Than Monthly:</strong> ".(empty($Less_Than_Monthly) ? "none provided" : implode(", ",$Less_Than_Monthly))." \n ";
        $internal_ehr_note['oher_note']['summary']['less_than_monthly'] = (empty($Less_Than_Monthly) ? "none provided" : implode(", ",$Less_Than_Monthly));
        $section_text .= "<strong>Never:</strong> ".(empty($Never) ? "none provided" : implode(", ",$Never))." \n ";
        $internal_ehr_note['oher_note']['summary']['never'] = (empty($Never) ? "none provided" : implode(", ",$Never));
        $section_text .= "\n<strong>Submissions:</strong> \n ";
        
        $section_text .= (empty($taps1_ques) ? "none provided" : $taps1_ques)." \n ";
        $internal_ehr_note['oher_note']['taps1']['submission'] = (empty($ehr_note_taps1_ques) ? "none provided" : $ehr_note_taps1_ques);

        // TAPS-2 Note
        $taps2_ques = "";
        $ehr_note_taps2_ques = array();
        $Tobacco_Score = 0;
        $Alcohol_Score = 0;
        $Cannabis_Score = 0;
        $Street_Stimulant_Score = 0;
        $Heroin_Score = 0;
        $Opioid_Score = 0;
        $Street_Stimulant_Score = 0;
        $Rx_Stimulant_Score = 0;
        $IDU_Score = 0;
        $i = 1;
        if(!empty($user_detail->chief_compliant_userdetail->internal_taps2_assessment_detail))
        {
            foreach ($user_detail->chief_compliant_userdetail->internal_taps2_assessment_detail as $key => $value) {
                $taps2_ques .= "<strong>Q".$i++.":</strong> ".(empty($value['question']) ? "" : $value['question'])."<strong>  A:</strong> ".(!empty($value['answer']) ? $value['answer'] :"none provided")." \n ";

                $ehr_note_taps2_ques['taps2_ques']['ques'] = (empty($value['question']) ? "" : $value['question']);
                $ehr_note_taps2_ques['taps2_ques']['ans'] = (!empty($value['answer']) ? $value['answer'] :"none provided");

                if(in_array($value['question_id'], [576,577,578]))
                {
                    $Tobacco_Score = $Tobacco_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }
                else if(in_array($value['question_id'], [579,580,581.582,583]))
                {
                    $Alcohol_Score = $Alcohol_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }
                else if(in_array($value['question_id'], [584,585,586]))
                {
                    $Cannabis_Score = $Cannabis_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }
                else if(in_array($value['question_id'], [587,588,589]))
                {
                    $Street_Stimulant_Score = $Street_Stimulant_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }
                else if(in_array($value['question_id'], [590,591,592]))
                {
                    $Heroin_Score = $Heroin_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }
                else if(in_array($value['question_id'], [593,594,595]))
                {
                    $Opioid_Score = $Opioid_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }
                else if(in_array($value['question_id'], [596,597,598]))
                {
                    $Street_Stimulant_Score = $Street_Stimulant_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }
                else if(in_array($value['question_id'], [599,600,601]))
                {
                    $Rx_Stimulant_Score = $Rx_Stimulant_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }
                else if(in_array($value['question_id'], [602]))
                {
                    $IDU_Score = $IDU_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }

            }
        }
        $section_text .= "\n<strong>TAPS-2 Scores:</strong> \n ";
        $section_text .= "<strong>Tobacco Score:</strong> ".($Tobacco_Score == 1 ? $Tobacco_Score : ($Tobacco_Score > 1 ? "2+" : 0))." \n ";
        $internal_ehr_note['oher_note']['taps2_score']['tobacco_score'] = ($Tobacco_Score == 1 ? $Tobacco_Score : ($Tobacco_Score > 1 ? "2+" : 0));

        $section_text .= "<strong>Alcohol Score:</strong> ".($Alcohol_Score == 1 ? $Alcohol_Score : ($Alcohol_Score > 1 ? "2+" : 0))." \n ";

        $internal_ehr_note['oher_note']['taps2_score']['alcohol_score'] = ($Alcohol_Score == 1 ? $Alcohol_Score : ($Alcohol_Score > 1 ? "2+" : 0));

        $section_text .= "<strong>Cannabis Score:</strong> ".($Cannabis_Score == 1 ? $Cannabis_Score : ($Cannabis_Score > 1 ? "2+" : 0))." \n "; 
        $internal_ehr_note['oher_note']['taps2_score']['cannabis_score'] = ($Cannabis_Score == 1 ? $Cannabis_Score : ($Cannabis_Score > 1 ? "2+" : 0));

        $section_text .= "<strong>Street Stimulant Score:</strong> ".($Street_Stimulant_Score == 1 ? $Street_Stimulant_Score : ($Street_Stimulant_Score > 1 ? "2+" : 0))." \n ";

        $internal_ehr_note['oher_note']['taps2_score']['street_stimulant_score'] = ($Street_Stimulant_Score == 1 ? $Street_Stimulant_Score : ($Street_Stimulant_Score > 1 ? "2+" : 0));

        $section_text .= "<strong>Heroin Score:</strong> ".($Heroin_Score == 1 ? $Heroin_Score : ($Heroin_Score > 1 ? "2+" : 0))." \n ";

        $internal_ehr_note['oher_note']['taps2_score']['heroin_score'] = ($Heroin_Score == 1 ? $Heroin_Score : ($Heroin_Score > 1 ? "2+" : 0));

        $section_text .= "<strong>Opioid Score:</strong> ".($Opioid_Score == 1 ? $Opioid_Score : ($Opioid_Score > 1 ? "2+" : 0))." \n ";

        $internal_ehr_note['oher_note']['taps2_score']['opioid_score'] = ($Opioid_Score == 1 ? $Opioid_Score : ($Opioid_Score > 1 ? "2+" : 0));

        // $section_text .= "<strong>Street Stimulant Score:</strong> ".($Street_Stimulant_Score == 1 ? $Street_Stimulant_Score : ($Street_Stimulant_Score > 1 ? "2+" : 0))." \n ";

        $section_text .= "<strong>Rx Stimulant Score:</strong> ".($Rx_Stimulant_Score == 1 ? $Rx_Stimulant_Score : ($Rx_Stimulant_Score > 1 ? "2+" : 0))." \n ";

        $internal_ehr_note['oher_note']['taps2_score']['rx_stimulant_score'] = ($Rx_Stimulant_Score == 1 ? $Rx_Stimulant_Score : ($Rx_Stimulant_Score > 1 ? "2+" : 0));

        $section_text .= "<strong>IDU Score:</strong> ".($IDU_Score == 1 ? $IDU_Score : ($IDU_Score > 1 ? "2+" : 0))." \n ";

        $internal_ehr_note['oher_note']['taps2_score']['idu_score'] = ($IDU_Score == 1 ? $IDU_Score : ($IDU_Score > 1 ? "2+" : 0));

        $section_text .= "\n<strong>Submissions:</strong> \n ";
        $section_text .= (empty($taps2_ques) ? "none provided" : $taps2_ques)." \n ";

        $internal_ehr_note['oher_note']['taps2']['submission'] = (empty($ehr_note_taps2_ques) ? "none provided" : $ehr_note_taps2_ques);
    }
    // End Internal medication module note
    if(!in_array($user_detail->chief_compliant_userdetail->current_step_id['id'],[26,27]))
    {
    $section_text .= "\n<strong>ROS (last 30 days):</strong> \n ";

    if($user_detail->specialization_id == 1 || $user_detail->specialization_id == 2 || $user_detail->specialization_id == 5 || $user_detail->specialization_id == 6 || $user_detail->specialization_id == 9){  // For specialization id 1,2 related health questionaire logic



       // if($user_detail->chief_compliant_userdetail->current_step_id->id == 11){

        if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 11 || $user_detail->chief_compliant_userdetail->current_step_id['id'] == 20 || ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 12 && $user_detail->chief_compliant_userdetail->follow_up_step_id == 11)){



            $q_general = rtrim($q_general,', ');

            $q_CV_RESP = rtrim($q_CV_RESP,', ');

            $q_GIGU = rtrim($q_GIGU,', ' );

            $q_THROAT = rtrim($q_THROAT,', ');



            $section_text .= "<strong>GEN:</strong> ".(empty($q_general) ? "none provided" : $q_general)." \n ";

            $section_text .= "<strong>CV/RESP:</strong> ".(empty($q_CV_RESP) ? "none provided" : $q_CV_RESP)." \n ";

            $section_text .= "<strong>GI:</strong> ".(empty($q_GIGU) ? "none provided" : $q_GIGU)." \n ";

            $section_text .= "<strong>THROAT:</strong> ".(empty($q_THROAT) ? "none provided" : $q_THROAT)." \n";

        }
        elseif($user_detail->chief_compliant_userdetail->current_step_id['id'] == 17)
        {
            $q_general = rtrim($q_general,', ');
            $q_NEURO = rtrim($q_NEURO,', ');
            $q_NEURO = str_replace("loc", "LOC", $q_NEURO);
            $q_MSK = rtrim($q_MSK,', ');
            $q_GI = rtrim($q_GI,', ');
            $q_GU = rtrim($q_GU,', ');
            $q_ENT = rtrim($q_ENT,', ');
            $q_CV = rtrim($q_CV,', ');
            $q_PSYCH = rtrim($q_PSYCH,', ');
            $q_PSYCH = str_replace("si", "SI", $q_PSYCH);
            $q_SKIN = rtrim($q_SKIN,', ');
            $q_RESP = rtrim($q_RESP,', ');

            $section_text .= "<strong>Constitutional Symptoms:</strong> ".(empty($q_general) ? "none provided" : $q_general)." \n ";
            $section_text .= "<strong>Ears, nose, throat:</strong> ".(empty($q_ENT) ? "none provided" : $q_ENT)." \n ";
            $section_text .= "<strong>Cardiovascular:</strong> ".(empty($q_CV) ? "none provided" : $q_CV)." \n ";
            $section_text .= "<strong>Respiratory:</strong> ".(empty($q_RESP) ? "none provided" : $q_RESP)." \n ";
            $section_text .= "<strong>Gastrointestinal:</strong> ".(empty($q_GI) ? "none provided" : $q_GI)." \n ";
            $section_text .= "<strong>Genitourinary:</strong> ".(empty($q_GU) ? "none provided" : $q_GU)." \n ";
            $section_text .= "<strong>Musculoskeletal:</strong> ".(empty($q_MSK) ? "none provided" : $q_MSK)." \n ";
            $section_text .= "<strong>Neurological:</strong> ".(empty($q_NEURO) ? "none provided" : $q_NEURO)." \n ";
            $section_text .= "<strong>Integumentary:</strong> ".(empty($q_SKIN) ? "none provided" : $q_SKIN)." \n ";
            $section_text .= "<strong>Psychiatric:</strong> ".(empty($q_PSYCH) ? "none provided" : $q_PSYCH)." \n\n";
        }
        elseif($user_detail->chief_compliant_userdetail->current_step_id['id'] == 18){

            $q_general = rtrim($q_general,', ');
        $q_NEURO = rtrim($q_NEURO,', ');
        $q_NEURO = str_replace("loc", "LOC", $q_NEURO);
        $q_GI = rtrim($q_GI,', ');
        $q_CV = rtrim($q_CV,', ');
        $q_PSYCH = rtrim($q_PSYCH,', ');
        $q_PSYCH = str_replace("si", "SI", $q_PSYCH);
        $q_RESP = rtrim($q_RESP,', ');
        $q_MSK = rtrim($q_MSK,', ');
        $q_SKIN = rtrim($q_SKIN,', ');
        $q_ENT = rtrim($q_ENT,', ');
        $q_EYES = rtrim($q_EYES,', ');

        if(!empty($temp_general_health_questionnaire_grp_arr)){

            if(array_key_exists("GEN", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "<strong>Constitutional Symptoms:</strong> ".(empty($q_general) ? "none provided" : $q_general)." \n ";
            }

            if(array_key_exists("GI", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "<strong>Gastrointestinal:</strong> ".(empty($q_GI) ? "none provided" : $q_GI)." \n ";
            }

            if(array_key_exists("CV", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "<strong>Cardiovascular:</strong> ".(empty($q_CV) ? "none provided" : $q_CV)." \n ";
            }

            if(array_key_exists("NEURO", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "<strong>Neurological:</strong> ".(empty($q_NEURO) ? "none provided" : $q_NEURO)." \n ";
            }

            if(array_key_exists("PSYCH", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "<strong>Psychiatric:</strong> ".(empty($q_PSYCH) ? "none provided" : $q_PSYCH)." \n ";
            }

            if(array_key_exists("RESP", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "<strong>Respiratory:</strong> ".(empty($q_RESP) ? "none provided" : $q_RESP)." \n ";
            }

            if(array_key_exists("MSK", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "<strong>Musculoskeletal:</strong> ".(empty($q_MSK) ? "none provided" : $q_MSK)." \n ";
            }

            if(array_key_exists("ENT", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "<strong>Ears, nose, throat:</strong> ".(empty($q_ENT) ? "none provided" : $q_ENT)." \n ";
            }

            if(array_key_exists("SKIN", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "<strong>Integumentary:</strong> ".(empty($q_SKIN) ? "none provided" : $q_SKIN)." \n ";
            }

            if(array_key_exists("EYES", $temp_general_health_questionnaire_grp_arr)){

                $section_text .= "<strong>EYES:</strong> ".(empty($q_EYES) ? "none provided" : $q_EYES)." \n ";
            }
        }
      }
      elseif($user_detail->chief_compliant_userdetail->current_step_id['id'] == 22){

            $q_general = rtrim($q_general,', ');

            
        // $q_GI = rtrim($q_GI,', ');
        // $q_GU = rtrim($q_GU,', ');
        $q_GIGU = rtrim($q_GIGU,', ');
        $q_CV = rtrim($q_CV,', ');
        $q_PSYCH = rtrim($q_PSYCH,', ');
        $q_PSYCH = str_replace("si", "SI", $q_PSYCH);
        $q_RESP = rtrim($q_RESP,', ');
        
        $section_text .= "<strong>Constitutional Symptoms:</strong> ".(empty($q_general) ? "none provided" : $q_general)." \n ";
            $section_text .= "<strong>Cardiovascular:</strong> ".(empty($q_CV) ? "none provided" : $q_CV)." \n ";
            $section_text .= "<strong>Respiratory:</strong> ".(empty($q_RESP) ? "none provided" : $q_RESP)." \n ";
            $section_text .= "<strong>GI/GU:</strong> ".(empty($q_GIGU) ? "none provided" : $q_GIGU)." \n ";
            // $section_text .= "<strong>Genitourinary:</strong> ".(empty($q_GU) ? "none provided" : $q_GU)." \n ";
            
            $section_text .= "<strong>Psychiatric:</strong> ".(empty($q_PSYCH) ? "none provided" : $q_PSYCH)." \n ";  
        
      }
      elseif($user_detail->chief_compliant_userdetail->current_step_id['id'] == 23){

        $q_general = rtrim($q_general,', ');
        $q_GI = rtrim($q_GI,', ');            
        $q_EYES = rtrim($q_EYES,', ');
        $q_HEENT = rtrim($q_HEENT,', ');
        $q_GU = rtrim($q_GU,', ');
        $q_GIGU = rtrim($q_GIGU,', ');
        $q_CV = rtrim($q_CV,', ');
        $q_PSYCH = rtrim($q_PSYCH,', ');
       // $q_PSYCH = str_replace("si", "SI", $q_PSYCH);
        $q_RESP = rtrim($q_RESP,', ');
        $q_MOUTH = rtrim($q_MOUTH,', ');
        $q_NEUROMSK = rtrim($q_NEUROMSK,', ');
        
        
        $section_text .= "<strong>Constitutional: </strong> ".(empty($q_general) ? "none provided" : $q_general)." \n ";
        $section_text .= "<strong>Eyes: </strong> ".(empty($q_EYES) ? "none provided" : $q_EYES)." \n ";
        $section_text .= "<strong>Nose: </strong> ".(empty($q_HEENT) ? "none provided" : $q_HEENT)." \n ";
        $section_text .= "<strong>Mouth: </strong> ".(empty($q_MOUTH) ? "none provided" : $q_MOUTH)." \n ";
        $section_text .= "<strong>Cardiovascular:</strong> ".(empty($q_CV) ? "none provided" : $q_CV)." \n ";
        $section_text .= "<strong>Respiratory:</strong> ".(empty($q_RESP) ? "none provided" : $q_RESP)." \n ";
        $section_text .= "<strong>Gastrointestinal:</strong> ".(empty($q_GI) ? "none provided" : $q_GI)." \n ";
        $section_text .= "<strong>Genitourinary:</strong> ".(empty($q_GU) ? "none provided" : $q_GU)." \n ";
        $section_text .= "<strong>Neurological:</strong> ".(empty($q_NEUROMSK) ? "none provided" : $q_NEUROMSK)." \n ";        
        $section_text .= "<strong>Hematological:</strong> ".(empty($q_PSYCH) ? "none provided" : $q_PSYCH)." \n ";          
      }
      elseif($user_detail->chief_compliant_userdetail->current_step_id['id'] == 25){

        $q_CV = rtrim($q_CV,', ');
        $q_general = rtrim($q_general,', ');
        $q_HEENT = rtrim($q_HEENT,', ');
        // $ortho_ENDO = rtrim($ortho_ENDO,', ');
        $ortho_MSK = rtrim($ortho_MSK,', ');
        $spine_HEMELYMPH = rtrim($spine_HEMELYMPH,', ');
        $q_RESP = rtrim($q_RESP,', ');
        $q_NEUROMSK = rtrim($q_NEUROMSK,', ');
        $q_GI = rtrim($q_GI,', ');  
        $q_PSYCH = rtrim($q_PSYCH,', ');                  
        $q_SKIN = rtrim($q_SKIN,', ');        
        $q_GU = rtrim($q_GU,', ');    
        $q_IMMUNO = "";   
        // $ortho_ENDO = rtrim($ortho_ENDO,', ');

        
        $section_text .= "<strong>Cardiovascular:</strong> ".(empty($q_CV) ? "none provided" : $q_CV)." \n ";
        $section_text .= "<strong>Constitutional: </strong> ".(empty($q_general) ? "none provided" : $q_general)." \n ";
        $section_text .= "<strong>HEENT: </strong> ".(empty($q_HEENT) ? "none provided" : $q_HEENT)." \n ";
        $section_text .= "<strong>Musculoskeletal:</strong> ".(empty($ortho_MSK) ? "none provided" : $ortho_MSK)." \n ";
        // $section_text .= "<strong>Metabolic/Endocrine:</strong> ".(empty($ortho_ENDO) ? "none provided" : $ortho_ENDO)." \n ";
        $section_text .= "<strong>Hematologic/Lymphatic:</strong> ".(empty($spine_HEMELYMPH) ? "none provided" : $spine_HEMELYMPH)." \n";
        // $section_text .= "<strong>Reproductive Male:</strong> ".(empty($q_RESP) ? "none provided" : $q_RESP)." \n ";
        // $section_text .= "<strong>Reproductive Female:</strong> ".(empty($q_NEUROMSK) ? "none provided" : $q_NEUROMSK)." \n ";
        $seach_array_str = array('sob','tb exposure');
        $rep_array_str = array('SOB','TB exposure');
        $section_text .= "<strong>Respiratory:</strong> ".(empty($q_RESP) ? "none provided" : str_replace($seach_array_str,$rep_array_str,$q_RESP))." \n ";
        $section_text .= "<strong>Neurological:</strong> ".(empty($q_NEUROMSK) ? "none provided" : $q_NEUROMSK)." \n ";
        $section_text .= "<strong>Gastrointestinal:</strong> ".(empty($q_GI) ? "none provided" : $q_GI)." \n ";
        $section_text .= "<strong>Psychiatric:</strong> ".(empty($q_PSYCH) ? "none provided" : str_replace('si','SI',$q_PSYCH))." \n ";
        $section_text .= "<strong>Immunologic:</strong> ".(empty($q_IMMUNO) ? "none provided" : $q_IMMUNO)." \n ";
        $section_text .= "<strong>Integumentary:</strong> ".(empty($q_SKIN) ? "none provided" : $q_SKIN)." \n ";
        $section_text .= "<strong>Genitourinary:</strong> ".(empty($q_GU) ? "none provided" : $q_GU)." \n ";          
      }
      else{



            $q_general = rtrim($q_general,', ');

            $q_HEENT = rtrim($q_HEENT,', ');

            $q_GIGU = rtrim($q_GIGU,', ');

            $q_HEMEENDO = rtrim($q_HEMEENDO,', ');

            $q_CV = rtrim($q_CV,', ');

            $q_NEUROMSK = rtrim($q_NEUROMSK,', ');

            $q_RESP = rtrim($q_RESP,', ');

            $q_PSYCH = rtrim($q_PSYCH,', ');

            $q_SKIN = rtrim($q_SKIN,', ');



          $section_text .= "<strong>GEN:</strong> ".(empty($q_general) ? "none provided" : $q_general)." \n ";

          $section_text .= "<strong>GI/GU:</strong> ".(empty($q_GIGU) ? "none provided" : $q_GIGU)." \n ";

          $section_text .= "<strong>HEENT:</strong> ".(empty($q_HEENT) ? "none provided" : $q_HEENT)." \n ";

          $section_text .= "<strong>HEME/ENDO:</strong> ".(empty($q_HEMEENDO) ? "none provided" : $q_HEMEENDO)." \n ";

          $section_text .= "<strong>CV:</strong> ".(empty($q_CV) ? "none provided" : $q_CV)." \n ";

          $section_text .= "<strong>NEURO/MSK:</strong> ".(empty($q_NEUROMSK) ? "none provided" : $q_NEUROMSK)." \n ";

          $section_text .= "<strong>RESP:</strong> ".(empty($q_RESP) ? "none provided" : $q_RESP)." \n ";

          $section_text .= "<strong>PSYCH:</strong> ".(empty($q_PSYCH) ? "none provided" : $q_PSYCH)." \n ";

          $section_text .= "<strong>SKIN:</strong> ".(empty($q_SKIN) ? "none provided" : $q_SKIN)." \n";

      }

    }



    if($user_detail->specialization_id == 3){  // For specialization id 3 related health questionaire logic



        $ortho_GEN = rtrim($ortho_GEN,', ');

        $ortho_EYES = rtrim($ortho_EYES,', ');

        $ortho_ENT = rtrim($ortho_ENT,', ');

        $ortho_CV = rtrim($ortho_CV,', ');

        $ortho_RESP = rtrim($ortho_RESP,', ');

        $ortho_NEURO = rtrim($ortho_NEURO,', ');

        $ortho_MSK = rtrim($ortho_MSK,', ');

        $ortho_GI = rtrim($ortho_GI,', ');

        $ortho_GU = rtrim($ortho_GU,', ' );

        $ortho_SKINBREAST = rtrim($ortho_SKINBREAST,', ');

        $ortho_ENDO = rtrim($ortho_ENDO,', ');

        $ortho_PSYCH = rtrim($ortho_PSYCH,', ');

       // $ortho_ALLIMM = rtrim($ortho_ALLIMM,', ');



         $section_text .= "<strong>GEN:</strong> ".(empty($ortho_GEN) ? "none provided" : $ortho_GEN)." \n ";

         $section_text .= "<strong>EYES:</strong> ".(empty($ortho_EYES) ? "none provided" : $ortho_EYES)." \n ";

         $section_text .= "<strong>ENT:</strong> ".(empty($ortho_ENT) ? "none provided" : $ortho_ENT)." \n ";

         $section_text .= "<strong>CV:</strong> ".(empty($ortho_CV) ? "none provided" : $ortho_CV)." \n ";

         $section_text .= "<strong>RESP:</strong> ".(empty($ortho_RESP) ? "none provided" : $ortho_RESP)." \n ";

         $section_text .= "<strong>NEURO:</strong> ".(empty($ortho_NEURO) ? "none provided" : $ortho_NEURO)." \n ";

         $section_text .= "<strong>MSK:</strong> ".(empty($ortho_MSK) ? "none provided" : $ortho_MSK)." \n ";

         $section_text .= "<strong>GI:</strong> ".(empty($ortho_GI) ? "none provided" : $ortho_GI)." \n ";

         $section_text .= "<strong>GU:</strong> ".(empty($ortho_GU) ? "none provided" : $ortho_GU)." \n ";

         $section_text .= "<strong>SKIN/BREAST:</strong> ".(empty($ortho_SKINBREAST) ? "none provided" : $ortho_SKINBREAST)." \n ";

         $section_text .= "<strong>ENDO:</strong> ".(empty($ortho_ENDO) ? "none provided" : $ortho_ENDO)." \n ";

         $section_text .= "<strong>HEME/LYMPH:</strong> ".(empty($ortho_HEMELYMPH) ? "none provided" : $ortho_HEMELYMPH)." \n ";

         $section_text .= "<strong>PSYCH:</strong> ".(empty($ortho_PSYCH) ? "none provided" : $ortho_PSYCH)." \n ";

         $section_text .= "<strong>ALL/IMM:</strong> ".(empty($ortho_ALLIMM) ? "none provided" : $ortho_ALLIMM)." \n";  // currently $ortho_ALLIMM varuable is empty because client not provided data for this seciton will provide in future

    }

    if($user_detail->specialization_id == 8)
    {
      // For specialization id 8 related health questionaire logic
        $oncology_GEN   = rtrim($oncology_GEN , ', ');
        $oncology_EYE   = rtrim($oncology_EYE , ', ');
        $oncology_ENT   = rtrim($oncology_ENT , ', ');
        $oncology_CV   = rtrim($oncology_CV , ', ');
        $oncology_RESP   = rtrim($oncology_RESP , ', ');
        $oncology_GI   = rtrim($oncology_GI , ', ');
        $oncology_GU   = rtrim($oncology_GU , ', ');
        $oncology_MSK   = rtrim($oncology_MSK , ', ');
        $oncology_SKIN   = rtrim($oncology_SKIN , ', ');
        $oncology_BREAST   = rtrim($oncology_BREAST , ', ');
        $oncology_NEURO  = rtrim($oncology_NEURO , ', ');
        $oncology_PSYCH   = rtrim($oncology_PSYCH , ', ');
        $oncology_ENDO   = rtrim($oncology_ENDO , ', ');
        $oncology_HEME_LYMPH   = rtrim($oncology_HEME_LYMPH , ', ');
        $oncology_ALL_IMM   = rtrim($oncology_ALL_IMM , ', ');


        $oncology_NEURO = isset($cancer_layman_detail['qa_neuro']) && !empty($cancer_layman_detail['qa_neuro']) ? $cancer_layman_detail['qa_neuro'].(!empty($oncology_NEURO) ? ", ".$oncology_NEURO : '') : $oncology_NEURO;

        $oncology_GI = isset($cancer_layman_detail['qa_gi']) && !empty($cancer_layman_detail['qa_gi']) ? $cancer_layman_detail['qa_gi'].(!empty($oncology_GI) ? ", ".$oncology_GI : '') : $oncology_GI;

        $oncology_EYE = isset($cancer_layman_detail['qa_eye']) && !empty($cancer_layman_detail['qa_eye']) ? $cancer_layman_detail['qa_eye'].(!empty($oncology_EYE) ? ", ".$oncology_EYE : '') : $oncology_EYE;

        $oncology_PSYCH = isset($cancer_layman_detail['qa_psych']) && !empty($cancer_layman_detail['qa_psych']) ? $cancer_layman_detail['qa_psych'].(!empty($oncology_PSYCH) ? $oncology_PSYCH : '') : $oncology_PSYCH;

        $oncology_RESP = isset($cancer_layman_detail['qa_resp']) && !empty($cancer_layman_detail['qa_resp']) ? $cancer_layman_detail['qa_resp'].(!empty($oncology_RESP) ? ", ".$oncology_RESP : '') : $oncology_RESP;

        $oncology_CV = isset($cancer_layman_detail['qa_cv']) && !empty($cancer_layman_detail['qa_cv']) ? $cancer_layman_detail['qa_cv'].(!empty($oncology_CV) ? ", ".$oncology_CV : '') : $oncology_CV ;

        $oncology_SKIN = isset($cancer_layman_detail['qa_skin']) && !empty($cancer_layman_detail['qa_skin']) ? $cancer_layman_detail['qa_skin'].(!empty($oncology_SKIN) ? ", ".$oncology_SKIN : '') : $oncology_SKIN;

        $oncology_MSK = isset($cancer_layman_detail['qa_msk']) && !empty($cancer_layman_detail['qa_msk']) ? $cancer_layman_detail['qa_msk'].(!empty($oncology_MSK) ? ", ".$oncology_MSK : '') : $oncology_MSK;

        $oncology_GU = isset($cancer_layman_detail['qa_gu']) && !empty($cancer_layman_detail['qa_gu']) ? $cancer_layman_detail['qa_gu'].(!empty($oncology_GU) ? ", ".$oncology_GU : '') : $oncology_GU;

        $oncology_GEN = isset($cancer_layman_detail['qa_gen']) && !empty($cancer_layman_detail['qa_gen']) ? $cancer_layman_detail['qa_gen'].(!empty($oncology_GEN) ? ", ".$oncology_GEN : '') : $oncology_GEN;

        $oncology_HEME_LYMPH = isset($cancer_layman_detail['qa_heme_lymph']) && !empty($cancer_layman_detail['qa_heme_lymph']) ? $cancer_layman_detail['qa_heme_lymph'].(!empty($oncology_HEME_LYMPH) ? ", ".$oncology_HEME_LYMPH : '') : $oncology_HEME_LYMPH;

        $oncology_ENT = isset($cancer_layman_detail['qa_ent']) && !empty($cancer_layman_detail['qa_ent']) ? $cancer_layman_detail['qa_ent'].(!empty($oncology_ENT) ? ", ".$oncology_ENT : '') : $oncology_ENT;

        $oncology_ALL_IMM = isset($cancer_layman_detail['qa_all_imm']) && !empty($cancer_layman_detail['qa_all_imm']) ? $cancer_layman_detail['qa_all_imm'].(!empty($oncology_ALL_IMM) ? ", ".$oncology_ALL_IMM : '') : $oncology_ALL_IMM;

        $oncology_BREAST = isset($cancer_layman_detail['qa_breast']) && !empty($cancer_layman_detail['qa_breast']) ? $cancer_layman_detail['qa_breast'].(!empty($oncology_BREAST) ? ", ".$oncology_BREAST : '') : $oncology_BREAST;

        $oncology_GEN   = trim($oncology_GEN , ', ');
        $oncology_EYE   = trim($oncology_EYE , ', ');
        $oncology_ENT   = trim($oncology_ENT , ', ');
        $oncology_CV   = trim($oncology_CV , ', ');
        $oncology_RESP   = trim($oncology_RESP , ', ');
        $oncology_GI   = trim($oncology_GI , ', ');
        $oncology_GU   = trim($oncology_GU , ', ');
        $oncology_MSK   = trim($oncology_MSK , ', ');
        $oncology_SKIN   = trim($oncology_SKIN , ', ');
        $oncology_BREAST   = trim($oncology_BREAST , ', ');
        $oncology_NEURO  = trim($oncology_NEURO , ', ');
        $oncology_PSYCH   = trim($oncology_PSYCH , ', ');
        $oncology_ENDO   = trim($oncology_ENDO , ', ');
        $oncology_HEME_LYMPH   = trim($oncology_HEME_LYMPH , ', ');
        $oncology_ALL_IMM   = trim($oncology_ALL_IMM , ', ');

        $section_text .= "<strong>GEN:</strong> ".(empty($oncology_GEN) ? "none provided" : $oncology_GEN)." \n ";
        $section_text .= "<strong>EYES:</strong> ".(empty($oncology_EYE) ? "none provided" : $oncology_EYE)." \n ";
        $section_text .= "<strong>ENT:</strong> ".(empty($oncology_ENT) ? "none provided" : $oncology_ENT)." \n ";
        $section_text .= "<strong>CV:</strong> ".(empty($oncology_CV) ? "none provided" : $oncology_CV)." \n ";
        $section_text .= "<strong>RESP:</strong> ".(empty($oncology_RESP) ? "none provided" : $oncology_RESP)." \n ";
        $section_text .= "<strong>GI:</strong> ".(empty($oncology_GI) ? "none provided" : $oncology_GI)." \n ";
        $section_text .= "<strong>GU:</strong> ".(empty($oncology_GU) ? "none provided" : $oncology_GU)." \n ";
        $section_text .= "<strong>MSK:</strong> ".(empty($oncology_MSK) ? "none provided" : $oncology_MSK)." \n ";
        $section_text .= "<strong>SKIN:</strong> ".(empty($oncology_SKIN) ? "none provided" : $oncology_SKIN)." \n ";
        $section_text .= "<strong>BREAST:</strong> ".(empty($oncology_BREAST) ? "none provided" : $oncology_BREAST)." \n ";
        $section_text .= "<strong>NEURO:</strong> ".(empty($oncology_NEURO) ? "none provided" : $oncology_NEURO)." \n ";
        $section_text .= "<strong>PSYCH:</strong> ".(empty($oncology_PSYCH) ? "none provided" : $oncology_PSYCH)." \n ";
        $section_text .= "<strong>ENDO:</strong> ".(empty($oncology_ENDO) ? "none provided" : $oncology_ENDO)." \n ";
        $section_text .= "<strong>HEME/LYMPH:</strong> ".(empty($oncology_HEME_LYMPH) ? "none provided" : $oncology_HEME_LYMPH)." \n ";
        $section_text .= "<strong>ALL/IMM:</strong> ".(empty($oncology_ALL_IMM) ? "none provided" : $oncology_ALL_IMM)." \n";  // currently $ortho_ALLIMM varuable is empty because client not provided data for this seciton will provide in future
    }


    if($user_detail->specialization_id == 4 || $user_detail->specialization_id == 7){  // For specialization id 4 related health questionaire logic

        $spine_MSK = rtrim($spine_MSK,', ');
        $spine_NEURO = rtrim($spine_NEURO,', ');
        $spine_GEN = rtrim($spine_GEN,', ');
        $spine_ENT = rtrim($spine_ENT,', ');
        $spine_CV = rtrim($spine_CV,', ');
        $spine_RESP = rtrim($spine_RESP,', ');
        $spine_GI = rtrim($spine_GI,', ');

        $spine_SKINBREAST = rtrim($spine_SKINBREAST,', ');
        $spine_ENDO = rtrim($spine_ENDO,', ');
        $spine_HEMELYMPH = rtrim($spine_HEMELYMPH,', ');
        $section_text .= "<strong>MSK:</strong> ".(empty($spine_MSK) ? "none provided" : $spine_MSK)." \n ";
        $section_text .= "<strong>NEURO:</strong> ".(empty($spine_NEURO) ? "none provided" : $spine_NEURO)." \n ";
        $section_text .= "<strong>GEN:</strong> ".(empty($spine_GEN) ? "none provided" : $spine_GEN)." \n ";
        $section_text .= "<strong>ENT:</strong> ".(empty($spine_ENT) ? "none provided" : $spine_ENT)." \n ";
        $section_text .= "<strong>CV:</strong> ".(empty($spine_CV) ? "none provided" : $spine_CV)." \n ";
        $section_text .= "<strong>RESP:</strong> ".(empty($spine_RESP) ? "none provided" : $spine_RESP)." \n ";
        $section_text .= "<strong>GI:</strong> ".(empty($spine_GI) ? "none provided" : $spine_GI)." \n ";
        $section_text .= "<strong>SKIN/BREAST:</strong> ".(empty($spine_SKINBREAST) ? "none provided" : $spine_SKINBREAST)." \n ";
        $section_text .= "<strong>ENDO:</strong> ".(empty($spine_ENDO) ? "none provided" : $spine_ENDO)." \n ";
        $section_text .= "<strong>HEME/LYMPH:</strong> ".(empty($spine_HEMELYMPH) ? "none provided" : $spine_HEMELYMPH)." \n";

    }

    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 18){

        $temp_section_text = '';
        $temp_section_text .= "\n<strong>Vitals:</strong> <strong>BMI:</strong> ".(empty($bmi) ? 'none provided' : $bmi).", <strong> GLU:</strong> ".(empty($cronic_subjective_text_detail['glu_layman']) ? 'none provided' : $cronic_subjective_text_detail['glu_layman']).", <strong> BP:</strong> ".(empty($cronic_subjective_text_detail['bp_layman']) ? 'none provided' : $cronic_subjective_text_detail['bp_layman']).", <strong>SPO2:</strong> ".(empty($cronic_subjective_text_detail['spo2_layman']) ? 'none provided' : $cronic_subjective_text_detail['spo2_layman'])."\n";

        $temp_section_text .= "<strong>Glucose Log:</strong> ".(empty($cronic_subjective_text_detail['glu_log']) ? 'none provided' : $cronic_subjective_text_detail['glu_log'])."\n";

        $temp_section_text .= "<strong>BP Log:</strong> ".(empty($cronic_subjective_text_detail['bp_log']) ? 'none provided' : $cronic_subjective_text_detail['bp_log'])."\n";

        $temp_section_text .= "<strong>Peak Flow Log:</strong> ".(empty($cronic_subjective_text_detail['peak_flow_log']) ? 'none provided' : "\n ".$cronic_subjective_text_detail['peak_flow_log'])."\n";

        $section_text.= $temp_section_text;
    }
}
$section_text .= "\n";

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 17){

    $temp_section_text = '';
    $temp_section_text .= "\n<strong>Vitals:</strong> ".($login_user->gender == 0 ? "<strong>BMI:</strong> ".(empty($bmi) ? 'none provided' : $bmi).', ' : "" )."<strong>T:</strong> ".(empty($covid_subjective_detail['temperature']) ? 'none provided' : $covid_subjective_detail['temperature']).", <strong>SpO2:</strong> ".(empty($covid_subjective_detail['spo2']) ? 'none provided' : $covid_subjective_detail['spo2'])."\n";

    $temp_section_text .= "\n<strong>IMPRESSION:</strong> ".$covid_risk." COVID-19 exposure risk".(!empty($covid_layman) ? " due to ".$covid_layman: "").", ".$health_risk." mortality risk ".(!empty($health_layman) ? "due to ".$health_layman:"").". \n";



    $temp_section_text .= "\n<strong>OBJECTIVE:</strong> \n ";

    $temp_section_text .= "Vitals: None reported by patient. \n ";

    $temp_section_text .= "Constitutional: Patient is speaking full sentences. No audible wheezing heard. \n ";

    $temp_section_text .= "Head and Face: No tenderness with guided palpation and percussion of frontal and maxillary sinuses. \n ";

    $temp_section_text .= "Ears, Nose, Mouth, Throat: No enlarged cervical and axillary lymph nodes felt on guided palpation. \n ";

    $temp_section_text .= "Neck: Full active ROM of neck in all directions without pain. \n ";

    $temp_section_text .= "Chest: No anterior chest wall tenderness on self-palpation. \n ";

    $temp_section_text .= "Abdomen: No tenderness with guided light and deep palpation of all abdominal quadrants. \n ";

    $temp_section_text .= "Musculoskeletal: Self-reports normal gait. Full active ROM of all extremities without pain or weakness. \n ";

    $temp_section_text .= "Psych: Oriented to time, place, person. Mood and affect appropriate. \n \n";



    $temp_section_text .= "\n<strong>RECOMMENDATIONS:</strong> \n ";

    $temp_section_text .= "1. Obtain immediate medical care if any trouble breathing, persistent chest pain, confusion or worsening of condition. \n ";

    $temp_section_text .= "2. Call your local public health department to obtain a COVID-19 test. \n ";

    $temp_section_text .= "3. Take hydroxychloroquine 200 mg twice a day for 5 days, zinc 50 mg twice a day for 5 days. \n ";

    $temp_section_text .= "4. Take Tylenol (acetaminophen) 500mg to 1000g every 4 hours for temperature >100 degrees F. \n ";

    $temp_section_text .= "5. Drink plenty of fluids. \n ";

    $temp_section_text .= "6. Obtain as much rest as possible. \n ";

    $temp_section_text .= "7. Keep yourself nourished with a balanced diet and hydrated with water. \n ";

    $temp_section_text .= "8. Isolate yourself as much as possible until at least 3 days after the end of symptoms or 7 days from the beginning of symptoms. \n ";

    $temp_section_text .= "9. Avoid sharing dishes, towels, bed. \n ";

    $temp_section_text .= "10. Wear your own clean mask around others. \n ";

    $temp_section_text .= "11. Dispose of used tissue in a lined trash can. \n ";

    $temp_section_text .= "12. Wash your hands frequently, especially after blowing your nose. \n ";

    $temp_section_text .= "13. Disinfect all high-touch areas (e.g. phone, keyboard, tabletops, doorknobs) to prevent the spread of your infection to others. \n ";

    $temp_section_text .= "14. Call again if condition worsens or if no improvement in 2-3 days. \n ";

    $temp_section_text .= "15. Referral to telepsychiatry due to positive PHQ-2. \n \n";



    $section_text.= $temp_section_text;

}

//}



$soapp_summary = '';

$comm_summary = '';

$dast_summary = '';
$padt_description = '';

if(isset($patient_other_detail_score) && !empty($patient_other_detail_score))
{

   if(!empty($patient_other_detail_score['soapp_description'])){



        $soapp_summary = $patient_other_detail_score['soapp_summary']."<strong>Patient Answers:</strong> ".$patient_other_detail_score['soapp_description'];

    }



    if(!empty($patient_other_detail_score['comm_description'])){



       $comm_summary = $patient_other_detail_score['comm_summary']."<strong>Patient Answers:</strong> ".$patient_other_detail_score['comm_description'];

    }



    if(!empty($patient_other_detail_score['dast_description'])){

        $dast_summary = $patient_other_detail_score['dast_summary']."<strong>Patient Answers:</strong> ".$patient_other_detail_score['dast_description'];

    }

    if(!empty($patient_other_detail_score['padt_description'])){

        $padt_description = $patient_other_detail_score['padt_description']."\n<strong>Patient Answers:\n</strong> ".$patient_other_detail_score['padt_question'];

    }

}



$section_text .= "<strong>Final patient symptoms/comments:</strong> ".(!empty($user_detail->chief_compliant_userdetail->additional_comment) ? $user_detail->chief_compliant_userdetail->additional_comment : "no additional comments" )." \n \n";

// pr($section_text); die;

$document_section[] = array(

                "SetIdentifier" => $cnt++,

                "ValueType" => "FT",

                "IdentifierText" => $section_text,

                "ObservationDate" => $curnt_date

            );



$mi7_api_array = array(

  "SendingApplication" => "Valhalla",

    "MessageType" => 10,

    "TestingFlag" => false,

    "HL7MessageType" => 3,

    "PatientVisitSetIdentifier" => "1",

    "PatientID_EMR" => $internal_emr_id,

    "Documents" => array(

       array("DocumentSections" => $document_section)

    )

);



}


$response = array('note' => $mi7_api_array['Documents'][0]['DocumentSections'][0]['IdentifierText'],'soapp_summary' => $soapp_summary, 'comm_summary'=> $comm_summary,'dast_summary' =>$dast_summary,'em_line' => $em_line,'padt_description' =>$padt_description);

return $response;

    }





    // prepare question in layman summary



public function prepare_other_question_layman($user_detail = null ){



//pr($user_detail);die('dfdf');



  if(!empty($user_detail->other_questions_treatment_detail))

  {

    $user_detail->other_questions_treatment_detail =@unserialize(Security::decrypt(base64_decode($user_detail->other_questions_treatment_detail) , SEC_KEY));

  }



   if(!empty($user_detail->taken_before_medicine_info))

  {

    $user_detail->taken_before_medicine_info =@unserialize(Security::decrypt(base64_decode($user_detail->taken_before_medicine_info) , SEC_KEY));

  }



  $layman_summar = '' ;



  if(!empty($user_detail->chief_compliant_other_details) && is_array($user_detail->chief_compliant_other_details)){



      $layman_summar .= ' You provided these other details: ' ;



      //set layman for medicine that taken before



      if(!empty($user_detail->taken_before_medicine_info) && is_array($user_detail->taken_before_medicine_info)){



        $layman_summar .= 'Medicine details taken before: ';



        $stop_reason = array(



          1 => "didn't work",

          2 => 'finished taking',

          3 => 'told to stop by doctor'

        );



        foreach ($user_detail->taken_before_medicine_info as $m_key => $m_value) {



          $layman_summar .= 'Medicine: '.$m_value['medicine_name'].', Dose: '.$m_value['medicine_dose'].', stopped due to : '.$stop_reason[$m_value['medicine_stop_reason']].'. ';

        }

      }





      foreach ($user_detail->chief_compliant_other_details as $k => $singlelevel) {



          switch ($singlelevel['question_id'])

          {



           //quetion 1 2 3 are related to each other

            case 1:



              if($singlelevel['answer'] == 'Yes'){



                $ans2 = $user_detail->chief_compliant_other_details[$k+1]['answer'];

                if(is_array($ans2) && in_array('other',$ans2)){



                  $ans2 = $user_detail->chief_compliant_other_details[$k+2]['answer'];

                }



                $layman_summar .= "The patient has a hard time sleeping due to ".(is_array($ans2) ? implode(', ',$ans2) : $ans2).'. ' ;



              }else{



                $layman_summar .= 'The patient does not has a hard time sleeping. ' ;

              }



                break;



            case 4:



                 $layman_summar .= $singlelevel['answer'] == 'Yes' ? 'The patient wake up and feel tired. ' : 'The patient wake up and does not feel tired. ';

                //$layman_summar .= ucfirst($singlelevel['answer']).', You wake up still feeling tired. ';

                break;



            case 5:



                $layman_summar .= 'The patient do '.ucfirst($singlelevel['answer']).' for fun. ';

                break;



            case 6:



                $layman_summar .= $singlelevel['answer'] == 'Yes' ? "The patient always feel tired. " : "The patient does not always feel tired. ";

                //$layman_summar .= ucfirst($singlelevel['answer']).', You always feel tired. ';

                break;



            case 7:



                $layman_summar .= $singlelevel['answer'] == 'Yes' ?  "The patient feel depressed or have thoughts about hurting yourself. " : "The patient never feel depressed or have thoughts about hurting yourself. ";

                //$layman_summar .= ucfirst($singlelevel['answer']).", You ever feel depressed or have thoughts about hurting yourself. ";

                break;



            case 8:



                $layman_summar .= "The pain interferes the patient ".strtolower($singlelevel['answer'])."% from interacting with others. ";

                //$layman_summar .= ucfirst($singlelevel['answer'])."% pain interfere you from interacting with others. ";

                break;



            case 9:



                 $layman_summar .= "The pain interferes the patient ".strtolower($singlelevel['answer'])."% with daily activities. " ;

                //$layman_summar .= ucfirst($singlelevel['answer'])."% pain interfere with your daily activities. " ;

                break;



            case 11:



                $ans_11 =$singlelevel['answer'];

                 $layman_summar .= $singlelevel['answer'] == 'Yes' ? "The patient has a family history of pain syndromes/arthritis. " : "The patient does not has a family history of any pain syndrome or arthritis. ";



               // $layman_summar .= ucfirst($singlelevel['answer']).", You have a family history of any pain syndromes or arthritis. ";

                break;

             case 12:



                if(isset($ans_11) && $ans_11 == 'Yes'){

                    if(!empty($user_detail->other_questions_treatment_detail)){



                      $layman_summar .= "The patient had taken in the past: ";



                      foreach ($user_detail->other_questions_treatment_detail as $key => $value) {



                        $layman_summar .= ucfirst($value['treatment_type'])." at ".$value['treatment_date'].". ";



                      }



                    }else{



                      $layman_summar .="The patient had not taken any injections, physical therapy, or chiropractic care in the past. ";

                    }

                  break;

                }

          }

        }



       // $layman_summar .= '<br />';

  }

  //die;

  return array('layman_summar' => $layman_summar);

}







   public function prepare_user_detial_data_for_render($user_detail = null )

   {



        $this->StepDetails = TableRegistry::get('StepDetails');

        $this->ChiefCompliants = TableRegistry::get('ChiefCompliants');

        $this->ChiefCompliantQuestionnaire = TableRegistry::get('ChiefCompliantQuestionnaire');

        $this->ChiefCompliantDetails = TableRegistry::get('ChiefCompliantDetails');

        $this->ChiefCompliantMedication = TableRegistry::get('ChiefCompliantMedication');

        $this->ChiefCompliantOtherDetails = TableRegistry::get('ChiefCompliantOtherDetails');

        $this->PainFollowupQuestionnaires = TableRegistry::get('PainFollowupQuestionnaires');

        $this->CommonQuestions = TableRegistry::get('CommonQuestions');



        if(isset($user_detail->current_step_id) && !empty($user_detail->current_step_id)){



            $user_detail->current_step_id = $this->StepDetails->find('all')->where(['id' => $user_detail->current_step_id])->first();



        }



        if(isset($user_detail->chief_compliant_id) && !empty($user_detail->chief_compliant_id)){



            $user_detail->chief_compliant_id = $this->ChiefCompliants->find('all')->where(['id' => $user_detail->chief_compliant_id])->first();

        }



        if(isset($user_detail->compliant_symptom_ids) && !empty($user_detail->compliant_symptom_ids))

        {

            $user_detail->compliant_symptom_ids = explode(',', $user_detail->compliant_symptom_ids);



            $user_detail->compliant_symptom_ids =  $this->ChiefCompliants->find('all')->where(['id IN' => $user_detail->compliant_symptom_ids])->all();

        }



        if(isset($user_detail->compliant_length) && !empty($user_detail->compliant_length)){



            $user_detail->compliant_length = $user_detail->compliant_length;

        }



        if(isset($user_detail->compliant_medication_detail) && !empty($user_detail->compliant_medication_detail)){



            $user_detail->compliant_medication_detail = unserialize(Security::decrypt(base64_decode($user_detail->compliant_medication_detail), SEC_KEY)) ;



        }





        if(isset($user_detail->chief_compliant_symptoms) && !empty($user_detail->chief_compliant_symptoms)){



            $user_detail->chief_compliant_symptoms = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_symptoms), SEC_KEY)) ;



            foreach($user_detail->chief_compliant_symptoms as $key => $value){



                foreach($value as $k =>$v) {



                    $user_detail->chief_compliant_symptoms[$key][$k] = $this->ChiefCompliants->find('all')->where(['id' => $v])->first();

                }



            }

        }



        if(isset($user_detail->questionnaire_detail) && !empty($user_detail->questionnaire_detail)){



            $user_detail->questionnaire_detail = unserialize(Security::decrypt(base64_decode($user_detail->questionnaire_detail), SEC_KEY)) ;



            foreach($user_detail->questionnaire_detail as $key => $value){



                foreach($value as $k =>$v) {



                    $user_detail->questionnaire_detail[$key][$k] = $this->ChiefCompliantQuestionnaire->find('all')->where(['id' => $v])->first();

                }



            }



        }



        if(isset($user_detail->chief_compliant_details) && !empty($user_detail->chief_compliant_details)){



            $user_detail->chief_compliant_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_details), SEC_KEY))) ;



            $tempar = array();

            $more_options = array();



            foreach ($user_detail->chief_compliant_details as $key => $value) {

                $i = 0 ;



                foreach ($value as $k => $v) {



                    if(!is_numeric($k) && $k == 'more_option'){

                        $more_options[$key] = $v ;

                        unset($value['more_option']);

                        continue;

                    }





                    $temp = $this->ChiefCompliantDetails->find('all')->where(['id'=> $k ])->first();

                    $tempcc = $this->ChiefCompliants->find('all')->where(['id'=> $key ])->first();

                    $tempar[$key]['cc_data'] = $tempcc ;

                    $tempar[$key][$i]['question_id'] = $temp->id ;

                    $tempar[$key][$i]['question'] = $temp->question ;

                    $tempar[$key][$i]['hpi_element'] = $temp->cpt_hpi_element_type;

                    $tempar[$key][$i]['answer'] = $v ;

                    $i++;

                }

            }



            $user_detail->more_options = $more_options ;

            $user_detail->chief_compliant_details = $tempar ;



        }



        if(isset($user_detail->chief_compliant_other_details) && !empty($user_detail->chief_compliant_other_details))

        {



            $user_detail->chief_compliant_other_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_other_details), SEC_KEY))) ;



            $tempar = array();

            $i = 0;

            foreach ($user_detail->chief_compliant_other_details as $key => $value)

            {

              $temp = $this->ChiefCompliantOtherDetails->find('all')->where(['id'=> $key ])->first();

              $tempar[$i]['question_id'] = $temp->id ;

              $tempar[$i]['question'] = $temp->question ;

              $tempar[$i]['answer'] = $value ;

              $i++;

            }

            $user_detail->chief_compliant_other_details = $tempar;



        }





        if(isset($user_detail->pain_update_question) && !empty($user_detail->pain_update_question))

        {



            $user_detail->pain_update_question = unserialize((Security::decrypt(base64_decode($user_detail->pain_update_question), SEC_KEY))) ;



            $tempar = array();

            $i = 0;

            foreach ($user_detail->pain_update_question as $key => $value)

            {

              $temp = $this->PainFollowupQuestionnaires->find('all')->where(['id'=> $key ])->first();

              $tempar[$i]['question_id'] = $temp->id ;

              $tempar[$i]['question'] = $temp->question ;

              $tempar[$i]['answer'] = $value ;

              $i++;

            }

            $user_detail->pain_update_question = $tempar;



        }





        if(isset($user_detail->general_update_question) && !empty($user_detail->general_update_question))

        {



            $user_detail->general_update_question = unserialize((Security::decrypt(base64_decode($user_detail->general_update_question), SEC_KEY))) ;



            $tempar = array();

            $i = 0;

            foreach ($user_detail->general_update_question as $key => $value)

            {



              $temp = $this->PainFollowupQuestionnaires->find('all')->where(['id'=> $key ])->first();

              $tempar[$i]['question_id'] = $temp->id ;

              $tempar[$i]['question'] = $temp->question ;

              $tempar[$i]['answer'] = $value ;

              $i++;

            }

            $user_detail->general_update_question = $tempar;



        }



        if(isset($user_detail->post_checkup_question_detail) && !empty($user_detail->post_checkup_question_detail))

            {



               $user_detail->post_checkup_question_detail = unserialize((Security::decrypt(base64_decode($user_detail->post_checkup_question_detail), SEC_KEY)));



               if(!empty($user_detail->post_checkup_question_detail)){



                    $i = 0;

                  foreach($user_detail->post_checkup_question_detail as $key => $val){





                      $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();

                      $tempar[$i]['question_id'] = $temp->id ;

                      $tempar[$i]['question'] = $temp->question ;

                      $tempar[$i]['answer'] = $val;

                      $i++;



                  }

                  $user_detail->post_checkup_question_detail = $tempar;

               }

            }



            if(isset($user_detail->screening_questions_detail) && !empty($user_detail->screening_questions_detail))

            {



                $user_detail->screening_questions_detail = unserialize((Security::decrypt(base64_decode($user_detail->screening_questions_detail), SEC_KEY)));



               if(!empty($user_detail->screening_questions_detail)){



                  $i = 0;

                  foreach($user_detail->screening_questions_detail as $key => $val){





                      $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();

                      $tempar[$i]['question_id'] = $temp->id ;

                      $tempar[$i]['question'] = $temp->question ;

                      $tempar[$i]['answer'] = $val;

                      $i++;



                  }



                 $user_detail->screening_questions_detail = $tempar;

               }

            }



        if(isset($user_detail->general_update_provider_info) && !empty($user_detail->general_update_provider_info)){



            $user_detail->general_update_provider_info =  unserialize((Security::decrypt(base64_decode($user_detail->general_update_provider_info), SEC_KEY))) ;

        }



        if(isset($user_detail->general_update_procedure_detail) && !empty($user_detail->general_update_procedure_detail)){



            $user_detail->general_update_procedure_detail =  unserialize((Security::decrypt(base64_decode($user_detail->general_update_procedure_detail), SEC_KEY))) ;

        }



        if(!empty($user_detail->medication_refill_extra_details))

      {



         $user_detail->medication_refill_extra_details = unserialize((Security::decrypt(base64_decode($user_detail->medication_refill_extra_details), SEC_KEY)));



        // pr($user_detail->medication_refill_extra_details);



        //pr($user_detail_old->chief_compliant_userdetail->general_update_question);die;



         if(isset($user_detail->medication_refill_extra_details['soapp']) && !empty($user_detail->medication_refill_extra_details['soapp'])){

            $tempar = array();

            foreach($user_detail->medication_refill_extra_details['soapp'] as $key => $val){





                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();

                $tempar[$key]['question_id'] = $temp->id ;

                $tempar[$key]['question'] = $temp->question ;

                $tempar[$key]['answer'] = $val;

               // $i++;



            }

            //pr($tempar);die;

            $user_detail->medication_refill_extra_details['soapp'] = $tempar;

            //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;

         }



         if(isset($user_detail->medication_refill_extra_details['comm']) && !empty($user_detail->medication_refill_extra_details['comm'])){

            $tempar = array();

            foreach($user_detail->medication_refill_extra_details['comm'] as $key => $val){





                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();

                $tempar[$key]['question_id'] = $temp->id ;

                $tempar[$key]['question'] = $temp->question ;

                $tempar[$key]['answer'] = $val;

               // $i++;



            }

            //pr($tempar);die;

            $user_detail->medication_refill_extra_details['comm'] = $tempar;

            //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;

         }



         if(isset($user_detail->medication_refill_extra_details['dast']) && !empty($user_detail->medication_refill_extra_details['dast'])){

            $tempar = array();

            foreach($user_detail->medication_refill_extra_details['dast'] as $key => $val){





                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();

                $tempar[$key]['question_id'] = $temp->id ;

                $tempar[$key]['question'] = $temp->question ;

                $tempar[$key]['answer'] = $val;

               // $i++;



            }

            //pr($tempar);die;

            $user_detail->medication_refill_extra_details['dast'] = $tempar;

            //pr( $user_detail_old->chief_compliant_userdetail->general_update_question);die;

         }

       }



       if(!empty($user_detail->follow_up_sx_detail)){



                    $user_detail->follow_up_sx_detail = unserialize((Security::decrypt(base64_decode($user_detail->follow_up_sx_detail), SEC_KEY)));



                    $tempar = array();

                    foreach ($user_detail->follow_up_sx_detail as $key => $value)

                    {

                        //$i = 0 ;

                        foreach ($value as $k => $v)

                        {

                            $temp = $this->CommonQuestions->find('all')->where(['id'=> $k ])->first();

                            $tempcc = $this->ChiefCompliants->find('all')->where(['id'=> $key ])->first();

                            $tempar[$key]['cc_data'] = $tempcc ;

                            $tempar[$key][$k]['question_id'] = $temp->id ;

                            $tempar[$key][$k]['question'] = $temp->question ;

                            $tempar[$key][$k]['answer'] = $v ;

                            //$i++;

                        }



                    }

                    $user_detail->follow_up_sx_detail = $tempar;

                }



        return $user_detail ;

    }





    // this function is for Follow up round only and it compare the previous chief compliant detial and current chief complaint detail of the patient

    public function compare_prev_recent_cc_detial_for_followup($user_detail = null, $prev_visit_user_detail = null)

    {



        $img_backpain_detial_q_arr = array(

        'c4' => 'Neck pain (Cervical (c4-5))',

        'c7' => 'Neck pain (Cervical (c7))',

        'c6' => 'Neck pain (Cervical (c6))',

        't1' => 'Upper back pain (Thoracic (t1))',

        't2' => 'Upper back pain (Thoracic (t2))',

        't3' => 'Upper back pain (Thoracic (t3))',

        't4' => 'Upper back pain (Thoracic (t4))',

        't5' => 'Upper back pain (Thoracic (t5))',

        't6' => 'Upper back pain (Thoracic (t6))',

        't7' => 'Upper back pain (Thoracic (t7))',

        't8' => 'Upper back pain (Thoracic (t8))',

        't9' => 'Upper back pain (Thoracic (t9))',

        't10' => 'Upper back pain (Thoracic (t10))',

        't11' => 'Upper back pain (Thoracic (t11))',

        't12' => 'Upper back pain (Thoracic (t12))',

        'l1' => 'Low back pain (Lumbar (l1))',

        'l2' => 'Low back pain (Lumbar (l2))',

        'l3' => 'Low back pain (Lumbar (l3))',

        'l4' => 'Low back pain (Lumbar (l4))',

        'l5' => 'Low back pain (Lumbar (l5))',

        's1' => 'Low back pain (Sacral (s1))',

        's2-3' =>  'Low back pain (Sacral (s2-3))',

        'right1' =>  'Neck pain',

        'right2' =>  'Neck pain',

        'right3' => 'Upper back pain (Suprascapular (right))',

        'right4' => 'Upper back pain (Interscapular (right))',

        'right5' => 'Upper back pain (Scapular (right))',

        'right6' => 'Upper back pain (Infrascapular (right))',

        'right7' => 'Low back pain (Infrascapular (right))',

        'right8' => 'Low back pain',

        'right9' => 'Buttock pain (right)',

        'right10' => 'Shoulder pain (Infrascapular (right))',

        'right11' => 'Shoulder pain (Scapular (right))',

        'right12' => 'Shoulder pain (Scapular (right))',

        'right13' =>  'Shoulder pain',

        'right14' =>  'Shoulder pain (Scapular (right))',

        'right15' => 'Shoulder pain (Posterior deltoid (right))',

        'right16' => 'Shoulder pain (Suprascapular (right))',

        'left1' =>  'Neck pain',

        'left2' => 'Neck pain (Suprascapular (left))',

        'left3' => 'Upper back pain (Suprascapular (left))',

        'left4' => 'Upper back pain (Interscapular (left))',

        'left5' =>  'Upper back pain (Scapular (left))',

        'left6' => 'Upper back pain (Infrascapular (left))',

        'left7' => 'Low back pain (Infrascapular (left))',

        'left8' => 'Low back pain',

        'left9' => 'Buttock pain (left)',

        'left10' => 'Shoulder pain (Infrascapular (left))',

        'left11' => 'Shoulder pain (Interscapular (left))',

        'left12' => 'Shoulder pain (Scapular (left))',

        'left13' =>  'Shoulder pain (Scapular (left))',

        'left14' => 'Shoulder pain (left)',

        'left15' =>  'Shoulder pain (Posterior deltoid (left))',

        'left16' =>  'Shoulder pain (Suprascapular (left))',

        );



        /* // these array not used according to new design

        // following array is used in  for image realted question array(case 43)



        $img_backpain_loc = array('topleft' => 'Shoulder pain (left)', 'topmid' => 'Cervical', 'topright' => 'Shoulder pain(right)', 'mid' => 'Upper back pain', 'midbottom' => 'Low back pain', 'bottomleft' => 'Buttockpain(left)',  'bottomright' => 'Buttockpain(right)');



        $img_backpain_detail = array('topleft' => array('Suprascapular (left)', 'Posterior deltoid (left)'), 'topmid' => array('Cervical'), 'topright' => array('Posterior deltoid (right)', 'Suprascapular (right)'), 'mid' => array('Interscapular (left)', 'Scapular (left)', 'Scapular (right)', 'Interscapular (right)', 'Thoracic'), 'midbottom' => array('Infrascapular (left)', 'Sacral', 'Lumbar', 'Infrascapular (right)'), 'bottomleft' => array(), 'bottomright' => array() );



        */





        $prev_ccd = $prev_visit_user_detail->chief_compliant_details;

        $recent_ccd = $user_detail->chief_compliant_details;

        if(is_array($prev_ccd)){



        // this block will replace the key of this array as question id so that we can use that in the coming block

            $temp_prev_ccd = array();

            foreach ($prev_ccd as $key => $value) {

                if(is_array($value)){

                  foreach ($value as $k1 => $v1) {

                     if(is_numeric($k1)){

                        $temp_prev_ccd[$key][$v1['question_id']] = $v1;

                     }else if(is_string($k1)){

                        $temp_prev_ccd[$key][$k1] = $v1 ;

                     }

                  }



                }

            }

        }



        //pr($temp_prev_ccd);die;



        $prev_ccd = $temp_prev_ccd ;

        $prev_recent_ccd = array();



         //pr($recent_ccd);die;

        // pr($prev_ccd);die;



        // get the prev and recent cc detials int the same array for comparison

        foreach ($recent_ccd as $key => $value) {

            // $prev_recent_ccd[$key] = $value ;

            if(is_array($value)){



              foreach ($value as $k1 => $v1) {



                if(is_numeric($k1)){

                   // pr($v1); die;

                  // $prev_recent_ccd[$key][$k1]['prev_answer'] = isset($prev_ccd[$key][$k1]['answer']) ? $prev_ccd[$key][$k1]['answer'] : '' ;

                    $prev_recent_ccd[$key][$v1['question_id']]['question_id'] = $v1['question_id'] ;

                    $prev_recent_ccd[$key][$v1['question_id']]['answer'] = $v1['answer'] ;

                    $prev_recent_ccd[$key][$v1['question_id']]['prev_answer'] = isset($prev_ccd[$key][$v1['question_id']]['answer']) ? $prev_ccd[$key][$v1['question_id']]['answer'] : '' ;

                }

                else {



                    $prev_recent_ccd[$key][$k1] = $v1;



                }



              }

            }

        }



        $recent_more_options = $user_detail->more_options ;

        $prev_more_options = $prev_visit_user_detail->more_options ;



        $all_cc_name = '' ;

        $layman_summar = '' ;

        $case_19_34_35 = '';



       //pr($prev_recent_ccd);die;



        if(!empty($prev_recent_ccd) && is_array($prev_recent_ccd)){



            foreach ($prev_recent_ccd as $key => $value) {



                $case_15_how_many_days = '';



                foreach ($value as $k => $singlelevel) {

                    if(is_string($k) && $k == 'cc_data'){



                        $all_cc_name .=  $singlelevel->name.', '; // collect all cc



                        // $layman_summar .= " The following is for the chief complaint of ".strtolower($singlelevel->name).': ' ;



                        if($user_detail->chief_compliant_id->id != $key){

                            // $layman_summar .= " The following is for the chief complaint of ".strtolower($singlelevel->name).': ' ;

                             // The patient is also presenting with whateverchiefcomplaint for howevermany days.

                             $layman_summar .= 'The patient is also presenting with '.strtolower($singlelevel->name).'. ' ;



                        }

                        else{



                            $layman_summar .= ' ';  // for adding space

                        }





                    }

                    else

                    {

                        switch ($singlelevel['question_id']){



                            case 1:

                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                                $layman_summar .= "Patient localizes the pain to the ".strtolower($singlelevel['answer']).strtolower($prev_answer).'. ' ;

                                    break;

                            case 2:

                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                                $layman_summar .= "The pain felt ".strtolower($singlelevel['answer']).$prev_answer.'. ';

                                break;



                            case 4:



                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;





                                // "better_factors" => "The following made it better: ", "worse_factors" => "The following made it worse: "

                                    // $ques_ans_4 = "The following made it better: ".$singlelevel['answer'].''.$prev_answer;

                                // The patient states that the pain is better with exercise and worse with leaning over.



                                // $ques_ans_4 = $singlelevel['answer'].''.$prev_answer.' makes it better';

                                $ques_ans_4 = 'The patient states that the pain is better with '.strtolower($singlelevel['answer']).''.strtolower($prev_answer);

                                if(!empty($ques_ans_5)){

                                    $layman_summar .= $ques_ans_4.''.$ques_ans_5.'. ';

                                    $ques_ans_4 = ''; $ques_ans_5 = '';

                                }



                                // $layman_summar .= "The following made it better: <strong>".$singlelevel['answer'].'.</strong><br />';

                                break;



                            case 5:



                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                                // $ques_ans_5 = "The following made it worse: ".$singlelevel['answer'].''.$prev_answer;

                                // The patient states that the pain is better with exercise and worse with leaning over.



                                // $ques_ans_5 = $singlelevel['answer'].''.$prev_answer.'  makes it worse';

                                    $ques_ans_5 = ' and worse with '.strtolower($singlelevel['answer']).''.strtolower($prev_answer);



                                  if(!empty($ques_ans_4)){

                                    $layman_summar .= $ques_ans_4.''.$ques_ans_5.'. ';

                                    $ques_ans_4 = ''; $ques_ans_5 = '';

                                  }

                                // $layman_summar .= $ques_ans_4.'. '.$ques_ans_5.'. ';



                                // $layman_summar .= "The following made it worse: <strong>".$singlelevel['answer'].'.</strong><br />';

                                break;

                            case 6:





                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                                $layman_summar .= "It occurred most often: ".strtolower($singlelevel['answer']).''.strtolower($prev_answer).'. ';

                                break;



                            case 7:



                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;





                                $layman_summar .= "The usual duration is ".$singlelevel['answer'].''.$prev_answer." minutes. ";

                                break;

                            case 8:

                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                                $layman_summar .= "It occurs ".$singlelevel['answer'].''.$prev_answer." times in a day. ";

                                break;

                            case 9:



                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                                $layman_summar .= stripos($singlelevel['answer'], 'about') !== false ?  "It feels about the same all day. ".''.$prev_answer  :  "It was worst during the: ".$singlelevel['answer'].''.$prev_answer.". " ;

                                break;

                            case 10:



                                // "rest_severity" => "Out of 10, the rest pain severity is ", "worst_severity" => "Out of 10, the worst pain severity is "

                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                                // $ques_ans_10 = "Out of 10, the best pain severity is ".$singlelevel['answer'].''.$prev_answer;

                                $ques_ans_10 = $singlelevel['answer'].''.$prev_answer;

                                if(!empty($ques_ans_11)){

                                    // $layman_summar .= $ques_ans_10.'. '.$ques_ans_11.'. ';

                                    $layman_summar .= "Out of 10, the pain at its best is a ".$ques_ans_10.", and a ".$ques_ans_11." at its worst. ";

                                    $ques_ans_10 = '' ; $ques_ans_11 = '' ;

                                }



                                break;

                            case 11:



                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                                $ques_ans_11 = $singlelevel['answer'].''.$prev_answer;

                                if(!empty($ques_ans_10)){

                                    // $layman_summar .= $ques_ans_10.'. '.$ques_ans_11.'. ';

                                    $layman_summar .= "Out of 10, the pain at its best is a ".$ques_ans_10.", and a ".$ques_ans_11." at its worst. ";

                                    $ques_ans_10 = '' ; $ques_ans_11 = '' ;

                                }

                                break;



                            case 12:





                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                                $layman_summar .=  "The pain felt ".strtolower($singlelevel['answer']).''.strtolower($prev_answer).". " ;

                                break;

                            case 13:



                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.($singlelevel['prev_answer'] == 'Yes' ? "Patient tried medication "  : "Patient didn't try medication").')' ) ;

                                // "any_medication" => ["tried_medication" => array("yes" => "Patient tried medication", "no" => "Patient didn't try medication"), "medication_improvement" => array("yes" => "Since then, it has improved", "no" => "Since then, it hasn't improved")]

                                $ques_ans_13 =   $singlelevel['answer'] == 'Yes' ? "Patient tried medication".$prev_answer."."  : "Patient didn't try medication".$prev_answer."." ;

                                if(!empty($ques_ans_14)){



                                    $layman_summar .= $ques_ans_13.' '.$ques_ans_14.'. ';

                                    $ques_ans_13 = '' ; $ques_ans_14 = '' ;



                                }

                                break;

                            case 14:



                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.($singlelevel['prev_answer'] == 'Yes' ? "it has improved"  : "it hasn't improved").')' ) ;







                                $ques_ans_14 =  $singlelevel['answer'] == 'Yes' ? " Since then, it has improved".$prev_answer."."  : " Since then, it hasn't improved".$prev_answer."." ;

                                if(!empty($ques_ans_13)){



                                    $layman_summar .= $ques_ans_13.''.$ques_ans_14.'. ';

                                    $ques_ans_13 = '' ; $ques_ans_14 = '' ;

                                }

                                break;

                            case 15:



                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                                // below line commented on 22-03-19 as not required according to client

                                // $layman_summar .=  "The symptom has lasted for: ".$singlelevel['answer'].''.$prev_answer.". " ;

                               $case_15_how_many_days = $singlelevel['answer'];



                               break;

                            case 16:

                                // "Patient feels pain in " left/right/both " hand" (hands for both), "if_both": "left hand is worse"/"right hand is worse"/"both hands hurt about the same"

                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.(stripos($singlelevel['prev_answer'], 'both') !== FALSE ? 'bilateral' : $singlelevel['prev_answer'].'hand').')' ) ;

                                $ques_ans_16 = "Patient feels pain in ".(stripos($singlelevel['answer'], 'both') !== FALSE ? 'bilateral' : $singlelevel['answer'].'hand').''.$prev_answer ;

                               if(!empty($ques_ans_17)){

                                  $layman_summar .= $ques_ans_16.', '.$ques_ans_17.'. ';

                                  $ques_ans_16 = ''; $ques_ans_17 = '';

                               }

                               break;



                            case 17:



                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                                if(stripos($singlelevel['answer'], 'left') !== FALSE) $ques_ans_17 =  'and the left hand is worse'.$prev_answer;

                                if(stripos($singlelevel['answer'], 'right') !== FALSE) $ques_ans_17 =  'and the right hand is worse'.$prev_answer;

                                if(stripos($singlelevel['answer'], 'about') !== FALSE) $ques_ans_17 =  'and the bilateral hurt about the same'.$prev_answer;



                               if(!empty($ques_ans_16)){

                                  $layman_summar .= $ques_ans_16.' '.$ques_ans_17.'. ';

                                  $ques_ans_16 = ''; $ques_ans_17 = '';

                               }

                               // $layman_summar .=  " And among both hand Patient feel :  <strong>".$singlelevel['answer']."</strong><br/>" ;

                               break;

                            case 18:



                                // "The pain is on the " back/palm/both " and " thumb side/small finger side/both

                                // {"palm":"palmar surface", "back":"dorsal surface", "thumb side": "radial-sided", "small finger side": "ulnar-sided" } #both for back and palm would be "palmar and dorsal surface", both for thumb-side and small finger side would be "diffuse"

                                // layman technical convesrsion

                                $translate_case18 = array("palm"=>"palmar surface", "back"=>"dorsal surface", "thumb side" => "radial-sided", "small finger side"=> "ulnar-sided") ;

                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.(stripos($singlelevel['prev_answer'], 'both') !== FALSE ? 'palmar and dorsal surface' : (!empty($translate_case18[strtolower($singlelevel['prev_answer'])]) ? $translate_case18[strtolower($singlelevel['prev_answer'])] : $singlelevel['prev_answer'] )).')' ) ;





                                // below line is copied from below and pasted above for translation purpose

                                // (stripos($singlelevel['prev_answer'], 'both') !== FALSE ? 'palmar and dorsal surface' : (!empty($translate_case18[strtolower($singlelevel['prev_answer'])]) ? $translate_case18[strtolower($singlelevel['prev_answer'])] : $singlelevel['prev_answer'] ))





                                // above translation related code is taken from the below code



                                $first_case18 = (stripos($singlelevel['answer'], 'both') !== FALSE ? 'palmar and dorsal surface'.$prev_answer : (!empty($translate_case18[strtolower($singlelevel['answer'])]) ? $translate_case18[strtolower($singlelevel['answer'])].''.$prev_answer : $singlelevel['answer'].''.$prev_answer ));



                                // $recent_more_options

                                // $prev_more_options



                                $prev_answer = '';



                                $prev_answer = empty($prev_more_options[$key][18]) ? '' : ( $recent_more_options[$key][18] == $prev_more_options[$key][18] ? ' (no change)' : ' (from '.(!empty($prev_more_options[$key][18])  ? (stripos($prev_more_options[$key][18], 'both') !== FALSE  ? 'diffuse' : (!empty($translate_case18[strtolower($prev_more_options[$key][18])]) ? $translate_case18[strtolower($prev_more_options[$key][18])] : $prev_more_options[$key][18] ) ) : '').')' ) ;

                                // in above code translation related code taken from below



                                // (!empty($prev_more_options[$key][18])  ? (stripos($prev_more_options[$key][18], 'both') !== FALSE  ? 'diffuse' : (!empty($translate_case18[strtolower($prev_more_options[$key][18])]) ? $translate_case18[strtolower($prev_more_options[$key][18])] : $prev_more_options[$key][18] ) ) : '')

                                $second_case18 =(!empty($recent_more_options[$key][18])  ? (stripos($recent_more_options[$key][18], 'both') !== FALSE  ? 'diffuse'.$prev_answer : (!empty($translate_case18[strtolower($recent_more_options[$key][18])]) ? $translate_case18[strtolower($recent_more_options[$key][18])].''.$prev_answer : $recent_more_options[$key][18].''.$prev_answer ) ) : '');





                                $layman_summar .=  "The pain is on the ".$first_case18.' and '.$second_case18.'. ' ;

                                break;



                               /* comemnted because we use 34 and 35 for question id 20

                            case 20:

                            // The pain is on the " back/front/joints(knuckle/middle joint/finger-tip joint)/whole finger

                              $ques_ans_20 =   "The pain is on the ".$singlelevel['answer'] ;

                              if(isset($ques_ans_19)){

                                  $layman_summar .= $ques_ans_20.''.$ques_ans_19.'. ';

                                  $ques_ans_20 = ''; $ques_ans_19 = '';

                              }

                                 // $layman_summar .= $ques_ans_20.''.$ques_ans_19.'. ';

                               // $layman_summar .=  "Part of hand in which Patient feel pain : <strong>".$singlelevel['answer']."</strong><br/>" ;

                               break;

                               */

                            case 21:



                                // "Patient has stiffness in " right/left/both/neither " hand and " right/left/both/neither " wrist"

                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.(stripos($singlelevel['prev_answer'], 'both') !== FALSE ? 'bilateral' : strtolower($singlelevel['prev_answer']). " hand").')' ) ;

                                $ques_ans_21 =  "Patient has stiffness in " .(stripos($singlelevel['answer'], 'both') !== FALSE ? 'bilateral' : strtolower($singlelevel['answer']). " hand").''.$prev_answer;

                                if(!empty($ques_ans_22)){

                                    $layman_summar .= $ques_ans_21.''.$ques_ans_22.'. ';

                                    $ques_ans_21 = ''; $ques_ans_22 = '';

                                }

                                // $layman_summar .= $ques_ans_21.''.$ques_ans_22.'. ';

                               // $layman_summar .=  "Patient have stiffness in : <strong>".$singlelevel['answer']." hand</strong><br/>" ;

                               break;

                            case 22:



                                // and " right/left/both/neither " wrist"

                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.(strtolower($singlelevel['prev_answer'])." ".(stripos($singlelevel['prev_answer'], 'both') !== FALSE ? 'wrists' : 'wrist')).')' ) ;

                               $ques_ans_22 =  " and ".strtolower($singlelevel['answer'])." ".(stripos($singlelevel['answer'], 'both') !== FALSE ? 'wrists' : 'wrist').''.$prev_answer ;

                                 if(!empty($ques_ans_21)){

                                   $layman_summar .= $ques_ans_21.''.$ques_ans_22.'. ';

                                    $ques_ans_21 = ''; $ques_ans_22 = '';

                                 }

                               // $layman_summar .=  "Patient have stiffness in : <strong>".$singlelevel['answer']." wrist</strong><br/>" ;

                               break;

                            case 23:



                                // "The feeling is " on the palm/on the back/on the both/not on the hand " and " on the thumb/on the index finger/on the middle finger/on the ring finger/on the little finger/not on the fingers (or a combination of thumb/index/middle/ring/little fingers) "and " palm side forearm/back hand side forearm/not on the forearm

                                // {"thumb": "first digit", "index": "second digit", "middle": "third digit", "ring": "fourth digit", "little": "fifth digit", "palm":"palmar surface", "back":"dorsal surface"} #both for back and palm would be "palmar and dorsal surface"



                                $translate_case23 = array("thumb"=> "first digit", "index"=> "second digit", "middle"=> "third digit", "ring"=> "fourth digit", "little"=> "fifth digit");



                                if(is_array($singlelevel['answer'])){

                                    foreach ($singlelevel['answer'] as $k19 => $v19)

                                    {

                                        $singlelevel['answer'][$k19] = !empty($translate_case23[strtolower($v19)]) ? $translate_case23[strtolower($v19)] : $v19 ;

                                    }

                                    $singlelevel['answer'] = implode(', ', $singlelevel['answer']) ;

                                    $prev_answer = '';



                                    if(is_array($singlelevel['prev_answer'])){



                                        foreach ($singlelevel['prev_answer'] as $k19 => $v19)

                                        {

                                            $singlelevel['prev_answer'][$k19] = !empty($translate_case23[strtolower($v19)]) ? $translate_case23[strtolower($v19)] : $v19 ;

                                        }



                                        $singlelevel['prev_answer'] = implode(', ', $singlelevel['prev_answer']) ;

                                        $prev_answer = '';

                                        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                                    }

                                }



                                $ques_ans_23 = stripos($singlelevel['answer'], ',') !== false ? " and on the ".$singlelevel['answer']." fingers ".$prev_answer : (stripos($singlelevel['answer'], 'not') !== false ?  " and ".strtolower($singlelevel['answer']).''.strtolower($prev_answer).' ' :  " and on the ".strtolower($singlelevel['answer'])." finger ".$prev_answer  );



                                // $ques_ans_23 = (is_array($singlelevel['answer']) ? " and on the ".implode(', ', $singlelevel['answer'])." fingers " : (stripos($singlelevel['answer'], 'not') !== false ? " and ".strtolower($singlelevel['answer']) : " and on the ".$singlelevel['answer']." finger " ));

                                // .'' .(is_array($singlelevel['answer']) && count($singlelevel['answer'])> 1 ? ' fingers ' : ' finger ' );



                            if(!empty($ques_ans_24) && !empty($ques_ans_25)){

                                $layman_summar .= $ques_ans_24.''.$ques_ans_23.''.$ques_ans_25.'. ';

                                $ques_ans_24 = ''; $ques_ans_23 = ''; $ques_ans_25 = '';

                            }

                            // $layman_summar .= $ques_ans_24.''.$ques_ans_23.''.$ques_ans_25.'. ';

                            // $layman_summar .=  "Patient feel it in the finger(s) : <strong>".(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer'])."</strong><br/>" ;

                            break;

                        case 24:



                            // "The feeling is " on the palm/on the back/on the both/not on the hand

                            $translate_case24 = array("palm"=>"palmar surface", "back"=>"dorsal surface") ;

                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.(stripos($singlelevel['prev_answer'], 'both') !== FALSE ? 'palmar and dorsal surface' : (!empty($translate_case24[strtolower($singlelevel['prev_answer'])]) ? $translate_case24[strtolower($singlelevel['prev_answer'])] : (stripos($singlelevel['prev_answer'], 'not') !== FALSE ? strtolower($singlelevel['prev_answer']) : strtolower($singlelevel['prev_answer'])) )).')' ) ;

                            // translation related code used in above code is copied from below code



                        $first_case24 = (stripos($singlelevel['answer'], 'both') !== FALSE ? 'palmar and dorsal surface' : (!empty($translate_case24[strtolower($singlelevel['answer'])]) ? $translate_case24[strtolower($singlelevel['answer'])] : $singlelevel['answer'] ));



                        $first_case24 = (stripos($first_case24, 'not') !== FALSE ? "The feeling is  ".strtolower($first_case24) : "The feeling is on the ".strtolower($first_case24)).''.$prev_answer ;

                        $ques_ans_24 = $first_case24  ;



                       if(!empty($ques_ans_23) && !empty($ques_ans_25)){

                        $layman_summar .= $ques_ans_24.''.$ques_ans_23.''.$ques_ans_25.'. ';

                        $ques_ans_24 = ''; $ques_ans_23 = ''; $ques_ans_25 = '';

                       }

                        // $layman_summar .= $ques_ans_24.''.$ques_ans_23.''.$ques_ans_25.'. ';

                       // $layman_summar .=  "Patient feel it in : <strong>".$singlelevel['answer']." side of the hand</strong> <br/>" ;

                       break;

                    case 25:

                        $prev_answer = '';

                        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                          // "and " palm side forearm/back hand side forearm/not on the forearm

                        $ques_ans_25 = "and ".strtolower($singlelevel['answer']).''.$prev_answer ;

                        if(!empty($ques_ans_23) && !empty($ques_ans_24)){

                            $layman_summar .= $ques_ans_24.''.$ques_ans_23.''.$ques_ans_25.'. ';

                            $ques_ans_24 = ''; $ques_ans_23 = ''; $ques_ans_25 = '';

                        }

                        // $layman_summar .= $ques_ans_24.''.$ques_ans_23.''.$ques_ans_25.'. ';

                        // $layman_summar .=  "Patient feel it in : <strong>".$singlelevel['answer']."</strong> <br/>" ;

                        break;

                           /*

                        case 26:

                           $layman_summar .=  $singlelevel['answer'] == "Yes" ? "<strong>Unfortunately, you met with a trauma or accident.</strong><br/>" : "<strong>No trauma or accident you experienced.</strong><br/>" ;

                           break;

                           */

                        case 27:

                             // "There was no trauma/accident"/"There was trauma/accident and this happened: "

                            // now client need as below line

                            // The patient experienced trauma/accident associated with whatevertrauma.

                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.(!empty($singlelevel['prev_answer']) ? "The patient experienced trauma/accident associated with ".$singlelevel['prev_answer'] : "There was no trauma/accident").')' ) ;









                           $layman_summar .=  (!empty($singlelevel['answer']) ? "The patient experienced trauma/accident associated with ".$singlelevel['answer'] : "There was no trauma/accident").$prev_answer.'. ' ;

                           // $layman_summar .=  "Patient the following trauma or accident : <strong>".$singlelevel['answer']."</strong><br/>" ;

                           break;

                        case 28:



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;





                            $ques_ans_28 = "The patient describes the pain as ".$singlelevel['answer'].''.$prev_answer.", " ;



                            if(!empty($ques_ans_29) && !empty($ques_ans_30)){

                               $layman_summar .= $ques_ans_28.''.$ques_ans_29.''.$ques_ans_30.'. ';

                               $ques_ans_28 = '' ; $ques_ans_29 = '' ; $ques_ans_30 = '' ;

                            }



                            // "The pain is " aching/burning/throbbing/shooting ", " constant/comes and goes " and " is the worst in the morning/is the worst in the afternoon/is the worst in the night/about the same all day



                            // $layman_summar .=  "Patient described the pain as : <strong>".$singlelevel['answer']."</strong><br/>" ;

                            break;

                        case 29:



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;





                            $ques_ans_29 = $singlelevel['answer'].''.$prev_answer ;



                             if(!empty($ques_ans_28) && !empty($ques_ans_30)){

                               $layman_summar .= $ques_ans_28.''.$ques_ans_29.''.$ques_ans_30.'. ';

                               $ques_ans_28 = '' ; $ques_ans_29 = '' ; $ques_ans_30 = '' ;

                               // $layman_summar .= $ques_ans_28.''.$ques_ans_29.''.$ques_ans_30.'. ';

                             }

                           // $layman_summar .=  "Patient specified this about pain : <strong>".$singlelevel['answer']."</strong><br/>" ;

                           break;

                        case 30:



                            $prev_answer = '';



                            $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);



                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.(stripos($singlelevel['prev_answer'], 'about') !== FALSE ? 'about the same all day' : $singlelevel['prev_answer']).')' ) ;





                            $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);

                              $ques_ans_30 = (stripos($singlelevel['answer'], 'about') !== FALSE ? ' and is about the same all day' : " and is the worst in the ". $singlelevel['answer']).''.$prev_answer ;



                             if(!empty($ques_ans_28) && !empty($ques_ans_29)){

                               // $layman_summar .= $ques_ans_28.''.$ques_ans_29.''.$ques_ans_30.'. ';

                               $layman_summar .= $ques_ans_28.''.$ques_ans_29.''.$ques_ans_30.'. ';

                               $ques_ans_28 = '' ; $ques_ans_29 = '' ; $ques_ans_30 = '' ;

                             }



                           // $layman_summar .=  "Patient found the pain is worse during :  <strong>".$singlelevel['answer']."</strong><br/>" ;

                           break;

                        case 31:

                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;





                           $layman_summar .=  "The pain onset was ".$singlelevel['answer'].''.$prev_answer.'. ' ;



                           break;

                        case 19:

                            // "The pain is on the " back/front/joints(knuckle/middle joint/finger-tip joint)/whole finger " in the " thumb/index/middle/ring/little (or multiple) " finger"/" fingers".



                            // {"thumb": "first digit", "index": "second digit", "middle": "third digit", "ring": "fourth digit", "little": "fifth digit"}

                            $translate_case19 = array("thumb"=> "first digit", "index"=> "second digit", "middle"=> "third digit", "ring"=> "fourth digit", "little"=> "fifth digit");



                            if(is_array($singlelevel['answer'])){

                              foreach ($singlelevel['answer'] as $k19 => $v19) {

                                    $singlelevel['answer'][$k19] = !empty($translate_case19[strtolower($v19)]) ? $translate_case19[strtolower($v19)] : $v19 ;

                                }



                                if(is_array($singlelevel['prev_answer'])){

                                    foreach ($singlelevel['prev_answer'] as $k19 => $v19) {

                                        $singlelevel['prev_answer'][$k19] = !empty($translate_case19[strtolower($v19)]) ? $translate_case19[strtolower($v19)] : $v19 ;

                                    }

                                }

                            }



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.((is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']). (is_array($singlelevel['prev_answer']) && count($singlelevel['prev_answer']) > 1 ? ' fingers' : ' finger')).')' ) ;



                            // code above is copied from below code

                            $ques_ans_19 =  " in the ".(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']). (is_array($singlelevel['answer']) && count($singlelevel['answer']) > 1 ? ' fingers' : ' finger'). ''. $prev_answer ;

                            if(!empty($ques_ans_34)){



                                $case_19_34_35 .= ' The pain is on the '.(stripos($ques_ans_34, 'joint') !== FALSE ? $ques_ans_34.' (***)' : $ques_ans_34).$ques_ans_19.'. ';

                                $ques_ans_34 = '';  $ques_ans_19 = '' ;



                            }

                           // $layman_summar .=  "Patient feel pain in the finger(s) :  <strong>".(is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer'])." </strong><br/>" ;

                           break;

                        case 34:

                                // The pain is on the " back/front/joints(knuckle/middle joint/finger-tip joint)/whole finger



                                $prev_answer = '';

                                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                               $ques_ans_34 = $singlelevel['answer'].''.$prev_answer ;

                                if( !empty($ques_ans_19)){



                                     $case_19_34_35 .= ' The pain is on the '.(stripos($ques_ans_34, 'joint') !== FALSE ? $ques_ans_34.' (***)' : $ques_ans_34).$ques_ans_19.'. ';

                                    $ques_ans_34 = '';  $ques_ans_19 = '' ;



                                }



                               break;

                        case 35:

                            // and " right/left/both/neither " wrist"

                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                           $ques_ans_35 =  $singlelevel['answer'].''.$prev_answer ;

                             $case_19_34_35 = str_replace('***', $ques_ans_35, $case_19_34_35) ;

                             // pr($case_19_34_35); die;

                           break;

                        case 36:



                            // below code is formatting realted task for subquesiton's answer

                            if(is_array($singlelevel['answer'])){

                              $temp_36_ar = array();

                              foreach ($singlelevel['answer'] as $k36 => $v36) {

                                  $t36 = explode('-', $v36);

                                 // $temp_36_ar[] = !empty($t36[1]) ? $t36[0].' ('.(stripos($t36[1], 'both') !== false ? 'bilateral' : $t36[1] ).')' : $t36[0] ;



                                 $temp_36_ar[] = !empty($t36[1]) ? (stripos($t36[1], 'both') !== false ? 'bilateral '. $t36[0] : $t36[1].' '. str_ireplace('feet', 'foot', rtrim($t36[0],'s')) ) : $t36[0] ;

                              }

                              $singlelevel['answer'] = $temp_36_ar ;

                            }

                            if(is_array($singlelevel['prev_answer'])){

                              $temp_36_ar = array();

                              foreach ($singlelevel['prev_answer'] as $k36 => $v36) {

                                  $t36 = explode('-', $v36);

                                 // $temp_36_ar[] = !empty($t36[1]) ? $t36[0].' ('.(stripos($t36[1], 'both') !== false ? 'bilateral' : $t36[1] ).')' : $t36[0] ;

                                 $temp_36_ar[] = !empty($t36[1]) ? (stripos($t36[1], 'both') !== false ? 'bilateral '. $t36[0] : $t36[1].' '. str_ireplace('feet', 'foot', rtrim($t36[0],'s')) ) : $t36[0] ;

                              }

                              $singlelevel['prev_answer'] = $temp_36_ar ;

                            }



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.strtolower(implode(', ', $singlelevel['prev_answer'])).')' ) ;

                          $layman_summar .=  "The patient feels numbness in the ".strtolower(implode(', ', $singlelevel['answer'])).''.strtolower($prev_answer).'. ' ;

                               break;

                        case 37:

                            // below code is formatting realted task for subquesiton's answer

                            if(is_array($singlelevel['answer'])){

                              $temp_36_ar = array();

                              foreach ($singlelevel['answer'] as $k36 => $v36) {

                                  $t36 = explode('-', $v36);

                                 // $temp_36_ar[] = !empty($t36[1]) ? $t36[0].' ('.(stripos($t36[1], 'both') !== false ? 'bilateral' : $t36[1] ).')' : $t36[0] ;

                                 $temp_36_ar[] = !empty($t36[1]) ? (stripos($t36[1], 'both') !== false ? 'bilateral '. $t36[0] : $t36[1].' '.str_ireplace('feet', 'foot', rtrim($t36[0],'s')) ) : $t36[0] ;

                              }

                              $singlelevel['answer'] = $temp_36_ar ;

                            }

                            if(is_array($singlelevel['prev_answer'])){

                              $temp_36_ar = array();

                              foreach ($singlelevel['prev_answer'] as $k36 => $v36) {

                                  $t36 = explode('-', $v36);

                                 // $temp_36_ar[] = !empty($t36[1]) ? $t36[0].' ('.(stripos($t36[1], 'both') !== false ? 'bilateral' : $t36[1] ).')' : $t36[0] ;

                                 $temp_36_ar[] = !empty($t36[1]) ? (stripos($t36[1], 'both') !== false ? 'bilateral '. $t36[0] : $t36[1].' '.str_ireplace('feet', 'foot', rtrim($t36[0],'s')) ) : $t36[0] ;

                              }

                              $singlelevel['prev_answer'] = $temp_36_ar ;

                            }







                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.strtolower(implode(', ', $singlelevel['prev_answer'])).')' ) ;





                         $layman_summar .=  "The patient feels tingling in the ".strtolower(implode(', ', $singlelevel['answer'])).''.strtolower($prev_answer).'. ' ;



                        break;

                    case 38:

                        // below code is formatting realted task for subquesiton's answer

                        if(is_array($singlelevel['answer'])){

                          $temp_36_ar = array();

                          foreach ($singlelevel['answer'] as $k36 => $v36) {

                              $t36 = explode('-', $v36);

                             // $temp_36_ar[] = !empty($t36[1]) ? $t36[0].' ('.(stripos($t36[1], 'both') !== false ? 'bilateral' : $t36[1] ).')' : $t36[0] ;

                             $temp_36_ar[] = !empty($t36[1]) ? (stripos($t36[1], 'both') !== false ? 'bilateral '. $t36[0] : $t36[1].' '.str_ireplace('feet', 'foot', rtrim($t36[0],'s')) ) : $t36[0] ;

                          }

                          $singlelevel['answer'] = $temp_36_ar ;

                        }

                        if(is_array($singlelevel['prev_answer'])){

                          $temp_36_ar = array();

                          foreach ($singlelevel['prev_answer'] as $k36 => $v36) {

                              $t36 = explode('-', $v36);

                             // $temp_36_ar[] = !empty($t36[1]) ? $t36[0].' ('.(stripos($t36[1], 'both') !== false ? 'bilateral' : $t36[1] ).')' : $t36[0] ;

                             $temp_36_ar[] = !empty($t36[1]) ? (stripos($t36[1], 'both') !== false ? 'bilateral '. $t36[0] : $t36[1].' '.str_ireplace('feet', 'foot', rtrim($t36[0],'s')) ) : $t36[0] ;



                          }

                          $singlelevel['prev_answer'] = $temp_36_ar ;

                        }







                        $prev_answer = '';

                        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.strtolower(implode(', ', $singlelevel['prev_answer'])).')' ) ;



                           $layman_summar .=  "The patient feels weakness in the ".strtolower(implode(', ', $singlelevel['answer'])).''.strtolower($prev_answer).'. ' ;

                        break;

                    case 39:



                        $prev_answer = '';

                        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.str_ireplace("radiating","radiating**39prev**",strtolower(implode(', ', $singlelevel['prev_answer']))).')' ) ; // str_ireplace for radiating



                       // str_ireplace("radiating","radiating**39**",strtolower(implode(', ', $singlelevel['prev_answer']))) ;

                        $ques_ans_39 = "The pain is described as ".str_ireplace("radiating","radiating**39**",strtolower(implode(', ', $singlelevel['answer']))).''.strtolower($prev_answer).", " ;



                        $ques_ans_39 = stripos($ques_ans_39, 'none') ? "The pain is described as " : $ques_ans_39 ; // In case of "none of the above", we remove the option



                        if(!empty($ques_ans_41) && !empty($ques_ans_42)){



                            if(!empty($ques_ans_40_prev)) $ques_ans_39 = str_ireplace("**39prev**"," (".$ques_ans_40_prev.")",$ques_ans_39) ;

                            if(!empty($ques_ans_40_new)) $ques_ans_39 = str_ireplace("**39**"," (".$ques_ans_40_new.")",$ques_ans_39) ;

                             $ques_ans_39 = str_ireplace("**39prev**","",$ques_ans_39) ;

                            $ques_ans_39 = str_ireplace("**39**","",$ques_ans_39) ;



                           $layman_summar .= $ques_ans_39.''.$ques_ans_41.''.$ques_ans_42.'. ';

                           $ques_ans_39 = '' ; $ques_ans_41 = '' ; $ques_ans_42 = '' ;

                        }

                        break;

                    case 40:



                        $ques_ans_40_prev = $singlelevel['prev_answer'];

                          $ques_ans_40_new = $singlelevel['answer'];

                        break;

                    case 41:



                        $prev_answer = '';

                        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                        $ques_ans_41 = strtolower($singlelevel['answer']).''.strtolower($prev_answer)  ;



                        if(!empty($ques_ans_39) && !empty($ques_ans_42)){



                            if(!empty($ques_ans_40_prev)) $ques_ans_39 = str_ireplace("**39prev**"," (".$ques_ans_40_prev.")",$ques_ans_39) ;

                            if(!empty($ques_ans_40_new)) $ques_ans_39 = str_ireplace("**39**"," (".$ques_ans_40_new.")",$ques_ans_39) ;

                             $ques_ans_39 = str_ireplace("**39prev**","",$ques_ans_39) ;

                            $ques_ans_39 = str_ireplace("**39**","",$ques_ans_39) ;



                           $layman_summar .= $ques_ans_39.''.$ques_ans_41.''.$ques_ans_42.'. ';

                           $ques_ans_39 = '' ; $ques_ans_41 = '' ; $ques_ans_42 = '' ;

                         }

                        break;

                    case 42:



                            $prev_answer = '';

                            // now we use checkbox instead of radio button

                            $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);



                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.(stripos($singlelevel['prev_answer'], 'about') !== FALSE ? 'about the same all day' : $singlelevel['prev_answer']).')' ) ;

                            $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);



                            $ques_ans_42 = (stripos($singlelevel['answer'], 'about') !== FALSE ? ' and is about the same all day' : " and is the worst in the ". strtolower($singlelevel['answer']) ).''.$prev_answer  ;

                            if(!empty($ques_ans_39) && !empty($ques_ans_41)){



                                if(!empty($ques_ans_40_prev)) $ques_ans_39 = str_ireplace("**39prev**"," (".$ques_ans_40_prev.")",$ques_ans_39) ;

                                if(!empty($ques_ans_40_new)) $ques_ans_39 = str_ireplace("**39**"," (".$ques_ans_40_new.")",$ques_ans_39) ;

                                 $ques_ans_39 = str_ireplace("**39prev**","",$ques_ans_39) ;

                                  $ques_ans_39 = str_ireplace("**39**","",$ques_ans_39) ;



                               $layman_summar .= $ques_ans_39.''.$ques_ans_41.''.$ques_ans_42.'. ';

                               $ques_ans_39 = '' ; $ques_ans_41 = '' ; $ques_ans_42 = '' ;

                            }

                            break;



                    case 71 :



                        $prev_answer = '';



                            $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);



                            $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);



                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                              $layman_summar .= "The patient noticed symptoms starting after eating ". $singlelevel['answer'].''.$prev_answer .". ";

                        break;



                    case 72:



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].' times)' ) ;

                            $layman_summar .= "It has occurred ".$singlelevel['answer']." time(s) ".$prev_answer.'. ' ;

                            break;



                    case 73:



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                            $layman_summar .= $singlelevel['answer'].$prev_answer.', I having trouble drinking liquids or swallowing solid food. ' ;



                            $question_73 = $singlelevel['answer'];

                            break;



                     case 74:



                            $prev_answer = '';

                            $question_74 = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                            if(isset($question_73) && $question_73 == 'Yes'){

                                if($singlelevel['answer'] == 'Liquids only'){



                                    $question_74 = $prev_answer;



                                }else{



                                     $layman_summar .= $singlelevel['answer'].$prev_answer.' having trouble swallowing. ' ;

                                }

                            }



                            break;



                    case 75:



                        $prev_answer = '';



                            $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);



                            $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);



                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                            if(isset($question_74) && $question_74 == 'Liquids only'){



                              $layman_summar .= $singlelevel['answer'].''.$prev_answer ."having trouble swallowing. ";

                            }

                        break;



                    case 76 :



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                            $question_76 = $singlelevel['answer'].$prev_answer;



                        break;



                    case 77 :



                            $arr = array(



                                0 => 'How often',

                                1 => 'Every day',

                                2 => 'Every other day',

                                3 => 'per week'



                              );



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$arr[$singlelevel['prev_answer']].')' ) ;

                           // pr($singlelevel['answer']);die;

                            $layman_summar .= $arr[$singlelevel['answer']].$prev_answer." ".(!empty($question_76) ? $question_76 : "")." times go for a number two. ";



                            break;



                    case 78 :



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                            $layman_summar .= $singlelevel['answer'].$prev_answer.' recently traveled out of the country.' ;

                            break;



                    case 79 :



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                            $layman_summar .= $singlelevel['answer'].$prev_answer.' country recently traveled. ' ;

                            break;



                     case 80 :



                        $prev_answer = '';



                            $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);



                            $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);



                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                              //$layman_summar .= $singlelevel['answer'].''.$prev_answer ." medications recently started. ";



                              $layman_summar .= "The patient recently started ".$singlelevel['answer'].''.$prev_answer .". ";

                        break;



                    case 81 :



                        $prev_answer = '';



                            $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);



                            $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);



                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                              $layman_summar .= $singlelevel['answer'].''.$prev_answer ." fruits eat. ";

                        break;



                    case 82 :



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                            $layman_summar .= $singlelevel['answer'].$prev_answer.' glasses water dring in a day. ' ;

                            break;



                    case 83:



                        $prev_answer = '';



                            $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);



                            $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);



                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                              //$layman_summar .= $singlelevel['answer'].''.$prev_answer ." medications recently started. ";



                              $layman_summar .= "The patient recently started ".$singlelevel['answer'].''.$prev_answer .". ";



                        break;



                    case 84:



                          $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                            $layman_summar .= $singlelevel['answer'].$prev_answer.' Times per week notice blood in stool. ' ;

                            break;

                    case 85:



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                            $layman_summar .= $singlelevel['answer'].$prev_answer.', I have notice bright red streaks of blood on the toilet paper. ' ;

                            break;

                    case 86:



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                            $layman_summar .= $singlelevel['answer'].$prev_answer.' is the color of stool. ' ;

                            break;



                    case 87:



                        $prev_answer = '';



                            $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);



                            $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);



                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                              //$layman_summar .= $singlelevel['answer'].''.$prev_answer ." medications recently started. ";



                              $layman_summar .= "The patient recently started ".$singlelevel['answer'].''.$prev_answer .". ";

                        break;



                    case 88 :



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                            $layman_summar .= $singlelevel['answer'].$prev_answer.', I was eat at restaurants within 24 hours of symptoms. ' ;

                            break;

                    case 89 :



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                            $question_89 = $singlelevel['answer'].$prev_answer;



                            break;

                    case 90 :



                            $prev_answer = '';



                            $singlelevel['prev_answer'] = (is_array($singlelevel['prev_answer']) ? implode(', ', $singlelevel['prev_answer']) : $singlelevel['prev_answer']);



                            $singlelevel['answer'] = (is_array($singlelevel['answer']) ? implode(', ', $singlelevel['answer']) : $singlelevel['answer']);



                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                            if(isset($question_89)){



                               $layman_summar .= "I was eat ".$question_89." at ".(is_array($singlelevel['answer']) ? implode(", ", $singlelevel['answer']) : $singlelevel['answer']).$prev_answer.". ";

                            }

                            break;



                    case 91 :



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                            $layman_summar .= $singlelevel['answer'].$prev_answer.', I Have been in contact with any sick children within 24 hours of symptoms starting. ' ;

                            break;

                    case 92 :



                            $prev_answer = '';

                            $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                            $layman_summar .= $singlelevel['answer'].$prev_answer.' pregnant. ' ;

                            break;

                     case 146 :



                            $question_146 = array(



                                'worse' => 'aggravate',

                                'better' => 'alleviate',

                                'about the same' => 'same'



                              );



                          $layman_summar .= "Overall, you feels ".$question_146[$singlelevel['answer']]." since your last visit. ";

                          break;

                    case 147 :



                          if(!empty($singlelevel['answer'])){

                              $layman_summar .= ucfirst($singlelevel['answer'])." makes aggravate. ";

                          }

                          break;



                    case 148 :



                          if(!empty($singlelevel['answer'])){



                              $layman_summar .= ucfirst($singlelevel['answer'])." makes alleviate. ";

                            }

                          break;

                    case 149 :



                          $layman_summar .= "<strong>".$singlelevel['answer']."</strong>, you have been vomiting.<br>";

                          break;



                    case 150 :



                          $layman_summar .= "<strong>".$singlelevel['answer']." times</strong> you vomited since your last visit. <br>";

                          break;

                    case 151 :



                          $layman_summar .= "<strong>".$singlelevel['answer']."</strong>, you have seen bright red blood.<br>";

                          break;

                    case 152 :



                          $layman_summar .= "<strong>".$singlelevel['answer']."</strong>, you have seen stuff that looks like coffee grounds.<br>";

                          break;



                    case 43:



                        $prev_answer = '';

                        $temp_str_43 = '';

                        if(!empty($singlelevel['answer'])){



                            if(!empty($singlelevel['prev_answer'])){



                                if($singlelevel['answer'] == $singlelevel['prev_answer']){



                                    $prev_answer = ' (no change)' ;

                                    // $prev_answer_temp_str_43 == $prev_answer;

                                }

                                else

                                {





                                    $singlelevel['prev_answer'] = explode(',', $singlelevel['prev_answer']) ;

                                     $temp_str_43 = '';

                                    foreach ($singlelevel['prev_answer'] as $k43 => $v43) {

                                      $temp_str_43 .= isset($img_backpain_detial_q_arr[$v43]) ? $img_backpain_detial_q_arr[$v43].', ' : "" ;

                                    }



                                    $temp_str_43 = rtrim($temp_str_43, ', ');

                                    // $prev_answer_temp_str_43 = ' (from '.$temp_str_43.')';



                                    $prev_answer_temp_str_43 = $temp_str_43;



                                }



                            }



                            $singlelevel['answer'] = explode(',', $singlelevel['answer']) ;

                            $temp_str_43 = '';

                            foreach ($singlelevel['answer'] as $k43 => $v43) {

                              $temp_str_43 .= isset($img_backpain_detial_q_arr[$v43]) ? $img_backpain_detial_q_arr[$v43].', ' : "" ;

                            }



                            $temp_str_43 = rtrim($temp_str_43, ', ');



                             $current_answer_temp_str_43 = $temp_str_43;

                             // pr($prev_answer);

                             // pr($singlelevel['answer']); die;





                            //**************************** code start for redundancy removal for prev answer start



                            // pr($prev_answer_temp_str_43); die;

                            if(!empty($prev_answer_temp_str_43))

                            {

                                $temp_str_43 = $prev_answer_temp_str_43;

                                $temp_summar = '';



                                $ttemp = array();

                                if(stripos($temp_str_43, 'Neck pain') !== false ){



                                    $temp_summar .= 'Neck pain (';

                                    if(stripos($temp_str_43, 'Cervical') !== false ){

                                        // $temp_summar .= ' (Cervical (' ;

                                        if(stripos($temp_str_43, 'c4-5') !== false ){ $ttemp[] = 'C4'; $ttemp[] = 'C5'; }

                                        if(stripos($temp_str_43, 'c7') !== false ){ $ttemp[] = 'C7'; }

                                        if(stripos($temp_str_43, 'c6') !== false ){ $ttemp[] = 'C6'; }

                                        sort($ttemp);

                                        if(count(array_intersect($ttemp, array('C4','C5','C6','C7'))) == 4){

                                            $ttemp = 'C4-7';

                                        }elseif(count(array_intersect($ttemp, array('C4','C5','C6'))) == 3){

                                        $remain_ar = array_diff($ttemp, array('C4','C5','C6'));

                                         $ttemp = empty($remain_ar) ? 'C4-6' : 'C4-6, '.implode(', ', $remain_ar);



                                        }elseif(count(array_intersect($ttemp, array('C4','C5'))) == 2){

                                        $remain_ar = array_diff($ttemp, array('C4','C5'));

                                         $ttemp = empty($remain_ar) ? 'C4-5' : 'C4-5, '.implode(', ', $remain_ar);

                                        }elseif(count(array_intersect($ttemp, array('C5','C6','C7'))) == 3){

                                        $remain_ar = array_diff($ttemp, array('C5','C6','C7'));

                                         $ttemp = empty($remain_ar) ? 'C5-7' : 'C5-7, '.implode(', ', $remain_ar);

                                        }elseif(count(array_intersect($ttemp, array('C5','C6'))) == 2){

                                        $remain_ar = array_diff($ttemp, array('C5','C6'));

                                         $ttemp = empty($remain_ar) ? 'C5-6' : 'C5-6, '.implode(', ', $remain_ar);

                                        }elseif(count(array_intersect($ttemp, array('C6','C7'))) == 2){

                                        $remain_ar = array_diff($ttemp, array('C6','C7'));

                                         $ttemp = empty($remain_ar) ? 'C6-7' : 'C6-7, '.implode(', ', $remain_ar);

                                        }else{



                                         $ttemp = implode(', ', $ttemp);



                                        }

                                        // pr($ttemp); die;

                                         $ttemp = rtrim($ttemp, ', ');

                                         // $temp_summar .= $ttemp.'), ';

                                         $temp_summar .= $ttemp.', ';

                                         $ttemp = '';

                                    }



                                   if(stripos($temp_str_43, 'Neck pain (Suprascapular (left))') !== false ){ $temp_summar .= 'Suprascapular (left)' ; }

                                        $temp_summar = rtrim($temp_summar, ', ');

                                       $temp_summar .= '), ';



                                    }

                                    if(stripos($temp_str_43, 'Upper back pain') !== false ){

                                        $temp_summar .= 'Upper back pain (' ;

                                      if(stripos($temp_str_43, 'Thoracic') !== false ){

                                          // $temp_summar .= ' (Thoracic(';

                                          $ttemp = array();

                                          if(stripos($temp_str_43, 't1') !== false ) $ttemp[] = 'T1';if(stripos($temp_str_43, 't2') !== false ) $ttemp[] = 'T2';if(stripos($temp_str_43, 't3') !== false ) $ttemp[] = 'T3';if(stripos($temp_str_43, 't4') !== false ) $ttemp[] = 'T4';if(stripos($temp_str_43, 't5') !== false ) $ttemp[] = 'T5';if(stripos($temp_str_43, 't6') !== false ) $ttemp[] = 'T6';if(stripos($temp_str_43, 't7') !== false ) $ttemp[] = 'T7';if(stripos($temp_str_43, 't8') !== false ) $ttemp[] = 'T8';if(stripos($temp_str_43, 't9') !== false ) $ttemp[] = 'T9';if(stripos($temp_str_43, 't10') !== false ) $ttemp[] = 'T10';if(stripos($temp_str_43, 't11') !== false ) $ttemp[] = 'T11';if(stripos($temp_str_43, 't12') !== false ) $ttemp[] = 'T12';



                                            $tttemp = array();

                                            foreach ($ttemp as $kt1 => $vt1) {

                                              $tttemp[] = (int) filter_var($vt1, FILTER_SANITIZE_NUMBER_INT);

                                            }

                                            sort($tttemp);

                                            $ftemp = 'T';

                                            // pr($tttemp); die;

                                            // $tttemp= array('1','3','5','7','8','9','11','12');



                                            foreach ($tttemp as $kt2 => $vt2) {

                                              if(!isset($prev_vt2)){  // for first element

                                                  if(isset($tttemp[$kt2+1]) && ($tttemp[$kt2+1]-1 == $vt2)){ // if range after first element

                                                     $ftemp .= $vt2.'-';

                                                  }else{

                                                     $ftemp .= $vt2.', ';

                                                  }

                                              }elseif(($prev_vt2+1) != $vt2){  // if range completed



                                                if(!empty($start_vt2) && ($start_vt2 == $prev_vt2)){ // for alone element (not range)

                                                   $ftemp .= 'T'.$prev_vt2.', ';



                                                }elseif(!empty($start_vt2)){  // for range

                                                 $ftemp .=  substr($ftemp, -1) == 'T' ? '' : 'T';

                                                   $ftemp .= $start_vt2.'-'.$prev_vt2.', ';

                                                }elseif((empty($start_vt2) && !empty($prev_vt2)) && (strpos($ftemp, '-') !== false)){ // if range after first element

                                                  $ftemp .= $prev_vt2.', ';

                                                }

                                                if(!isset($tttemp[$kt2+1]))   $ftemp .= 'T'.$vt2;



                                                  $start_vt2 = $vt2 ;

                                              }else{  // if iterateing through range



                                                if(!isset($tttemp[$kt2+1])){  // for last element

                                                  if(empty($start_vt2)){  // for subsequest element range from first to last

                                                      $ftemp .= $vt2;

                                                  }else{

                                                      $ftemp .= 'T'.$start_vt2.'-'.$vt2;

                                                  }



                                                }



                                              }

                                              $prev_vt2 = $vt2;

                                            }

                                            // echo 'hi';

                                            // pr($ftemp); die;

                                            $ttemp = strtoupper($ftemp) ; // $ftemp;

                                          if(!empty($ttemp)){

                                            $ttemp = rtrim($ttemp, ', ');

                                             // $temp_summar .= $ttemp.'), ';

                                            $temp_summar .= $ttemp.', ';

                                              $ttemp = '';

                                               }



                                        }

                                       if((stripos($temp_str_43, 'Upper back pain (Suprascapular (right))') !== false ) && (stripos($temp_str_43, 'Upper back pain (Suprascapular (left))') !== false )){

                                          $temp_summar .= 'Suprascapular (bilateral), ' ;

                                       }else {

                                        if(stripos($temp_str_43, 'Upper back pain (Suprascapular (right))') !== false ){ $temp_summar .= 'Suprascapular (right), ' ; }

                                        if(stripos($temp_str_43, 'Upper back pain (Suprascapular (left))') !== false ){ $temp_summar .= 'Suprascapular (left), ' ; }

                                       }



                                      if((stripos($temp_str_43, 'Upper back pain (Interscapular (right))') !== false ) && (stripos($temp_str_43, 'Upper back pain (Interscapular (left))') !== false )){

                                          $temp_summar .= 'Interscapular (bilateral), ' ;

                                      }else{

                                         if(stripos($temp_str_43, 'Upper back pain (Interscapular (right))') !== false ){ $temp_summar .= 'Interscapular (right), ' ; }

                                         if(stripos($temp_str_43, 'Upper back pain (Interscapular (left))') !== false ){ $temp_summar .= 'Interscapular (left), ' ; }

                                      }





                                      if((stripos($temp_str_43, 'Upper back pain (Scapular (right))') !== false )  && (stripos($temp_str_43, 'Upper back pain (Scapular (left))') !== false )){

                                        $temp_summar .= 'Scapular (bilateral), ' ;

                                      }else{

                                        if(stripos($temp_str_43, 'Upper back pain (Scapular (right))') !== false ){ $temp_summar .= 'Scapular (right), ' ; }

                                        if(stripos($temp_str_43, 'Upper back pain (Scapular (left))') !== false ){ $temp_summar .= 'Scapular (left), ' ; }

                                      }





                                      if((stripos($temp_str_43, 'Upper back pain (Infrascapular (right))') !== false ) && (stripos($temp_str_43, 'Upper back pain (Infrascapular (left))') !== false )){

                                        $temp_summar .= 'Infrascapular (bilateral), ' ;

                                      }else{



                                        if(stripos($temp_str_43, 'Upper back pain (Infrascapular (right))') !== false ){ $temp_summar .= 'Infrascapular (right), ' ; }

                                        if(stripos($temp_str_43, 'Upper back pain (Infrascapular (left))') !== false ){ $temp_summar .= 'Infrascapular (left), ' ; }



                                    }

                                  $temp_summar = rtrim($temp_summar, ', ');

                                  $temp_summar .= '), ';

                                }





if(stripos($temp_str_43, 'Low back pain') !== false ){



  $temp_summar .= 'Low back pain (' ;

  if(stripos($temp_str_43, 'Lumbar') !== false ){

     // $temp_summar .= ' (Lumbar (' ;

     $ttemp = array();

     if(stripos($temp_str_43, 'l1') !== false ) $ttemp[] = 'L1';if(stripos($temp_str_43, 'l2') !== false ) $ttemp[] = 'L2';if(stripos($temp_str_43, 'l3') !== false ) $ttemp[] = 'L3';if(stripos($temp_str_43, 'l4') !== false ) $ttemp[] = 'L4';if(stripos($temp_str_43, 'l5') !== false ) $ttemp[] = 'L5';



sort($ttemp);

// $ttemp = array('L4','L2','L5');

if(count(array_intersect($ttemp, array('L1','L2','L3','L4','L5'))) == 5){

    $ttemp = 'L1-5';

}elseif(count(array_intersect($ttemp, array('L1','L2','L3','L4'))) == 4){

   $remain_ar = array_diff($ttemp, array('L1','L2','L3','L4'));

   $ttemp = empty($remain_ar) ? 'L1-4' : 'L1-4, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('L1','L2','L3'))) == 3){

   $remain_ar = array_diff($ttemp, array('L1','L2','L3'));

   $ttemp = empty($remain_ar) ? 'L1-3' : 'L1-3, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('L1','L2'))) == 2){

   $remain_ar = array_diff($ttemp, array('L1','L2'));

   $ttemp = empty($remain_ar) ? 'L1-2' : 'L1-2, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('L2','L3','L4','L5'))) == 4){

   $remain_ar = array_diff($ttemp, array('L2','L3','L4','L5'));

   $ttemp = empty($remain_ar) ? 'L2-5' : 'L2-5, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('L2','L3','L4'))) == 3){

   $remain_ar = array_diff($ttemp, array('L2','L3','L4'));

   $ttemp = empty($remain_ar) ? 'L2-4' : 'L2-4, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('L2','L3'))) == 2){

   $remain_ar = array_diff($ttemp, array('L2','L3'));

   $ttemp = empty($remain_ar) ? 'L2-3' : 'L2-3, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('L3','L4','L5'))) == 3){

   $remain_ar = array_diff($ttemp, array('L3','L4','L5'));

   $ttemp = empty($remain_ar) ? 'L3-5' : 'L3-5, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('L3','L4'))) == 2){

   $remain_ar = array_diff($ttemp, array('L3','L4'));

   $ttemp = empty($remain_ar) ? 'L3-4' : 'L3-4, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('L4','L5'))) == 2){

   $remain_ar = array_diff($ttemp, array('L4','L5'));

   $ttemp = empty($remain_ar) ? 'L4-5' : 'L4-5, '.implode(', ', $remain_ar);

}else{

   $ttemp = implode(', ', $ttemp);



}



// pr($ttemp); die;



     if(!empty($ttemp)){

      $ttemp = rtrim($ttemp, ', ');

       // $temp_summar .= $ttemp.'), ';

      $temp_summar .= $ttemp.', ';

       $ttemp = ''; }



  }



  if(stripos($temp_str_43, 'Sacral') !== false ){

     // $temp_summar .= '(Sacral (' ;

     $ttemp = array();

    if(stripos($temp_str_43, 's1') !== false ) $ttemp[] = 'S1';if(stripos($temp_str_43, 's2-3') !== false ){  $ttemp[] = 'S2';  $ttemp[] = 'S3';}

sort($ttemp);



if(count(array_intersect($ttemp, array('S1','S2','S3'))) == 3){

    $ttemp = 'S1-3';

}elseif(count(array_intersect($ttemp, array('S1','S2'))) == 2){

$remain_ar = array_diff($ttemp, array('S1','S2'));

 $ttemp = empty($remain_ar) ? 'S1-2' : 'S1-2, '.implode(', ', $remain_ar);



}elseif(count(array_intersect($ttemp, array('S2','S3'))) == 2){

$remain_ar = array_diff($ttemp, array('S2','S3'));

 $ttemp = empty($remain_ar) ? 'S2-3' : 'S2-3, '.implode(', ', $remain_ar);



}else{

   $ttemp = implode(', ', $ttemp);

}

// pr($ttemp); die;

     if(!empty($ttemp)){

      $ttemp = rtrim($ttemp, ', ');

      // $temp_summar .= $ttemp.')), ';

       $temp_summar .= $ttemp.', ';

      $ttemp = ''; }



  }



  if((stripos($temp_str_43, 'Low back pain (Infrascapular (right))') !== false ) && (stripos($temp_str_43, 'Low back pain (Infrascapular (left))') !== false )){

     $temp_summar .= 'Infrascapular (bilateral), ' ;

  }else{

    if(stripos($temp_str_43, 'Low back pain (Infrascapular (right))') !== false ){ $temp_summar .= 'Infrascapular (right), ' ; }

    if(stripos($temp_str_43, 'Low back pain (Infrascapular (left))') !== false ){ $temp_summar .= 'Infrascapular (left), ' ; }

  }





  $temp_summar = rtrim($temp_summar, ', ');



  $temp_summar .= '), ';





}



  if((stripos($temp_str_43, 'Buttock pain (right)') !== false ) && (stripos($temp_str_43, 'Buttock pain (left)') !== false )){

    $temp_summar .= 'Buttock pain (bilateral), ' ;

  }else{

      if(stripos($temp_str_43, 'Buttock pain (right)') !== false ){ $temp_summar .= 'Buttock pain (right), ' ; }

      if(stripos($temp_str_43, 'Buttock pain (left)') !== false ){ $temp_summar .= 'Buttock pain (left), ' ; }

  }









if(stripos($temp_str_43, 'Shoulder pain') !== false ){



  $temp_summar .= 'Shoulder pain (' ;



if(stripos($temp_str_43, 'Shoulder pain (Infrascapular (right))') !== false  && stripos($temp_str_43, 'Shoulder pain (Infrascapular (left))') !== false ){

   $temp_summar .= 'Infrascapular (bilateral), ' ;

}else{

  if(stripos($temp_str_43, 'Shoulder pain (Infrascapular (right))') !== false ){ $temp_summar .= 'Infrascapular (right), ' ; }



  if(stripos($temp_str_43, 'Shoulder pain (Infrascapular (left))') !== false ){ $temp_summar .= 'Infrascapular (left), ' ; }

}



if(stripos($temp_str_43, 'Shoulder pain (Scapular (right))') !== false  && stripos($temp_str_43, 'Shoulder pain (Scapular (left))') !== false ){

  $temp_summar .= 'Scapular (bilateral), ' ;

}else{



  if(stripos($temp_str_43, 'Shoulder pain (Scapular (right))') !== false ){ $temp_summar .= 'Scapular (right), ' ; }

  if(stripos($temp_str_43, 'Shoulder pain (Scapular (left))') !== false ){ $temp_summar .= 'Scapular (left), ' ; }

}



if(stripos($temp_str_43, '(Posterior deltoid (right))') !== false && stripos($temp_str_43, 'Posterior deltoid (left)') !== false ){

   $temp_summar .= 'Posterior deltoid (bilateral), ' ;

}else{

  if(stripos($temp_str_43, '(Posterior deltoid (right))') !== false ){ $temp_summar .= 'Posterior deltoid (right), ' ; }



  if(stripos($temp_str_43, 'Posterior deltoid (left)') !== false ){ $temp_summar .= 'Posterior deltoid (left), ' ; }

}



if(stripos($temp_str_43, 'Shoulder pain (Suprascapular (right))') !== false && stripos($temp_str_43, 'Shoulder pain (Suprascapular (left))') !== false ){

   $temp_summar .= 'Suprascapular (bilateral), ' ;

}else{



  if(stripos($temp_str_43, 'Shoulder pain (Suprascapular (right))') !== false ){ $temp_summar .= 'Suprascapular (right), ' ; }



  if(stripos($temp_str_43, 'Shoulder pain (Suprascapular (left))') !== false ){ $temp_summar .= 'Suprascapular (left), ' ; }



}



  // if(stripos($temp_str_43, 'Shoulder pain (Interscapular (left))') !== false ){ $temp_summar .= 'Interscapular (left), ' ; }  // we commented this because we think  Interscapular (left)  is in Upper back pain







  $temp_summar = rtrim($temp_summar, ', ');



  $temp_summar .= '), ';



}



$temp_summar = rtrim($temp_summar, ', ');

$prev_answer_temp_str_43 = ' (from '.$temp_summar.')';



}else {

 $prev_answer_temp_str_43 =  $prev_answer ;  // if not set assign (no change )



}

// pr($temp_str_43); die;

// echo 'hello';

// pr($temp_summar); die;



//**************************** code start for redundancy removal for prev answer end



//**************************** code start for redundancy removal for current answer start



// both above and below code are same





$temp_str_43 = $current_answer_temp_str_43;

$temp_summar = '';

$ttemp = array();



if(stripos($temp_str_43, 'Neck pain') !== false ){

    $temp_summar .= 'Neck pain (';

  if(stripos($temp_str_43, 'Cervical') !== false ){

    // $temp_summar .= ' (Cervical (' ;

    if(stripos($temp_str_43, 'c4-5') !== false ){ $ttemp[] = 'C4'; $ttemp[] = 'C5'; }

    if(stripos($temp_str_43, 'c7') !== false ){ $ttemp[] = 'C7'; }

    if(stripos($temp_str_43, 'c6') !== false ){ $ttemp[] = 'C6'; }



sort($ttemp);





if(count(array_intersect($ttemp, array('C4','C5','C6','C7'))) == 4){

    $ttemp = 'C4-7';

}elseif(count(array_intersect($ttemp, array('C4','C5','C6'))) == 3){

$remain_ar = array_diff($ttemp, array('C4','C5','C6'));

 $ttemp = empty($remain_ar) ? 'C4-6' : 'C4-6, '.implode(', ', $remain_ar);



}elseif(count(array_intersect($ttemp, array('C4','C5'))) == 2){

$remain_ar = array_diff($ttemp, array('C4','C5'));

 $ttemp = empty($remain_ar) ? 'C4-5' : 'C4-5, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('C5','C6','C7'))) == 3){

$remain_ar = array_diff($ttemp, array('C5','C6','C7'));

 $ttemp = empty($remain_ar) ? 'C5-7' : 'C5-7, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('C5','C6'))) == 2){

$remain_ar = array_diff($ttemp, array('C5','C6'));

 $ttemp = empty($remain_ar) ? 'C5-6' : 'C5-6, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('C6','C7'))) == 2){

$remain_ar = array_diff($ttemp, array('C6','C7'));

 $ttemp = empty($remain_ar) ? 'C6-7' : 'C6-7, '.implode(', ', $remain_ar);

}else{



 $ttemp = implode(', ', $ttemp);



}

// pr($ttemp); die;

     $ttemp = rtrim($ttemp, ', ');

     // $temp_summar .= $ttemp.'), ';

     $temp_summar .= $ttemp.', ';

     $ttemp = '';

  }



   if(stripos($temp_str_43, 'Neck pain (Suprascapular (left))') !== false ){ $temp_summar .= 'Suprascapular (left)' ; }

    $temp_summar = rtrim($temp_summar, ', ');

   $temp_summar .= '), ';



}

if(stripos($temp_str_43, 'Upper back pain') !== false ){

    $temp_summar .= 'Upper back pain (' ;

  if(stripos($temp_str_43, 'Thoracic') !== false ){

      // $temp_summar .= ' (Thoracic(';

      $ttemp = array();

      if(stripos($temp_str_43, 't1') !== false ) $ttemp[] = 'T1';if(stripos($temp_str_43, 't2') !== false ) $ttemp[] = 'T2';if(stripos($temp_str_43, 't3') !== false ) $ttemp[] = 'T3';if(stripos($temp_str_43, 't4') !== false ) $ttemp[] = 'T4';if(stripos($temp_str_43, 't5') !== false ) $ttemp[] = 'T5';if(stripos($temp_str_43, 't6') !== false ) $ttemp[] = 'T6';if(stripos($temp_str_43, 't7') !== false ) $ttemp[] = 'T7';if(stripos($temp_str_43, 't8') !== false ) $ttemp[] = 'T8';if(stripos($temp_str_43, 't9') !== false ) $ttemp[] = 'T9';if(stripos($temp_str_43, 't10') !== false ) $ttemp[] = 'T10';if(stripos($temp_str_43, 't11') !== false ) $ttemp[] = 'T11';if(stripos($temp_str_43, 't12') !== false ) $ttemp[] = 'T12';



$tttemp = array();

foreach ($ttemp as $kt1 => $vt1) {

  $tttemp[] = (int) filter_var($vt1, FILTER_SANITIZE_NUMBER_INT);

}

sort($tttemp);

$ftemp = 'T';

// pr($tttemp); die;

// $tttemp= array('1','3','5','7','8','9','11','12');



foreach ($tttemp as $kt2 => $vt2) {

  if(!isset($prev_vt2)){  // for first element

      if(isset($tttemp[$kt2+1]) && ($tttemp[$kt2+1]-1 == $vt2)){ // if range after first element

         $ftemp .= $vt2.'-';

      }else{

         $ftemp .= $vt2.', ';

      }

  }elseif(($prev_vt2+1) != $vt2){  // if range completed



    if(!empty($start_vt2) && ($start_vt2 == $prev_vt2)){ // for alone element (not range)

       $ftemp .= 'T'.$prev_vt2.', ';



    }elseif(!empty($start_vt2)){  // for range

     $ftemp .=  substr($ftemp, -1) == 'T' ? '' : 'T';

       $ftemp .= $start_vt2.'-'.$prev_vt2.', ';

    }elseif((empty($start_vt2) && !empty($prev_vt2)) && (strpos($ftemp, '-') !== false)){ // if range after first element

      $ftemp .= $prev_vt2.', ';

    }

    if(!isset($tttemp[$kt2+1]))   $ftemp .= 'T'.$vt2;



      $start_vt2 = $vt2 ;

  }else{  // if iterateing through range



    if(!isset($tttemp[$kt2+1])){  // for last element

      if(empty($start_vt2)){  // for subsequest element range from first to last

          $ftemp .= $vt2;

      }else{

          $ftemp .= 'T'.$start_vt2.'-'.$vt2;

      }



    }



  }

  $prev_vt2 = $vt2;

}

// echo 'hi';

// pr($ftemp); die;

$ttemp = strtoupper($ftemp) ; // $ftemp;



      if(!empty($ttemp)){

        $ttemp = rtrim($ttemp, ', ');

         // $temp_summar .= $ttemp.'), ';

        $temp_summar .= $ttemp.', ';

          $ttemp = '';

           }



   }



   if((stripos($temp_str_43, 'Upper back pain (Suprascapular (right))') !== false ) && (stripos($temp_str_43, 'Upper back pain (Suprascapular (left))') !== false )){

      $temp_summar .= 'Suprascapular (bilateral), ' ;

   }else {

    if(stripos($temp_str_43, 'Upper back pain (Suprascapular (right))') !== false ){ $temp_summar .= 'Suprascapular (right), ' ; }

    if(stripos($temp_str_43, 'Upper back pain (Suprascapular (left))') !== false ){ $temp_summar .= 'Suprascapular (left), ' ; }

   }





  if((stripos($temp_str_43, 'Upper back pain (Interscapular (right))') !== false ) && (stripos($temp_str_43, 'Upper back pain (Interscapular (left))') !== false )){

      $temp_summar .= 'Interscapular (bilateral), ' ;

  }else{

     if(stripos($temp_str_43, 'Upper back pain (Interscapular (right))') !== false ){ $temp_summar .= 'Interscapular (right), ' ; }

     if(stripos($temp_str_43, 'Upper back pain (Interscapular (left))') !== false ){ $temp_summar .= 'Interscapular (left), ' ; }

  }





  if((stripos($temp_str_43, 'Upper back pain (Scapular (right))') !== false )  && (stripos($temp_str_43, 'Upper back pain (Scapular (left))') !== false )){

    $temp_summar .= 'Scapular (bilateral), ' ;

  }else{

    if(stripos($temp_str_43, 'Upper back pain (Scapular (right))') !== false ){ $temp_summar .= 'Scapular (right), ' ; }

    if(stripos($temp_str_43, 'Upper back pain (Scapular (left))') !== false ){ $temp_summar .= 'Scapular (left), ' ; }

  }





  if((stripos($temp_str_43, 'Upper back pain (Infrascapular (right))') !== false ) && (stripos($temp_str_43, 'Upper back pain (Infrascapular (left))') !== false )){

    $temp_summar .= 'Infrascapular (bilateral), ' ;

  }else{



    if(stripos($temp_str_43, 'Upper back pain (Infrascapular (right))') !== false ){ $temp_summar .= 'Infrascapular (right), ' ; }

    if(stripos($temp_str_43, 'Upper back pain (Infrascapular (left))') !== false ){ $temp_summar .= 'Infrascapular (left), ' ; }



  }





  $temp_summar = rtrim($temp_summar, ', ');

  $temp_summar .= '), ';

 }





if(stripos($temp_str_43, 'Low back pain') !== false ){



  $temp_summar .= 'Low back pain (' ;

  if(stripos($temp_str_43, 'Lumbar') !== false ){

     // $temp_summar .= ' (Lumbar (' ;

     $ttemp = array();

     if(stripos($temp_str_43, 'l1') !== false ) $ttemp[] = 'L1';if(stripos($temp_str_43, 'l2') !== false ) $ttemp[] = 'L2';if(stripos($temp_str_43, 'l3') !== false ) $ttemp[] = 'L3';if(stripos($temp_str_43, 'l4') !== false ) $ttemp[] = 'L4';if(stripos($temp_str_43, 'l5') !== false ) $ttemp[] = 'L5';



sort($ttemp);

// $ttemp = array('L4','L2','L5');

if(count(array_intersect($ttemp, array('L1','L2','L3','L4','L5'))) == 5){

    $ttemp = 'L1-5';

}elseif(count(array_intersect($ttemp, array('L1','L2','L3','L4'))) == 4){

   $remain_ar = array_diff($ttemp, array('L1','L2','L3','L4'));

   $ttemp = empty($remain_ar) ? 'L1-4' : 'L1-4, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('L1','L2','L3'))) == 3){

   $remain_ar = array_diff($ttemp, array('L1','L2','L3'));

   $ttemp = empty($remain_ar) ? 'L1-3' : 'L1-3, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('L1','L2'))) == 2){

   $remain_ar = array_diff($ttemp, array('L1','L2'));

   $ttemp = empty($remain_ar) ? 'L1-2' : 'L1-2, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('L2','L3','L4','L5'))) == 4){

   $remain_ar = array_diff($ttemp, array('L2','L3','L4','L5'));

   $ttemp = empty($remain_ar) ? 'L2-5' : 'L2-5, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('L2','L3','L4'))) == 3){

   $remain_ar = array_diff($ttemp, array('L2','L3','L4'));

   $ttemp = empty($remain_ar) ? 'L2-4' : 'L2-4, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('L2','L3'))) == 2){

   $remain_ar = array_diff($ttemp, array('L2','L3'));

   $ttemp = empty($remain_ar) ? 'L2-3' : 'L2-3, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('L3','L4','L5'))) == 3){

   $remain_ar = array_diff($ttemp, array('L3','L4','L5'));

   $ttemp = empty($remain_ar) ? 'L3-5' : 'L3-5, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('L3','L4'))) == 2){

   $remain_ar = array_diff($ttemp, array('L3','L4'));

   $ttemp = empty($remain_ar) ? 'L3-4' : 'L3-4, '.implode(', ', $remain_ar);

}elseif(count(array_intersect($ttemp, array('L4','L5'))) == 2){

   $remain_ar = array_diff($ttemp, array('L4','L5'));

   $ttemp = empty($remain_ar) ? 'L4-5' : 'L4-5, '.implode(', ', $remain_ar);

}else{

   $ttemp = implode(', ', $ttemp);



}



// pr($ttemp); die;



     if(!empty($ttemp)){

      $ttemp = rtrim($ttemp, ', ');

       // $temp_summar .= $ttemp.'), ';

      $temp_summar .= $ttemp.', ';

       $ttemp = ''; }



  }



  if(stripos($temp_str_43, 'Sacral') !== false ){

     // $temp_summar .= '(Sacral (' ;

     $ttemp = array();

    if(stripos($temp_str_43, 's1') !== false ) $ttemp[] = 'S1';if(stripos($temp_str_43, 's2-3') !== false ){  $ttemp[] = 'S2';  $ttemp[] = 'S3';}

sort($ttemp);



if(count(array_intersect($ttemp, array('S1','S2','S3'))) == 3){

    $ttemp = 'S1-3';

}elseif(count(array_intersect($ttemp, array('S1','S2'))) == 2){

$remain_ar = array_diff($ttemp, array('S1','S2'));

 $ttemp = empty($remain_ar) ? 'S1-2' : 'S1-2, '.implode(', ', $remain_ar);



}elseif(count(array_intersect($ttemp, array('S2','S3'))) == 2){

$remain_ar = array_diff($ttemp, array('S2','S3'));

 $ttemp = empty($remain_ar) ? 'S2-3' : 'S2-3, '.implode(', ', $remain_ar);



}else{

   $ttemp = implode(', ', $ttemp);

}

// pr($ttemp); die;

     if(!empty($ttemp)){

      $ttemp = rtrim($ttemp, ', ');

      // $temp_summar .= $ttemp.')), ';

       $temp_summar .= $ttemp.', ';

      $ttemp = ''; }



  }



  if((stripos($temp_str_43, 'Low back pain (Infrascapular (right))') !== false ) && (stripos($temp_str_43, 'Low back pain (Infrascapular (left))') !== false )){

     $temp_summar .= 'Infrascapular (bilateral), ' ;

  }else{

    if(stripos($temp_str_43, 'Low back pain (Infrascapular (right))') !== false ){ $temp_summar .= 'Infrascapular (right), ' ; }

    if(stripos($temp_str_43, 'Low back pain (Infrascapular (left))') !== false ){ $temp_summar .= 'Infrascapular (left), ' ; }

  }





  $temp_summar = rtrim($temp_summar, ', ');



  $temp_summar .= '), ';





}



  if((stripos($temp_str_43, 'Buttock pain (right)') !== false ) && (stripos($temp_str_43, 'Buttock pain (left)') !== false )){

    $temp_summar .= 'Buttock pain (bilateral), ' ;

  }else{

      if(stripos($temp_str_43, 'Buttock pain (right)') !== false ){ $temp_summar .= 'Buttock pain (right), ' ; }

      if(stripos($temp_str_43, 'Buttock pain (left)') !== false ){ $temp_summar .= 'Buttock pain (left), ' ; }

  }









if(stripos($temp_str_43, 'Shoulder pain') !== false ){



  $temp_summar .= 'Shoulder pain (' ;



if(stripos($temp_str_43, 'Shoulder pain (Infrascapular (right))') !== false  && stripos($temp_str_43, 'Shoulder pain (Infrascapular (left))') !== false ){

   $temp_summar .= 'Infrascapular (bilateral), ' ;

}else{

  if(stripos($temp_str_43, 'Shoulder pain (Infrascapular (right))') !== false ){ $temp_summar .= 'Infrascapular (right), ' ; }



  if(stripos($temp_str_43, 'Shoulder pain (Infrascapular (left))') !== false ){ $temp_summar .= 'Infrascapular (left), ' ; }

}



if(stripos($temp_str_43, 'Shoulder pain (Scapular (right))') !== false  && stripos($temp_str_43, 'Shoulder pain (Scapular (left))') !== false ){

  $temp_summar .= 'Scapular (bilateral), ' ;

}else{



  if(stripos($temp_str_43, 'Shoulder pain (Scapular (right))') !== false ){ $temp_summar .= 'Scapular (right), ' ; }

  if(stripos($temp_str_43, 'Shoulder pain (Scapular (left))') !== false ){ $temp_summar .= 'Scapular (left), ' ; }

}



if(stripos($temp_str_43, '(Posterior deltoid (right))') !== false && stripos($temp_str_43, 'Posterior deltoid (left)') !== false ){

   $temp_summar .= 'Posterior deltoid (bilateral), ' ;

}else{

  if(stripos($temp_str_43, '(Posterior deltoid (right))') !== false ){ $temp_summar .= 'Posterior deltoid (right), ' ; }



  if(stripos($temp_str_43, 'Posterior deltoid (left)') !== false ){ $temp_summar .= 'Posterior deltoid (left), ' ; }

}



if(stripos($temp_str_43, 'Shoulder pain (Suprascapular (right))') !== false && stripos($temp_str_43, 'Shoulder pain (Suprascapular (left))') !== false ){

   $temp_summar .= 'Suprascapular (bilateral), ' ;

}else{



  if(stripos($temp_str_43, 'Shoulder pain (Suprascapular (right))') !== false ){ $temp_summar .= 'Suprascapular (right), ' ; }



  if(stripos($temp_str_43, 'Shoulder pain (Suprascapular (left))') !== false ){ $temp_summar .= 'Suprascapular (left), ' ; }



}



  // if(stripos($temp_str_43, 'Shoulder pain (Interscapular (left))') !== false ){ $temp_summar .= 'Interscapular (left), ' ; }  // we commented this because we think  Interscapular (left)  is in Upper back pain







  $temp_summar = rtrim($temp_summar, ', ');



  $temp_summar .= '), ';



}



$current_answer_temp_str_43 = $temp_summar;

 // pr($temp_str_43); die;

// echo 'hello';

// pr($temp_summar); die;

$prev_answer_temp_str_43 = rtrim($prev_answer_temp_str_43, ', ');

 $current_answer_temp_str_43 = rtrim($current_answer_temp_str_43, ', ');



//**************************** code start for redundancy removal for current answer end





// pr($current_answer_temp_str_43); die;





           // $layman_summar .=  "The location is at: ".$current_answer_temp_str_43.''.$prev_answer_temp_str_43.". " ;



 $layman_summar .=  "The pain is localized to the ".$current_answer_temp_str_43.''.$prev_answer_temp_str_43.". " ;





        }



        /* //  code commented as these code are not used according to new image design

        // pr($singlelevel['answer']); pr($singlelevel['prev_answer']);

          if(is_array($singlelevel['answer'])){



            if(is_array($singlelevel['prev_answer'])){



            if($singlelevel['answer'] == $singlelevel['prev_answer'] ){



              $prev_answer = ' (no change)' ;



            }else{

              // pr($singlelevel['prev_answer']);

            foreach ($singlelevel['prev_answer'] as $k42 => $v42) {

              $singlelevel['prev_answer'][$k42] = isset($img_backpain_loc[$v42]) ? $img_backpain_loc[$v42] : '' ;

            }



           // pr($singlelevel['prev_answer']);  die;



              $prev_answer = ' (from '.strtolower(implode(', ', $singlelevel['prev_answer'])).')';



            }

          }



          // pr($prev_answer); die;



            foreach ($singlelevel['answer'] as $k42 => $v42) {

              $singlelevel['answer'][$k42] = isset($img_backpain_loc[$v42]) ? $img_backpain_loc[$v42] : '' ;

            }

        $layman_summar .=  "The location is at: ".strtolower(implode(', ', $singlelevel['answer'])).''.strtolower($prev_answer).". " ;

          } else{



        $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

        $layman_summar .=  "The location is at: ".strtolower($singlelevel['answer']).''.strtolower($prev_answer).". " ;

          }






          */

           break;









    }



// switch case end





      }

      // pr($k);

      // pr($singlelevel); die;

    }

$case_19_34_35 = str_replace('***', '', $case_19_34_35) ;  // if case 35 is empty then remove ***

    $layman_summar = $layman_summar.''.$case_19_34_35;  // for case 19, 34,35 , we concatenate outside loop because case 35 is optional

    $case_19_34_35 = '';







$layman_summar = str_replace('*case_15_how_many_days*', $case_15_how_many_days, $layman_summar) ;

$case_15_how_many_days = '';



  }



}



return array('layman_summar' => $layman_summar, 'all_cc_name' => $all_cc_name) ;



 }





 //pain update tab of pain medicine mudule under follow up category

public function prepare_pain_update_question_layman($user_detail = null ,$cur_cc_name = null){



  //pr($user_detail);die;



  $layman_summar = '' ;



  if(!empty($user_detail->pain_update_question) && is_array($user_detail->pain_update_question)){



      $layman_summar .= ' You provided these pain update details: ' ;



      foreach ($user_detail->pain_update_question as $k => $singlelevel) {



          switch ($singlelevel['question_id'])

          {

            //quetion 1 2 are related to each other

            case 1:



              if($singlelevel['answer'] == 'Yes'){





                $layman_summar .= "Last time you reported ".$cur_cc_name.". You have ".$user_detail->pain_update_question[$k+1]['answer'].' new pain. ' ;



              }else{



                $layman_summar .= "Last time you reported ".$cur_cc_name.". ".$singlelevel['answer'].', You have any new pain. ' ;

              }



                break;



            case 3:



                 $layman_summar .= "Now, the pain ".$singlelevel['answer']." compared to when it first started. ";

                break;



            case 4:



                $layman_summar .= 'You rate your current pain level '.$singlelevel['answer'].' out of 10 . ';

                break;



            case 5:



                $layman_summar .= 'In the last 30 days, You rate your worst pain '.$singlelevel['answer'].' out of 10. ';

                break;



            case 6:



                $layman_summar .= "You rate your pain AFTER taking medication ".$singlelevel['answer'].' out of 10. ';

                break;



            case 7:



                $layman_summar .= ucfirst($singlelevel['answer'])."% pain affect your daily activities. ";

                break;



            case 8:



                $layman_summar .= ucfirst($singlelevel['answer'])."%</strong> pain affect social interactions with others.<br />";

                break;



            case 9:



                $layman_summar .= ucfirst($singlelevel['answer']).", You needed more pain medication than prescribed. " ;

                break;



            case 10:

                //$layman_summar .= "The pain is rated a ".$singlelevel['answer']."/10 at its best and a ".$value[$k+1]['answer']."/10 at its worst. ";

                if(isset($value[$k+1]) && $value[$k+1]['question_id'] == 11){



                  $layman_summar .= "The pain is rated a ".strtolower($singlelevel['answer'])."/10 at its best. ";

                }

                else{



                    $layman_summar .= "The pain is rated a ".strtolower($singlelevel['answer'])."/10 at its best. ";

                }

                break;

            /*case 11:



                $layman_summar .= ucfirst($singlelevel['answer'])." makes your pain worse. ";



              break;*/



            case 12:



                $layman_summar .= "You check all those which apply: ".(is_array($singlelevel['answer']) ? implode(",", $singlelevel['answer']) : $singlelevel['answer'])."";



              break;

          }

        }



        $layman_summar .= ' ';

  }



  //echo $layman_summar;die;

  //die;

  return array('layman_summar' => $layman_summar);

}







//general update tab of pain medicine mudule under follow up category

public function prepare_general_update_question_layman($user_detail = null ){



  //pr($user_detail);die;



  $layman_summar = '' ;



  if(!empty($user_detail->general_update_question) && is_array($user_detail->general_update_question)){



      $layman_summar .= ' You provided these general update details: ';



      foreach ($user_detail->general_update_question as $k => $singlelevel) {



          switch ($singlelevel['question_id'])

          {

            //quetion 1 2 3 are related to each other

            case 13:



              if($singlelevel['answer'] == 'Yes'){





               $layman_summar .= "You been diagnosed with ".$user_detail->general_update_question[$k+1]['answer'].' new medical conditions since your last visit. ' ;



              }else{



                $layman_summar .= ucfirst($singlelevel['answer']).', You been diagnosed with any new medical conditions since your last visit. ' ;

              }



              break;





            case 15:



                 if($singlelevel['answer'] == 'Yes'){



                  if(!empty($user_detail->general_update_provider_info)){



                    $layman_summar .= 'Since your last visit, You seen '.(isset($user_detail->general_update_provider_info['provider_name']) ? $user_detail->general_update_provider_info['provider_name'] : "").' healthcare provider for '.(isset($user_detail->general_update_provider_info['speciality']) ? $user_detail->general_update_provider_info['speciality'] : "").' in '.(isset($user_detail->general_update_provider_info['address']) ? $user_detail->general_update_provider_info['address'] : "").', provider phone number is '.(isset($user_detail->general_update_provider_info['phone']) ? $user_detail->general_update_provider_info['phone'] : "").'. ';



                  }else{



                    $layman_summar .= ucfirst($singlelevel['answer']).', You seen any other healthcare providers since your last visit. ';

                  }



                 }else{



                  $layman_summar .= ucfirst($singlelevel['answer']).', You seen any other healthcare providers since your last visit. ';

                 }



                break;



            case 16:



                if($singlelevel['answer'] == 'Yes'){



                  if(isset($user_detail->general_update_question[$k+1])){



                    $layman_summar .= ucfirst($singlelevel['answer']).', You had any recent falls and fall due to : '.(isset($user_detail->general_update_question[$k+1]['answer']) ? implode(",", $user_detail->general_update_question[$k+1]['answer']) : $user_detail->general_update_question[$k+1]['answer']).'. ';



                  }else{



                     $layman_summar .= ucfirst($singlelevel['answer']).', You had any recent falls. ';



                  }



                }else{



                  $layman_summar .= ucfirst($singlelevel['answer']).', You had any recent falls. ';



                }





                break;



            case 18:



                if(!empty($user_detail->general_update_procedure_detail)){



                  $layman_summar .="You had taken recent surgeries or procedures: ";



                  foreach ($user_detail->general_update_procedure_detail as $key => $value) {



                    $layman_summar .= ucfirst($value['procedure_type'])." at ".$value['procedure_date'].". ";

                  }



                }else{



                  $layman_summar .= ucfirst($singlelevel['answer']).", You had taken any recent surgeries or procedures. ";

                }

              break;

          }

        }



        $layman_summar .= ' ';

  }



  // echo $layman_summar;die;

  // die;

  return array('layman_summar' => $layman_summar);

}



public function prepare_screening_question_layman($user_detail = null, $is_prev = 0 ){



//pr($user_detail);die;

  $layman_summar = '';



  if(!empty($user_detail->screening_questions_detail) && is_array($user_detail->screening_questions_detail)){



    if($is_prev == 1){

        $layman_summar .= 'In your previous visit you provided these GI health checkup screening details: ' ;



    }else{



        $layman_summar .= ' You provided these GI health checkup screening details: ' ;

    }



      foreach ($user_detail->screening_questions_detail as $k => $singlelevel) {



          switch ($singlelevel['question_id'])

          {

            //quetion 1 2 3 are related to each other

            case 1:



                $layman_summar .= ucfirst($singlelevel['answer']).', you have a family history of colon cancer in your immediate family. ' ;

              //  pr($user_detail->screening_questions_detail[$k+1]['question_id']);

                if($singlelevel['answer'] == 'Yes' && (isset($user_detail->screening_questions_detail[$k+1]['question_id']) && $user_detail->screening_questions_detail[$k+1]['question_id'] == 2)){

                 // die('cc');



                  $question_2 = array(



                    1 => '<50 years',

                    2 => '50-60 years',

                    3 => '>60 years'

                  );



                  $temp_ans2 = "";



                  foreach($user_detail->screening_questions_detail[$k+1]['answer'] as $que2_key => $que2_val){



                    $temp_ans2 .= $question_2[$que2_val].", ";



                  }

                  $temp_ans2 = rtrim($temp_ans2,", ");

                  $layman_summar .= ucfirst($temp_ans2).' age were your relative diagnosed with colon cancer. ' ;



                }

                break;

            case 3:



                 $layman_summar .= "The last time you were screened for blood in your stools ".$singlelevel['answer'].'. ';

                break;

            case 4:



                $layman_summar .= ucfirst($singlelevel['answer']).', You have a history of anemia or require iron. ';

                break;



            case 5:



                $layman_summar .= 'Your last colonoscopy : '.$singlelevel['answer'].'. ';

                break;



            case 6:



                $layman_summar .= ucfirst($singlelevel['answer']).', You had a previous colonoscopy. ';

                break;



            case 7:



                $layman_summar .= ucfirst($singlelevel['answer']).", You have a history of polyps. ";

                break;

          }

        }



        $layman_summar .= ' ';

  }

  //echo $layman_summar;die;

  //die;

  return array('layman_summar' => $layman_summar);

}



public function prepare_followup_screening_question_layman($user_detail = null, $prev_visit_user_detail = null ){







    $prev_ccd = $prev_visit_user_detail->screening_questions_detail;

    $recent_ccd = $user_detail->screening_questions_detail;

    $temp_prev_ccd = array();



    if(is_array($prev_ccd) && !empty($prev_ccd))

    {

        // this block will replace the key of this array as question id so that we can use that in the coming block

        foreach ($prev_ccd as $key => $value) {



            if(is_array($value) && isset($value['question_id'])){



                $temp_prev_ccd[$value['question_id']] = $value;

            }

        }

    }



    $prev_ccd = $temp_prev_ccd ;

    $prev_recent_ccd = array();



    if(!empty($recent_ccd)){

    // get the prev and recent cc detials int the same array for comparison

        foreach ($recent_ccd as $key => $value) {

            // $prev_recent_ccd[$key] = $value ;

            if(is_array($value) && isset($value['question_id'])){



                $recent_ccd[$key]['prev_answer'] = (isset($prev_ccd[$value['question_id']]) && isset($prev_ccd[$value['question_id']]['answer']))? $prev_ccd[$value['question_id']]['answer'] : "";

            }

        }

    }



    $layman_summar = '';

   // pr($recent_ccd);die;



  if(!empty($recent_ccd) && is_array($recent_ccd)){



      $layman_summar .= ' You provided these GI health checkup screening details: ' ;



      foreach ($recent_ccd as $k => $singlelevel) {



          switch ($singlelevel['question_id'])

          {



            case 3:



                $prev_answer = '';

                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                $layman_summar .= "The last time you were screened for blood in your stools ".$singlelevel['answer'].$prev_answer.'. ' ;

                break;



            case 4:



                $prev_answer = '';

                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                $layman_summar .= ucfirst($singlelevel['answer']).$prev_answer.', You have a history of anemia or require iron. ' ;



                break;



            case 5:



                $prev_answer = '';

                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                $layman_summar .= "Your last colonoscopy: ".$singlelevel['answer'].$prev_answer.'. ' ;

                break;



            case 6:



                $prev_answer = '';

                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                $layman_summar .= $singlelevel['answer'].$prev_answer.', You had a previous colonoscopy. ' ;

                break;



            case 7:



                $prev_answer = '';

                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                $layman_summar .= $singlelevel['answer'].$prev_answer.',You have a history of polyps. ' ;

                break;

          }

        }



        $layman_summar .= ' ';

  }



  return array('layman_summar' => $layman_summar);

}



public function prepare_post_checkup_question_layman($user_detail = null, $gender = null){



//pr($user_detail);die;

  $layman_summar = '';

  $procudure = "";

  $procedure_date = "";



  if(!empty($user_detail->post_checkup_question_detail) && is_array($user_detail->post_checkup_question_detail)){



      foreach ($user_detail->post_checkup_question_detail as $k => $singlelevel) {



          switch ($singlelevel['question_id'])

          {

            //quetion 1 2 3 are related to each other

            case 13:



                if($singlelevel['answer'] == 'endoscopy (EGD)'){



                  $ans_13 = "EGD";



                }elseif($singlelevel['answer'] == 'other'){



                  $ans_13 = "";

                  if(isset($user_detail->post_checkup_question_detail[$k+1]['question_id']) && $user_detail->post_checkup_question_detail[$k+1]['question_id'] == 14){



                    $ans_13 = $user_detail->post_checkup_question_detail[$k+1]['answer'];

                  }

                }else{



                  $ans_13 = $singlelevel['answer'];

                }



                $procudure = $ans_13;



                $layman_summar .= ucfirst($ans_13).' performed ';

                break;

            case 15:



                 $layman_summar .= "on ".$singlelevel['answer'].'. ';

                 $procedure_date = $singlelevel['answer'];

                break;



            case 16:



                if($singlelevel['answer'] == 'Yes'){



                   $layman_summar .= 'Patient states being on anticoagulants ';

                }else{



                   $layman_summar .= ucfirst($singlelevel['answer']).', Patient does not take any blood thinners ';

                }



                break;



            case 17:



                $question_17 = $singlelevel['answer'];



                if($singlelevel['answer'] == 'Yes'){



                    $layman_summar .= "which were resumed ";



                }else{



                    $layman_summar .= "and has not resumed taking them.";



                }

                break;



            case 18:



                if(isset($question_17) && $question_17 == 'Yes'){



                    $layman_summar .= "on ".$singlelevel['answer'].". ";

                }



                 break;



            case 19:



                $question_19 = array(



                  'regular diet' => 'regular diet',

                  'soft foods only' => 'soft diet',

                  'clear liquids only' => 'liquid diet'

                );



                $diet = $question_19[$singlelevel['answer']];

                break;



            case 20:



                $question_20 = array(



                  'well' => 'tolerating',

                  'not well' => 'not tolerating'

                );



                $layman_summar .= ($gender == 0 ? 'She':'He')." is ".$question_20[$singlelevel['answer']];



                if(isset($diet)){



                    $layman_summar .= " a ".$diet.". ";

                }

                break;



            case 21:





                $apply_all = array('vomiting','abdominal pain','dark black stools','bright red blood in stools');

                $not_apply = is_array($singlelevel['answer']) ? array_diff($apply_all,$singlelevel['answer']):"";



                 $layman_summar .= "Patient is positive for ".(is_array($singlelevel['answer']) ? str_replace("dark black stools", "melena", implode(", ", $singlelevel['answer'])) : str_replace("dark black stools", "melena",$singlelevel['answer'])).'. ';



                 if(!empty($not_apply)){



                    $layman_summar .= ($gender == 0 ? 'She':"He")." denies ".(is_array($not_apply) ? implode(", ", $not_apply): $not_apply).". ";

                 }



                break;

            case 22:



                   $layman_summar .= ucfirst($singlelevel['answer']).' times patient have vomited. ';



                break;



            case 23:



              if($singlelevel['answer'] == 'Yes'){



                  $layman_summar .= 'Hematemesis, There was blood or coffee ground-looking stuff in the vomit. ';

              }else{



                $layman_summar .= ucfirst($singlelevel['answer']).', There was blood or coffee ground-looking stuff in the vomit. ';

              }



                break;



            case 24:



                $question_24 = array(



                  '1' => 'very well',

                  '2' => 'well',

                  '3' => 'unwell'

                );



                $layman_summar .= "Patient is feeling overall ".$question_24[$singlelevel['answer']].'. ';

                break;

          }

        }



        $layman_summar .= ' ';

  }



  //echo $layman_summar;die;

  //die;

  return array('layman_summar' => $layman_summar,'procudure' => $procudure,'procedure_date' => $procedure_date);

}







public function prepare_followup_post_checkup_question_layman($user_detail = null, $prev_visit_user_detail = null, $gender = null){



//     pr($prev_visit_user_detail);

// //pr($user_detail);

//     die;

    $prev_ccd = $prev_visit_user_detail->post_checkup_question_detail;

    $recent_ccd = $user_detail->post_checkup_question_detail;

    $temp_prev_ccd = array();



    if(is_array($prev_ccd) && !empty($prev_ccd))

    {

        // this block will replace the key of this array as question id so that we can use that in the coming block

        foreach ($prev_ccd as $key => $value) {



            if(is_array($value) && isset($value['question_id'])){



                $temp_prev_ccd[$value['question_id']] = $value;

            }

        }

    }



    $prev_ccd = $temp_prev_ccd ;

    $prev_recent_ccd = array();



    if(!empty($recent_ccd)){

    // get the prev and recent cc detials int the same array for comparison

        foreach ($recent_ccd as $key => $value) {

            // $prev_recent_ccd[$key] = $value ;

            if(is_array($value) && isset($value['question_id'])){



                $recent_ccd[$key]['prev_answer'] = (isset($prev_ccd[$value['question_id']]) && isset($prev_ccd[$value['question_id']]['answer']))? $prev_ccd[$value['question_id']]['answer'] : "";

            }

        }

    }



// pr($prev_ccd);

// pr($recent_ccd);die;

  $layman_summar = '';

  $procudure = "";

  $procedure_date = "";



  if(!empty($recent_ccd) && is_array($recent_ccd)){



      foreach ($recent_ccd as $k => $singlelevel) {



          switch ($singlelevel['question_id'])

          {

            //quetion 1 2 3 are related to each other

            case 13:



                $prev_answer = '';

                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                $prev_answer_13 = str_replace("endoscopy (EGD)",'EGD',$prev_answer);



                if(strpos($prev_answer_13,'other') !== false && isset($prev_ccd[14]) && isset($prev_ccd[14]['answer'])){



                    $prev_answer_13 = str_replace("other",$prev_ccd[14]['answer'],$prev_answer_13);

                }



                if($singlelevel['answer'] == 'endoscopy (EGD)'){



                  $ans_13 = "EGD";



                }elseif($singlelevel['answer'] == 'other'){



                  $ans_13 = "";

                  if(isset($user_detail->post_checkup_question_detail[$k+1]['question_id']) && $user_detail->post_checkup_question_detail[$k+1]['question_id'] == 14){



                    $ans_13 = $user_detail->post_checkup_question_detail[$k+1]['answer'];

                  }

                }else{



                  $ans_13 = $singlelevel['answer'];

                }



                $procudure = $ans_13;



                $layman_summar .= ucfirst($ans_13).$prev_answer_13.' performed ';

                break;



            case 15:



                $prev_answer = '';

                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                 $layman_summar .= "on ".$singlelevel['answer'].$prev_answer.'. ';

                 $procedure_date = $singlelevel['answer'];

                break;



            case 16:



                $prev_answer = '';

                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;

                $prev_answer = str_replace("Yes", "anticoagulants", $prev_answer);



                if($singlelevel['answer'] == 'Yes'){



                   $layman_summar .= 'Patient states being on anticoagulants'.$prev_answer.' ';

                }else{



                   $layman_summar .= ucfirst($singlelevel['answer']).$prev_answer.', Patient does not take any blood thinners ';

                }



                break;



            case 17:



                $question_17 = $singlelevel['answer'];



                if($singlelevel['answer'] == 'Yes'){



                    $layman_summar .= "which were resumed ";



                }else{



                    $layman_summar .= "and has not resumed taking them.";



                }

                break;



            case 18:



                if(isset($question_17) && $question_17 == 'Yes'){



                    $prev_answer = '';

                    $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                    $layman_summar .= "on ".$singlelevel['answer'].$prev_answer.". ";

                }



                 break;



            case 19:



                $question_19 = array(



                  'regular diet' => 'regular diet',

                  'soft foods only' => 'soft diet',

                  'clear liquids only' => 'liquid diet'

                );



                $prev_answer = '';

                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$question_19[$singlelevel['prev_answer']].')' ) ;



                $diet = $question_19[$singlelevel['answer']].$prev_answer;

                break;



            case 20:



                $question_20 = array(



                  'well' => 'tolerating',

                  'not well' => 'not tolerating'

                );



                $prev_answer = '';

                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$question_20[$singlelevel['prev_answer']].')' ) ;



                $layman_summar .= ($gender == 0 ? 'She':'He')." is ".$question_20[$singlelevel['answer']].$prev_answer;



                if(isset($diet)){



                    $layman_summar .= " a ".$diet.". ";

                }

                break;



            case 21:





                $apply_all = array('vomiting','abdominal pain','dark black stools','bright red blood in stools');



                $cur_apply = (is_array($singlelevel['answer']) ? str_replace("dark black stools", "melena", implode(", ", $singlelevel['answer'])) : str_replace("dark black stools", "melena",$singlelevel['answer']));



                $prev_apply = (is_array($singlelevel['prev_answer']) ? str_replace("dark black stools", "melena", implode(", ", $singlelevel['prev_answer'])) : str_replace("dark black stools", "melena",$singlelevel['prev_answer']));



                $prev_apply_ans = empty($prev_apply) ? '' : ( $cur_apply == $prev_apply ? ' (no change)' : ' (from '.$prev_apply.')' ) ;





                $not_apply = is_array($singlelevel['answer']) ? array_diff($apply_all,$singlelevel['answer']):"";

                $cur_not_apply = (is_array($not_apply) ? implode(", ", $not_apply): $not_apply);



                $prev_not_apply = is_array($singlelevel['prev_answer']) ? array_diff($apply_all,$singlelevel['answer']):"";

                $prev_not_apply = (is_array($prev_not_apply) ? implode(", ", $prev_not_apply): $prev_not_apply);



                $prev_not_apply_ans = empty($prev_not_apply) ? '' : ( $cur_not_apply == $prev_not_apply ? ' (no change)' : ' (from '.$prev_not_apply.')' ) ;



                 $layman_summar .= "Patient is positive for ".$cur_apply.$prev_apply_ans.'. ';



                 if(!empty($not_apply)){



                    $layman_summar .= ($gender == 0 ? 'She':"He")." denies ".$cur_not_apply.$prev_not_apply_ans.". ";

                 }



                break;

            case 22:





                    $prev_answer = '';

                    $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                   $layman_summar .= ucfirst($singlelevel['answer']).$prev_answer.' times patient have vomited. ';



                break;



            case 23:



                $prev_answer = '';

                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$singlelevel['prev_answer'].')' ) ;



                $prev_answer = str_replace("Yes", "Hematemesis", $prev_answer);



              if($singlelevel['answer'] == 'Yes'){



                  $layman_summar .= 'Hematemesis'.$prev_answer.', There was blood or coffee ground-looking stuff in the vomit. ';

              }else{



                $layman_summar .= ucfirst($singlelevel['answer']).$prev_answer.', There was blood or coffee ground-looking stuff in the vomit. ';

              }



                break;



            case 24:



                $question_24 = array(



                  '1' => 'very well',

                  '2' => 'well',

                  '3' => 'unwell'

                );



                $prev_answer = '';

                $prev_answer = empty($singlelevel['prev_answer']) ? '' : ( $singlelevel['answer'] == $singlelevel['prev_answer'] ? ' (no change)' : ' (from '.$question_24[$singlelevel['prev_answer']].')' ) ;



                $layman_summar .= "Patient is feeling overall ".$question_24[$singlelevel['answer']].$prev_answer.'. ';

                break;

          }

        }



        $layman_summar .= ' ';

  }

  return array('layman_summar' => $layman_summar,'procudure' => $procudure,'procedure_date' => $procedure_date);

}



public function prepare_pre_op_medical_conditions_layman($user_detail = null ){



//pr($user_detail);die;

  $layman_summar = '';

 // $not_affected = "";

  //die('fgsgg');



  if(!empty($user_detail->pre_op_medical_condition_detail) && is_array($user_detail->pre_op_medical_condition_detail)){



      $layman_summar .= ' You had been diagnosed with following health conditions: ' ;



      foreach ($user_detail->pre_op_medical_condition_detail as $k => $condition) {



       // pr($condition);die;



          if(isset($condition['answer']) && $condition['answer'] == 1){



            $layman_summar  .= $condition['condition_name'].(!empty($condition['medical_name']) ? "(".$condition['medical_name'].")" : "").' in '.$condition['year'].". ";



          }

          /*else{



            $not_affected .= '<strong>'.$condition['condition_name'].(!empty($condition['medical_name']) ? "(".$condition['medical_name'].")" : "").'</strong>, ';

          }  */

        }

        $layman_summar .= ' ';

  }



 // $not_affected = rtrim($not_affected,", ");

  //echo $not_affected;die;

  //echo $layman_summar;die;

  //die;

  return array('layman_summar' => $layman_summar);

}



public function prepare_pre_op_allergies_conditions_layman($user_detail = null ){



//pr($user_detail);die;

  $layman_summar = '';

 // $not_affected = "";



  if(!empty($user_detail->pre_op_allergies_detail) && is_array($user_detail->pre_op_allergies_detail)){



      $layman_summar .= ' You are allergic to the following: ' ;



      foreach ($user_detail->pre_op_allergies_detail as $k => $condition) {



       // pr($condition);die;



          if(isset($condition['answer']) && $condition['answer'] == 1){



            $layman_summar  .= $condition['condition_name'].(!empty($condition['medical_name']) ? "(".$condition['medical_name'].")" : "").' reaction '.$condition['reaction'].". ";



          }

         /* else{



            $not_affected .= '<strong>'.$condition['condition_name'].(!empty($condition['medical_name']) ? "(".$condition['medical_name'].")" : "").'</strong>, ';

          } */

        }

        $layman_summar .= ' ';

  }



 // $not_affected = rtrim($not_affected,", ");



  //echo $layman_summar;die;

  //die;

  return array('layman_summar' => $layman_summar);

}





public function prepare_pre_op_procedure_detail_question_layman($user_detail = null ){



//pr($user_detail);die;

  $layman_summar = '';



  if(!empty($user_detail->pre_op_procedure_detail) && is_array($user_detail->pre_op_procedure_detail)){



      $layman_summar .= ' You provided these procedure details: ' ;



      foreach ($user_detail->pre_op_procedure_detail as $k => $singlelevel) {



          switch ($singlelevel['question_id'])

          {

            //quetion 1 2 3 are related to each other

            case 13:



                if($singlelevel['answer'] == 'endoscopy (EGD)'){



                  $ans_13 = "EGD";



                }elseif($singlelevel['answer'] == 'other'){



                  $ans_13 = "";

                  if(isset($user_detail->pre_op_procedure_detail[$k+1]['question_id']) && $user_detail->pre_op_procedure_detail[$k+1]['question_id'] == 14){



                    $ans_13 = $user_detail->pre_op_procedure_detail[$k+1]['answer'];

                  }

                }else{



                  $ans_13 = $singlelevel['answer'];

                }



                $layman_summar .= "You have done ".$ans_13.' procedure. ' ;

                break;

            case 25:



                  if($singlelevel['answer'] == 'No'){



                      $layman_summar .= ucfirst($singlelevel['answer']).', You have not scheduled date for the procedure. ';

                  }else{





                    if(isset($user_detail->pre_op_procedure_detail[$k+1]['question_id']) && $user_detail->pre_op_procedure_detail[$k+1]['question_id'] == 26){



                      $layman_summar .= "You have scheduled procedure on ".$user_detail->pre_op_procedure_detail[$k+1]['answer'].'. ';

                    }else{



                      $layman_summar .= ucfirst($singlelevel['answer']).', You have scheduled date for the procedure. ';

                    }

                  }



                break;

          }

        }



        $layman_summar .= ' ';

  }

  //die;

  return array('layman_summar' => $layman_summar);

}



public function prepare_pre_op_medication_detail_question_layman

($user_detail = null ){



//pr($user_detail);die;

  $layman_summar = '';



  if(!empty($user_detail->pre_op_medications_question_detail) && is_array($user_detail->pre_op_medications_question_detail)){



      $layman_summar .= ' You provided these pre operation medications details: ' ;



      foreach ($user_detail->pre_op_medications_question_detail as $k => $singlelevel) {



          switch ($singlelevel['question_id'])

          {

            //quetion 27,28,29 are related to each other

            case 27:



                if($singlelevel['answer'] == 'Yes'){





                    if(isset($user_detail->pre_op_medications_question_detail[$k+1]['question_id']) && $user_detail->pre_op_medications_question_detail[$k+1]['question_id'] == 28){





                        $ans_28 = (is_array($user_detail->pre_op_medications_question_detail[$k+1]['answer']) ? implode(", ", $user_detail->pre_op_medications_question_detail[$k+1]['answer']) : $user_detail->pre_op_medications_question_detail[$k+1]['answer']);



                        if(isset($user_detail->pre_op_medications_question_detail[$k+2]['question_id']) && $user_detail->pre_op_medications_question_detail[$k+2]['question_id'] == 29){





                            $ans_28 = str_replace("Other", $user_detail->pre_op_medications_question_detail[$k+2]['answer'], $ans_28);

                        }





                        $layman_summar .= "Currently You take ".$ans_28." blood thinner medications like warfarin, heparin, Coumadin, Xarelto, or Lovenox. " ;



                    }else{



                         $layman_summar .= "Yes, Currently You take blood thinner medications like warfarin, heparin, Coumadin, Xarelto, or Lovenox. " ;

                    }

                }else{



                    $layman_summar .= "No, Currently You does not take any blood thinner medications like warfarin, heparin, Coumadin, Xarelto, or Lovenox. " ;

                }





                break;

            case 30:



                  if($singlelevel['answer'] == 'No'){



                      $layman_summar .= 'No, You do not take aspirin or baby aspirin regularly. ';

                  }else{



                    $layman_summar .= 'Yes, You take aspirin or baby aspirin regularly. ';



                  }



                break;



             case 31:



                  if($singlelevel['answer'] == 'No'){



                      $layman_summar .= 'No, You have not taken any NSAID pain medications like ibuprofen, Advil, Motrin, Alleve in the past week. ';

                  }else{



                      $layman_summar .= 'Yes, You have taken any NSAID pain medications like ibuprofen, Advil, Motrin, Alleve in the past week. ';



                  }



                break;



            case 32:



                if($singlelevel['answer'] == 'Yes'){





                    if(isset($user_detail->pre_op_medications_question_detail[$k+1]['question_id']) && $user_detail->pre_op_medications_question_detail[$k+1]['question_id'] == 33){





                        $ans_33 = (is_array($user_detail->pre_op_medications_question_detail[$k+1]['answer']) ? implode(", ", $user_detail->pre_op_medications_question_detail[$k+1]['answer']) : $user_detail->pre_op_medications_question_detail[$k+1]['answer']);



                        if(isset($user_detail->pre_op_medications_question_detail[$k+2]['question_id']) && $user_detail->pre_op_medications_question_detail[$k+2]['question_id'] == 34){





                            $ans_33 = str_replace("other", $user_detail->pre_op_medications_question_detail[$k+2]['answer'], $ans_33);

                        }





                        $layman_summar .= "Currently You taking ".$ans_33." herbal supplements such as garlic, ginko, ginseng. ";



                    }else{



                         $layman_summar .= "Yes, Currently You taking herbal supplements such as garlic, ginko, ginseng. " ;

                    }

                }else{



                    $layman_summar .= "No, Currently You does not taking any herbal supplements such as garlic, ginko, ginseng. " ;

                }





                break;





          }

        }



        $layman_summar .= ' ';

  }

  //die;

  return array('layman_summar' => $layman_summar);

}



//prepare layman for cronic illness module

public function prepare_chronic_illnesses_layman($user_detail = null ){



  $layman_summar = '';



  //pr($user_detail);die;



  if(!empty($user_detail->disease_questions_detail) && is_array($user_detail->disease_questions_detail)){



      foreach ($user_detail->disease_questions_detail as $disease_key => $disease_value) {



          $disease_layman_summar = '';

          $alarm_symptom_layman = "";

          $baseline_symptom_layman = "";

          $denies_alarm_symptom_layman = "";

          $denies_baseline_symptom_layman = "";

          //disease name layman

          if(isset($disease_value['disease']) && !empty($disease_value['disease'])){



              $disease_layman_summar .= ' You provided these '.$disease_value['disease']['name'].' details: ' ;

          }

          else{



            continue;

          }



          //disease detail alarm symptom detail

           if(isset($disease_value['alarm_sysmptom']) && !empty($disease_value['alarm_sysmptom'])){



                foreach ($disease_value['alarm_sysmptom'] as $alrmsymptn_key => $alrmsymptn_val) {



                  if($alrmsymptn_val['answer'] == 1){



                    $alarm_symptom_layman .= '+'.(!empty($alrmsymptn_val['medical_name']) ? $alrmsymptn_val['medical_name'] : $alrmsymptn_val['name']).', ';



                  }

                  else{



                        $denies_alarm_symptom_layman .= (!empty($alrmsymptn_val['medical_name']) ? $alrmsymptn_val['medical_name'] : $alrmsymptn_val['name']).', ';

                  }



                }

                $alarm_symptom_layman = rtrim($alarm_symptom_layman,', ');

                $denies_alarm_symptom_layman = rtrim($denies_alarm_symptom_layman,', ');

          }



          //disease detail baseline symptom detail

           if(isset($disease_value['baseline_sysmptom']) && !empty($disease_value['baseline_sysmptom'])){



                foreach ($disease_value['baseline_sysmptom'] as $baslinesysmptn_key => $baslinesysmptn_val) {



                  if($baslinesysmptn_val['answer'] == 1){



                    //$baseline_symptom_layman .= '+'.(!empty($baslinesysmptn_val['medical_name']) ? $baslinesysmptn_val['medical_name'] : $baslinesysmptn_val['name']).', ';



                    $baseline_symptom_layman .= '+'.(!empty($baslinesysmptn_val['medical_name']) ? $baslinesysmptn_val['medical_name'] : $baslinesysmptn_val['name']).' feels '.($baslinesysmptn_val['scale']== 'about the same' ? 'same' : $baslinesysmptn_val['scale']).', ';

                  }

                  else{



                    $denies_baseline_symptom_layman .= (!empty($baslinesysmptn_val['medical_name']) ? $baslinesysmptn_val['medical_name'] : $baslinesysmptn_val['name']).', ';

                  }



                }

                $baseline_symptom_layman = rtrim($baseline_symptom_layman,', ');

                $denies_baseline_symptom_layman = rtrim($denies_baseline_symptom_layman,', ');

          }



          //question detail layman



         if(isset($disease_value['multivitamin_detail'])){



            $detail_qestion_layman = $this->prepare_cronic_disease_question_layman($disease_value['disease_detail_question'],$disease_value['multivitamin_detail']);

          }

          else{



            $detail_qestion_layman = $this->prepare_cronic_disease_question_layman($disease_value['disease_detail_question']);

          }





          $layman_summar .= $disease_layman_summar;



          if(!empty($detail_qestion_layman['layman_summar'])){



              $layman_summar .= $detail_qestion_layman['layman_summar'];

          }



           if(!empty($baseline_symptom_layman)){



             $layman_summar .= 'You noticed the baseline symptoms of '.$baseline_symptom_layman.'. ';

          }



          if(!empty($denies_baseline_symptom_layman)){



            $layman_summar = rtrim($layman_summar,'. ');

            $layman_summar .= ', denies '.$denies_baseline_symptom_layman.'. ';

          }



          if(!empty($alarm_symptom_layman)){



             $layman_summar .= 'You noticed the alarm symptoms of '.$alarm_symptom_layman.'. ' ;

          }



          if(!empty($denies_alarm_symptom_layman)){



            $layman_summar = rtrim($layman_summar,'. ');

            $layman_summar .= ', denies '.$denies_alarm_symptom_layman.'. ';

          }

      }

    }



    $layman_summar .= ' ';

  return array('layman_summar' => $layman_summar);

  }







public function prepare_cronic_disease_question_layman($question_detail = null,  $multivitamin_detail = null){



  $layman_summar = '';



  if(!empty($question_detail) && is_array($question_detail)){



      foreach ($question_detail as $k => $singlelevel) {



          switch ($singlelevel['question_id'])

          {

            //quetion 27,28,29 are related to each other

            case 35:



                if($singlelevel['answer'] == 'Yes'){





                    if(isset($question_detail[$k+1]['question_id']) && $question_detail[$k+1]['question_id'] == 36){



                         $layman_summar .= "You had your last colonoscopy on ".$question_detail[$k+1]['answer']." in the last 10 years. " ;



                    }else{



                         $layman_summar .= "Yes, You had a colonoscopy in the last 10 years. " ;

                    }

                }else{



                    $layman_summar .= "No, You had not a colonoscopy in the last 10 years. " ;

                }





                break;

            case 37:



                  if($singlelevel['answer'] == 'Yes'){





                    if(isset($question_detail[$k+1]['question_id']) && $question_detail[$k+1]['question_id'] == 38){





                         $layman_summar .= "You have received genetic counseling on ".$question_detail[$k+1]['answer']." in the past. " ;



                    }else{



                         $layman_summar .= "Yes, You have received genetic counseling in the past. " ;

                    }

                }else{



                    $layman_summar .= "No, You have not received genetic counseling in the past. " ;

                }



                break;



             case 39:





                  if($singlelevel['answer'] == 'Yes'){





                      if(isset($question_detail[$k+1]['question_id']) && $question_detail[$k+1]['question_id'] == 40){





                           $layman_summar .= "You had genetic tests on ".$question_detail[$k+1]['answer']." for colon cancer. " ;



                      }else{



                           $layman_summar .= "Yes, You have done genetic tests for colon cancer. " ;

                      }

                  }else{



                      $layman_summar .= "No, You have not done any genetic tests for colon cancer. " ;

                  }



                break;



            case 41:



                if($singlelevel['answer'] == 'Yes'){





                  if(isset($question_detail[$k+1]['question_id']) && $question_detail[$k+1]['question_id'] == 42){





                           $layman_summar .= "You have ever had a flexible sigmoidoscopy done on ".$question_detail[$k+1]['answer'].". " ;



                      }else{



                           $layman_summar .= "Yes, You have ever had a flexible sigmoidoscopy done. " ;

                      }

                  }else{



                      $layman_summar .= "No, You have not ever had a flexible sigmoidoscopy done. ";

                  }



                break;

            case 43:



                  if($singlelevel['answer'] == 'Yes'){



                    if(!empty($multivitamin_detail) && isset($multivitamin_detail['name']) && !empty($multivitamin_detail['name'])){



                            $vitamin_detail = $multivitamin_detail['name'];



                            if(isset($multivitamin_detail['dose'])){



                                $vitamin_detail .=  ' '.$multivitamin_detail['dose'];

                            }



                            if(isset($multivitamin_detail['how_often'])){



                                $vitamin_detail .=  ' '.$multivitamin_detail['how_often'];

                            }



                            if(isset($multivitamin_detail['how_taken'])){



                                $vitamin_detail .=  ' '.$multivitamin_detail['how_taken'];

                            }



                      $layman_summar .= "You are taking supplements ".$vitamin_detail.". ";



                    }

                    else{



                      $layman_summar .= "Yes , You are taking supplements like a multivitamin, iron, or B12. ";

                    }



                  }

                  else{



                      $layman_summar .= "No, You are not taking any supplements like a multivitamin, iron, or B12. ";

                  }

                  break;



            case 44;





                if($singlelevel['answer'] == 'Yes'){



                  $layman_summar .= "Yes, You have noticed side effects when taking your medications. ";



                }else{



                  $layman_summar .= "No, You have not noticed any side effects when taking your medications. ";



                }

                break;



            case 45:



              $question_45 = array(



                'Much better' => 'significant improvement',

                'A little better' => 'mildly improved',

                'About the same' => 'stable',

                'A little worse' => 'mild worsening',

                'Much worse' => 'significantly worse'

              );



              $layman_summar .= "Overall you feels ".$question_45[$singlelevel['answer']]." since your last visit. ";



                break;

          }

        }



        $layman_summar .= ' ';

  }

  //die;

  return array('layman_summar' => $layman_summar);

}







public function get_tiny_url($url)  {

    $ch = curl_init();

    $timeout = 5;

    curl_setopt($ch,CURLOPT_URL,'http://tinyurl.com/api-create.php?url='.$url);

    curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);

    curl_setopt($ch,CURLOPT_CONNECTTIMEOUT,$timeout);

    $data = curl_exec($ch);

    curl_close($ch);

    return $data;

}



 public function ipc_note_detail($id = null , $atp_id = null, $note_format = "full"){

    $this->Users = TableRegistry::get('Users');

        $this->WomenSpecific = TableRegistry::get('WomenSpecific');
        $this->Schedules = TableRegistry::get('Schedules');

        $schedule_detail =$this->Schedules->find('all')->where(['appointment_id' => $atp_id])->first();
        if(!empty($schedule_detail)){

            $mrn = !empty($schedule_detail->mrn) ? $this->CryptoSecurity->decrypt(base64_decode($schedule_detail->mrn),SEC_KEY) : "";
        }

        $login_user = $this->Users->find('all')->contain('Organizations')->where(['Users.id' => $id])->first();

        $women_field =  $this->WomenSpecific->find('all')->where(['user_id' => $id ])->first();

        $cc = '';

        //pr($login_user);die;

    if(!empty($women_field))
    {

        $womanrec = $women_field;
        if(!empty($womanrec->age_of_first_priod)){
            $womanrec->age_of_first_priod = Security::decrypt( base64_decode($womanrec->age_of_first_priod), SEC_KEY);
        }

        if(!empty($womanrec->no_of_pregnency)){
            $womanrec->no_of_pregnency = Security::decrypt( base64_decode($womanrec->no_of_pregnency), SEC_KEY);
        }

        if(!empty($womanrec->no_of_miscarriage)){
            $womanrec->no_of_miscarriage = Security::decrypt( base64_decode($womanrec->no_of_miscarriage), SEC_KEY);
        }

        if(!empty($womanrec->is_regular_papsmear)){
            $womanrec->is_regular_papsmear = Security::decrypt( base64_decode($womanrec->is_regular_papsmear), SEC_KEY);
        }

        if(!empty($womanrec->papsmear_finding)){
            $womanrec->papsmear_finding = Security::decrypt( base64_decode($womanrec->papsmear_finding), SEC_KEY);
        }

        if(!empty($womanrec->papsmear_month)){
            $womanrec->papsmear_month = Security::decrypt( base64_decode($womanrec->papsmear_month), SEC_KEY);
        }

        if(!empty($womanrec->papsmear_year)){
            $womanrec->papsmear_year = Security::decrypt( base64_decode($womanrec->papsmear_year), SEC_KEY);
        }

        if(!empty($womanrec->is_curently_pregnant)){
            $womanrec->is_curently_pregnant = Security::decrypt( base64_decode($womanrec->is_curently_pregnant), SEC_KEY);
        }

        if(!empty($womanrec->current_baby_sex)){
            $womanrec->current_baby_sex = Security::decrypt( base64_decode($womanrec->current_baby_sex), SEC_KEY);
        }

        if(!empty($womanrec->currently_pregnant_week)){
            $womanrec->currently_pregnant_week = Security::decrypt( base64_decode($womanrec->currently_pregnant_week), SEC_KEY);
        }

        if(!empty($womanrec->currently_pregnant_days)){
            $womanrec->currently_pregnant_days = Security::decrypt( base64_decode($womanrec->currently_pregnant_days), SEC_KEY);
        }

        if(!empty($womanrec->currently_pregnant_complication)){
            $womanrec->currently_pregnant_complication = Security::decrypt( base64_decode($womanrec->currently_pregnant_complication), SEC_KEY);
        }

        if(!empty($womanrec->is_previous_birth)){
            $womanrec->is_previous_birth = Security::decrypt( base64_decode($womanrec->is_previous_birth), SEC_KEY);
        }

        if(!empty($womanrec->previous_birth_sex)){
            $womanrec->previous_birth_sex = Security::decrypt( base64_decode($womanrec->previous_birth_sex), SEC_KEY);
        }

        if(!empty($womanrec->previous_delivery_method)){
            $womanrec->previous_delivery_method = Security::decrypt( base64_decode($womanrec->previous_delivery_method), SEC_KEY);
        }

        if(!empty($womanrec->previos_pregnancy_duration)){
            $womanrec->previos_pregnancy_duration = Security::decrypt( base64_decode($womanrec->previos_pregnancy_duration), SEC_KEY);
        }
        if(!empty($womanrec->previous_complication)){
            $womanrec->previous_complication = Security::decrypt( base64_decode($womanrec->previous_complication), SEC_KEY);
        }

        if(!empty($womanrec->previous_hospital)){
            $womanrec->previous_hospital = Security::decrypt( base64_decode($womanrec->previous_hospital), SEC_KEY);
        }

        if(!empty($womanrec->is_mammogram))
        {
            $womanrec->is_mammogram = Security::decrypt( base64_decode($womanrec->is_mammogram), SEC_KEY);
        }

        if(!empty($womanrec->mammogram_month)){
            $womanrec->mammogram_month = Security::decrypt( base64_decode($womanrec->mammogram_month), SEC_KEY);
        }

        if(!empty($womanrec->mammogram_year)){
            $womanrec->mammogram_year = Security::decrypt( base64_decode($womanrec->mammogram_year), SEC_KEY);
        }

        if(!empty($womanrec->previous_abnormal_breast_lump)){
            $womanrec->previous_abnormal_breast_lump = Security::decrypt( base64_decode($womanrec->previous_abnormal_breast_lump), SEC_KEY);
        }

        if(!empty($womanrec->any_biopsy)){
            $womanrec->any_biopsy = Security::decrypt( base64_decode($womanrec->any_biopsy), SEC_KEY);
        }

        if(!empty($womanrec->is_sti_std)){
            $womanrec->is_sti_std = Security::decrypt( base64_decode($womanrec->is_sti_std), SEC_KEY);
        }

        if(!empty($womanrec->sti_std_detail)){

            
        }

        $women_field  = $womanrec;
    }
    if(!empty($login_user))
    {
        $user_data =  $login_user ;
        if(!empty($user_data->first_name)){
            $user_data->first_name = $this->CryptoSecurity->decrypt( base64_decode($user_data->first_name), SEC_KEY);
        }

        if(!empty($user_data->last_name)){
            $user_data->last_name = $this->CryptoSecurity->decrypt( base64_decode($user_data->last_name), SEC_KEY);
        }
        if(!empty($user_data->email)){
            $user_data->email = $this->CryptoSecurity->decrypt( base64_decode($user_data->email), SEC_KEY);
        }
        if(!empty($user_data->phone)){
            $user_data->phone = $this->CryptoSecurity->decrypt( base64_decode($user_data->phone), SEC_KEY);
        }

        if(!empty($user_data->dob)){
            $user_data->dob = $this->CryptoSecurity->decrypt( base64_decode($user_data->dob), SEC_KEY);
        }

        if(!empty($user_data->height)){
            $user_data->height = Security::decrypt( base64_decode($user_data->height), SEC_KEY);
        }

        if(!empty($user_data->weight)){
            $user_data->weight = Security::decrypt( base64_decode($user_data->weight), SEC_KEY);
        }

        if(!empty($user_data->address)){
            $user_data->address = Security::decrypt( base64_decode($user_data->address), SEC_KEY);
        }

        if(!empty($user_data->city)){
            $user_data->city = Security::decrypt( base64_decode($user_data->city), SEC_KEY);
        }

        if(!empty($user_data->state)){
            $user_data->state = Security::decrypt( base64_decode($user_data->state), SEC_KEY);
        }

        if(!empty($user_data->zip)){
            $user_data->zip = Security::decrypt( base64_decode($user_data->zip), SEC_KEY);
        }

        if(!empty($user_data->bmi)){
            $user_data->bmi = Security::decrypt( base64_decode($user_data->bmi), SEC_KEY);
        }

        if(!empty($user_data->is_uterus_removal)){
            $user_data->is_uterus_removal = Security::decrypt( base64_decode($user_data->is_uterus_removal), SEC_KEY);
        }

        if(!empty($user_data->is_latex_allergy)){
            $user_data->is_latex_allergy = Security::decrypt( base64_decode($user_data->is_latex_allergy), SEC_KEY);
        }
        if(!empty($user_data->is_retired)){
            $user_data->is_retired = Security::decrypt( base64_decode($user_data->is_retired), SEC_KEY);
        }

        if(!empty($user_data->occupation)){
            $user_data->occupation = Security::decrypt( base64_decode($user_data->occupation), SEC_KEY);
        }

        if(!empty($user_data->marital_status)){
            $user_data->marital_status = Security::decrypt( base64_decode($user_data->marital_status), SEC_KEY);
        }

        if(!empty($user_data->sexual_orientation)){
            $user_data->sexual_orientation = Security::decrypt( base64_decode($user_data->sexual_orientation), SEC_KEY);
        }

        if(!empty($user_data->ethinicity)){
            $user_data->ethinicity = Security::decrypt( base64_decode($user_data->ethinicity), SEC_KEY);
        }

        if(!empty($user_data->current_smoke_pack)){
            $user_data->current_smoke_pack = Security::decrypt( base64_decode($user_data->current_smoke_pack), SEC_KEY);
        }

        if(!empty($user_data->current_smoke_year)){
            $user_data->current_smoke_year = Security::decrypt( base64_decode($user_data->current_smoke_year), SEC_KEY);
        }

        if(!empty($user_data->past_smoke_pack)){
            $user_data->past_smoke_pack = Security::decrypt( base64_decode($user_data->past_smoke_pack), SEC_KEY);
        }
        if(!empty($user_data->past_smoke_year)){
            $user_data->past_smoke_year = Security::decrypt( base64_decode($user_data->past_smoke_year), SEC_KEY);
        }

        if(!empty($user_data->current_drink_pack)){
            $user_data->current_drink_pack = Security::decrypt( base64_decode($user_data->current_drink_pack), SEC_KEY);
        }

        if(!empty($user_data->current_drink_year)){
            $user_data->current_drink_year = Security::decrypt( base64_decode($user_data->current_drink_year), SEC_KEY);
        }
        if(!empty($user_data->past_drink_pack)){
            $user_data->past_drink_pack = Security::decrypt( base64_decode($user_data->past_drink_pack), SEC_KEY);
        }

        if(!empty($user_data->past_drink_year)){
            $user_data->past_drink_year = Security::decrypt( base64_decode($user_data->past_drink_year), SEC_KEY);
        }

        if(!empty($user_data->is_currentlysmoking)){
            $user_data->is_currentlysmoking = Security::decrypt( base64_decode($user_data->is_currentlysmoking), SEC_KEY);
        }

        if(!empty($user_data->is_pastsmoking)){
            $user_data->is_pastsmoking = Security::decrypt( base64_decode($user_data->is_pastsmoking), SEC_KEY);
        }

        if(!empty($user_data->is_currentlydrinking)){
            $user_data->is_currentlydrinking = Security::decrypt( base64_decode($user_data->is_currentlydrinking), SEC_KEY);
        }

        if(!empty($user_data->is_pastdrinking)){
            $user_data->is_pastdrinking = Security::decrypt( base64_decode($user_data->is_pastdrinking), SEC_KEY);
        }

        if(!empty($user_data->is_otherdrug)){
            $user_data->is_otherdrug = Security::decrypt( base64_decode($user_data->is_otherdrug), SEC_KEY);
        }

        if(!empty($user_data->is_otherdrugpast)){
            $user_data->is_otherdrugpast = Security::decrypt( base64_decode($user_data->is_otherdrugpast), SEC_KEY);
        }

        if(!empty($user_data->gender)){
            $user_data->gender = Security::decrypt( base64_decode($user_data->gender), SEC_KEY);
        }

        if(!empty($user_data->race)){
            $user_data->race = Security::decrypt( base64_decode($user_data->race), SEC_KEY);
        }
        if(!empty($user_data->pharmacy)){
            $user_data->pharmacy = Security::decrypt(base64_decode($user_data->pharmacy),SEC_KEY);
        }

        if(!empty($user_data->insurance_company)){
            $user_data->insurance_company = Security::decrypt( base64_decode($user_data->insurance_company), SEC_KEY);
        }

        if(!empty($user_data->guarantor)){
            $user_data->guarantor = Security::decrypt( base64_decode($user_data->guarantor), SEC_KEY);
        }

        if(!empty($user_data->insuranceType)){
            $user_data->insuranceType = Security::decrypt( base64_decode($user_data->insuranceType), SEC_KEY);
        }
        if(!empty($user_data->subscriberName)){
            $user_data->subscriberName = Security::decrypt( base64_decode($user_data->subscriberName), SEC_KEY);
        }
        if(!empty($user_data->identificationNumber)){
            $user_data->identificationNumber = Security::decrypt( base64_decode($user_data->identificationNumber), SEC_KEY);
        }
        if(!empty($user_data->groupNumber)){
            $user_data->groupNumber = Security::decrypt( base64_decode($user_data->groupNumber), SEC_KEY);
        }
        if(!empty($user_data->insuranceCompany)){
            $user_data->insuranceCompany = Security::decrypt( base64_decode($user_data->insuranceCompany), SEC_KEY);
        }


        $login_user  = $user_data ;
    }
    $this->Appointments = TableRegistry::get('Appointments');
    $id = $atp_id ;
    $user_detail = $this->Appointments->find('all')->contain(['Doctors', 'Organizations', 'Specializations', 'Users', 'ChiefCompliantUserdetails'])->where(['Appointments.is_shown' => 1, 'Appointments.id' => $id])->first();
    $this->UserSignedDocs = TableRegistry::get('UserSignedDocs');
    $this->StepDetails = TableRegistry::get('StepDetails');
    $this->ChiefCompliants = TableRegistry::get('ChiefCompliants');
    $this->ChiefCompliantQuestionnaire = TableRegistry::get('ChiefCompliantQuestionnaire');
    $this->ChiefCompliantDetails = TableRegistry::get('ChiefCompliantDetails');
    $this->ChiefCompliantMedication = TableRegistry::get('ChiefCompliantMedication');
    $this->ChiefCompliantOtherDetails = TableRegistry::get('ChiefCompliantOtherDetails');
    $this->PainFollowupQuestionnaires = TableRegistry::get('PainFollowupQuestionnaires');
    $this->CommonQuestions = TableRegistry::get('CommonQuestions');
    $this->CommonConditions = TableRegistry::get('CommonConditions');
    $this->Diseases = TableRegistry::get('Diseases');
    $this->Symptoms = TableRegistry::get('Symptoms');
    $this->ChiefCompliantUserdetails = TableRegistry::get('ChiefCompliantUserdetails');
    $user_signed_data = '';

    if(!empty($user_detail['user']) && !empty($user_detail['organization'])){
        $user_signed_data = $this->UserSignedDocs->find('all')->where(['user_id' =>$user_detail['user']['id'],'organization_id' => $user_detail['organization']['id']])->first();
    }
    //pr($user_detail->chief_compliant_userdetail->hospital_er_detail); die;
    if(!empty($user_detail->chief_compliant_userdetail))
    {
        if(!empty($user_detail->chief_compliant_userdetail->current_step_id)){
            $user_detail->chief_compliant_userdetail->current_step_id = $this->StepDetails->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->current_step_id])->first();
        }

        if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_id)){
            $user_detail->chief_compliant_userdetail->chief_compliant_id = Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_id), SEC_KEY);
            $user_detail->chief_compliant_userdetail->chief_compliant_id = $this->ChiefCompliants->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->chief_compliant_id])->first();
        }

        if(!empty($user_detail->chief_compliant_userdetail->compliant_symptom_ids)){
            $user_detail->chief_compliant_userdetail->compliant_symptom_ids = explode(',', $user_detail->chief_compliant_userdetail->compliant_symptom_ids);
            $user_detail->chief_compliant_userdetail->compliant_symptom_ids =  $this->ChiefCompliants->find('all')->where(['id IN' => $user_detail->chief_compliant_userdetail->compliant_symptom_ids])->all();
        }

        if(isset($user_detail->chief_compliant_userdetail->compliant_length)){
            $user_detail->chief_compliant_userdetail->compliant_length = $user_detail->chief_compliant_userdetail->compliant_length;
        }

        if(!empty($user_detail->chief_compliant_userdetail->compliant_medication_detail)){
            $user_detail->chief_compliant_userdetail->compliant_medication_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->compliant_medication_detail), SEC_KEY)) ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_symptoms)){

            $user_detail->chief_compliant_userdetail->chief_compliant_symptoms = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_symptoms), SEC_KEY)) ;

            foreach($user_detail->chief_compliant_userdetail->chief_compliant_symptoms as $key => $value){
                foreach($value as $k =>$v) {
                    $user_detail->chief_compliant_userdetail->chief_compliant_symptoms[$key][$k] = $this->ChiefCompliants->find('all')->where(['id' => $v])->first();
                }
            }
        }

        if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail)){
            $user_detail->chief_compliant_userdetail->questionnaire_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->questionnaire_detail), SEC_KEY)) ;
            foreach($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value){
                foreach($value as $k =>$v) {
                    $user_detail->chief_compliant_userdetail->questionnaire_detail[$key][$k] = $this->ChiefCompliantQuestionnaire->find('all')->where(['id' => $v])->first();
                }
            }
        }

        if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_details)){
            $user_detail->chief_compliant_userdetail->chief_compliant_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_details), SEC_KEY))) ;

            // below is the code to sort array according to our requirement, we need to sort the question id 42 and 47 according to this sequence - array(43,39,40,41,42)
            if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_details['42'])){

                $temp   = $user_detail->chief_compliant_userdetail->chief_compliant_details['42'];
                $ordered = array();
                foreach (array(43,39,40,41,42) as $key){
                    if (array_key_exists($key, $temp)){
                        $ordered[$key] = $temp[$key];
                        unset($temp[$key]);
                    }
                }
                $temp = $ordered + $temp;
                $user_detail->chief_compliant_userdetail->chief_compliant_details['42'] =  $temp;
                $temp = '';
            }

            if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_details['47'])){
                $temp   = $user_detail->chief_compliant_userdetail->chief_compliant_details['47'];
                $ordered = array();
                foreach (array(43,39,40,41,42) as $key) {
                    if (array_key_exists($key, $temp)) {
                        $ordered[$key] = $temp[$key];
                        unset($temp[$key]);
                    }
                }
                $temp = $ordered + $temp;
                $user_detail->chief_compliant_userdetail->chief_compliant_details['47'] =  $temp;
                $temp = '';
            }
            $tempar = array();
            $more_options = array();
            foreach ($user_detail->chief_compliant_userdetail->chief_compliant_details as $key => $value){

                $i = 0 ;
                foreach ($value as $k => $v){
                    if(!is_numeric($k) && $k == 'more_option'){
                        $more_options[$key] = $v ;
                        unset($value['more_option']);
                        continue;
                    }
                    $temp = $this->ChiefCompliantDetails->find('all')->where(['id'=> $k ])->first();
                    $tempcc = $this->ChiefCompliants->find('all')->where(['id'=> $key ])->first();
                    $tempar[$key]['cc_data'] = $tempcc ;
                    $tempar[$key][$i]['question_id'] = $temp->id ;
                    $tempar[$key][$i]['question'] = $temp->question ;
                    $tempar[$key][$i]['hpi_element'] = $temp->cpt_hpi_element_type ;
                    $tempar[$key][$i]['answer'] = $v ;
                    $i++;
                }
            }
            $user_detail->chief_compliant_userdetail->more_options = $more_options ;
            $user_detail->chief_compliant_userdetail->chief_compliant_details = $tempar ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_other_details)){
            $user_detail->chief_compliant_userdetail->chief_compliant_other_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_other_details), SEC_KEY))) ;
            $tempar = array();
            $i = 0;
            foreach ($user_detail->chief_compliant_userdetail->chief_compliant_other_details as $key => $value) {
                $temp = $this->ChiefCompliantOtherDetails->find('all')->where(['id'=> $key ])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value ;
                $i++;
            }
            $user_detail->chief_compliant_userdetail->chief_compliant_other_details = $tempar ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->post_checkup_question_detail)){
            $user_detail->chief_compliant_userdetail->post_checkup_question_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->post_checkup_question_detail), SEC_KEY)));
            if(!empty($user_detail->chief_compliant_userdetail->post_checkup_question_detail)){
                $i = 0;
                foreach($user_detail->chief_compliant_userdetail->post_checkup_question_detail as $key => $val){

                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                    $tempar[$i]['question_id'] = $temp->id ;
                    $tempar[$i]['question'] = $temp->question ;
                    $tempar[$i]['answer'] = $val;
                    $i++;
                }
                $user_detail->chief_compliant_userdetail->post_checkup_question_detail = $tempar;
            }
        }

        if(!empty($user_detail->chief_compliant_userdetail->screening_questions_detail)){
            $user_detail->chief_compliant_userdetail->screening_questions_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->screening_questions_detail), SEC_KEY)));
            if(!empty($user_detail->chief_compliant_userdetail->screening_questions_detail)){
                $i = 0;
                foreach($user_detail->chief_compliant_userdetail->screening_questions_detail as $key => $val){
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                    $tempar[$i]['question_id'] = $temp->id ;
                    $tempar[$i]['question'] = $temp->question ;
                    $tempar[$i]['answer'] = $val;
                    $i++;
                }
                $user_detail->chief_compliant_userdetail->screening_questions_detail = $tempar;
            }
        }

        if(!empty($user_detail->chief_compliant_userdetail->pain_update_question)){
            $user_detail->chief_compliant_userdetail->pain_update_question = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pain_update_question), SEC_KEY))) ;
            $tempar = array();
            $i = 0;
            foreach ($user_detail->chief_compliant_userdetail->pain_update_question as $key => $value){
                $temp = $this->PainFollowupQuestionnaires->find('all')->where(['id'=> $key ])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value ;
                $i++;
            }
            $user_detail->chief_compliant_userdetail->pain_update_question = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->general_update_question)){
            $user_detail->chief_compliant_userdetail->general_update_question = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->general_update_question), SEC_KEY))) ;
            $tempar = array();
            $i = 0;
            foreach ($user_detail->chief_compliant_userdetail->general_update_question as $key => $value){

                $temp = $this->PainFollowupQuestionnaires->find('all')->where(['id'=> $key ])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value ;
                $i++;
            }
            $user_detail->chief_compliant_userdetail->general_update_question = $tempar;
        }

        if(isset($user_detail->chief_compliant_userdetail->pre_op_procedure_detail) && !empty($user_detail->chief_compliant_userdetail->pre_op_procedure_detail)){
            $user_detail->chief_compliant_userdetail->pre_op_procedure_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pre_op_procedure_detail), SEC_KEY))) ;
            $tempar = array();
            $i = 0;
            foreach ($user_detail->chief_compliant_userdetail->pre_op_procedure_detail as $key => $value){
                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value ;
                $i++;
            }
            $user_detail->chief_compliant_userdetail->pre_op_procedure_detail = $tempar;
        }

        if(isset($user_detail->chief_compliant_userdetail->pre_op_medications_question_detail) && !empty($user_detail->chief_compliant_userdetail->pre_op_medications_question_detail)){
            $user_detail->chief_compliant_userdetail->pre_op_medications_question_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pre_op_medications_question_detail), SEC_KEY))) ;
            $tempar = array();
            $i = 0;
            foreach ($user_detail->chief_compliant_userdetail->pre_op_medications_question_detail as $key => $value){

                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$i]['question_id'] = $temp->id ;
                $tempar[$i]['question'] = $temp->question ;
                $tempar[$i]['answer'] = $value ;
                $i++;
            }
            $user_detail->chief_compliant_userdetail->pre_op_medications_question_detail = $tempar;
        }

        if(isset($user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail) && !empty($user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail)){
            $user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail), SEC_KEY))) ;
            $tempar = array();
            $i = 0;
            foreach ($user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail as $key => $value){
                $temp = $this->CommonConditions->find('all')->where(['id'=> $key ])->first();
                $tempar[$i]['condition_id'] = $temp->id ;
                $tempar[$i]['condition_name'] = $temp->name ;
                $tempar[$i]['medical_name'] = $temp->medical_name ;
                $tempar[$i]['answer'] = $value['name'] ;
                $tempar[$i]['year'] = $value['year'] ;
                $i++;
            }
            $user_detail->chief_compliant_userdetail->pre_op_medical_condition_detail = $tempar;
        }

        if(isset($user_detail->chief_compliant_userdetail->pre_op_allergies_detail) && !empty($user_detail->chief_compliant_userdetail->pre_op_allergies_detail)){

            $user_detail->chief_compliant_userdetail->pre_op_allergies_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pre_op_allergies_detail), SEC_KEY))) ;
            $tempar = array();
            $i = 0;
            foreach ($user_detail->chief_compliant_userdetail->pre_op_allergies_detail as $key => $value){
                $temp = $this->CommonConditions->find('all')->where(['id'=> $key ])->first();
                $tempar[$i]['condition_id'] = $temp->id ;
                $tempar[$i]['condition_name'] = $temp->name ;
                $tempar[$i]['medical_name'] = $temp->medical_name ;
                $tempar[$i]['answer'] = $value['name'] ;
                $tempar[$i]['reaction'] = $value['reaction'] ;
                $i++;
            }
            $user_detail->chief_compliant_userdetail->pre_op_allergies_detail = $tempar;
        }
        if(!empty($user_detail->chief_compliant_userdetail->general_update_provider_info))
        {
            $user_detail->chief_compliant_userdetail->general_update_provider_info =  unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->general_update_provider_info), SEC_KEY))) ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->general_update_procedure_detail))
        {
            $user_detail->chief_compliant_userdetail->general_update_procedure_detail =  unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->general_update_procedure_detail), SEC_KEY))) ;
        }

        if(isset($user_detail->chief_compliant_userdetail->disease_questions_detail) && !empty($user_detail->chief_compliant_userdetail->disease_questions_detail))
        {
            $user_detail->chief_compliant_userdetail->disease_questions_detail =  unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->disease_questions_detail), SEC_KEY))) ;
            if(!empty($user_detail->chief_compliant_userdetail->disease_questions_detail)){
                $temparr = array();
                foreach ($user_detail->chief_compliant_userdetail->disease_questions_detail as $key => $value) {
                    $disease = $this->Diseases->find('all')->where(['id'=> $key])->first();
                    if(!empty($disease)){
                        $user_detail->chief_compliant_userdetail->disease_questions_detail[$key]['disease'] =  $disease;
                    }
                    //set question details
                    if(!empty($value['disease_detail_question'])){
                        $temparr = array();
                        $i = 0;
                        foreach ($value['disease_detail_question'] as $q_key => $que) {
                            $question = $this->CommonQuestions->find('all')->where(['id' => $q_key])->first();
                            if(!empty($question)){
                                $temparr[$i]['question_id'] = $question->id ;
                                $temparr[$i]['question'] = $question->question ;
                                $temparr[$i]['answer'] = $que ;
                                $i++;
                            }
                        }
                        $user_detail->chief_compliant_userdetail->disease_questions_detail[$key]['disease_detail_question'] = $temparr;
                    }
                    //set detail of alarm sysmptoms

                    if(!empty($value['alarm_sysmptom'])){
                        $temparr = array();
                        $i = 0;
                        foreach ($value['alarm_sysmptom'] as $asysmpt_key => $asysmpt_value) {
                            $alarm_sysmptom = $this->Symptoms->find('all')->where(['id'=> $asysmpt_key])->first();
                            if(!empty($alarm_sysmptom)){

                                $temparr[$i]['id'] = $alarm_sysmptom->id;
                                $temparr[$i]['name'] = $alarm_sysmptom->symptom;
                                $temparr[$i]['medical_name'] = $alarm_sysmptom->medical_name;
                                $temparr[$i]['answer'] = $asysmpt_value['answer'];
                                $i++;
                            }
                        }
                        $user_detail->chief_compliant_userdetail->disease_questions_detail[$key]['alarm_sysmptom'] = $temparr;
                    }
                    //set detail of base line sysmptoms

                    if(!empty($value['baseline_sysmptom'])){
                        $temparr = array();
                        $i = 0;
                        foreach ($value['baseline_sysmptom'] as $bsysmpt_key => $bsysmpt_value) {
                            $baseline_sysmptom = $this->Symptoms->find('all')->where(['id'=> $bsysmpt_key])->first();
                            if(!empty($baseline_sysmptom)){
                                $temparr[$i]['id'] = $baseline_sysmptom->id;
                                $temparr[$i]['name'] = $baseline_sysmptom->symptom;
                                $temparr[$i]['medical_name'] = $baseline_sysmptom->medical_name;
                                $temparr[$i]['answer'] = $bsysmpt_value['answer'];
                                $temparr[$i]['scale'] = $bsysmpt_value['scale'];
                                $i++;
                            }
                        }
                        $user_detail->chief_compliant_userdetail->disease_questions_detail[$key]['baseline_sysmptom'] = $temparr;
                    }
                }
            }
        }
        if(!empty($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details))
        {
            $user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details), SEC_KEY)));

            if(isset($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp'])){
                $tempar = array();
                foreach($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp'] as $key => $val){
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $val;
                }
                $user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['soapp'] = $tempar;
            }

            if(isset($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm'])){
                $tempar = array();
                foreach($user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm'] as $key => $val){
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $val;
                }
                $user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details['comm'] = $tempar;
            }
        }

        if(!empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details))
        {
            $user_detail->chief_compliant_userdetail->medication_refill_extra_details = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->medication_refill_extra_details), SEC_KEY)));
            if(isset($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast'])){
                $tempar = array();
                foreach($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast'] as $key => $val){
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $val;
                }

                $user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast'] = $tempar;
            }
            if(isset($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt'])){
                $tempar = array();
                foreach($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt'] as $key => $val){
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $val;
                }
                $user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt'] = $tempar;
            }
            if(isset($user_detail->chief_compliant_userdetail->medication_refill_extra_details['ort']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['ort'])){
                $tempar = array();
                foreach($user_detail->chief_compliant_userdetail->medication_refill_extra_details['ort'] as $key => $val){
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $val;
                }
                $user_detail->chief_compliant_userdetail->medication_refill_extra_details['ort'] = $tempar;
            }
            if(isset($user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3'])){
                $tempar = array();
                foreach($user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3'] as $key => $val){
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $val;
                }
                $user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3'] = $tempar;
            }
        }
        if(!empty($user_detail->chief_compliant_userdetail->symptom_from_tab1)){
            $temp_symptom_from_tab1 = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->symptom_from_tab1), SEC_KEY)));
            if(!empty($temp_symptom_from_tab1)){
                $temp_cc = implode(", ", $temp_symptom_from_tab1);
                $user_detail->chief_compliant_userdetail->all_cc_detail_name = $temp_cc;
            }
        }
        if(!empty($user_detail->chief_compliant_userdetail->covid_detail)){
            $user_detail->chief_compliant_userdetail->covid_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->covid_detail), SEC_KEY));
            $tempar = array();
            foreach($user_detail->chief_compliant_userdetail->covid_detail as $key => $value){
                if(!empty($value)){
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $value;
                }
            }
            $user_detail->chief_compliant_userdetail->covid_detail = $tempar;
        }

        /*Chronic Pain Assessment */

                if(!empty($user_detail->chief_compliant_userdetail->chronic_pain_assessment_tmb)){

                    $user_detail->chief_compliant_userdetail->chronic_pain_assessment_tmb = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_pain_assessment_tmb), SEC_KEY));
                    $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_pain_assessment_tmb as $key => $value)
                    {
                        if(!empty($value))
                        {

                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_pain_assessment_tmb = $tempar;
                }


                 if(!empty($user_detail->chief_compliant_userdetail->chronic_pain_assessment_pmh)){

                    $user_detail->chief_compliant_userdetail->chronic_pain_assessment_pmh = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_pain_assessment_pmh), SEC_KEY));
                 
                    $user_detail->chief_compliant_userdetail->chronic_pain_assessment_pmh = $user_detail->chief_compliant_userdetail->chronic_pain_assessment_pmh;
                }


                if(!empty($user_detail->chief_compliant_userdetail->chronic_pain_treatment_history)){

                    $user_detail->chief_compliant_userdetail->chronic_pain_treatment_history = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_pain_treatment_history), SEC_KEY));
                    $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_pain_treatment_history as $key => $value)
                    {
                        if(!empty($value))
                        {

                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_pain_treatment_history = $tempar;
                }


                  if(!empty($user_detail->chief_compliant_userdetail->chronic_pain_curr_treat_history)){

                    $user_detail->chief_compliant_userdetail->chronic_pain_curr_treat_history = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_pain_curr_treat_history), SEC_KEY));
                 
                    $user_detail->chief_compliant_userdetail->chronic_pain_curr_treat_history = $user_detail->chief_compliant_userdetail->chronic_pain_curr_treat_history;
                }

                  if(!empty($user_detail->chief_compliant_userdetail->chronic_pain_past_treat_history)){

                    $user_detail->chief_compliant_userdetail->chronic_pain_past_treat_history = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_pain_past_treat_history), SEC_KEY));
                 
                    $user_detail->chief_compliant_userdetail->chronic_pain_past_treat_history = $user_detail->chief_compliant_userdetail->chronic_pain_past_treat_history;
                }





                if(!empty($user_detail->chief_compliant_userdetail->chronic_pain_opioid_overdose_risk)){

                    $user_detail->chief_compliant_userdetail->chronic_pain_opioid_overdose_risk = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_pain_opioid_overdose_risk), SEC_KEY));
                    $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_pain_opioid_overdose_risk as $key => $value)
                    {
                        if(!empty($value))
                        {

                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_pain_opioid_overdose_risk = $tempar;
                }


                 if(!empty($user_detail->chief_compliant_userdetail->chronic_pain_assessment_ort)){

                    $user_detail->chief_compliant_userdetail->chronic_pain_assessment_ort = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_pain_assessment_ort), SEC_KEY));
                    $tempar = array();
                    foreach($user_detail->chief_compliant_userdetail->chronic_pain_assessment_ort as $key => $value)
                    {
                        if(!empty($value))
                        {

                          $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                          $tempar[$key]['question_id'] = $temp->id ;
                          $tempar[$key]['question'] = $temp->question ;
                          $tempar[$key]['answer'] = $value;
                        }
                    }
                    $user_detail->chief_compliant_userdetail->chronic_pain_assessment_ort = $tempar;
                }

                /*Chronic Pain Assessment */

        if(!empty($user_detail->chief_compliant_userdetail->focused_history_detail)){
            $user_detail->chief_compliant_userdetail->focused_history_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->focused_history_detail), SEC_KEY))  ;
            $tempar = array();
            foreach($user_detail->chief_compliant_userdetail->focused_history_detail as $key => $value){
                if(!empty($value)){
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $value;
                }
            }
            $user_detail->chief_compliant_userdetail->focused_history_detail = $tempar;
        }
        if(!empty($user_detail->chief_compliant_userdetail->phq_9_detail)){
            $user_detail->chief_compliant_userdetail->phq_9_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->phq_9_detail), SEC_KEY)));
        }

        if(!empty($user_detail->chief_compliant_userdetail->follow_up_sx_detail)){
            $user_detail->chief_compliant_userdetail->follow_up_sx_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->follow_up_sx_detail), SEC_KEY)));
            $tempar = array();
            foreach ($user_detail->chief_compliant_userdetail->follow_up_sx_detail as $key => $value)
            {
                foreach ($value as $k => $v)
                {
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $k ])->first();
                    $tempcc = $this->ChiefCompliants->find('all')->where(['id'=> $key ])->first();
                    $tempar[$key]['cc_data'] = $tempcc ;
                    $tempar[$key][$k]['question_id'] = $temp->id ;
                    $tempar[$key][$k]['question'] = $temp->question ;
                    $tempar[$key][$k]['answer'] = $v ;
                }
            }
            $user_detail->chief_compliant_userdetail->follow_up_sx_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chronic_condition)){
            $user_detail->chief_compliant_userdetail->chronic_condition = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_condition), SEC_KEY)));
        }

        if(!empty($user_detail->chief_compliant_userdetail->chronic_dmii_detail))
        {
            $user_detail->chief_compliant_userdetail->chronic_dmii_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_dmii_detail), SEC_KEY))  ;
            $tempar = array();
            foreach($user_detail->chief_compliant_userdetail->chronic_dmii_detail as $key => $value)
            {
                if(!empty($value))
                {
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $value;
                }
            }
            $user_detail->chief_compliant_userdetail->chronic_dmii_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chronic_cad_detail))
        {
            $user_detail->chief_compliant_userdetail->chronic_cad_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_cad_detail), SEC_KEY))  ;
            $tempar = array();
            foreach($user_detail->chief_compliant_userdetail->chronic_cad_detail as $key => $value)
            {
                if(!empty($value))
                {
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $value;
                }
            }
            $user_detail->chief_compliant_userdetail->chronic_cad_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chronic_chf_detail))
        {
            $user_detail->chief_compliant_userdetail->chronic_chf_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_chf_detail), SEC_KEY))  ;
            $tempar = array();
            foreach($user_detail->chief_compliant_userdetail->chronic_chf_detail as $key => $value)
            {
                if(!empty($value))
                {
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $value;
                }
            }
            $user_detail->chief_compliant_userdetail->chronic_chf_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chronic_htn_detail))
        {
            $user_detail->chief_compliant_userdetail->chronic_htn_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_htn_detail), SEC_KEY))  ;
            $tempar = array();
            foreach($user_detail->chief_compliant_userdetail->chronic_htn_detail as $key => $value)
            {
                if(!empty($value))
                {
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $value;
                }
            }
            $user_detail->chief_compliant_userdetail->chronic_htn_detail = $tempar;
        }


        if(!empty($user_detail->chief_compliant_userdetail->chronic_copd_detail))
        {
            $user_detail->chief_compliant_userdetail->chronic_copd_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_copd_detail), SEC_KEY))  ;
            $tempar = array();
            foreach($user_detail->chief_compliant_userdetail->chronic_copd_detail as $key => $value)
            {
                if(!empty($value))
                {
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $value;
                }
            }
            $user_detail->chief_compliant_userdetail->chronic_copd_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chronic_asthma_detail))
        {
            $user_detail->chief_compliant_userdetail->chronic_asthma_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_asthma_detail), SEC_KEY))  ;
            $tempar = array();
            foreach($user_detail->chief_compliant_userdetail->chronic_asthma_detail as $key => $value)
            {
                if(!empty($value))
                {
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $value;
                }
            }
            $user_detail->chief_compliant_userdetail->chronic_asthma_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chronic_general_detail))
        {
            $user_detail->chief_compliant_userdetail->chronic_general_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chronic_general_detail), SEC_KEY))  ;
            $tempar = array();
            foreach($user_detail->chief_compliant_userdetail->chronic_general_detail as $key => $value)
            {
                if(!empty($value))
                {
                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                    $tempar[$key]['question_id'] = $temp->id ;
                    $tempar[$key]['question'] = $temp->question ;
                    $tempar[$key]['answer'] = $value;
                }
            }
            $user_detail->chief_compliant_userdetail->chronic_general_detail = $tempar;
        }



        if(!empty($user_detail->chief_compliant_userdetail->chronic_dmii_medication)){
            $user_detail->chief_compliant_userdetail->chronic_dmii_medication = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_dmii_medication), SEC_KEY)) ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chronic_cad_medication)){
            $user_detail->chief_compliant_userdetail->chronic_cad_medication = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_cad_medication), SEC_KEY)) ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chronic_chf_medication)){
            $user_detail->chief_compliant_userdetail->chronic_chf_medication = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_chf_medication), SEC_KEY)) ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->chronic_htn_medication)){
            $user_detail->chief_compliant_userdetail->chronic_htn_medication = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chronic_htn_medication), SEC_KEY)) ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->glucose_reading_detail)){
            $user_detail->chief_compliant_userdetail->glucose_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->glucose_reading_detail), SEC_KEY)) ;
        }


        if(!empty($user_detail->chief_compliant_userdetail->bp_reading_detail)){
            $user_detail->chief_compliant_userdetail->bp_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->bp_reading_detail), SEC_KEY)) ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->peak_flow_reading_detail)){
            $user_detail->chief_compliant_userdetail->peak_flow_reading_detail = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->peak_flow_reading_detail), SEC_KEY)) ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->cancer_cc_detail)){
            $user_detail->chief_compliant_userdetail->cancer_cc_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_cc_detail), SEC_KEY));
            $tempar = array();
            foreach($user_detail->chief_compliant_userdetail->cancer_cc_detail as $key => $value){
                if(!empty($value)){

                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                    if(!empty($temp)){
                        $tempar[$temp->id]['question_id'] = $temp->id ;
                        $tempar[$temp->id]['question'] = $temp->question ;
                        $tempar[$temp->id]['answer'] = $value;
                    }
                }
            }
            $user_detail->chief_compliant_userdetail->cancer_cc_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->cancer_history_detail))
        {
            $user_detail->chief_compliant_userdetail->cancer_history_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_history_detail), SEC_KEY))  ;

            $tempar = array();
            foreach($user_detail->chief_compliant_userdetail->cancer_history_detail as $key => $value){

                if(!empty($value) && is_array($value)){

                    foreach ($value as $k => $v) {
                        $temp = $this->CommonQuestions->find('all')->where(['id'=> $k])->first();
                        if(!empty($temp)){
                            $tempar[$key][$temp->id]['question_id'] = $temp->id ;
                            $tempar[$key][$temp->id]['question'] = $temp->question ;
                            $tempar[$key][$temp->id]['answer'] = $v;
                        }

                    }
                }
            }
            $user_detail->chief_compliant_userdetail->cancer_history_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail))
        {
            $user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail), SEC_KEY))  ;
        }

        if(!empty($user_detail->chief_compliant_userdetail->cancer_family_members))
                {
                  $i = 0;
                  $user_detail->chief_compliant_userdetail->cancer_family_members = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_family_members), SEC_KEY))  ;
                  $tempar = array();
                   $i = 0;
                  foreach($user_detail->chief_compliant_userdetail->cancer_family_members as $key => $value){

                      if(!empty($value)){

                        $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                        if(!empty($temp)){
                            $tempar[$temp->id]['question_id'] = $temp->id ;
                            $tempar[$temp->id]['question'] = $temp->question ;
                            $tempar[$temp->id]['answer'] = $value;
                        }
                        $i++;
                      }
                    }
                    $user_detail->chief_compliant_userdetail->cancer_family_members = $tempar;
                }


        if(!empty($user_detail->chief_compliant_userdetail->cancer_medical_detail))
        {
            $i = 0;
            $user_detail->chief_compliant_userdetail->cancer_medical_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->cancer_medical_detail), SEC_KEY))  ;

            $tempar = array();
            $i = 0;
            foreach($user_detail->chief_compliant_userdetail->cancer_medical_detail as $key => $value){

                if(!empty($value)){

                    $temp = $this->CommonQuestions->find('all')->where(['id'=> $key])->first();
                    if(!empty($temp)){
                        $tempar[$temp->id]['question_id'] = $temp->id ;
                        $tempar[$temp->id]['question'] = $temp->question ;
                        $tempar[$temp->id]['answer'] = $value;
                    }
                    $i++;
                }
            }
            $user_detail->chief_compliant_userdetail->cancer_medical_detail = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments))
        {
            $user_detail->chief_compliant_userdetail->cancer_assessments = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->cancer_assessments), SEC_KEY))  ;
              //pr($user_detail->chief_compliant_userdetail->cancer_assessments);die;
            $assessment_history = array();
            $life_assessment = array();
            $chemo_assessment = array();

            if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments['assessment_history']))
            {
                $i = 0;
                foreach($user_detail->chief_compliant_userdetail->cancer_assessments['assessment_history'] as $key => $value){

                    if(!empty($value)){

                        $temp = $this->CommonConditions->find('all')->where(['id'=> $key])->first();
                        $assessment_history[$i]['symtoms_id'] = $temp->id ;
                        $assessment_history[$i]['name'] = !empty($temp->note_name) ? $temp->note_name : $temp->name ;
                        $assessment_history[$i]['answer'] = $value;
                        $i++;
                    }
                }
            }

            if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments['life_assessment']))
            {
                $j = 0;
                foreach($user_detail->chief_compliant_userdetail->cancer_assessments['life_assessment'] as $key => $value){

                    if(!empty($value)){

                        $temp = $this->CommonConditions->find('all')->where(['id'=> $key])->first();
                        $life_assessment[$j]['symtoms_id'] = $temp->id ;
                        $life_assessment[$j]['name'] = !empty($temp->note_name) ? $temp->note_name : $temp->name ;
                        $life_assessment[$j]['answer'] = $value;
                        $j++;
                    }
                }
            }

            if(!empty($user_detail->chief_compliant_userdetail->cancer_assessments['chemo_assessment']))
            {
                $j = 0;
                foreach($user_detail->chief_compliant_userdetail->cancer_assessments['chemo_assessment'] as $key => $value){

                    if(!empty($value)){

                        $temp = $this->CommonConditions->find('all')->where(['id'=> $key])->first();
                        $chemo_assessment[$j]['symtoms_id'] = $temp->id ;
                        $chemo_assessment[$j]['name'] = !empty($temp->note_name) ? $temp->note_name : $temp->name ;
                        $chemo_assessment[$j]['answer'] = $value;
                        $j++;
                    }
                }
            }

            $cancer_assessments = array('assessment_history' => $assessment_history,'life_assessment' => $life_assessment,'chemo_assessment' => $chemo_assessment);
            $user_detail->chief_compliant_userdetail->cancer_assessments = $cancer_assessments;

        }

        if(!empty($user_detail->chief_compliant_userdetail->pre_op_post_op))
        {
            $user_detail->chief_compliant_userdetail->pre_op_post_op = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->pre_op_post_op), SEC_KEY)));
            $tempar = array();
            foreach ($user_detail->chief_compliant_userdetail->pre_op_post_op as $key => $value)
            {
                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $value ;

            }
            $user_detail->chief_compliant_userdetail->pre_op_post_op = $tempar;
        }

        if(!empty($user_detail->chief_compliant_userdetail->cancer_followup_general_detail))
        {
            $user_detail->chief_compliant_userdetail->cancer_followup_general_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->cancer_followup_general_detail), SEC_KEY)));
            $tempar = array();
            foreach ($user_detail->chief_compliant_userdetail->cancer_followup_general_detail as $key => $value)
            {
                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $value ;

            }
            $user_detail->chief_compliant_userdetail->cancer_followup_general_detail = $tempar;
        }

        // start internal medication module
        if(!empty($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor)){
            $user_detail->chief_compliant_userdetail->is_chief_complaint_doctor = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor), SEC_KEY))) ;         
            $tempar = array();
            foreach ($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor as $key => $value)
            {
                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                ///pr($temp); die;
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $value ;

            }
            $user_detail->chief_compliant_userdetail->is_chief_complaint_doctor = $tempar ;
            //pr($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor); die;
        }
        if(!empty($user_detail->chief_compliant_userdetail->internal_general_assessment_detail)){
            $user_detail->chief_compliant_userdetail->internal_general_assessment_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->internal_general_assessment_detail), SEC_KEY))) ;         
            $tempar = array();
            foreach ($user_detail->chief_compliant_userdetail->internal_general_assessment_detail as $key => $value)
            {
                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                ///pr($temp); die;
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $value ;

            }
            $user_detail->chief_compliant_userdetail->internal_general_assessment_detail = $tempar ;
            //pr($user_detail->chief_compliant_userdetail->internal_general_assessment_detail); die;
        } 
        if(!empty($user_detail->chief_compliant_userdetail->internal_taps1_assessment_detail)){
            $user_detail->chief_compliant_userdetail->internal_taps1_assessment_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->internal_taps1_assessment_detail), SEC_KEY))) ;
            $tempar = array();
            foreach ($user_detail->chief_compliant_userdetail->internal_taps1_assessment_detail as $key => $value)
            {
                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $value ;

            }
            $user_detail->chief_compliant_userdetail->internal_taps1_assessment_detail = $tempar ;
        }
        if(!empty($user_detail->chief_compliant_userdetail->internal_taps2_assessment_detail)){
            $user_detail->chief_compliant_userdetail->internal_taps2_assessment_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->internal_taps2_assessment_detail), SEC_KEY))) ;
            $tempar = array();
            foreach ($user_detail->chief_compliant_userdetail->internal_taps2_assessment_detail as $key => $value)
            {
                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $value ;

            }
            $user_detail->chief_compliant_userdetail->internal_taps2_assessment_detail = $tempar ;
        }
        // end Inetrnal medication module 
        // psychiatric module start
        if(!empty($user_detail->chief_compliant_userdetail->chief_complaint_psychiatry)){
            $user_detail->chief_compliant_userdetail->chief_complaint_psychiatry = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->chief_complaint_psychiatry), SEC_KEY))) ;         
            $tempar = array();
            foreach ($user_detail->chief_compliant_userdetail->chief_complaint_psychiatry as $key => $value)
            {
                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $value ;

            }
            $user_detail->chief_compliant_userdetail->chief_complaint_psychiatry = $tempar ;
        }
        // end psychiatric module
        if(!empty($user_detail->chief_compliant_userdetail->followup_medical_history_detail))
        {
            $user_detail->chief_compliant_userdetail->followup_medical_history_detail = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->followup_medical_history_detail), SEC_KEY)));

            $tempar = array();
            foreach ($user_detail->chief_compliant_userdetail->followup_medical_history_detail['followup_medical_history_detail'] as $key => $value)
            {
                $temp = $this->CommonQuestions->find('all')->where(['id'=> $key ])->first();
                $tempar[$key]['question_id'] = $temp->id ;
                $tempar[$key]['question'] = $temp->question ;
                $tempar[$key]['answer'] = $value ;

            }
            if(!empty($user_detail->chief_compliant_userdetail->followup_medical_history_detail['medical_history'])){
                $tempar['medical_history'] = $user_detail->chief_compliant_userdetail->followup_medical_history_detail['medical_history'];
            }
            if(!empty($user_detail->chief_compliant_userdetail->followup_medical_history_detail['surgical_history'])){
                $tempar['surgical_history'] = $user_detail->chief_compliant_userdetail->followup_medical_history_detail['surgical_history'];
            }
            if(!empty($user_detail->chief_compliant_userdetail->followup_medical_history_detail['allergy_history'])){
                $tempar['allergy_history'] = $user_detail->chief_compliant_userdetail->followup_medical_history_detail['allergy_history'];
            }
            $user_detail->chief_compliant_userdetail->followup_medical_history_detail = $tempar;
        }
    }

        $length_arr =  '{"1x a day": "qd", "2x a day": "BID", "3x a day": "TID", "every 4 hours": "q4h", "every 6 hours": "q6h", "every 8 hours": "q8h", "every 12 hours": "q12h", "1x a week": "qwk", "2x a week": "2/wk", "3x a week": "3/wk", "4x a week": "q4wk", "5x a week": "q5wk", "6x a week": "q6wk", "at bedtime": "qhs", "in the morning": "qam", "as needed": "PRN","evening":"qpm"}' ;



        $length_arr = json_decode($length_arr, true);
        $length_arr = array_flip($length_arr);



        // Pt: ObgynDemo, Female 25yo, F

      $now = Time::now();

      $age = abs($now->year - date('Y',strtotime($login_user->dob)));

    // Security::decrypt( base64_decode($login_user->last_name) , SEC_KEY)

      $pt = h(ucfirst($login_user->first_name)).', '.h($login_user->last_name).'   '.$age.'yo, '.($login_user->gender == 1 ? 'M' : 'F') ;

      // DOB: 8/18/1992

      $dob = date('Y-m-d',strtotime($login_user->dob));



    // MRN#:  P: 123123123  E: john@valhalla.healthcare  05/14/2018  07:33  BMI: 24.5

    $phone = $login_user->phone;

    $email = $login_user->email;

    $curdate = $now->i18nFormat('MM/dd/yyyy') ;

    $curtime = $now->i18nFormat('HH:mm');

   // pr($phone); pr($email); pr($curdate); pr($curtime);

    // bmi calculation url-http://extoxnet.orst.edu/faqs/dietcancer/web2/twohowto.html

    // Multiply the weight in pounds by 0.45 -> Multiply the height in inches by 0.025  -> Square the answer from step 2 -> Divide the answer from step 1 by the answer from step 3

    $bmi = "";

    /*

    $hght =  $login_user->height;

    $wght =  $login_user->weight;

    if(!empty($hght) && !empty($wght)){

      $bmi = ($wght * 0.45) / (pow(($hght*0.025), 2)) ;

      $bmi = round($bmi, 1);

    }

    */



    $bmi = $login_user->bmi;



// pr($user_detail->chief_compliant_userdetail); die;

    // #CC obgyndemo

    // pr($user_detail->chief_compliant_userdetail->chief_compliant_id) ;die;



 if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_id)){

    $cc = !empty($user_detail->chief_compliant_userdetail->chief_compliant_id->doctor_specific_name) ? h($user_detail->chief_compliant_userdetail->chief_compliant_id->doctor_specific_name) : h($user_detail->chief_compliant_userdetail->chief_compliant_id->name) ;

  }

    //print_r($cc);die;





    if(!empty($user_detail->chief_compliant_userdetail->random_chief_compliant)){

$user_detail->chief_compliant_userdetail->random_chief_compliant = Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->random_chief_compliant), SEC_KEY);

      $cc .= (!empty($cc) ? ', ' : '').$user_detail->chief_compliant_userdetail->random_chief_compliant ;



    }



    // #HPI Female is a 25 y.o. G2P2 female student who is heterosexual and single, ...

$s_ori = array(0 => 'Heterosexual', 1 => 'Homosexual', 2 => 'Bisexual', 9 => 'Prefer not to say');

$mar_s = array(0 => 'Unmarried', 1 => 'Married', 2 => 'Divorced');





      $temp = '';

      if(is_array($user_detail->chief_compliant_userdetail->compliant_symptom_ids)){

       foreach($user_detail->chief_compliant_userdetail->compliant_symptom_ids as $k => $v)

        {

          $temp .= $v->name .', ' ;

        }

    }



if(!empty($user_detail->chief_compliant_userdetail->symptom_from_tab1)){

  // $tsym  = unserialize(base64_decode($user_detail->chief_compliant_userdetail->symptom_from_tab1));

$tsym  = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->symptom_from_tab1), SEC_KEY)));

// pr($tsym); die;
$symtom_cc = array();
foreach ($tsym as $key => $value) {

  $chiefComplaint = $this->ChiefCompliants->find('all')->where(['name' => $value])->first();
  if(!empty($chiefComplaint))
  {
    $symtom_cc[] = !empty($chiefComplaint->doctor_specific_name) ? $chiefComplaint->doctor_specific_name : $chiefComplaint->name;

  }
}

  $tsym = implode(', ', $symtom_cc) ;

  $temp .= $tsym ;

}



    $temp = rtrim($temp, ', ');

      // echo $temp ;



      $temp_associated_symp = $temp ;



      // associated symptom from tab 3

 // $res_ar = array(0 => 'NO', 1 => 'YES' , 2 => "I DON'T KNOW");

      $positive_symptom = '' ;

      $negative_symptom = '' ;

// pr($user_detail->chief_compliant_userdetail->compliant_symptom_ids); die ;

 if(!empty($user_detail->chief_compliant_userdetail->compliant_symptom_ids)){



    foreach ($user_detail->chief_compliant_userdetail->compliant_symptom_ids as $key => $value) {



      $positive_symptom .= $value->name;



    }

  }

$positive_symptom = !empty($positive_symptom)? $positive_symptom.', ' : '' ;

// pr($user_detail->chief_compliant_userdetail->chief_compliant_symptoms); die;

  if(is_array($user_detail->chief_compliant_userdetail->chief_compliant_symptoms)) {

     foreach ($user_detail->chief_compliant_userdetail->chief_compliant_symptoms as $key => $value) {

        foreach($value as $k =>$v) {

          if($key == 1)  // get the positive symptom

          $positive_symptom = $positive_symptom.$v->name ;

          else if($key == 0) // get the negative symptom

          $negative_symptom = $negative_symptom.$v->name.', ' ;



      }

     }

  }

$positive_symptom = !empty($positive_symptom)? $positive_symptom.', ' : '' ;

// get the python file related associated symptom start

// pr($user_detail->chief_compliant_userdetail->python_file_option_3rd_tab); die;

    if(!empty($user_detail->chief_compliant_userdetail->python_file_option_3rd_tab)){





    // $python_file_option_3rd_tab = unserialize(base64_decode($user_detail->chief_compliant_userdetail->python_file_option_3rd_tab));



  $python_file_option_3rd_tab = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->python_file_option_3rd_tab), SEC_KEY)));



    // pr($python_file_option_3rd_tab); die;



// pr($python_file_option_3rd_tab);

    // $positive_symptom = "";

    // $negative_symptom = "";



    // pr($user_detail->compliant_symptom_ids); die;







    if( isset($python_file_option_3rd_tab[1]) && is_array($python_file_option_3rd_tab[1])){

        foreach ($python_file_option_3rd_tab[1] as $key => $value) {

            $positive_symptom .= $value['technical'].', ';

        }

    }



    if( isset($python_file_option_3rd_tab[0]) && is_array($python_file_option_3rd_tab[0])){

        foreach ($python_file_option_3rd_tab[0] as $key => $value) {

            $negative_symptom .= $value['technical'].', ';

        }

    }







    }

          $positive_symptom = rtrim($positive_symptom, ', ');

          $negative_symptom = rtrim($negative_symptom, ', ');



//pr($user_detail->chief_compliant_userdetail); die;

// preparing layman summary  for note purpose

if(isset($user_detail->chief_compliant_userdetail->all_cc_detail_name)){



    $all_cc_name = $user_detail->chief_compliant_userdetail->all_cc_detail_name;

}

else{



    $all_cc_name = '';

}



$all_cc_name = rtrim($all_cc_name,' ,');

//add the chronic word before the cc name that include pain word

if(!empty($all_cc_name)){

    $duration_arr = array('3 months','4 months','5 months','6 months','7 months','8 months','9 months','10 months','11 months','1 year','2 years','3 years','4 years','5 years','6 years','7 years','8 years','9 years','10 years','10+ years');

    $temp_all_cc_name = explode(", ", $all_cc_name);

   if(count($temp_all_cc_name) && !empty($user_detail->chief_compliant_userdetail->compliant_length) && in_array($user_detail->chief_compliant_userdetail->compliant_length, $duration_arr)){



        foreach ($temp_all_cc_name as $cckey => $ccvalue) {



            if(strrpos($ccvalue, 'pain') !== false ){



                $temp_all_cc_name[$cckey] = 'chronic '.$ccvalue;

            }



        }

    }

    $all_cc_name = implode(", ", $temp_all_cc_name);

}





$cc_header = '';

$question_detial_res = $this->CcDetail->prepare_question_layman($user_detail->chief_compliant_userdetail,$login_user['gender']);

$other_question_detial_res = $this->prepare_other_question_layman($user_detail->chief_compliant_userdetail);

if(!empty($question_detial_res) && isset($question_detial_res['all_cc_name'])){

    $all_cc_name = $question_detial_res['all_cc_name'].(!empty($all_cc_name) ? ', '.$all_cc_name : '');
}

$all_cc_name = trim($all_cc_name,' ,');

if(!empty($question_detial_res) && isset($question_detial_res['cc_header'])){



    $cc_header = $question_detial_res['cc_header'];

}













//pr($screening_question_detail_layman);

// pr($question_detial_res) ;die;

$question_detial_res = strip_tags($question_detial_res['layman_summar']);



$question_detial_res = str_replace("your","Patient's",$question_detial_res);

$question_detial_res = str_replace("you","Patient",$question_detial_res);





$other_question_detial_res = strip_tags($other_question_detial_res['layman_summar']);



$other_question_detial_res = str_replace("your","Patient's",$other_question_detial_res);

$other_question_detial_res = str_replace("you","Patient",$other_question_detial_res);

$other_question_detial_res = str_replace("Your","Patient's",$other_question_detial_res);

$other_question_detial_res = str_replace("You","Patient",$other_question_detial_res);







//echo $screening_question_detail_layman;die;





$general_update_question_layman = "";

$pain_update_question_layman = "";

$pre_visit_other_quarion = "";

$pre_visit_quarion = "";

$screening_question_detail_layman = "";

$pre_op_procedure_detail_question_layman = "";

$pre_op_medication_detail_question_layman = "";

$cronic_illness_layman = '';

//$pre_op_medical_conditions_layman = "";

//$pre_op_alleries_conditions_layman = "";





//if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 9){



$screening_question_detail_layman = $this->prepare_screening_question_layman($user_detail->chief_compliant_userdetail);

//pr($screening_question_detail_layman);

  if(!empty($screening_question_detail_layman) && isset($screening_question_detail_layman['layman_summar'])){



    $screening_question_detail_layman = $screening_question_detail_layman['layman_summar'];

  }



      //$screening_question_detail_layman = strip_tags($screening_question_detail_layman);



    $screening_question_detail_layman = str_replace("your","Patient's",$screening_question_detail_layman);

    $screening_question_detail_layman = str_replace("you","Patient",$screening_question_detail_layman);

    $screening_question_detail_layman = str_replace("Your","Patient's",$screening_question_detail_layman);

    $screening_question_detail_layman = str_replace("You","Patient",$screening_question_detail_layman);





$pre_op_procedure_detail_question_layman = $this->prepare_pre_op_procedure_detail_question_layman($user_detail->chief_compliant_userdetail);

//pr($screening_question_detail_layman);

  if(!empty($pre_op_procedure_detail_question_layman) && isset($pre_op_procedure_detail_question_layman['layman_summar'])){



    $pre_op_procedure_detail_question_layman = $pre_op_procedure_detail_question_layman['layman_summar'];



    $pre_op_procedure_detail_question_layman = str_replace("your","Patient's",$pre_op_procedure_detail_question_layman);

    $pre_op_procedure_detail_question_layman = str_replace("you","Patient",$pre_op_procedure_detail_question_layman);

    $pre_op_procedure_detail_question_layman = str_replace("Your","Patient's",$pre_op_procedure_detail_question_layman);

    $pre_op_procedure_detail_question_layman = str_replace("You","Patient",$pre_op_procedure_detail_question_layman);

  }





  $pre_op_medication_detail_question_layman = $this->prepare_pre_op_medication_detail_question_layman($user_detail->chief_compliant_userdetail);

//pr($screening_question_detail_layman);

  if(!empty($pre_op_medication_detail_question_layman) && isset($pre_op_medication_detail_question_layman['layman_summar'])){



    $pre_op_medication_detail_question_layman = $pre_op_medication_detail_question_layman['layman_summar'];



    $pre_op_medication_detail_question_layman = str_replace("your","Patient's",$pre_op_medication_detail_question_layman);

    $pre_op_medication_detail_question_layman = str_replace("you","Patient",$pre_op_medication_detail_question_layman);

    $pre_op_medication_detail_question_layman = str_replace("Your","Patient's",$pre_op_medication_detail_question_layman);

    $pre_op_medication_detail_question_layman = str_replace("You","Patient",$pre_op_medication_detail_question_layman);

  }



  $cronic_illness_layman = $this->prepare_chronic_illnesses_layman($user_detail->chief_compliant_userdetail);

  if(!empty($cronic_illness_layman) && isset($cronic_illness_layman['layman_summar'])){



    $cronic_illness_layman = $cronic_illness_layman['layman_summar'];



    $cronic_illness_layman = str_replace("your","Patient's",$cronic_illness_layman);

    $cronic_illness_layman = str_replace("you","Patient",$cronic_illness_layman);

    $cronic_illness_layman = str_replace("Your","Patient's",$cronic_illness_layman);

    $cronic_illness_layman = str_replace("You","Patient",$cronic_illness_layman);

  }







//get layman for pain update question when pain follow up (step id = 8)

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 8){





   // pr($user_detail->chief_compliant_userdetail);

    $prev_visit_user_detail =  $this->ChiefCompliantUserdetails->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->followup_parent_id])->first();

    //$prev_visit_user_detail->chief_compliant_id =

    $prev_visit_user_detail = $this->prepare_user_detial_data_for_render($prev_visit_user_detail);



    $prev_cc_name = null;



    if(!empty($prev_visit_user_detail) && !empty($prev_visit_user_detail->chief_compliant_details)){



        foreach ($prev_visit_user_detail->chief_compliant_details as $key => $value) {



            if(isset($value['cc_data']['name']) && !empty($value['cc_data']['name'])){



                $prev_cc_name[] = $value['cc_data']['name'];

            }

        }

    }



    if(!empty($prev_cc_name)){



        $prev_cc_name = implode(", ", $prev_cc_name);

    }

    //pr($prev_visit_user_detail);die;

    $prev_visit_user_detail->chief_compliant_id = $user_detail->chief_compliant_userdetail->chief_compliant_id;

    //pr($prev_visit_user_detail);



    $prev_visit_question_detial_res = $this->CcDetail->prepare_question_layman($prev_visit_user_detail,$login_user['gender']);

    if(!empty($prev_visit_question_detial_res) && isset($prev_visit_question_detial_res['layman_summar']) && isset($prev_visit_question_detial_res['all_cc_name']) &&  !empty($prev_visit_question_detial_res['layman_summar']) && !empty($prev_visit_question_detial_res['all_cc_name'])){



        $pre_visit_cc = $prev_visit_question_detial_res['all_cc_name'];

        $pre_visit_cc = rtrim($pre_visit_cc, ', ');



        $prev_visit_question_detial_res = strip_tags($prev_visit_question_detial_res['layman_summar']);

        $prev_visit_question_detial_res = str_replace("your","Patient's",$prev_visit_question_detial_res);

        $prev_visit_question_detial_res = str_replace("you","Patient",$prev_visit_question_detial_res);



        $pre_visit_quarion = " In your previous visit you provided these details for ".$pre_visit_cc .": ".$prev_visit_question_detial_res;

    }

   // pr($pre_visit_quarion);die;

    $prev_visit_other_question_detial_res = $this->prepare_other_question_layman($prev_visit_user_detail);

    //pr($prev_visit_other_question_detial_res);die;





    if(!empty($prev_visit_other_question_detial_res) && isset($prev_visit_other_question_detial_res['layman_summar']) &&  !empty($prev_visit_other_question_detial_res['layman_summar'])){



        $prev_visit_other_question_detial_res = strip_tags($prev_visit_other_question_detial_res['layman_summar']);

        $prev_visit_other_question_detial_res = str_replace("your","Patient's",$prev_visit_other_question_detial_res);

        $prev_visit_other_question_detial_res = str_replace("you","Patient",$prev_visit_other_question_detial_res);

        $prev_visit_other_question_detial_res = str_replace("Your","Patient's",$prev_visit_other_question_detial_res);

        $prev_visit_other_question_detial_res = str_replace("You","Patient",$prev_visit_other_question_detial_res);



        $pre_visit_other_quarion = " In your previous visit ".$prev_visit_other_question_detial_res." ";

        //pr($pre_visit_other_quarion);die;

    }



    $pain_update_question_layman = $this->prepare_pain_update_question_layman($user_detail->chief_compliant_userdetail,$prev_cc_name);

   // pr($pain_update_question_layman);die;

    $pain_update_question_layman = $pain_update_question_layman['layman_summar'];





    $pain_update_question_layman = strip_tags($pain_update_question_layman);



    $pain_update_question_layman = str_replace("your","Patient's",$pain_update_question_layman);

    $pain_update_question_layman = str_replace("you","Patient",$pain_update_question_layman);

    $pain_update_question_layman = str_replace("Your","Patient's",$pain_update_question_layman);

    $pain_update_question_layman = str_replace("You","Patient",$pain_update_question_layman);



    $general_update_question_layman = $this->prepare_general_update_question_layman($user_detail->chief_compliant_userdetail);

    $general_update_question_layman = $general_update_question_layman['layman_summar'];



    $general_update_question_layman = strip_tags($general_update_question_layman);



    $general_update_question_layman = str_replace("your","Patient's",$general_update_question_layman);

    $general_update_question_layman = str_replace("you","Patient",$general_update_question_layman);

    $general_update_question_layman = str_replace("Your","Patient's",$general_update_question_layman);

    $general_update_question_layman = str_replace("You","Patient",$general_update_question_layman);

}



if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 12){





   // pr($user_detail->chief_compliant_userdetail);

    if(isset($user_detail->chief_compliant_userdetail->follow_up_step_id) && $user_detail->chief_compliant_userdetail->follow_up_step_id == 9){



        $prev_visit_user_detail =  $this->ChiefCompliantUserdetails->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->followup_parent_id])->first();

        $prev_visit_user_detail = $this->prepare_user_detial_data_for_render($prev_visit_user_detail);



        $prev_visit_question_detial_res = $this->prepare_screening_question_layman($prev_visit_user_detail,1);



        $prev_visit_question_detial_res = $prev_visit_question_detial_res['layman_summar'];

        //pr($prev_visit_question_detial_res);die;

        $prev_visit_question_detial_res = str_replace("your","Patient's",$prev_visit_question_detial_res);

        $prev_visit_question_detial_res = str_replace("you","Patient",$prev_visit_question_detial_res);

        $pre_visit_quarion = $prev_visit_question_detial_res;

    }

}



//generate follow up sx note output

$follow_up_sx_detial_res = $this->follow_up_sx_detail_layman($user_detail->chief_compliant_userdetail);





    $hpi = h(ucfirst($login_user->first_name)).' is a '.$age.' y.o.'.($login_user->gender == 1 ? ' MALE' : ' FEMALE').($login_user->is_retired == 1 ? ' retired' : '').( !empty($login_user->occupation) ? ' '.strtolower(h($login_user->occupation)): '' );



        $coming_in_for = strtolower(trim($user_detail->chief_compliant_userdetail->current_step_id->step_name)) ;


$reff_doctor ='';
$raw_reff_provider ='';
if(!empty($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor) && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 25)
    { 
        // pr($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor);
        if(!empty($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor[605]))
        {
            $reff_doctor = " referred by ".ucfirst($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor[605]['answer']);
            $raw_reff_provider = ucfirst($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor[605]['answer']);
        }
    }
// pr($reff_doctor); die;
      // below code commented for this reason - According to clinet new reqirement change is -

// If the person is coming in for symptom complaints change  coming in for symptom complaints, and has a chief complaint of back pain. The back pain started 3 days ago. -> presenting with back pain for 3 days.

if(stripos($coming_in_for, 'symptom') !== false){  // if the person is coming in for symptom complaint



    $cc = strtolower($cc);

    if($user_detail->chief_compliant_userdetail->current_step_id->id == 1 && !empty($cc_header)){



        $hpi .= $cc_header;

    }

    else

    {

        $hpi .= ' presenting with '.$cc.' for '.h($user_detail->chief_compliant_userdetail->compliant_length).'.' ;

    }



}else {


    if($user_detail->chief_compliant_userdetail->current_step_id->id == 21)
    {
        $hpi .= ' coming in for'.($coming_in_for[0] == 'a' ? ' an ' : ($coming_in_for[0] == 's' ? ' ' : ' a ') ).$coming_in_for.'. ';

    }
    else {
    $hpi .= ' coming in for'.($coming_in_for[0] == 'a' ? ' an ' : ($coming_in_for[0] == 's' ? ' ' : ' a ') ).$coming_in_for.(!empty($cc) ? ', ' : '. ');

    $cc = strtolower($cc);

     $hpi .= !empty($cc) ? 'and has a chief complaint of '.$cc.$reff_doctor.'. ' : '';



     $hpi .= !empty($user_detail->chief_compliant_userdetail->compliant_length) ? 'The '.$cc.' started '.h($user_detail->chief_compliant_userdetail->compliant_length).' ago.' : '';
   }

}

// pr($hpi); die;



    $hpi .= $question_detial_res."".$other_question_detial_res."".$general_update_question_layman."".$pain_update_question_layman.''.$screening_question_detail_layman.''.$pre_op_procedure_detail_question_layman.''.$pre_op_medication_detail_question_layman.''.$pre_visit_quarion."".$pre_visit_other_quarion.''.$cronic_illness_layman;



    // (!empty($question_detial_res) ? '. ' : '');

$he = 'He'; $she = 'She';
$covid_associated_symp = "";
$covid_associated_symptom_trans = array(

    'shortness of breath' => 'SOB',
    'blue face or lips' => 'cyanosis',
    'coughing up blood' => 'hemoptysis',
    'nausea or vomiting' => 'n/v',
    'phlegm production' => 'sputum production',
    'weight loss' => 'anorexia'
);

if(!empty($temp_associated_symp) || !empty($positive_symptom) ){

 $hpi = trim($hpi);

 $hpi .= ' Associated symptoms include '.strtolower(htmlspecialchars($temp_associated_symp)).(!empty($temp_associated_symp)&& !empty($positive_symptom) ? ', ' : '').strtolower(htmlspecialchars($positive_symptom)).', ';

 $hpi = rtrim($hpi,', ');

 $hpi.= ". ";

    $covid_associated_symp .= 'Associated symptoms include '.strtolower(htmlspecialchars($temp_associated_symp)).(!empty($temp_associated_symp)&& !empty($positive_symptom) ? ', ' : '');
    $temp_pos_sym = explode(", ", $positive_symptom);

    if(!empty($temp_pos_sym)){
        foreach ($temp_pos_sym as $key => $value) {
            $value = strtolower(trim($value));
            $covid_associated_symp .= (isset($covid_associated_symptom_trans[$value]) ? $covid_associated_symptom_trans[$value] : $value).", ";
        }


        $covid_associated_symp = rtrim($covid_associated_symp,', ');
    }
    $covid_associated_symp = rtrim($covid_associated_symp,', ').". ";

$he = 'He'; $she = 'She';

}



//count cpt hpi element count

$cpt_hpi_elements = array();

//pr($user_detail->chief_compliant_userdetail->chief_compliant_details);die('ere');


if(!empty($user_detail->chief_compliant_userdetail->chief_compliant_details)){

    if(!empty($user_detail->chief_compliant_userdetail->compliant_length)){

        $cpt_hpi_elements[] = 'duration';
    }



    foreach ($user_detail->chief_compliant_userdetail->chief_compliant_details as $key => $value) {

        foreach ($value as $k => $v) {

            if(isset($v['hpi_element']) && !empty($v['hpi_element'])){

                $cpt_hpi_elements[] = $v['hpi_element'];
            }
        }
    }
    //pr($user_detail->chief_compliant_userdetail->chief_compliant_details);
    // pr($cpt_hpi_elements);die;

    $cpt_hpi_elements = array_unique(array_filter($cpt_hpi_elements));
}

//pr($cpt_hpi_elements);die;

if(!empty($user_detail->chief_compliant_userdetail->follow_up_sx_detail)){



    foreach ($user_detail->chief_compliant_userdetail->follow_up_sx_detail as $key => $value) {



        foreach ($value as $k => $v) {



            if($k != 'cc_data' && isset($v['question_id'])){



                if($v['question_id'] == 134){



                    $cpt_hpi_elements[] = 'pain_best_scale';

                }

                elseif($v['question_id'] == 135){



                    $cpt_hpi_elements[] = 'pain_worst_scale';

                }

                elseif($v['question_id'] == 136){



                    $cpt_hpi_elements[] = 'temporal';

                }

                elseif($v['question_id'] == 133){



                    $cpt_hpi_elements[] = 'location';

                }

            }

        }

    }

    $cpt_hpi_elements = array_unique(array_filter($cpt_hpi_elements));

}



$cpt_hpi_elements_count = count($cpt_hpi_elements);


if(!empty($positive_symptom) || !empty($negative_symptom) || !empty($temp_associated_symp)){

    $cpt_hpi_elements_count = $cpt_hpi_elements_count + 1;

}

//increase cpt_hpi_elements_count by  for labcovid in covid module

if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){

    if(!empty($user_detail->chief_compliant_userdetail->covid_detail) && isset($user_detail->chief_compliant_userdetail->covid_detail[207])){

        $cpt_hpi_elements_count = $cpt_hpi_elements_count + 1;
    }

}
//pr($cpt_hpi_elements_count);die('cxx');



 if(!empty($negative_symptom)){

    $hpi .=  ($login_user->gender == 0 ? $she : $he).' denies '.htmlspecialchars($negative_symptom) .'. ' ;
    $covid_associated_symp .= ($login_user->gender == 1 ? $he : $she).' denies ';
    $temp_nag_sym = explode(", ", $negative_symptom);
    if(!empty($temp_nag_sym)){

        foreach ($temp_nag_sym as $key => $value) {

           $covid_associated_symp .= (isset($covid_associated_symptom_trans[$value]) ? $covid_associated_symptom_trans[$value] : $value).", ";
        }

        $covid_associated_symp = rtrim($covid_associated_symp,', ');
    }
    $covid_associated_symp .= ". ";
 }

$hpi = rtrim($hpi, ', ');

  // $hpi = strtolower($hpi);

     // pr($hpi); die;

//pr($user_detail->chief_compliant_userdetail);die;

$cpt_mild_count = 0;

$cpt_serve_count = 0;

$cpt_dast_available = 0;

if($user_detail->chief_compliant_userdetail->current_step_id->id == 4 || $user_detail->chief_compliant_userdetail->current_step_id->id == 26){



    if(!empty($user_detail->chief_compliant_userdetail->compliant_medication_detail) && $user_detail->chief_compliant_userdetail->current_step_id->id != 26){

        $hpi = rtrim($hpi,'.');

        $hpi .= ' of ';

        foreach ($user_detail->chief_compliant_userdetail->compliant_medication_detail as $key => $value) {



            $hpi .= trim($value['medication_name_id']).', ';

        }



        $hpi = rtrim($hpi,', ');

        $hpi .= '.';

    }



    if(!empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details)){



        if(isset($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast']) && !empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast'])){



            $cpt_dast_available = 1;

        }



        if(!empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt'])){



            foreach ($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt'] as $key => $value) {



               if(isset($value['answer']) && strtolower($value['answer']) == 'mild'){



                 $cpt_mild_count++;

               }



               if(isset($value['answer']) && strtolower($value['answer']) == 'severe'){



                 $cpt_serve_count++;

               }

            }

        }
        $patient_other_detail_score = $this->prepare_medication_refill_extra_details_layman($user_detail->chief_compliant_userdetail->medication_refill_extra_details , $user_detail->chief_compliant_userdetail->medication_refill_comm_soapp_details);

    }





 }



$subjective = "";

$procudure_name = "";

$procudure_since_date = "";

$cpt_dast_score = '';



if(isset($patient_other_detail_score) && !empty($patient_other_detail_score)){







   $temp_soapp_hpi = '';

      $temp_comm_hpi = '';

      $temp_dast_hpi = '';

      $temp_padt_hpi = '';

      if(!empty($patient_other_detail_score['padt_description'])){

            $temp_padt_hpi .= "PADT";

            $hpi .= ' PADT was performed. ';

            $hpi .= $patient_other_detail_score['padt_description'];

           // $temp_padt_hpi = $patient_other_detail_score['padt_description'];

       }

      //pr($patient_other_detail_score);die;

      if(!empty($patient_other_detail_score['soapp_summary'])){



           $hpi .= " SOAPP-R, ";



           $temp_soapp_hpi .= 'SOAPP-R score is '.$patient_other_detail_score['soapp_score'].", ".($patient_other_detail_score['soapp_score'] >= 18 ? "positive" : "negative").' indication. ';



          // $temp_soapp_hpi .= "SOAPP-R indication&nbsp;is "..". ";

      }



      if(!empty($patient_other_detail_score['comm_summary'])){



           $hpi .= "COMM, ";



          $temp_comm_hpi .= 'COMM score is '.$patient_other_detail_score['comm_score'].", ".($patient_other_detail_score['comm_score'] >= 9 ? "positive" : "negative").' indication. ';

          //$temp_comm_hpi .= 'COMM indication&nbsp;is '.($patient_other_detail_score['comm_score'] >= 9 ? "positive" : "negative").". ";

      }



      if(!empty($patient_other_detail_score['dast_summary'])){



           $hpi .= "DAST-10, ";

           $cpt_dast_score = $patient_other_detail_score['dast_score'];



          $temp_dast_hpi .= 'DAST-10 score is '.$patient_other_detail_score['dast_score'].", ";

          if($patient_other_detail_score['dast_score'] == 0){



            $temp_dast_hpi .= 'low degree of problems related to drug abuse.';

          }

          elseif($patient_other_detail_score['dast_score'] >= 1 && $patient_other_detail_score['dast_score'] <= 2){



            $temp_dast_hpi .= 'low degree of problems related to drug abuse.';

          }

          elseif($patient_other_detail_score['dast_score'] >= 3 && $patient_other_detail_score['dast_score'] <= 5){



            $temp_dast_hpi .= 'moderate degree of problems related to drug abuse.';

          }

          elseif($patient_other_detail_score['dast_score'] >= 6 && $patient_other_detail_score['dast_score'] <= 8){



            $temp_dast_hpi .= 'substantial degree of problems related to drug abuse.';

          }

          elseif($patient_other_detail_score['dast_score'] >= 9 && $patient_other_detail_score['dast_score'] <= 10){



            $temp_dast_hpi .= 'severe degree of problems related to drug abuse.';

          }

      }



   // $hpi .= $temp_padt_hpi;

    $hpi = trim($hpi,', ');

    $hpi .= " performed. ";

    $hpi .= $temp_soapp_hpi.$temp_comm_hpi.$temp_dast_hpi;

  // $hpi .= 'DAST-10 summary: '.$patient_other_detail_score['dast_description'].". ";

}







//pr($login_user);



if($user_detail->specialization_id == 6 && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 11){



    $post_checkup_layman = $this->prepare_post_checkup_question_layman($user_detail->chief_compliant_userdetail,$login_user->gender);



    if(!empty($post_checkup_layman) && isset($post_checkup_layman['layman_summar'])){



        $procudure_name = $post_checkup_layman['procudure'];

        $procudure_date = $post_checkup_layman['procedure_date'];

        $procudure_date = new \DateTime($procudure_date);

        $now_date = new \DateTime();

        $procudure_since_date = $now_date->diff($procudure_date)->format('%a');

        $post_checkup_layman = $post_checkup_layman['layman_summar'];

    }



    $subjective .= h(ucfirst($login_user->first_name))." is following up ".$post_checkup_layman;

}



if($user_detail->specialization_id == 6 && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 12 && $user_detail->chief_compliant_userdetail->follow_up_step_id == 11 ){

    //die('dfdf');

    $prev_visit_user_detail =  $this->ChiefCompliantUserdetails->find('all')->where(['id' => $user_detail->chief_compliant_userdetail->followup_parent_id])->first();

      $prev_visit_user_detail = $this->prepare_user_detial_data_for_render($prev_visit_user_detail);



     // pr($prev_visit_user_detail);die;



    $post_checkup_layman = $this->prepare_followup_post_checkup_question_layman($user_detail->chief_compliant_userdetail,$prev_visit_user_detail,$login_user->gender);



    // echo '<pre>';

    // pr($post_checkup_layman);die;



    if(!empty($post_checkup_layman) && isset($post_checkup_layman['layman_summar'])){



        $procudure_name = $post_checkup_layman['procudure'];

        $procudure_date = $post_checkup_layman['procedure_date'];

        $procudure_date = new \DateTime($procudure_date);

        $now_date = new \DateTime();

        $procudure_since_date = $now_date->diff($procudure_date)->format('%a');

        $post_checkup_layman = $post_checkup_layman['layman_summar'];

    }



    $subjective .= h(ucfirst($login_user->first_name))." is following up ".$post_checkup_layman;

}





$ehr_gyn_hx = array();

    // #GYNHX : LMP Paps STI Breast BCM

      // LMP 05/04, menses at 11, 24 interval, 11 duration, Regular



$period_specific_label = array('was_it_regular_or_not' => 'Was it regular or not ?', 'cycle_length_in_days' => 'Cycle length (In Days)', 'flow_duration_in_days' => 'Flow duration (In Days)' );



  $lmp = '' ; $lmp_reg = '' ; $lmp_interval = '' ; $lmp_duration = '' ;



if(!empty($user_detail->chief_compliant_userdetail->last_period_info)){

  $user_detail->chief_compliant_userdetail->last_period_info = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->last_period_info), SEC_KEY)) ;

  // pr($user_detail->chief_compliant_userdetail->last_period_info); die;



  // $user_detail->chief_compliant_userdetail->last_period_info = array_filter($user_detail->chief_compliant_userdetail->last_period_info) ;

 if(is_array($user_detail->chief_compliant_userdetail->last_period_info)){

  foreach ($user_detail->chief_compliant_userdetail->last_period_info as $key => $value) {



    if($key == 'was_it_regular_or_not'){

      if($value == 1)   $lmp_reg =  'regular'; else if($value == 0)   $lmp_reg =  'irregular';

    }

    if($key == 'cycle_length_in_days')

      $lmp_interval =  ' interval '.h($value).' days, ';

    if($key == 'flow_duration_in_days')

      $lmp_duration =  ' duration '.h($value).' days, ';

   }

 }

}





    $lmp =  "LMP ".(!empty($user_detail->chief_compliant_userdetail->last_period_date) ? $user_detail->chief_compliant_userdetail->last_period_date->i18nFormat('MM-dd-yyyy').', ' : ' not provided, ');


    // pr($women_field);



    // pr($user_detail);

    // die ;

if(!empty($women_field)) {

       $lmp .= 'menses at '.h($women_field->age_of_first_priod).', '.$lmp_interval.$lmp_duration.$lmp_reg ;

}



$lmp = rtrim($lmp, ', ');

$ehr_gyn_hx['lmp'] = $lmp;

    // Paps: Last pap 04/2017, abnormal, Findings/Procedures: None







// pr($women_field);die;



  $paps = ''; $paps_reg = '' ; $paps_finding = '' ;



  $papsmear_specific_label = array('was_it_regular_or_not' => 'Was it regular or not ?', 'any_findings_or_procedures' => 'Any Findings/Procedures?' );



 if(!empty($user_detail->chief_compliant_userdetail->last_pap_smear_info)){

    // $user_detail->chief_compliant_userdetail->last_pap_smear_info = unserialize($user_detail->chief_compliant_userdetail->last_pap_smear_info) ;



$user_detail->chief_compliant_userdetail->last_pap_smear_info = unserialize(Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->last_pap_smear_info), SEC_KEY)) ;

}







// papsmear_month

// papsmear_year

// was_it_regular_or_not

// any_findings_or_procedures

// pr($women_field->papsmear_month); die;

$papsmear_month = isset($user_detail->chief_compliant_userdetail->last_pap_smear_info['papsmear_month']) ? $user_detail->chief_compliant_userdetail->last_pap_smear_info['papsmear_month'] : ( !empty($women_field->papsmear_month) ? $women_field->papsmear_month : '') ;



// pr($user_detail); die;



$papsmear_year = isset($user_detail->chief_compliant_userdetail->last_pap_smear_info['papsmear_year']) ? $user_detail->chief_compliant_userdetail->last_pap_smear_info['papsmear_year'] :  ( !empty($women_field->papsmear_year) ? $women_field->papsmear_year : '');



$any_findings_or_procedures = isset($user_detail->chief_compliant_userdetail->last_pap_smear_info['any_findings_or_procedures']) ? $user_detail->chief_compliant_userdetail->last_pap_smear_info['any_findings_or_procedures'] : ( !empty($women_field->papsmear_finding) ? $women_field->papsmear_finding : '');



$was_it_regular_or_not = isset($user_detail->chief_compliant_userdetail->last_pap_smear_info['was_it_regular_or_not']) ? $user_detail->chief_compliant_userdetail->last_pap_smear_info['was_it_regular_or_not'] : ( !empty($women_field->is_regular_papsmear) ? $women_field->is_regular_papsmear : '');



// pr($papsmear_month);

// pr($papsmear_year);

// pr($any_findings_or_procedures);

// pr($was_it_regular_or_not);  die;

    // Paps: Last pap 04/2017, abnormal, Findings/Procedures: None

$paps = 'Last pap '.(!empty($papsmear_month)&&!empty($papsmear_year) ? ($papsmear_month<10 ? "0" : "").($papsmear_month+1).'/'.$papsmear_year : 'none provided').', ' ;

$paps .= (is_null($was_it_regular_or_not) ? '' : ($was_it_regular_or_not == 1 ? 'regular' : 'not regular' )).', ';

$ehr_gyn_hx['paps'] = rtrim($paps,', ');

$paps .= 'Findings/Procedures: '.(!empty($any_findings_or_procedures) ? $any_findings_or_procedures : 'none provided') ;



// pr($paps); die;

     // STI: HPV (2014)







    $sti = '' ;

if(!empty($women_field) && !empty($women_field->sti_std_detail)){

          // $women_field->sti_std_detail = unserialize(base64_decode($women_field->sti_std_detail)) ;

$women_field->sti_std_detail = unserialize((Security::decrypt(base64_decode($women_field->sti_std_detail), SEC_KEY))) ;

// pr($women_field->sti_std_detail);

    $sti_std_disease = array("Human papillomavirus (HPV)", "Gonorrhea", "Chlamydia", "Genital herpes", "Syphilis", "Trichomoniasis", "HIV/AIDS", "OTHER");



  if(is_array($women_field->sti_std_detail)){

        foreach ($women_field->sti_std_detail as $key => $value) {

             if(is_numeric($key)){

              if($key != 7)

                $sti .=  $sti_std_disease[$key].(!empty($value) ? ' ('.$value.')' : '').', ' ;

               if($key == 7)  // because other sti std serial no is 7 in array

                $sti .=  h($women_field->sti_std_detail['other']).(!empty($value) ? ' ('.$value.')' : '').', ' ;



             }

    }

  }

}



  $sti = rtrim($sti, ', ');

  $ehr_gyn_hx['sti'] = $sti;

// pr($sti); die;

      // Breast: abnormal lumps, 1 biopsy, no result

$biopsy_rsult = ''; $count_biopsy = '';

if(!empty($women_field) && !empty($women_field->breast_lump_biopsy_result)){

    // $women_field->breast_lump_biopsy_result = unserialize(base64_decode($women_field->breast_lump_biopsy_result))  ;

$women_field->breast_lump_biopsy_result = unserialize((Security::decrypt(base64_decode($women_field->breast_lump_biopsy_result), SEC_KEY)))  ;

$month_name = ['January', 'February', 'March', 'April','May', 'June', 'July','August', 'September', 'October','Nobember', 'December']  ;

                  // pr( $women_field->breast_lump_biopsy_result );



   if(isset($women_field->breast_lump_biopsy_result['biopsy_result']) && is_array($women_field->breast_lump_biopsy_result['biopsy_result'])){

    foreach ($women_field->breast_lump_biopsy_result['biopsy_result'] as $key => $value) {



      $biopsy_rsult .= h(trim($value)).' ('.$women_field->breast_lump_biopsy_result['biopsy_year'][$key].'), ';

    }



    $count_biopsy = count($women_field->breast_lump_biopsy_result['biopsy_result']) ;

    $biopsy_rsult = rtrim($biopsy_rsult, ', ');

              }

}

$ehr_gyn_hx['biopsy_result'] = $biopsy_rsult;
$breast = '';

if(!empty($women_field))

      $breast = ($women_field->previous_abnormal_breast_lump == 1 ? 'abnormal lumps, ' : 'No abnormal lumps, ').$count_biopsy.(empty($count_biopsy) ? 'no biopsy, ' : ($count_biopsy>1 ? ' biopsies, ' : ' biopsy, ')).$biopsy_rsult ;



$breast = rtrim($breast, ', ') ;

$ehr_gyn_hx['breast'] = $breast;

// pr($breast); die ;

    // BCM: condom





   $bcm = '' ;



    if(!empty($user_detail->chief_compliant_userdetail->sexual_info)) {







    // $user_detail->chief_compliant_userdetail->sexual_info = unserialize(base64_decode($user_detail->chief_compliant_userdetail->sexual_info)) ;



      $user_detail->chief_compliant_userdetail->sexual_info = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->sexual_info), SEC_KEY))) ;







    $sexual_info_label = array('sexual_active_or_not' => 'Are you sexually active?', 'no_of_partner' => 'Number of sexual partner', 'protection_used_or_not' => 'Do you use protection?', 'protection_method' => 'Protection method(s)' );

  if(is_array($user_detail->chief_compliant_userdetail->sexual_info)) {

    foreach ($user_detail->chief_compliant_userdetail->sexual_info as $key => $value) {



      if($key == 'protection_method')

           $bcm .= h($value).', ' ;



    }

  }



    $bcm = rtrim($bcm, ',') ;

     }

$ehr_gyn_hx['bcm'] = rtrim($bcm,', ');

// 1. Currently pregnant 34 weeks 0 days, M, no complications

// 2. 8/2016 Vaginal delivery, no complications, Ben Taub hospital birthed





// pr($user_detail->chief_compliant_userdetail); die;

     // #OBHX

    // if(!empty($women_field)) {

$tmp = $user_detail->chief_compliant_userdetail ;



if(!empty($tmp->is_curently_pregnant))

  $tmp->is_curently_pregnant = Security::decrypt( base64_decode($tmp->is_curently_pregnant), SEC_KEY);

if(!empty($tmp->currently_pregnant_week))

  $tmp->currently_pregnant_week = Security::decrypt( base64_decode($tmp->currently_pregnant_week), SEC_KEY);

if(!empty($tmp->currently_pregnant_days))

  $tmp->currently_pregnant_days = Security::decrypt( base64_decode($tmp->currently_pregnant_days), SEC_KEY);

if(!empty($tmp->currently_pregnant_complication))

  $tmp->currently_pregnant_complication = Security::decrypt( base64_decode($tmp->currently_pregnant_complication), SEC_KEY);

// pr($tmp) ;die;

// Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->chief_compliant_id), SEC_KEY)

         // Currently pregnant 34 weeks 0 days, M, no complications

$i = 1;

        $cur_preg_info =   ($tmp->is_curently_pregnant == 1 ? $i++.'. Currently pregnant, ' : 'Not currently pregnant, ');

        if($tmp->is_curently_pregnant == 1){

          $cur_preg_info .=   (empty($tmp->currently_pregnant_week)? '0' : h($tmp->currently_pregnant_week) ).' weeks, '.(empty($tmp->currently_pregnant_days) ? '0' : h($tmp->currently_pregnant_days) ).' days, ';





          // if(!empty($tmp->current_baby_sex)){

          //   $cur_preg_info .= $tmp->current_baby_sex ;

          // }





          // code commented as now we are using tagsinput instead of multiselect input

          if(!empty($tmp->current_baby_sex)){

      $tmp->current_baby_sex = rtrim($tmp->current_baby_sex, ', ');

      // pr($tmp->current_baby_sex) ;die ;

            $cur_preg_info .=  $tmp->current_baby_sex.', ';



            // commented as we changed input type on front end

            // $tmp->current_baby_sex = explode(',',$tmp->current_baby_sex) ;



            // foreach ($tmp->current_baby_sex as $key => $value) {

            //   $cur_preg_info .=  $value == 1 ? 'M, ' : 'F, ';

            // }



          }



          // commented as multiple gender is required

          // $cur_preg_info .=  ($tmp->current_baby_sex == 1 ? 'M, ' : ( !is_null($tmp->current_baby_sex) && $tmp->current_baby_sex == 0 ?  'F, ' : ''));



           $cur_preg_info .=  (empty($tmp->currently_pregnant_complication)? 'no complications' : h($tmp->currently_pregnant_complication) ) ;

        }



     $cur_preg_info = rtrim($cur_preg_info, ', ')    ;

$ehr_gyn_hx['ObHx'] = ltrim($cur_preg_info, "1. ");

        // pr($cur_preg_info); die;



    // }

// echo $cur_preg_info ; die;



    // 8/2016 Vaginal delivery, no complications, Ben Taub hospital birthed



    $prev_birth_data = array(); // as multiple birth will be inserted as separate array


$tempp = '';
        $prev_birth_data[] = $cur_preg_info ;

        $prev_birth_detail = array();



    if(!empty($women_field) && $women_field->is_previous_birth ==1) {

      if(!empty($women_field->prev_birth_detail))

        $prev_birth_detail  = unserialize((Security::decrypt(base64_decode($women_field->prev_birth_detail), SEC_KEY))) ;

// pr($prev_birth_detail); die;





        // pr($prev_birth_detail); die;

$month_name = ['January', 'February', 'March', 'April','May', 'June', 'July','August', 'September', 'October','Nobember', 'December']  ;



  if(!empty($prev_birth_detail) && is_array($prev_birth_detail['previous_birth_sex'])) {

        // $i = 2;

        foreach ($prev_birth_detail['previous_birth_sex'] as $key => $value) {

// 2. 8/2016 Vaginal delivery, no complications, Ben Taub hospital birthed



$tempp = $i++.'. '.((is_numeric($prev_birth_detail['previous_birth_month'][$key]) && is_numeric($prev_birth_detail['previous_birth_year'][$key])) ? ($prev_birth_detail['previous_birth_month'][$key]+1).'/'.$prev_birth_detail['previous_birth_year'][$key] : 'date not provided, ').' ';



$tempp .= ($prev_birth_detail['previous_delivery_method'][$key] === 0 ? 'Vaginal delivery, ' : ($prev_birth_detail['previous_delivery_method'][$key] == 1 ? 'C-section, ' : 'delivery method not provided, ' ));



$tempp .= (!empty($prev_birth_detail['previous_complication'][$key])? h($prev_birth_detail['previous_complication'][$key]).', ' : 'no complications, ').h($prev_birth_detail['previous_hospital'][$key]).', '  ;



$prev_birth_data[]  = rtrim($tempp, ', ') ;

// $prev_birth_data .= ($prev_birth_detail['previous_birth_month'][$key]+1).'/'.$prev_birth_detail['previous_birth_year'][$key].', '.($prev_birth_detail['previous_delivery_method'][$key] == 0 ? 'Vaginal delivery' : ($prev_birth_detail['previous_delivery_method'][$key] == 1 ? 'C-section' : '' )).', '.h($prev_birth_detail['previous_complication'][$key]).', '.h($prev_birth_detail['previous_hospital'][$key]).', '  ;





        }

    }

        // $prev_birth_data =  '2. '.rtrim($prev_birth_data, ', ') ;

        }
$ehr_gyn_hx['tempp'] = $tempp;
// pr($prev_birth_data); die ;



        // #MEDS birth control pill 2mg prn po

//echo 'hghgf<pre>'; print_r($user_detail->chief_compliant_userdetail->compliant_medication_detail); die;


$med_how_tken_arr = array("mouth"=>"PO","nasal spray"=>"IN","both ears" => "AU","right ear" => "AD","left ear" => "AS","both eyes" => "OU","right eye" => "OD","left eye" => "OS","muscle injection"=>"IM","subcutaneously"=>"SUBQ","under the skin"=>"SUBQ","under tongue"=>"sublingual","topical"=>"TD","suppository"=>"SUPP");

$meds = '' ;
$apiNoteMeds = array();

if(is_array($user_detail->chief_compliant_userdetail->compliant_medication_detail)) {



        foreach ($user_detail->chief_compliant_userdetail->compliant_medication_detail as $key => $value) {



// $value['medication_how_taken'] = !empty($med_how_tken_arr[$value['medication_how_taken']]) ? $med_how_tken_arr[$value['medication_how_taken']] : $value['medication_how_taken'] ;

//     // pr($value) ;die;

//             if(!empty($value['medication_name_name'])){



//                 $meds .= h($value['medication_name_name']);

//             }



//             if(!empty($value['medication_dose'])){



//                 $meds .= ' '.h($value['medication_dose']);

//             }

//             if(!empty($value['medication_how_often'])){



//                 $meds .= ' '.h($value['medication_how_often']);

//             }

//             if(!empty($value['medication_how_taken'])){



//                 $meds .= ' '.h($value['medication_how_taken']);

//             }



//             $meds .= ', ';

            // New medication show
            $value['medication_how_taken'] = !empty($value['medication_how_taken']) ? $value['medication_how_taken'] : $value['medication_how_taken'] ;
                $rxnormid = '';
                $medication_name = '';
                if(!empty($value['medication_name_name'])){
                $value['medication_name_name'] = ltrim($value['medication_name_name']);
                $chief_compliant_medication_Tbl = TableRegistry::get('chief_compliant_medication');
                $chief_compliant_medication_rec = $chief_compliant_medication_Tbl->find('all')->where(['layman_name' =>$value['medication_name_name']])->first();
                //pr($chief_compliant_medication_rec); 
                $medication_name  = !empty($value['medication_name_name']) ? $value['medication_name_name'] : '';
                $rxnormid = !empty($chief_compliant_medication_rec['rxnormid']) ? $chief_compliant_medication_rec['rxnormid'] :'';
                $meds .= '{"rxnormid": '.'"'.$rxnormid.'"'.', "medication": '.'"'.h($medication_name).'"';

            }
            if(!empty($value['medication_dose'])){
                $meds .= ', "dose": '.'"'.h($value['medication_dose']).'"';

            }

            if(!empty($value['medication_how_often'])){
                $meds .= ', "frequency": '.'"'.h($value['medication_how_often']).'"';

            }

            if(!empty($value['medication_how_taken'])){
                $meds .= ', "route": '.'"'.h($value['medication_how_taken']).'"';

            }
            if(!empty($meds))
            {
                $meds .="}";
            }


            $meds .= ',';
            $apirxnormId = !empty($rxnormid)?$rxnormid:'';
            $apimedication_name = !empty($medication_name)?$medication_name:'';
            $apifrequency = !empty($value['medication_how_often'])?$value['medication_how_often']:'';
            $apiroute = !empty($value['medication_how_taken'])?$value['medication_how_taken']:'';

            $apiNoteMeds[] = array('rxnormid' =>$apirxnormId,'medication' => h($apimedication_name), 'dose' =>h($value['medication_dose']), 'frequency' =>h($apifrequency), 'route' =>h($apiroute));
            }
            // End

         $meds = "[".rtrim($meds, ', ')."]" ;

        

       }


        /*if(is_array($user_detail->chief_compliant_userdetail->chronic_dmii_medication))
        {
            foreach ($user_detail->chief_compliant_userdetail->chronic_dmii_medication as $key => $value)
            {

                $value['medication_how_taken'] = !empty($med_how_tken_arr[$value['medication_how_taken']]) ? $med_how_tken_arr[$value['medication_how_taken']] : $value['medication_how_taken'] ;
                if(!empty($value['medication_name_name']))
                {
                    $meds .= h($value['medication_name_name']);
                }
                if(!empty($value['medication_dose']))
                {
                    $meds .= ' '.h($value['medication_dose']);
                }

                if(!empty($value['medication_how_often']))
                {
                    $meds .= ' '.h($value['medication_how_often']);
                }

                if(!empty($value['medication_how_taken']))
                {
                    $meds .= ' '.h($value['medication_how_taken']);
                }

                $meds .= ', ';
            }

            $meds = rtrim($meds, ', ') ;
        }*/

       // #PMH Chicken Pox (2002), DM2 (2015)

    $commonTable = TableRegistry::get('common_conditions');
    $tmp_common_medical_cond = $commonTable->find('list', [

                        // 'keyField' => 'name',

                        'keyField' => function ($row) {

                return strtolower(preg_replace('/\s+/', '', trim($row['name'])))  ;  // we are trimming and lowercase key to match the user supplied  medical history

                                    } ,

                        'valueField' => 'note_name'

                    ])->toArray();





 // if($tk = array_search(strtolower(preg_replace('/\s+/', '', $value)), $chief_compliant_arr)){





    // pr($tmp_common_medical_cond);

    $cpt_pmfsh_count = 0;
    $cpt_cronic_condition_count = 0;
    $cpt_cronic_condition_arr = array('hypertension','diabetes','congestive heart failure','coronary artery disease','asthma');
    $pmh = '';

if($user_detail->chief_compliant_userdetail->current_step_id->id == 17)
{
    if(!empty($user_detail->chief_compliant_userdetail->focused_history_detail))
    {
        $cpt_pmfsh_count++;
        $ques_213_translate = array(
                    'Chronic obstructive pulmonary disease (COPD)' => 'COPD',
                    'Asthma' => 'asthma',
                    'Heart disease (coronary artery disease)' => 'CAD',
                    'Heart attacks' => 'MI',
                    'Heart failure' => 'CHF',
                    'High blood pressure (hypertension)' => 'HTN',
                    'Diabetes' => 'DM2',
                    'Multiple sclerosis' => 'MS',
                    "Lou Gehrig's disease (ALS)" => 'ALS',
                    "Myasthenia gravis" => 'myasthenia gravis',
                    'Immunsuppression therapy' => 'immunsuppression therapy',
                    'Cirrhosis' => 'cirrhosis',
                    'Chronic kidney disease' => 'CKD',
                    'Obesity' => 'obesity'
                );

        $patient_chronic_conditions = array();
        if(isset($user_detail->chief_compliant_userdetail->focused_history_detail[212]) && !empty($user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer']) && is_array($user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer']))
        {
           $patient_chronic_conditions = array_merge($patient_chronic_conditions, $user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer']);
        }

        if(isset($user_detail->chief_compliant_userdetail->focused_history_detail[213]) && !empty($user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer']) && is_array($user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer']))
        {

            $patient_chronic_conditions = array_merge($patient_chronic_conditions, $user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer']);
            foreach ($user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer'] as $key => $value)
            {
                $pmh .= (isset($ques_213_translate[$value])? $ques_213_translate[$value] : $value).", ";
            }
            $pmh = rtrim($pmh,', ');
        }
       /* else
        {
            $pmh = $user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer'] ;
        }*/

        if(isset($patient_chronic_conditions['members'])){

            unset($patient_chronic_conditions['members']);
        }

        $patient_chronic_conditions = array_filter(array_unique($patient_chronic_conditions));

        if(!empty($patient_chronic_conditions))
        {
            foreach ($patient_chronic_conditions as $key => $value) {

               $value = strtolower($value);

               foreach ($cpt_cronic_condition_arr as $chronic_cond_key => $chronic_cond_value) {

                    $chronic_cond_value = strtolower($chronic_cond_value);

                    if(strpos($value, $chronic_cond_value) !== false)

                    {

                        $cpt_cronic_condition_count++;

                    }
                }
            }
        }
    }
}
else
{
    if(!empty($login_user->is_check_med_his))
    {
        $cpt_pmfsh_count++;
    }
    if(!empty($login_user->medical_history))
    {
        $medical_history = unserialize((Security::decrypt(base64_decode($login_user->medical_history), SEC_KEY)));
        if(!empty($medical_history)){

            foreach ($medical_history as $key => $value)
            {
                //count the cpt cronic condition
                if(in_array(strtolower($value['name']), $cpt_cronic_condition_arr))
                {
                   $cpt_cronic_condition_count++;
                }

                // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

                //$value['name'] =   !empty($tmp_common_medical_cond[strtolower(preg_replace('/\s+/', '', $value['name']))]) ? $tmp_common_medical_cond[strtolower(preg_replace('/\s+/', '', $value['name']))] : $value['name'] ;
               // $pmh .= h($value['name']).(!empty(trim($value['year'])) ? ' ('.h($value['year']).'), ' : ', ' );
            }
        }
       // $pmh = (rtrim($pmh, ', ')) ;
    }
}
if(!empty($login_user->medical_history))
    {
        $pmh .= !empty($pmh) ? ', ': '';
        $medical_history = unserialize((Security::decrypt(base64_decode($login_user->medical_history), SEC_KEY)));
        // pr($medical_history);die;
        if(!empty($medical_history)){

            foreach ($medical_history as $key => $value)
            {

                // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose
                if(strtolower($value['name']) != "none of these")
                {
                  $value['name'] =   !empty($tmp_common_medical_cond[strtolower(preg_replace('/\s+/', '', $value['name']))]) ? $tmp_common_medical_cond[strtolower(preg_replace('/\s+/', '', $value['name']))] : $value['name'] ;
                $pmh .= h($value['name']).(!empty(trim($value['year'])) ? ' ('.h($value['year']).'), ' : ', ' );  
                }
                
            }
        }

    }

    $pmh = (rtrim($pmh, ', ')) ;

// #PSH  - it has same structure as #PMH
$psh = '';
// pr($pmh); die;
if(!empty($login_user->surgical_history))
{
    $surgical_history = unserialize((Security::decrypt(base64_decode($login_user->surgical_history), SEC_KEY)));
    foreach ($surgical_history as $key => $value)
    {
        // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

        $value['name'] =   !empty($tmp_common_medical_cond[strtolower(preg_replace('/\s+/', '', trim($value['name'])))]) ? $tmp_common_medical_cond[strtolower(preg_replace('/\s+/', '', $value['name']))] : $value['name'] ;
        $psh .= h($value['name']).(!empty(trim($value['year'])) ? ' ('.h($value['year']).'), ' : ', ' );
    }
    $psh = (rtrim($psh, ', ')) ;
}


// #FH PGM - Breast cancer, MGM (d/c 85, natural) - Diabetes,
// PGF (d/c 31, acute rheumatic fever)

$fh = array() ;  // we are using array becasue each case will be in separate array

if($user_detail->chief_compliant_userdetail->current_step_id->id == 17)
{
    if(isset($user_detail->chief_compliant_userdetail->focused_history_detail[212]) && !empty($user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer']))
    {
        $cpt_pmfsh_count++;
        $ques_213_translate = array(
                    'Chronic obstructive pulmonary disease (COPD)' => 'COPD',
                    'Asthma' => 'asthma',
                    'Heart disease (coronary artery disease)' => 'CAD',
                    'Heart attacks' => 'MI',
                    'Heart failure' => 'CHF',
                    'High blood pressure (hypertension)' => 'HTN',
                    'Diabetes' => 'DM2',
                    'Multiple sclerosis' => 'MS',
                    "Lou Gehrig's disease (ALS)" => 'ALS',
                    "Myasthenia gravis" => 'myasthenia gravis',
                    'Immunsuppression therapy' => 'immunsuppression therapy',
                    'Cirrhosis' => 'cirrhosis',
                    'Chronic kidney disease' => 'CKD',
                    'Obesity' => 'obesity'
                );

            $family_members_translate = array(
                'Father' => 'F',
                'Mother' => 'M',
                'Paternal grandmother' => 'PGM',
                'Paternal grandfather' => 'PGF',
                'Maternal grandmother' => 'MGM',
                'Maternal grandfather' => 'MGF',
                'Brother' => 'brother',
                'Sister' => 'sister',
                'Son' => 'son',
                'Daughter' => 'daughter'
            );

            foreach ($user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer'] as $key => $value)
            {
                if($key != 'members'){

                    $cond = isset($ques_213_translate[$value]) ? $ques_213_translate[$value] : "";
                    if(!empty($cond) && isset($user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer']['members'][$key]))
                    {
                        $members = array();
                        foreach ($user_detail->chief_compliant_userdetail->focused_history_detail[212]['answer']['members'][$key] as $k => $v)
                        {
                            $members[] = isset($family_members_translate[$v]) ? $family_members_translate[$v] : $v;
                        }
                        $members = array_filter($members);
                        $temp_fh = $cond.(!empty($members) ? "(".implode(", ", $members).")":"");
                        $fh[]  = $temp_fh;
                    }
                }
            }
        }
    }
    else
    {
        if(!empty($login_user->is_family_his))
        {
            $cpt_pmfsh_count++;
        }
    }
    // $pertPosFhRawFormat = array();
    // $pertNegFhRawFormat = array();
    $fhMembers = array();
    $matPatRawFormat = array();
     if(!empty($login_user->family_history))
        {

            $family_history = unserialize((Security::decrypt(base64_decode($login_user->family_history), SEC_KEY)));
            //pr($family_history);die;
          //  $family_relation = [1=>'F', 2=>'M', 3=>'PGM', 4=>'PGF', 5=>'MGM', 6=>'MGF', 7=>'Brother', 8=>'Sister', 9=>'Son', 10=>'Daughter'];
            $family_relation = [1=>'F', 2=>'M', 3=>'PGM', 4=>'PGF', 5=>'MGM', 6=>'MGF', 7=>'Brother', 8=>'Sister', 9=>'Son', 10=>'Daughter',11 =>"Cousin(mom's side)",12 =>"Cousin(dad's side)",13 =>"Aunt(mom's side)",14 =>"Aunt(dad's side)",15=>"Uncle(mom's side)",16 =>"Uncle(dad's side)"];
            $raw_family_relation = [1=>'Father', 2=>'Mother', 3=>'PGM', 4=>'PGF', 5=>'MGM', 6=>'MGF', 7=>'Brother', 8=>'Sister', 9=>'Son', 10=>'Daughter',11 =>"Maternal cousin",12 =>"Paternal cousin",13 =>"Maternal aunt",14 =>"Paternal aunt",15=>"Maternal uncle",16 =>"Paternal uncle"];
            foreach ($family_history as $key => $value)
            {

                $tmp = '';
                $start_bracket = "";
                $end_bracket = "";
                $tempfh = '';
                if(isset($value['alive_status']) && !empty($value['alive_status']))
                {
                  if(($value['alive_status'] == 0 || $value['alive_status'] == 1  || !empty($value['decease_year'])) && !empty($value['cause_of_death']))
                  {
                      $tmp = ', ';
                  }
                }
                $tempfh .= h($family_relation[$value['name']]);
                if(!in_array($value['name'],[11,12]))
                {
                    $fhMembers[] = h($raw_family_relation[$value['name']]);
                }                
                if(in_array($value['name'],[11,12]))
                {
                    $matPatRawFormat[] =  h($raw_family_relation[$value['name']]);
                }
                if(isset($value['alive_status']) && !empty($value['alive_status']))
                {
                $tempfh  .= ' ('.($value['alive_status'] == 1 ? "alive" : "d/c".($value['decease_year'] == 999 ? ' childhood' : ($value['decease_year'] == 911  ? '' : (!empty($value['decease_year']) ? ' '.h($value['decease_year'] ) : '' ))).$tmp.h(trim(strtolower(implode(', ', explode(",", $value['cause_of_death']))))) ).')';
                }
                $tempfh  .= !empty($value['disease']) ? ' - '.h(trim(strtolower(implode(', ', explode(",", $value['disease']))))).', ' : '' ;

                $tempfh = rtrim($tempfh, ', ');
                // $pertPosFhRawFormat[] = explode(",",$value['disease']);
                $fh[] = $tempfh ;
            }
        }

// #SH heterosexual, sexually active, 1 partner, protection: condom, denies EtOH and 1 drinks/wk for 3 years, denies current smoking, denies past smoking, denies IDU
$sh = '';
// sexually active, 1 partner, protection: condom,
$sx_act = '';
if(!empty($user_detail->chief_compliant_userdetail->sexual_info))
{

    $tmp_sx = $user_detail->chief_compliant_userdetail->sexual_info ;
    if(isset($tmp_sx['sexual_active_or_not']))
    {

        $sx_act .= ($tmp_sx['sexual_active_or_not'] == 1 ? 'sexually active, ' : 'sexually inactive, ' );
        if(isset($tmp_sx['no_of_partner']) && $tmp_sx['sexual_active_or_not'] == 1 )
        {
            $sx_act .= ($tmp_sx['no_of_partner'] >= 1 ? $tmp_sx['no_of_partner'].' partners, ' : 'no partner, ') ;
        }

        if(isset($tmp_sx['protection_used_or_not']) && $tmp_sx['protection_used_or_not'] == 0 && $tmp_sx['sexual_active_or_not'] == 1 )
        {
            $sx_act .= 'protection: none, ' ;
        }

        if( isset($tmp_sx['protection_used_or_not'])  && $tmp_sx['protection_used_or_not'] == 1 && $tmp_sx['sexual_active_or_not'] == 1 )
        {
            $sx_act .= !empty(trim($tmp_sx['protection_method'])) ? 'protection: '.$tmp_sx['protection_method'].', ' : 'protection: not provided, ' ;
        }
    }
}

$s_ori = array(0 => 'Heterosexual', 1 => 'Homosexual', 2 => 'Bisexual', 9 => 'Prefer not to say');

//  denies EtOH and 1 drinks/wk for 3 years,
// here EtOH refers to current drinking

if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){



    if(!empty($user_detail->chief_compliant_userdetail->focused_history_detail)){

        $fh_keys = array_keys($user_detail->chief_compliant_userdetail->focused_history_detail);

        $cpt_pmfsh_count_keys = array(214,215,216,217);

        foreach ($cpt_pmfsh_count_keys as $key => $value) {

            if(in_array($value, $fh_keys)){



               $cpt_pmfsh_count++;

               break;

            }

        }



        foreach ($user_detail->chief_compliant_userdetail->focused_history_detail as $key => $value) {



            if(in_array($key, [214,215,216,217])){



                //$cpt_pmfsh_count++;



                switch ($key) {

                    case 214:

                        $sh.= !empty($value) && $value['answer'] == 'Yes' ? '+current smoking, ' : "denies current smoking, ";

                        break;



                    case 215:

                        $sh.= !empty($value) && $value['answer'] == 'Yes' ? '+past smoking, ' : "denies past smoking, ";

                        break;



                    case 216:

                        $sh.= !empty($value) && $value['answer'] == 'Yes' ? '+current vaping, ' : "denies current vaping, ";

                        break;



                    case 217:

                        $sh.= !empty($value) && $value['answer'] == 'Yes' ? '+past vaping, ' : "denies past vaping, ";

                        break;



                }

            }

        }
    }
}

else
{
    if(($login_user->is_currentlysmoking != '' && in_array($login_user->is_currentlysmoking, [0,1])) || ($login_user->is_pastsmoking != '' && in_array($login_user->is_pastsmoking, [0,1])) || ($login_user->is_currentlydrinking != '' && in_array($login_user->is_currentlydrinking, [0,1])) || ($login_user->is_pastdrinking != '' && in_array($login_user->is_pastdrinking, [0,1])) || ($login_user->is_otherdrug != '' && in_array($login_user->is_otherdrug, [0,1])) || ($login_user->is_otherdrugpast != '' && in_array($login_user->is_otherdrugpast, [0,1])))
    {
        $cpt_pmfsh_count++;
    }

    if($login_user->is_currentlysmoking == 1)
    {
        if(!empty($login_user->current_smoke_pack))
        {
            $sh .= 'currently smoking : ';
            $sh .= ($login_user->current_smoke_pack == 'morethan10' ? 'more than 10' : h($login_user->current_smoke_pack) ).' packs/wk, ' ;

            //$sh .= ($login_user->current_smoke_pack == 'morethan10' ? 'more than 10' : h($login_user->current_smoke_pack) ).' packs/wk for '.($login_user->current_smoke_year == "morethan10" ? 'more than 10' : h($login_user->current_smoke_year) ).' years, ' ;

        }
        else
        {
            $sh .= 'currently smoking: consumes but frequency not provided, ';
        }

     }
     else
     {
        $sh .= 'denies current smoking, ';
     }

     if($login_user->is_pastsmoking == 1){

        if(!empty($login_user->past_smoke_pack)){

            $sh .= 'past smoking: ';

             $sh .= ($login_user->past_smoke_pack == 'morethan10' ? 'more than 10' : h($login_user->past_smoke_pack) ).' packs/wk for '.($login_user->past_smoke_year == "morethan10" ? 'more than 10' : h($login_user->past_smoke_year) ).' years, ' ;

        }else{

            $sh .= 'past smoking: consumes but frequency not provided, ';

        }

    }
    else
    {

        $sh .= 'denies past smoking, ';
    }
}

if($login_user->is_currentlydrinking == 1 )
    {
        if(!empty($login_user->current_drink_pack))
        {
            $sh .= ($login_user->current_drink_pack == 'morethan10' ? 'EtOH: more than 14' : 'EtOH: '.h($login_user->current_drink_pack) ).'  drinks/wk, ';
        }
        else
        {
            $sh .= 'EtOH: consumes but frequency not provided, ';
        }
    }
    else
    {
        $sh .= 'denies EtOH, ';
    }

    if($login_user->is_pastdrinking == 1 )
    {
        if(!empty($login_user->past_drink_pack))
        {
            $sh .= ($login_user->past_drink_pack == 'morethan10' ? 'past drinking : more than 14' : h($login_user->past_drink_pack) ).'  drinks/wk for '.($login_user->past_drink_year == "morethan10" ? 'more than 10' : h($login_user->past_drink_year) ).' years, ' ;

        }
        else
        {
            $sh .= 'past drinking: consumes but frequency not provided, ';
        }

    }
    else
    {
        $sh .= 'denies past drinking, ';
    }

    $other_drug_history = $login_user->other_drug_history ;
    if($login_user->is_otherdrug == 1)
    {
        if(!empty($other_drug_history))
        {
            $other_drug_history = unserialize(Security::decrypt(base64_decode($other_drug_history), SEC_KEY)) ;
            if(!empty($other_drug_history))
            {
                $sh .= 'IDU: ';
                foreach ($other_drug_history as $key => $value)
                {
                    $sh .= h($value['name']).' for '.($value['year'] == "morethan10" ? 'more than 10' : h($value['year']) ).' years, ' ;
                }
            }
            else
            {
                $sh .= 'IDU: consumes but frequency not provided, ';
            }
        }
        else
        {
            $sh .= 'IDU: consumes but frequency not provided, ';
        }
    }
    else
    {
        $sh .= 'denies IDU, ';
    }

    $other_drug_history_past = $login_user->other_drug_history_past ;
    if($login_user->is_otherdrugpast == 1)
    {
        if(!empty($other_drug_history_past))
        {

            $other_drug_history_past = unserialize(Security::decrypt(base64_decode($other_drug_history_past), SEC_KEY)) ;
            if(!empty($other_drug_history_past))
            {
                $sh .= 'past drug use: ';
                foreach ($other_drug_history_past as $key => $value)
                {
                    $sh .= h($value['name']).' for '.($value['year'] == "morethan10" ? 'more than 10' : h($value['year']) ).' years, ' ;
                }

            }
            else
            {
                $sh .= 'past drug use: consumes but frequency not provided, ';
            }

        }
        else
        {
            $sh .= 'past drug use: consumes but frequency not provided, ';
        }

    }
    else
    {
        $sh .= 'denies past drug use, ';
    }



    if($login_user->sexual_orientation != '')
    {
        $sh = $s_ori[$login_user->sexual_orientation].($login_user->sexual_orientation == 9 ? ' sexual orientation' : '').', '.$sx_act.$sh ;
    }

$sh = rtrim($sh, ', ') ;

// #ALL latex (Dry skin), Eggs (Diarrhea)
    $all = '' ;
    $allergy_arr = array();



    if(!empty($login_user->allergy_history)){

    // $allergy_history = unserialize(base64_decode($login_user->allergy_history));

          $allergy_history = unserialize((Security::decrypt(base64_decode($login_user->allergy_history), SEC_KEY)));


          if(!empty($allergy_history)){

              foreach ($allergy_history as $key => $value) {







                $all .= h($value['name']).(!empty(trim($value['reaction'])) ? ' ('.h($value['reaction']).'), ' : ', ' ) ;
                $allergy_arr[] = h($value['name']).(!empty(trim($value['reaction'])) ? '('.h($value['reaction']).')' : '' ) ;


              }
          }

      $all = rtrim($all, ', ') ;



    }

  // #IMM +Hepatitis A (2015), +Hepatitis B (2018), +Measles (2012), +Meningococcal (2015), +Mumps (2011)

    $commonTable = TableRegistry::get('common_conditions');
    $shot_cond = $commonTable->find('list', [

                        'keyField' => 'id',

                        'valueField' => 'name'

                    ])->where(['cond_type' => 4])->toArray();

    // pr($shot_cond);



    $imm = '' ;



  if(!empty($login_user->shots_history)){

    // $medical_history = unserialize(base64_decode($login_user->medical_history));

      $shots_history = unserialize((Security::decrypt(base64_decode($login_user->shots_history), SEC_KEY)));

      if(!empty($shots_history) && is_array($shots_history)){
          foreach ($shots_history as $key => $value) {

            if(isset($shot_cond[$key])){

                $imm .=  $shot_cond[$key].''.(h($value) == 1 ? " (childhood)" : (!empty($value) ? ' ('.h($value).')' : '') ).', ';
            }

          }
      }

      $imm = rtrim($imm, ', ') ;
  }

  if(!empty($login_user->other_shots_history)){

      $other_shots_history = unserialize((Security::decrypt(base64_decode($login_user->other_shots_history), SEC_KEY)));
      if(!empty($other_shots_history) && is_array($other_shots_history)){
          foreach ($other_shots_history as $key => $value) {

            if(isset($value['name'])){

                $imm .= $value['name'];
            }
            else{

                continue;
            }

            if(isset($value['year']) && !empty($value['year'])){

                $imm .= $value['year'] == 1 ? " (childhood)" : " (".$value['year'].")";
            }

            $imm .= ", ";

          }
      }

      $imm = rtrim($imm, ', ') ;
  }

  $all_questionnaire = $this->ChiefCompliantQuestionnaire->find('all');
  $all_questionnaire_arr = array();
  $positive_ros_count = 0;
    $temp_spine_questionnaire_grp_arr = array();
  $temp_ortho_questionnaire_grp_arr = array();
  $temp_general_health_questionnaire_grp_arr = array();

foreach ($all_questionnaire as $key => $value)

{

    // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

    $all_questionnaire_arr[$value->questionnaire_type_id][] = $value->id ;

}

$positive_questionnaire = '' ;

$negative_questionnaire = '' ;

$spine_MSK              = '';

$spine_NEURO            = '';

$spine_GEN              = '';

$spine_ENT              = '';

$spine_CV               = '';

$spine_RESP             = '';

$spine_GI               = '';

$spine_SKINBREAST       = '';

$spine_ENDO             = '';

$spine_HEMELYMPH        = '';

if($user_detail->specialization_id == 4 || $user_detail->specialization_id == 7)

{

    // for specialization id 3 and 7 related logic for health questionaire

    //John: However, we may specify it to be different for specific orthopedics modules, such as in this case with the spine module we want 5 of MSK, 5 of NEURO,  and two from each of the following :GEN, ENT, CV, RESP, GI, SKIN/BREAST, ENDO, HEME/LYMPH



    $temp_spine_questionnaire_grp_arr = array();

    // we are creating new source array and take only those  options that are needed in orthopedic spine module

    $temp_spine_questionnaire_grp_arr['MSK'] = $all_questionnaire_arr[21] ;

    $temp_spine_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[20] ;

    $temp_spine_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[32] ;

    $temp_spine_questionnaire_grp_arr['ENT'] = array_merge($all_questionnaire_arr[13], $all_questionnaire_arr[14], $all_questionnaire_arr[16])  ;

    $temp_spine_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[18] ;

    $temp_spine_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[19] ;

    $temp_spine_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[22] ;

    $temp_spine_questionnaire_grp_arr['SKIN_BREAST'] = array_merge($all_questionnaire_arr[24], $all_questionnaire_arr[25]) ;

    $temp_spine_questionnaire_grp_arr['ENDO'] = $all_questionnaire_arr[28] ;

    $temp_spine_questionnaire_grp_arr['HEME_LYMPH'] = $all_questionnaire_arr[26]; //  array_merge($all_questionnaire_arr[26], $all_questionnaire_arr[27]) ; there is no data in the id 27 so we commented this temporarily , when client provide data we will uncomment it



    if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail))

    {



        $res_ar = array(0 => 'NO', 1 => 'YES' , 2 => "I DON'T KNOW");

        $spine_MSK  = '';  $spine_NEURO  = '';  $spine_GEN  = '';  $spine_ENT  = '';  $spine_CV  = '';  $spine_RESP  = '';  $spine_GI  = '';  $spine_SKINBREAST  = '';  $spine_ENDO  = '';  $spine_HEMELYMPH  = '';



        foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)

        {

            foreach($value as $k =>$v)

            {



                // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

                $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;

                $v->questionnaire_text = strtolower($v->questionnaire_text);



                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['MSK']))

                {

                    if($key == 1) $spine_MSK .= '+'.$v->questionnaire_text.', ';

                }



                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['NEURO']))

                {

                    if($key == 1) $spine_NEURO .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['GEN']))

                {

                    if($key == 1) $spine_GEN .= '+'.$v->questionnaire_text.', ';

                }



                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['ENT']))

                {

                    if($key == 1) $spine_ENT .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['CV']))

                {

                    if($key == 1) $spine_CV .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['RESP']))

                {

                    if($key == 1) $spine_RESP .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['GI']))

                {

                    if($key == 1) $spine_GI .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['SKIN_BREAST']))

                {

                    if($key == 1) $spine_SKINBREAST .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['ENDO']))

                {

                    if($key == 1) $spine_ENDO .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['HEME_LYMPH']))

                {

                    if($key == 1) $spine_HEMELYMPH .= '+'.$v->questionnaire_text.', ';

                }

            }

        }

        $spine_MSK  = rtrim($spine_MSK , ', ');  $spine_NEURO  = rtrim($spine_NEURO , ', ');  $spine_GEN  = rtrim($spine_GEN , ', ');  $spine_ENT  = rtrim($spine_ENT , ', ');  $spine_CV  = rtrim($spine_CV , ', ');  $spine_RESP  = rtrim($spine_RESP , ', ');  $spine_GI  = rtrim($spine_GI , ', ');  $spine_SKINBREAST  = rtrim($spine_SKINBREAST , ', ');  $spine_ENDO  = rtrim($spine_ENDO , ', ');  $spine_HEMELYMPH  = rtrim($spine_HEMELYMPH , ', ');



        $spine_MSK  .= '. Denies ';  $spine_NEURO  .= '. Denies ';  $spine_GEN  .= '. Denies ';  $spine_ENT  .= '. Denies ';  $spine_CV  .= '. Denies ';  $spine_RESP  .= '. Denies ';  $spine_GI  .= '. Denies ';  $spine_SKINBREAST  .= '. Denies ';  $spine_ENDO  .= '. Denies ';  $spine_HEMELYMPH  .= '. Denies ';





        foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)

        {

            foreach($value as $k =>$v)

            {



                // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

                $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;



                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['MSK']))

                {

                    if($key == 0) $spine_MSK .= $v->questionnaire_text.', ';

                }



                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['NEURO']))

                {

                    if($key == 0) $spine_NEURO .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['GEN']))

                {

                    if($key == 0) $spine_GEN .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['ENT']))

                {

                    if($key == 0) $spine_ENT .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['CV']))

                {

                    if($key == 0) $spine_CV .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['RESP']))

                {

                    if($key == 0) $spine_RESP .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['GI']))

                {

                    if($key == 0) $spine_GI .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['SKIN_BREAST']))

                {

                    if($key == 0) $spine_SKINBREAST .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['ENDO']))

                {

                    if($key == 0) $spine_ENDO .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_spine_questionnaire_grp_arr['HEME_LYMPH']))

                {

                    if($key == 0) $spine_HEMELYMPH .= $v->questionnaire_text.', ';

                }

            }

        }



        //calculate the ROS count, we calculate the number of group of health questionnaire to generate the cpt code

        $temp_health_questionnaire_grp = array();



        foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)

        {

            foreach($value as $k =>$v)

            {



                foreach ($all_questionnaire_arr as $gkey => $gvalue) {



                    if(in_array($v->id, $gvalue)){



                       $temp_health_questionnaire_grp[] = $gkey;

                       break;

                    }

                }

            }

        }

        $positive_ros_count = count(array_unique($temp_health_questionnaire_grp));

    }



    $spine_MSK  = rtrim($spine_MSK , ', ');  $spine_NEURO  = rtrim($spine_NEURO , ', ');  $spine_GEN  = rtrim($spine_GEN , ', ');  $spine_ENT  = rtrim($spine_ENT , ', ');  $spine_CV  = rtrim($spine_CV , ', ');  $spine_RESP  = rtrim($spine_RESP , ', ');  $spine_GI  = rtrim($spine_GI , ', ');  $spine_SKINBREAST  = rtrim($spine_SKINBREAST , ', ');  $spine_ENDO  = rtrim($spine_ENDO , ', ');  $spine_HEMELYMPH  = rtrim($spine_HEMELYMPH , ', ');



    $spine_MSK  = ltrim($spine_MSK , '. ');  $spine_NEURO  = ltrim($spine_NEURO , '. ');  $spine_GEN  = ltrim($spine_GEN , '. ');  $spine_ENT  = ltrim($spine_ENT , '. ');  $spine_CV  = ltrim($spine_CV , '. ');  $spine_RESP  = ltrim($spine_RESP , '. ');  $spine_GI  = ltrim($spine_GI , '. ');  $spine_SKINBREAST  = ltrim($spine_SKINBREAST , '. ');  $spine_ENDO  = ltrim($spine_ENDO , '. ');  $spine_HEMELYMPH  = ltrim($spine_HEMELYMPH , '. ');



    $spine_MSK  = preg_replace('/Denies$/', '', $spine_MSK);  $spine_NEURO  = preg_replace('/Denies$/', '', $spine_NEURO);  $spine_GEN  = preg_replace('/Denies$/', '', $spine_GEN);  $spine_ENT  = preg_replace('/Denies$/', '', $spine_ENT);  $spine_CV  = preg_replace('/Denies$/', '', $spine_CV);  $spine_RESP  = preg_replace('/Denies$/', '', $spine_RESP);  $spine_GI  = preg_replace('/Denies$/', '', $spine_GI);  $spine_SKINBREAST  = preg_replace('/Denies$/', '', $spine_SKINBREAST);  $spine_ENDO  = preg_replace('/Denies$/', '', $spine_ENDO);  $spine_HEMELYMPH  = preg_replace('/Denies$/', '', $spine_HEMELYMPH);

}



//$temp_ortho_questionnaire_grp_arr = array();

if($user_detail->specialization_id == 3)

{

    // for specialization id 3 related logic for health questionaire



    // John:The default for orthopedics modules is 2 from each of the following:

    // GEN, EYES, ENT, CV, RESP, NEURO, MSK, GI, GU, SKIN/BREAST, ENDO, HEME/LYMPH, ALL/IMM, PSYCH







    // we are creating new source array and take only those  options that are needed in orthopedic module

    $temp_ortho_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[32] ;

    $temp_ortho_questionnaire_grp_arr['EYES'] = $all_questionnaire_arr[12] ;

    $temp_ortho_questionnaire_grp_arr['ENT'] = array_merge($all_questionnaire_arr[13], $all_questionnaire_arr[14], $all_questionnaire_arr[16])  ;

    $temp_ortho_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[18] ;

    $temp_ortho_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[19] ;

    $temp_ortho_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[20] ;

    $temp_ortho_questionnaire_grp_arr['MSK'] = $all_questionnaire_arr[21] ;

    $temp_ortho_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[22] ;

    $temp_ortho_questionnaire_grp_arr['GU'] = $all_questionnaire_arr[23] ;

    $temp_ortho_questionnaire_grp_arr['SKIN_BREAST'] = array_merge($all_questionnaire_arr[24], $all_questionnaire_arr[25])  ;

    $temp_ortho_questionnaire_grp_arr['ENDO'] = $all_questionnaire_arr[28] ;

    $temp_ortho_questionnaire_grp_arr['HEME_LYMPH'] = $all_questionnaire_arr[26] ;

    $temp_ortho_questionnaire_grp_arr['PSYCH'] = $all_questionnaire_arr[29] ;



    if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail))

    {



        $res_ar = array(0 => 'NO', 1 => 'YES' , 2 => "I DON'T KNOW");

        $ortho_GEN  = '';  $ortho_EYES  = '';  $ortho_ENT  = '';  $ortho_CV  = '';  $ortho_RESP  = '';  $ortho_NEURO  = '';  $ortho_MSK  = '';  $ortho_GI  = '';  $ortho_GU  = '';  $ortho_SKINBREAST  = '';  $ortho_ENDO = '';  $ortho_HEMELYMPH  = '';  $ortho_PSYCH  = '';



        foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)

        {

            foreach($value as $k =>$v)

            {



                // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

                $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;



                $v->questionnaire_text  = strtolower($v->questionnaire_text);



                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GEN']))

                {

                    if($key == 1) $ortho_GEN .= '+'.$v->questionnaire_text.', ';

                }



                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['EYES']))

                {

                    if($key == 1) $ortho_EYES .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['ENT']))

                {

                    if($key == 1) $ortho_ENT .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['CV']))

                {

                    if($key == 1) $ortho_CV .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['RESP']))

                {

                    if($key == 1) $ortho_RESP .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['NEURO']))

                {

                    if($key == 1) $ortho_NEURO .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['MSK']))

                {

                    if($key == 1) $ortho_MSK .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GI']))

                {

                    if($key == 1) $ortho_GI .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GU']))

                {

                    if($key == 1) $ortho_GU .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['SKIN_BREAST']))

                {

                    if($key == 1) $ortho_SKINBREAST .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['ENDO']))

                {

                    if($key == 1) $ortho_ENDO .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['HEME_LYMPH']))

                {

                    if($key == 1) $ortho_HEMELYMPH .= '+'.$v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['PSYCH']))

                {

                    if($key == 1) $ortho_PSYCH .= '+'.$v->questionnaire_text.', ';

                }

            }

        }



        $ortho_GEN   = rtrim($ortho_GEN , ', ');  $ortho_EYES   = rtrim($ortho_EYES , ', ');  $ortho_ENT   = rtrim($ortho_ENT , ', ');  $ortho_CV   = rtrim($ortho_CV , ', ');  $ortho_RESP   = rtrim($ortho_RESP , ', ');  $ortho_NEURO   = rtrim($ortho_NEURO , ', ');  $ortho_MSK   = rtrim($ortho_MSK , ', ');  $ortho_GI   = rtrim($ortho_GI , ', ');  $ortho_GU   = rtrim($ortho_GU , ', ');  $ortho_SKINBREAST   = rtrim($ortho_SKINBREAST , ', ');  $ortho_ENDO  = rtrim($ortho_ENDO , ', ');  $ortho_HEMELYMPH   = rtrim($ortho_HEMELYMPH , ', ');   $ortho_PSYCH   = rtrim($ortho_PSYCH , ', ');



        $ortho_GEN  .= '. Denies ';  $ortho_EYES  .= '. Denies ';  $ortho_ENT  .= '. Denies ';  $ortho_CV  .= '. Denies ';  $ortho_RESP  .= '. Denies ';  $ortho_NEURO  .= '. Denies ';  $ortho_MSK  .= '. Denies ';  $ortho_GI  .= '. Denies ';  $ortho_GU  .= '. Denies ';  $ortho_SKINBREAST  .= '. Denies ';  $ortho_ENDO .= '. Denies ';  $ortho_HEMELYMPH  .= '. Denies '; $ortho_PSYCH  .= '. Denies ';

        foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)

        {

            foreach($value as $k =>$v)

            {



                // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

                $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;



                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GEN']))

                {

                    if($key == 0) $ortho_GEN .= $v->questionnaire_text.', ';

                }



                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['EYES']))

                {

                    if($key == 0) $ortho_EYES .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['ENT']))

                {

                    if($key == 0) $ortho_ENT .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['CV']))

                {

                    if($key == 0) $ortho_CV .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['RESP']))

                {

                    if($key == 0) $ortho_RESP .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['NEURO']))

                {

                    if($key == 0) $ortho_NEURO .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['MSK']))

                {

                    if($key == 0) $ortho_MSK .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GI'])){

                    if($key == 0) $ortho_GI .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['GU'])){

                    if($key == 0) $ortho_GU .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['SKIN_BREAST'])){

                    if($key == 0) $ortho_SKINBREAST .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['ENDO'])){

                    if($key == 0) $ortho_ENDO .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['HEME_LYMPH'])){

                    if($key == 0) $ortho_HEMELYMPH .= $v->questionnaire_text.', ';

                }

                if(in_array($v->id, $temp_ortho_questionnaire_grp_arr['PSYCH'])){

                    if($key == 0) $ortho_PSYCH .= $v->questionnaire_text.', ';

                }

            }

        }



        //calculate the ROS count, we calculate the number of group of health questionnaire to generate the cpt code

        $temp_health_questionnaire_grp = array();



        foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)

        {

            foreach($value as $k =>$v)

            {



                foreach ($temp_ortho_questionnaire_grp_arr as $gkey => $gvalue) {



                    if(in_array($v->id, $gvalue)){



                       $temp_health_questionnaire_grp[] = $gkey;

                       break;

                    }

                }

            }

        }

        $positive_ros_count = count(array_unique($temp_health_questionnaire_grp));



    }



    $ortho_GEN   = rtrim($ortho_GEN , ', ');  $ortho_EYES   = rtrim($ortho_EYES , ', ');  $ortho_ENT   = rtrim($ortho_ENT , ', ');  $ortho_CV   = rtrim($ortho_CV , ', ');  $ortho_RESP   = rtrim($ortho_RESP , ', ');  $ortho_NEURO   = rtrim($ortho_NEURO , ', ');  $ortho_MSK   = rtrim($ortho_MSK , ', ');  $ortho_GI   = rtrim($ortho_GI , ', ');  $ortho_GU   = rtrim($ortho_GU , ', ');  $ortho_SKINBREAST   = rtrim($ortho_SKINBREAST , ', ');  $ortho_ENDO  = rtrim($ortho_ENDO , ', ');  $ortho_HEMELYMPH   = rtrim($ortho_HEMELYMPH , ', ');   $ortho_PSYCH   = rtrim($ortho_PSYCH , ', ');



    $ortho_GEN   = ltrim($ortho_GEN , '. ');

    $ortho_EYES   = ltrim($ortho_EYES , '. ');

    $ortho_ENT   = ltrim($ortho_ENT , '. ');

    $ortho_CV   = ltrim($ortho_CV , '. ');

    $ortho_RESP   = ltrim($ortho_RESP , '. ');

    $ortho_NEURO   = ltrim($ortho_NEURO , '. ');

    $ortho_MSK   = ltrim($ortho_MSK , '. ');

    $ortho_GI   = ltrim($ortho_GI , '. ');  $ortho_GU   = ltrim($ortho_GU , '. ');  $ortho_SKINBREAST   = ltrim($ortho_SKINBREAST , '. ');  $ortho_ENDO  = ltrim($ortho_ENDO , '. ');  $ortho_HEMELYMPH   = ltrim($ortho_HEMELYMPH , '. ');   $ortho_PSYCH   = ltrim($ortho_PSYCH , '. ');



    $ortho_GEN  = preg_replace('/Denies$/', '', $ortho_GEN);  $ortho_EYES  = preg_replace('/Denies$/', '', $ortho_EYES);  $ortho_ENT  = preg_replace('/Denies$/', '', $ortho_ENT);  $ortho_CV  = preg_replace('/Denies$/', '', $ortho_CV);  $ortho_RESP  = preg_replace('/Denies$/', '', $ortho_RESP);  $ortho_NEURO  = preg_replace('/Denies$/', '', $ortho_NEURO);  $ortho_MSK  = preg_replace('/Denies$/', '', $ortho_MSK);  $ortho_GI  = preg_replace('/Denies$/', '', $ortho_GI);  $ortho_GU  = preg_replace('/Denies$/', '', $ortho_GU);  $ortho_SKINBREAST  = preg_replace('/Denies$/', '', $ortho_SKINBREAST);  $ortho_ENDO = preg_replace('/Denies$/', '', $ortho_ENDO);  $ortho_HEMELYMPH  = preg_replace('/Denies$/', '', $ortho_HEMELYMPH);   $ortho_PSYCH  = preg_replace('/Denies$/', '', $ortho_PSYCH);

}

$oncology_GEN  = ''; $oncology_EYE = ''; $oncology_ENT = ''; $oncology_CV = ''; $oncology_RESP = ''; $oncology_GI = ''; $oncology_GU = ''; $oncology_MSK = ''; $oncology_SKIN = ''; $oncology_BREAST = ''; $oncology_NEURO = ''; $oncology_PSYCH = ''; $oncology_ENDO = ''; $oncology_HEME_LYMPH = ''; $oncology_ALL_IMM = '';

$cancer_followup_positive_ROS = [];
$cancer_followup_negative_ROS = [];

if($user_detail->specialization_id == 8)

{
    // we are creating new source array and take only those  options that are needed in cancer module
    $temp_cancer_questionnaire_grp_arr = array();
    if(isset($all_questionnaire_arr[36])){
      $temp_cancer_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[36] ;
    }

    if(isset($all_questionnaire_arr[37])){
      $temp_cancer_questionnaire_grp_arr['EYES'] = $all_questionnaire_arr[37] ;
    }

    if(isset($all_questionnaire_arr[38])){
      $temp_cancer_questionnaire_grp_arr['ENT'] = $all_questionnaire_arr[38] ;
    }

    if(isset($all_questionnaire_arr[39])){
      $temp_cancer_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[39] ;
    }

    if(isset($all_questionnaire_arr[40])){
      $temp_cancer_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[40] ;
    }

    if(isset($all_questionnaire_arr[41])){
      $temp_cancer_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[41] ;
    }
    if(isset($all_questionnaire_arr[42])){
      $temp_cancer_questionnaire_grp_arr['GU'] = $all_questionnaire_arr[42] ;
    }
    if(isset($all_questionnaire_arr[43])){
      $temp_cancer_questionnaire_grp_arr['MSK'] = $all_questionnaire_arr[43] ;
    }
    if(isset($all_questionnaire_arr[44])){
      $temp_cancer_questionnaire_grp_arr['SKIN'] = $all_questionnaire_arr[44] ;
    }
    if(isset($all_questionnaire_arr[45])){
      $temp_cancer_questionnaire_grp_arr['BREAST'] = $all_questionnaire_arr[45] ;
    }
    if(isset($all_questionnaire_arr[46])){
      $temp_cancer_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[46] ;
    }

    if(isset($all_questionnaire_arr[47])){
      $temp_cancer_questionnaire_grp_arr['PSYCH'] = $all_questionnaire_arr[47] ;
    }
    if(isset($all_questionnaire_arr[48])){
      $temp_cancer_questionnaire_grp_arr['ENDO'] = $all_questionnaire_arr[48] ;
    }
    if(isset($all_questionnaire_arr[49])){
      $temp_cancer_questionnaire_grp_arr['HEME_LYMPH'] = $all_questionnaire_arr[49] ;
    }
    if(isset($all_questionnaire_arr[50])){

      $temp_cancer_questionnaire_grp_arr['ALL_IMM'] = $all_questionnaire_arr[50] ;
    }

    if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail))
    {
        $res_ar = array(0 => 'NO', 1 => 'YES' , 2 => "I DON'T KNOW");

        foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)
        {
            foreach($value as $k =>$v)
            {
                // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose
                if(empty($v)){

                    continue;
                }

                $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;

                $v->questionnaire_text  = strtolower($v->questionnaire_text);



                if(isset($temp_cancer_questionnaire_grp_arr['GEN']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GEN']))
                {

                    if($key == 1){

                      $oncology_GEN .= '+'.$v->questionnaire_text.', ';
                      $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                    }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['EYES']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['EYES']))
                {

                    if($key == 1){

                        $oncology_EYE .= '+'.$v->questionnaire_text.', ';
                        $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                    }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['ENT']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ENT']))
                {

                    if($key == 1){
                        $oncology_ENT .= '+'.$v->questionnaire_text.', ';
                        $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                    }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['CV']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['CV']))
                {

                    if($key == 1){
                        $oncology_CV .= '+'.$v->questionnaire_text.', ';
                        $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                    }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['RESP']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['RESP']))
                {

                    if($key == 1){
                         $oncology_RESP .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['GI']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GI']))
                {

                    if($key == 1){
                        $oncology_GI .= '+'.$v->questionnaire_text.', ';
                        $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                    }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['GU']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GU']))
                {

                    if($key == 1){
                         $oncology_GU .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['MSK']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['MSK']))
                {

                    if($key == 1){
                         $oncology_MSK .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['SKIN']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['SKIN']))
                {

                    if($key == 1){
                        $oncology_SKIN .= '+'.$v->questionnaire_text.', ';
                        $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                    }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['BREAST']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['BREAST']))
                {

                    if($key == 1){
                         $oncology_BREAST .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['NEURO']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['NEURO']))
                {

                    if($key == 1){
                         $oncology_NEURO .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['PSYCH']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['PSYCH']))
                {

                    if($key == 1){
                         $oncology_PSYCH .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['ENDO']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ENDO']))
                {

                    if($key == 1){
                         $oncology_ENDO .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['HEME_LYMPH']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['HEME_LYMPH']))
                {

                    if($key == 1){
                         $oncology_HEME_LYMPH .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['ALL_IMM']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ALL_IMM']))
                {

                    if($key == 1){
                         $oncology_ALL_IMM .= '+'.$v->questionnaire_text.', ';
                         $cancer_followup_positive_ROS[] = $v->questionnaire_text;
                     }

                }


            }

        }

        $oncology_GEN   = rtrim($oncology_GEN , ', ');  $oncology_EYE   = rtrim($oncology_EYE , ', ');  $oncology_ENT   = rtrim($oncology_ENT , ', ');  $oncology_CV   = rtrim($oncology_CV , ', ');  $oncology_RESP   = rtrim($oncology_RESP , ', ');  $oncology_GI   = rtrim($oncology_GI , ', ');  $oncology_GU   = rtrim($oncology_GU , ', ');  $oncology_MSK   = rtrim($oncology_MSK , ', ');  $oncology_SKIN   = rtrim($oncology_SKIN , ', ');  $oncology_BREAST   = rtrim($oncology_BREAST , ', ');  $oncology_NEURO  = rtrim($oncology_NEURO , ', ');  $oncology_PSYCH   = rtrim($oncology_PSYCH , ', ');   $oncology_ENDO   = rtrim($oncology_ENDO , ', '); $oncology_HEME_LYMPH   = rtrim($oncology_HEME_LYMPH , ', ');   $oncology_ALL_IMM   = rtrim($oncology_ALL_IMM , ', ');


        $oncology_GEN  .= '. Denies ';  $oncology_EYE  .= '. Denies ';  $oncology_ENT  .= '. Denies ';  $oncology_CV  .= '. Denies ';  $oncology_RESP  .= '. Denies ';  $oncology_GI  .= '. Denies ';  $oncology_GU  .= '. Denies ';  $oncology_MSK  .= '. Denies ';  $oncology_SKIN  .= '. Denies ';  $oncology_BREAST  .= '. Denies ';  $oncology_NEURO .= '. Denies ';  $oncology_PSYCH  .= '. Denies '; $oncology_ENDO  .= '. Denies '; $oncology_HEME_LYMPH  .= '. Denies '; $oncology_ALL_IMM  .= '. Denies ';


        foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)

        {

            foreach($value as $k =>$v)

            {
                // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose
                if(empty($v)){

                    continue;
                }
                $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;

                if(isset($temp_cancer_questionnaire_grp_arr['GEN']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GEN']))
                {

                    if($key == 0){
                         $oncology_GEN .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['EYES']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['EYES']))
                {

                    if($key == 0){
                         $oncology_EYE .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['ENT']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ENT']))
                {

                    if($key == 0){
                         $oncology_ENT .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['CV']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['CV']))
                {

                    if($key == 0){
                         $oncology_CV .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['RESP']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['RESP']))
                {

                    if($key == 0){
                         $oncology_RESP .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['GI']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GI']))
                {

                    if($key == 0){
                         $oncology_GI .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['GU']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['GU']))
                {

                    if($key == 0){
                         $oncology_GU .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['MSK']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['MSK']))
                {

                    if($key == 0){
                         $oncology_MSK .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['SKIN']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['SKIN']))
                {

                    if($key == 0){
                         $oncology_SKIN .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['BREAST']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['BREAST']))
                {

                    if($key == 0){
                         $oncology_BREAST .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['NEURO']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['NEURO']))
                {

                    if($key == 0){
                         $oncology_NEURO .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['PSYCH']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['PSYCH']))
                {

                    if($key == 0){
                         $oncology_PSYCH .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }

                if(isset($temp_cancer_questionnaire_grp_arr['ENDO']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ENDO']))
                {

                    if($key == 0){
                         $oncology_ENDO .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['HEME_LYMPH']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['HEME_LYMPH']))
                {

                    if($key == 0){
                         $oncology_HEME_LYMPH .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }
                if(isset($temp_cancer_questionnaire_grp_arr['ALL_IMM']) && in_array($v->id, $temp_cancer_questionnaire_grp_arr['ALL_IMM']))
                {

                    if($key == 0){
                         $oncology_ALL_IMM .= $v->questionnaire_text.', ';
                         $cancer_followup_negative_ROS[] = $v->questionnaire_text;
                     }

                }

            }

        }

        //calculate the ROS count, we calculate the number of group of health questionnaire to generate the cpt code
        $positive_ros_count = count($temp_cancer_questionnaire_grp_arr);
    }

   $oncology_GEN   = rtrim($oncology_GEN , ', ');  $oncology_EYE   = rtrim($oncology_EYE , ', ');  $oncology_ENT   = rtrim($oncology_ENT , ', ');  $oncology_CV   = rtrim($oncology_CV , ', ');  $oncology_RESP   = rtrim($oncology_RESP , ', ');  $oncology_GI   = rtrim($oncology_GI , ', ');  $oncology_GU   = rtrim($oncology_GU , ', ');  $oncology_MSK   = rtrim($oncology_MSK , ', ');  $oncology_SKIN   = rtrim($oncology_SKIN , ', ');  $oncology_BREAST   = rtrim($oncology_BREAST , ', ');  $oncology_NEURO  = rtrim($oncology_NEURO , ', ');  $oncology_PSYCH   = rtrim($oncology_PSYCH , ', ');   $oncology_ENDO   = rtrim($oncology_ENDO , ', '); $oncology_HEME_LYMPH   = rtrim($oncology_HEME_LYMPH , ', ');   $oncology_ALL_IMM   = rtrim($oncology_ALL_IMM , ', ');

    $oncology_GEN   = ltrim($oncology_GEN , '. ');
    $oncology_EYE   = ltrim($oncology_EYE , '. ');
    $oncology_ENT   = ltrim($oncology_ENT , '. ');
    $oncology_CV   = ltrim($oncology_CV , '. ');
    $oncology_RESP   = ltrim($oncology_RESP , '. ');
    $oncology_GI   = ltrim($oncology_GI , '. ');
    $oncology_GU   = ltrim($oncology_GU , '. ');
    $oncology_MSK   = ltrim($oncology_MSK , '. ');
    $oncology_SKIN   = ltrim($oncology_SKIN , '. ');
     $oncology_BREAST   = ltrim($oncology_BREAST , '. ');
     $oncology_NEURO  = ltrim($oncology_NEURO , '. ');
     $oncology_PSYCH   = ltrim($oncology_PSYCH , '. ');
     $oncology_ENDO   = ltrim($oncology_ENDO , '. ');
    $oncology_HEME_LYMPH   = ltrim($oncology_HEME_LYMPH , '. ');
    $oncology_ALL_IMM   = ltrim($oncology_ALL_IMM , '. ');

    $oncology_GEN  = preg_replace('/Denies$/', '', $oncology_GEN);
    $oncology_EYE  = preg_replace('/Denies$/', '', $oncology_EYE);
    $oncology_ENT  = preg_replace('/Denies$/', '', $oncology_ENT);
    $oncology_CV  = preg_replace('/Denies$/', '', $oncology_CV);
    $oncology_RESP  = preg_replace('/Denies$/', '', $oncology_RESP);
    $oncology_GI  = preg_replace('/Denies$/', '', $oncology_GI);
    $oncology_GU  = preg_replace('/Denies$/', '', $oncology_GU);
    $oncology_MSK  = preg_replace('/Denies$/', '', $oncology_MSK);
    $oncology_SKIN  = preg_replace('/Denies$/', '', $oncology_SKIN);
    $oncology_BREAST  = preg_replace('/Denies$/', '', $oncology_BREAST);
    $oncology_NEURO  = preg_replace('/Denies$/', '', $oncology_NEURO);
    $oncology_PSYCH = preg_replace('/Denies$/', '', $oncology_PSYCH);
    $oncology_ENDO  = preg_replace('/Denies$/', '', $oncology_ENDO);
    $oncology_HEME_LYMPH  = preg_replace('/Denies$/', '', $oncology_HEME_LYMPH);
    $oncology_ALL_IMM  = preg_replace('/Denies$/', '', $oncology_ALL_IMM);

}

if($user_detail->specialization_id == 1 || $user_detail->specialization_id == 2 || $user_detail->specialization_id == 5 || $user_detail->specialization_id == 6 || $user_detail->specialization_id == 9)
{

    $temp_general_health_questionnaire_grp_arr = array();

    //copd condition additional health questionnaire
    $health_associated_sym = array(

        'CV' => array('chest tightness'),
        'RESP' => array('SOB','cough','cyanosis','dyspnea at rest','DOE','hemoptysis')
    );
    // we are creating new source array and take only those  options that are needed in chronic condition module

    if($user_detail->chief_compliant_userdetail->current_step_id->id == 18 && !empty($user_detail->chief_compliant_userdetail->chronic_condition) && is_array($user_detail->chief_compliant_userdetail->chronic_condition)){

        if(in_array("dmii", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[2] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[6] ;
        }

        if(in_array("cad", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[2] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[6] ;

        }

        if(in_array("chf", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['PSYCH'] = $all_questionnaire_arr[8] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[6] ;
        }

        if(in_array("htn", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[7] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = $all_questionnaire_arr[6] ;
        }

        if(in_array("copd", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['GI'] = $all_questionnaire_arr[2] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['MSK'] = $all_questionnaire_arr[21] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = isset($temp_general_health_questionnaire_grp_arr['NEURO']) ? array_merge($temp_general_health_questionnaire_grp_arr['NEURO'], $all_questionnaire_arr[20]) : $all_questionnaire_arr[20];
            $temp_general_health_questionnaire_grp_arr['SKIN'] = $all_questionnaire_arr[24] ;
            $temp_general_health_questionnaire_grp_arr['PSYCH'] = $all_questionnaire_arr[8] ;
            $temp_general_health_questionnaire_grp_arr['ENT'] = $all_questionnaire_arr[35] ;
            $temp_general_health_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[7] ;
        }

        if(in_array("asthma", $user_detail->chief_compliant_userdetail->chronic_condition))
        {
            $temp_general_health_questionnaire_grp_arr['GEN'] = $all_questionnaire_arr[1] ;
            $temp_general_health_questionnaire_grp_arr['CV'] = $all_questionnaire_arr[5] ;
            $temp_general_health_questionnaire_grp_arr['RESP'] = $all_questionnaire_arr[7] ;
            $temp_general_health_questionnaire_grp_arr['PSYCH'] = $all_questionnaire_arr[8] ;
            $temp_general_health_questionnaire_grp_arr['EYES'] = $all_questionnaire_arr[12] ;
            $temp_general_health_questionnaire_grp_arr['NEURO'] = isset($temp_general_health_questionnaire_grp_arr['NEURO']) ? array_merge($temp_general_health_questionnaire_grp_arr['NEURO'], $all_questionnaire_arr[20]) : $all_questionnaire_arr[20];
            $temp_general_health_questionnaire_grp_arr['MSK'] = $all_questionnaire_arr[21] ;
            $temp_general_health_questionnaire_grp_arr['GI'] = isset($temp_general_health_questionnaire_grp_arr['GI']) ? array_merge($temp_general_health_questionnaire_grp_arr['GI'], $all_questionnaire_arr[22]) : $all_questionnaire_arr[22];
            $temp_general_health_questionnaire_grp_arr['SKIN'] = $all_questionnaire_arr[24] ;
            $temp_general_health_questionnaire_grp_arr['ENT'] = $all_questionnaire_arr[35] ;
        }
    }
    // pr($all_questionnaire_arr);
    // pr($temp_general_health_questionnaire_grp_arr);die;

    $q_general = ''; 
    $q_GIGU = '';
    $q_HEENT = '';
    $q_HEMEENDO = '';
    $q_CV = '';
    $q_NEUROMSK = '';
    $q_RESP = '';
    $q_PSYCH = '';
    $q_SKIN = '';
    $q_CV_RESP = '';
    $q_THROAT = "";
    $q_ENT = '';
    $q_MSK = '';
    $q_NEURO = '';
    $q_GI = '';
    $q_GU = '';
    $q_EYES = '';
    $q_MOUTH = '';
    $ortho_MSK = '';
    $healthscreening_uremia_negative_ROS = [];
    $healthscreening_volume_negative_ROS = [];

    $q_general_pos = array(); 
    $q_general_neg = array(); 
    $q_GIGU_pos = array();  
    $q_GIGU_neg = array(); 
    $q_HEENT_pos = array();
    $q_HEENT_neg = array();
    $q_HEMEENDO_pos = array(); 
    $q_HEMEENDO_neg = array(); 
    $q_CV_pos = array(); 
    $q_CV_neg = array();
    $q_NEUROMSK_pos = array();
    $q_NEUROMSK_neg = array();  
    $q_RESP_pos = array(); 
    $q_RESP_neg = array(); 
    $q_PSYCH_pos = array(); 
    $q_PSYCH_neg = array();
    $q_SKIN_pos = array(); 
    $q_SKIN_neg = array(); 
    $q_CV_RESP_pos = array();
    $q_CV_RESP_neg = array();
    $q_THROAT_pos = array();
    $q_THROAT_neg = array();
    $q_ENT_pos = array();
    $q_ENT_neg = array();
    $q_MSK_pos = array(); 
    $q_MSK_neg = array(); 
    $q_NEURO_pos = array();
    $q_NEURO_neg = array();
    $q_GI_pos = array();
    $q_GI_neg = array();
    $q_GU_pos = array();
    $q_GU_neg = array();
    $q_EYES_pos = array();
    $q_EYES_neg = array();
    $q_MOUTH_pos = array();
    $q_MOUTH_neg = array();
    $ortho_MSK_pos = array();
    $ortho_MSK_neg = array();
    $q_IMMUNO_pos = array();
    $q_IMMUNO_neg = array();
    $spine_HEMELYMPH_pos = array();
    $spine_HEMELYMPH_neg = array();
    //pr($user_detail->chief_compliant_userdetail->questionnaire_detail); die;

    if(!empty($user_detail->chief_compliant_userdetail->questionnaire_detail))

    {



        $res_ar = array(0 => 'NO', 1 => 'YES' , 2 => "I DON'T KNOW");
        //pr($user_detail->chief_compliant_userdetail->questionnaire_detail);die;

        foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)

        {

            foreach($value as $k =>$v)

            {
                // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

                $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;

                $v->questionnaire_text = strtolower($v->questionnaire_text);



                if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){



                    if(in_array($v->id, $all_questionnaire_arr[1])){

                        if($key == 1) $q_general .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[5])){

                        if($key == 1) $q_CV .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[7])){

                        if($key == 1) $q_RESP .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[8])){

                        if($key == 1) $q_PSYCH .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[9])){

                        if($key == 1) $q_SKIN .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[20])){

                        if($key == 1) $q_NEURO .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[21])){

                        if($key == 1) $q_MSK .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[22])){

                        if($key == 1) $q_GI .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[23])){

                        if($key == 1) $q_GU .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[35])){

                        if($key == 1) $q_ENT .= '+'.$v->questionnaire_text.', ';

                    }

                }
                elseif($user_detail->chief_compliant_userdetail->current_step_id->id == 18)
                {
                    if(isset($temp_general_health_questionnaire_grp_arr['GEN']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['GEN'])){
                        if($key == 1) $q_general .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['GI']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['GI'])){
                        if($key == 1) $q_GI .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['CV']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['CV'])){
                        if($key == 1) $q_CV .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['NEURO']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['NEURO'])){
                        if($key == 1) $q_NEURO .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['RESP']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['RESP'])){
                        if($key == 1) $q_RESP .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['PSYCH']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['PSYCH'])){
                        if($key == 1) $q_PSYCH .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['MSK']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['MSK'])){
                        if($key == 1) $q_MSK .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['SKIN']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['SKIN'])){
                        if($key == 1) $q_SKIN .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['ENT']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['ENT'])){
                        if($key == 1) $q_ENT .= '+'.$v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['EYES']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['EYES'])){
                        if($key == 1) $q_EYES .= '+'.$v->questionnaire_text.', ';
                    }

                }
                elseif($user_detail->chief_compliant_userdetail->current_step_id->id == 23)
                {
                        if(in_array($v->id, $all_questionnaire_arr[1])){

                       if($key == 1) $q_general .= '+'.$v->questionnaire_text.', ';


                    }

                    if(in_array($v->id, $all_questionnaire_arr[22])){

                    if($key == 1) $q_GI .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[23])){

                        if($key == 1) $q_GU .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[6])){

                        if($key == 1) $q_NEURO .= '+'.$v->questionnaire_text.', ';

                    }


                    if(in_array($v->id, $all_questionnaire_arr[2])){

                    if($key == 1) $q_GIGU .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[3])){

                    if($key == 1) $q_HEENT .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[52])){

                    if($key == 1) $q_MOUTH .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[12])){

                    if($key == 1) $q_EYES .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[4])){

                    if($key == 1) $q_HEMEENDO .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[5])){

                    if($key == 1) $q_CV .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[6])){

                    if($key == 1) $q_NEUROMSK .= '+'.$v->questionnaire_text.', ';

                    }

                    // if(in_array($v->id, $all_questionnaire_arr[7])){

                    // if($key == 1) $q_RESP .= '+'.$v->questionnaire_text.', ';

                    // }
                    if(in_array($v->id, $all_questionnaire_arr[7]) || (in_array($v->id, $all_questionnaire_arr[5]) && strpos($v->questionnaire_text, 'pleurisy') !== false)  ){

                        if($key == 1) $q_RESP .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[8])){

                    if($key == 1) $q_PSYCH .= '+'.$v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[9])){

                    if($key == 1) $q_SKIN .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[33])){

                    if($key == 1) $q_CV_RESP .= '+'.$v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[34])){

                    if($key == 1) $q_THROAT .= '+'.$v->questionnaire_text.', ';

                    }
                }

                else{

                    if(in_array($v->id, $all_questionnaire_arr[1])){

                        if($key == 1) $q_general .= '+'.$v->questionnaire_text.', ';
                        if($key == 1) $q_general_pos[] = $v->questionnaire_text;

                    }



                    if(in_array($v->id, $all_questionnaire_arr[2])){

                        if($key == 1) $q_GIGU .= '+'.$v->questionnaire_text.', ';
                        if($key == 1) $q_GIGU_pos[] = $v->questionnaire_text;

                    }

                    if(in_array($v->id, $all_questionnaire_arr[3])){

                        if($key == 1) $q_HEENT .= '+'.$v->questionnaire_text.', ';
                        if($key == 1) $q_HEENT_pos[] = $v->questionnaire_text;

                    }

                    if(in_array($v->id, $all_questionnaire_arr[4])){

                        if($key == 1) $q_HEMEENDO .= '+'.$v->questionnaire_text.', ';
                        if($key == 1) $q_HEMEENDO_pos[] = $v->questionnaire_text;

                    }

                    if(in_array($v->id, $all_questionnaire_arr[5])){

                        if($key == 1) $q_CV .= '+'.$v->questionnaire_text.', ';
                        if($key == 1) $q_CV_pos[] = $v->questionnaire_text;

                    }

                    if(in_array($v->id, $all_questionnaire_arr[6])){

                        if($key == 1) $q_NEUROMSK .= '+'.$v->questionnaire_text.', ';
                        if($key == 1) $q_NEUROMSK_pos[] = $v->questionnaire_text;

                    }

                    if(in_array($v->id, $all_questionnaire_arr[7])){

                        if($key == 1) $q_RESP .= '+'.$v->questionnaire_text.', ';
                        if($key == 1) $q_RESP_pos[] = $v->questionnaire_text;

                    }

                    if(in_array($v->id, $all_questionnaire_arr[8])){

                        if($key == 1) $q_PSYCH .= '+'.$v->questionnaire_text.', ';
                        if($key == 1) $q_PSYCH_pos[] = $v->questionnaire_text;

                    }

                    if(in_array($v->id, $all_questionnaire_arr[9])){

                        if($key == 1) $q_SKIN .= '+'.$v->questionnaire_text.', ';
                        if($key == 1) $q_SKIN_pos[] = $v->questionnaire_text;

                    }



                    if(in_array($v->id, $all_questionnaire_arr[33])){

                        if($key == 1) $q_CV_RESP .= '+'.$v->questionnaire_text.', ';
                        if($key == 1) $q_CV_RESP_pos[] = $v->questionnaire_text;

                    }

                    if(in_array($v->id, $all_questionnaire_arr[34])){

                        if($key == 1) $q_THROAT .= '+'.$v->questionnaire_text.', ';
                        if($key == 1) $q_THROAT_pos[] = $v->questionnaire_text;

                    }
                    if(in_array($v->id, $all_questionnaire_arr[22])){

                        if($key == 1) $q_GI .= '+'.$v->questionnaire_text.', ';
                        if($key == 1) $q_GI_pos[] = $v->questionnaire_text;

                    }
                    if(in_array($v->id, $all_questionnaire_arr[23])){

                        if($key == 1) $q_GU .= '+'.$v->questionnaire_text.', ';
                        if($key == 1) $q_GU_pos[] = $v->questionnaire_text;

                    }
                    if(in_array($v->id, $all_questionnaire_arr[21])){

                        if($key == 1) $q_MSK .= '+'.$v->questionnaire_text.', ';
                        if($key == 1) $q_MSK_neg[] = $v->questionnaire_text;


                    }
                    if(in_array($v->id, $all_questionnaire_arr[26])){

                        if($key == 1) $spine_HEMELYMPH .= '+'.$v->questionnaire_text.', ';
                        if($key == 1) $spine_HEMELYMPH_pos[] = $v->questionnaire_text;

                    }
                    if(in_array($v->id, $all_questionnaire_arr[20])){

                        if($key == 1) $q_NEURO .= '+'.$v->questionnaire_text.', ';
                        if($key == 1) $q_NEURO_pos[] = $v->questionnaire_text;

                    }

                }

            }

        }

        //set some associated symptom at end of healthquestionnaire
        $temp_posivite_sym = explode(", ", $positive_symptom);
        if($user_detail->chief_compliant_userdetail->current_step_id->id == 18 && !empty($temp_posivite_sym) && in_array("copd", $user_detail->chief_compliant_userdetail->chronic_condition)){

            foreach ($temp_posivite_sym as $sym_key => $sym_value) {

               //set the CV symptoms
                if(isset($temp_general_health_questionnaire_grp_arr['CV']) && isset($health_associated_sym['CV']) && in_array($sym_value, $health_associated_sym['CV'])){

                    $q_CV .= '+'.$sym_value.', ';
                }

                if(isset($temp_general_health_questionnaire_grp_arr['RESP']) && isset($health_associated_sym['RESP']) && in_array($sym_value, $health_associated_sym['RESP'])){

                    $q_RESP .= '+'.$sym_value.', ';
                }
            }
        }



        $q_general = rtrim($q_general , ', '); $q_GIGU = rtrim($q_GIGU , ', ');  $q_HEENT = rtrim($q_HEENT , ', ');  $q_HEMEENDO = rtrim($q_HEMEENDO , ', '); $q_CV = rtrim($q_CV , ', '); $q_NEUROMSK = rtrim($q_NEUROMSK , ', '); $q_RESP = rtrim($q_RESP , ', '); $q_PSYCH = rtrim( $q_PSYCH , ', ') ; $q_SKIN = rtrim($q_SKIN , ', '); $q_CV_RESP = rtrim($q_CV_RESP , ', '); $q_THROAT = rtrim($q_THROAT , ', '); $q_NEURO = rtrim($q_NEURO , ', '); $q_GI = rtrim($q_GI , ', ');  $q_GU = rtrim($q_GU , ', ');  $q_MSK = rtrim($q_MSK , ', '); $q_ENT = rtrim($q_ENT , ', ');  $q_EYES = rtrim($q_EYES , ', ');$q_MOUTH = rtrim($q_MOUTH , ', ');



        $q_general .= '. Denies '; $q_GIGU .= '. Denies ';

        $q_HEENT .= '. Denies ';  $q_HEMEENDO .= '. Denies ';  $q_CV .= '. Denies ';  $q_NEUROMSK .= '. Denies ';  $q_RESP .= '. Denies ';  $q_PSYCH .= '. Denies ';  $q_SKIN .= '. Denies '; $q_CV_RESP .= '. Denies '; $q_THROAT .= '. Denies ';

        $q_NEURO .= '. Denies ';  $q_MSK .= '. Denies ';  $q_GU .= '. Denies ';  $q_GI .= '. Denies ';  $q_ENT .= '. Denies '; $q_EYES .= '. Denies '; 
        $q_MOUTH .= '. Denies ';


        //pr($user_detail->chief_compliant_userdetail->questionnaire_detail);die;
        foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value) {

            foreach($value as $k =>$v)

            {



                // we are using note name / medical name instead of layman name (questionnaire_text) in the api note, below line is for that purpose

                $v->questionnaire_text = (!empty($v->note_name) ? $v->note_name  : (!empty($v->medical_name) ? $v->medical_name : $v->questionnaire_text )) ;



                $v->questionnaire_text = strtolower($v->questionnaire_text);

                if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){



                    if(in_array($v->id, $all_questionnaire_arr[1])){

                        if($key == 0) $q_general .= $v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[5])){

                        if($key == 0) $q_CV .= $v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[7])){
                        if($key == 0) $q_RESP .= $v->questionnaire_text.', ';
                    }
                    if(in_array($v->id, $all_questionnaire_arr[8])){

                        if($key == 0) $q_PSYCH .= $v->questionnaire_text.', ';

                    }

                    if(in_array($v->id, $all_questionnaire_arr[9])){

                        if($key == 0) $q_SKIN .= $v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[20])){

                        if($key == 0) $q_NEURO .= $v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[21])){

                        if($key == 0) $q_MSK .= $v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[22])){

                        if($key == 0) $q_GI .= $v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[23])){

                        if($key == 0) $q_GU .= $v->questionnaire_text.', ';

                    }



                    if(in_array($v->id, $all_questionnaire_arr[35])){

                        if($key == 0) $q_ENT .= $v->questionnaire_text.', ';

                    }

                }
                elseif($user_detail->chief_compliant_userdetail->current_step_id->id == 18)
                {
                    if(isset($temp_general_health_questionnaire_grp_arr['GEN']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['GEN'])){
                        if($key == 0) $q_general .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['GI']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['GI'])){
                        if($key == 0) $q_GI .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['CV']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['CV'])){
                        if($key == 0) $q_CV .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['NEURO']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['NEURO'])){
                        if($key == 0) $q_NEURO .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['RESP']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['RESP'])){
                        if($key == 0) $q_RESP .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['PSYCH']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['PSYCH'])){
                        if($key == 0) $q_PSYCH .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['MSK']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['MSK'])){
                        if($key == 0) $q_MSK .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['SKIN']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['SKIN'])){
                        if($key == 0) $q_SKIN .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['ENT']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['ENT'])){
                        if($key == 0) $q_ENT .= $v->questionnaire_text.', ';
                    }

                    if(isset($temp_general_health_questionnaire_grp_arr['EYES']) && in_array($v->id, $temp_general_health_questionnaire_grp_arr['EYES'])){
                        if($key == 0) $q_EYES .= $v->questionnaire_text.', ';
                    }


                }
                elseif($user_detail->chief_compliant_userdetail->current_step_id->id == 23)
                {
                          if(in_array($v->id, $all_questionnaire_arr[1])){

                            if($key == 0) { $q_general .= $v->questionnaire_text.', ';
                            $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                            }
                            }

                        if(in_array($v->id, $all_questionnaire_arr[12])){

                        if($key == 0) { $q_EYES .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                        }

                        }

                        if(in_array($v->id, $all_questionnaire_arr[52])){                  

                        if($key == 0) { $q_MOUTH .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                        }

                        }

                        if(in_array($v->id, $all_questionnaire_arr[2])){

                        if($key == 0) {$q_GIGU .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;
                        }

                        }

                        if(in_array($v->id, $all_questionnaire_arr[3])){

                        if($key == 0) { $q_HEENT .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;}

                        }

                        if(in_array($v->id, $all_questionnaire_arr[22])){

                        if($key == 0) {$q_GI .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;}

                        }



                        if(in_array($v->id, $all_questionnaire_arr[23])){

                        if($key == 0) {$q_GU .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;}

                        }

                        if(in_array($v->id, $all_questionnaire_arr[4])){

                        if($key == 0) {$q_HEMEENDO .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;}

                        }

                        if(in_array($v->id, $all_questionnaire_arr[5])){

                        if($key == 0) { $q_CV .= $v->questionnaire_text.', ';
                        $healthscreening_volume_negative_ROS[] = $v->questionnaire_text;}

                        }

                        if(in_array($v->id, $all_questionnaire_arr[6])){

                        if($key == 0) { $q_NEUROMSK .= $v->questionnaire_text.', ';
                         $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;}

                        }

                        // if(in_array($v->id, $all_questionnaire_arr[7])){

                        // if($key == 0) { $q_RESP .= $v->questionnaire_text.', ';
                        // $healthscreening_volume_negative_ROS[] = $v->questionnaire_text;}

                        // }

                        if(in_array($v->id, $all_questionnaire_arr[7]) || (in_array($v->id, $all_questionnaire_arr[5]) && strpos($v->questionnaire_text, 'pleurisy') !== false)  ){

                        if($key == 0) {$q_RESP .= $v->questionnaire_text.', ';
                        $healthscreening_volume_negative_ROS[] = $v->questionnaire_text;}

                        }

                        if(in_array($v->id, $all_questionnaire_arr[8])){

                        if($key == 0) {$q_PSYCH .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;}

                        }

                        if(in_array($v->id, $all_questionnaire_arr[9])){

                        if($key == 0) {$q_SKIN .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;}

                        }

                        if(in_array($v->id, $all_questionnaire_arr[33])){

                        if($key == 0) {$q_CV_RESP .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;}

                        }

                        if(in_array($v->id, $all_questionnaire_arr[34])){

                        if($key == 0) {$q_THROAT .= $v->questionnaire_text.', ';
                        $healthscreening_uremia_negative_ROS[] = $v->questionnaire_text;}

                        }
                }  

                else

                {



                    if(in_array($v->id, $all_questionnaire_arr[1])){

                        if($key == 0) $q_general .= $v->questionnaire_text.', ';
                        if($key == 0) $q_general_neg[] = $v->questionnaire_text;

                    }



                    if(in_array($v->id, $all_questionnaire_arr[2])){                        

                        if($key == 0) $q_GIGU .= $v->questionnaire_text.', ';
                        if($key == 0) $q_GIGU_neg[] = $v->questionnaire_text;

                    }

                    if(in_array($v->id, $all_questionnaire_arr[3])){

                        if($key == 0) $q_HEENT .= $v->questionnaire_text.', ';
                        if($key == 0) $q_HEENT_neg[] = $v->questionnaire_text;

                    }

                    if(in_array($v->id, $all_questionnaire_arr[4])){

                        if($key == 0) $q_HEMEENDO .= $v->questionnaire_text.', ';
                        if($key == 0) $q_HEMEENDO_neg[] = $v->questionnaire_text;

                    }

                    if(in_array($v->id, $all_questionnaire_arr[5])){

                        if($key == 0) $q_CV .= $v->questionnaire_text.', ';
                        if($key == 0) $q_CV_neg[] = $v->questionnaire_text;

                    }

                    if(in_array($v->id, $all_questionnaire_arr[6])){

                        if($key == 0) $q_NEUROMSK .= $v->questionnaire_text.', ';
                        if($key == 0) $q_NEUROMSK_neg[] = $v->questionnaire_text;

                    }

                    if(in_array($v->id, $all_questionnaire_arr[7])){

                        if($key == 0) $q_RESP .= $v->questionnaire_text.', ';
                        if($key == 0) $q_RESP_neg[] = $v->questionnaire_text;

                    }

                    if(in_array($v->id, $all_questionnaire_arr[8])){

                        if($key == 0) $q_PSYCH .= $v->questionnaire_text.', ';
                        if($key == 0) $q_PSYCH_neg[] = $v->questionnaire_text;

                    }

                    if(in_array($v->id, $all_questionnaire_arr[9])){

                        if($key == 0) $q_SKIN .= $v->questionnaire_text.', ';
                        if($key == 0) $q_SKIN_neg[] = $v->questionnaire_text;

                    }



                    if(in_array($v->id, $all_questionnaire_arr[33])){

                        if($key == 0) $q_CV_RESP .= $v->questionnaire_text.', ';
                        if($key == 0) $q_CV_RESP_neg[] = $v->questionnaire_text;

                    }



                    if(in_array($v->id, $all_questionnaire_arr[34])){

                        if($key == 0) $q_THROAT .= $v->questionnaire_text.', ';
                        if($key == 0) $q_THROAT_neg[] = $v->questionnaire_text;

                    }
                    if(in_array($v->id, $all_questionnaire_arr[22])){

                        if($key == 0) $q_GI .= $v->questionnaire_text.', ';
                        if($key == 0) $q_GI_neg[] = $v->questionnaire_text;

                    }
                    if(in_array($v->id, $all_questionnaire_arr[23])){

                        if($key == 0) $q_GU .= $v->questionnaire_text.', ';
                        if($key == 0) $q_GU_neg[] = $v->questionnaire_text;

                    }
                    if(in_array($v->id, $all_questionnaire_arr[21])){

                        if($key == 0) $q_MSK .= $v->questionnaire_text.', ';
                        if($key == 0) $q_MSK_neg[] = $v->questionnaire_text;


                    }
                    if(in_array($v->id, $all_questionnaire_arr[26])){

                        if($key == 0) $spine_HEMELYMPH .= $v->questionnaire_text.', ';
                        if($key == 0) $spine_HEMELYMPH_neg[] = $v->questionnaire_text;

                    }

                    if(in_array($v->id, $all_questionnaire_arr[20])){

                        if($key == 0) $q_NEURO .= $v->questionnaire_text.', ';
                        if($key == 0) $q_NEURO_neg[] = $v->questionnaire_text;

                    }

                }





            }

        }

        //set some associated symptom at end of healthquestionnaire
        $temp_negative_symptom = explode(", ", $negative_symptom);
        if($user_detail->chief_compliant_userdetail->current_step_id->id == 18 && !empty($temp_negative_symptom) && in_array("copd", $user_detail->chief_compliant_userdetail->chronic_condition)){

            foreach ($temp_negative_symptom as $sym_key => $sym_value) {

               //set the CV symptoms
                if(isset($temp_general_health_questionnaire_grp_arr['CV']) && isset($health_associated_sym['CV']) && in_array($sym_value, $health_associated_sym['CV'])){

                    $q_CV .= $sym_value.', ';
                }

                if(isset($temp_general_health_questionnaire_grp_arr['RESP']) && isset($health_associated_sym['RESP']) && in_array($sym_value, $health_associated_sym['RESP'])){

                    $q_RESP .= $sym_value.', ';
                }
            }
        }



        //calculate the ROS count, we calculate the number of group of health questionnaire to generate the cpt code

        $temp_health_questionnaire_grp = array();



        foreach ($user_detail->chief_compliant_userdetail->questionnaire_detail as $key => $value)

        {

            foreach($value as $k =>$v)

            {



                foreach ($all_questionnaire_arr as $gkey => $gvalue) {



                    if(in_array($v->id, $gvalue)){



                       $temp_health_questionnaire_grp[] = $gkey;

                       break;

                    }

                }

            }

        }

        $positive_ros_count = count(array_unique($temp_health_questionnaire_grp));

    }



    $q_general = rtrim($q_general , ', '); $q_GIGU = rtrim($q_GIGU , ', ');  $q_HEENT = rtrim($q_HEENT , ', ');  $q_HEMEENDO = rtrim($q_HEMEENDO , ', '); $q_CV = rtrim($q_CV , ', '); $q_NEUROMSK = rtrim($q_NEUROMSK , ', '); $q_RESP = rtrim($q_RESP , ', '); $q_PSYCH = rtrim( $q_PSYCH , ', ') ; $q_SKIN = rtrim($q_SKIN , ', '); $q_CV_RESP = rtrim($q_CV_RESP , ', '); $q_THROAT = rtrim($q_THROAT , ', '); $q_MOUTH = rtrim($q_MOUTH , ', ');

    $q_NEURO = rtrim($q_NEURO , ', '); $q_GI = rtrim($q_GI , ', ');  $q_GU = rtrim($q_GU , ', ');  $q_MSK = rtrim($q_MSK , ', '); $q_ENT = rtrim($q_ENT , ', '); $q_EYES = rtrim($q_EYES, ', ');



    $q_general = ltrim($q_general , '. ');

    $q_GIGU = ltrim($q_GIGU , '. ');

    $q_HEENT = ltrim($q_HEENT , '. ');

    $q_HEMEENDO = ltrim($q_HEMEENDO , '. ');

    $q_CV = ltrim($q_CV , '. ');

    $q_NEUROMSK = ltrim($q_NEUROMSK , '. ');

    $q_RESP = ltrim($q_RESP , '. ');

    $q_PSYCH = ltrim( $q_PSYCH , '. ') ;

    $q_SKIN = ltrim($q_SKIN , '. ');

    $q_CV_RESP = ltrim($q_CV_RESP , '. ');

    $q_THROAT = ltrim($q_THROAT , '. ');

    $q_MOUTH = ltrim($q_MOUTH , '. ');

    $q_NEURO = ltrim($q_NEURO , '. '); $q_GI = ltrim($q_GI , '. ');  $q_GU = ltrim($q_GU , '. ');  $q_MSK = ltrim($q_MSK , '. '); $q_ENT = ltrim($q_ENT , '. ');
    $q_EYES = ltrim($q_EYES , '. ');



    $q_general = preg_replace('/Denies$/', '', $q_general);

    $q_GIGU = preg_replace('/Denies$/', '', $q_GIGU);

    $q_HEENT = preg_replace('/Denies$/', '', $q_HEENT);

    $q_HEMEENDO = preg_replace('/Denies$/', '', $q_HEMEENDO);

    $q_CV = preg_replace('/Denies$/', '', $q_CV);

    $q_NEUROMSK = preg_replace('/Denies$/', '', $q_NEUROMSK);

    $q_RESP = preg_replace('/Denies$/', '', $q_RESP);

    $q_PSYCH = preg_replace('/Denies$/', '', $q_PSYCH);

    $q_SKIN = preg_replace('/Denies$/', '', $q_SKIN);

    $q_CV_RESP = preg_replace('/Denies$/', '', $q_CV_RESP);

    $q_THROAT = preg_replace('/Denies$/', '', $q_THROAT);

    $q_MOUTH = preg_replace('/Denies$/', '', $q_MOUTH);

    $q_NEURO = preg_replace('/Denies$/', '', $q_NEURO);

    $q_GI = preg_replace('/Denies$/', '', $q_GI);

    $q_GU = preg_replace('/Denies$/', '', $q_GU);

    $q_MSK = preg_replace('/Denies$/', '', $q_MSK);

    $q_ENT = preg_replace('/Denies$/', '', $q_ENT);
    $q_EYES = preg_replace('/Denies$/', '', $q_EYES);




}





  $curnt_date = date('Y-m-d\TH:i:s');



  // preparing array that will finally convert into json







// get emr id as database



$internal_emr_id = '' ;

if(!empty($login_user->internal_emr_id)){



  $internal_emr_id =  Security::decrypt( base64_decode($login_user->internal_emr_id), SEC_KEY);





} else {

    $clinic_data_dump = '' ;

            $phone_no = $login_user->phone ;

              if(strlen($phone_no) == 10){

                  $phone_no_with_extra_1 = '1'.$phone_no ;

              }



              // elseif (strlen($phone_no) == 11 && $phone_no[0] == 1 ) {

              //     $phone_no_without_extra_1 = substr($phone_no, 1) ;

              // }





    if(!empty($login_user->organization->clinic_data_dump))

      $clinic_data_dump = $login_user->organization->clinic_data_dump;

      $file_name = WWW_ROOT.'clinic_data_dump/'.$clinic_data_dump;

          if(is_file($file_name) && file_exists($file_name)){

              $file = fopen($file_name, 'r');

              while (($line = fgetcsv($file)) !== FALSE) {

                //$line is an array of the csv elements

                // pr($line); die;

                  // if(in_array($email_id, $line)){

                // pr($line);

                  if(

                  in_array($phone_no, $line) ||

              (!empty($phone_no_with_extra_1) &&  in_array($phone_no_with_extra_1, $line))

           // (!empty($phone_no_without_extra_1) &&  in_array($phone_no_without_extra_1, $line))



                  ){

                    $internal_emr_id = $line[3]; // in the array index of emr id is 3

                    break;

                  }

              }

              // die;

              fclose($file);

          }





}

//pr($user_detail->chief_compliant_userdetail->created);die;

// pr($phone);

$ph_prefix = '+1 ';

$patient_basic_detail = "";



if(strlen($phone) > 10 && $phone[0] == '1'){

  $phone = substr($phone, 1);

}

  $phone = substr_replace($phone, ' - ', 3, 0);

  $phone = substr_replace($phone, ' - ', 9, 0);

  $phone = $ph_prefix.$phone;



  $cpt_cc_count = count(array_unique(array_filter(explode(", ", $all_cc_name))));



//Logic for calculate the E/M CPT Code



  $cpt_code = '';

  $text_condition = '';

  // pr($user_detail['chief_compliant_userdetail']['current_step_id']['id']);

   //pr($positive_ros_count);

   //pr($cpt_pmfsh_count);

   //pr($cpt_hpi_elements_count);

    //pr($cpt_cc_count);



  //  pr($user_signed_data);die;

  // die('xzc');

  if(!empty($user_signed_data)){





    if($user_signed_data['patient_type'] == 1){



        //generate code for new patient



        if(($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 1 || $user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 17) && $positive_ros_count < 1 && $cpt_pmfsh_count < 1 && $cpt_cc_count == 1 && $cpt_hpi_elements_count >= 1 && $cpt_hpi_elements_count <= 3)

        {



            $cpt_code .= '99201 (if examine 1+ systems, 1-5 PE elements), ';

        }

       if(($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 1 || $user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 17) && $positive_ros_count >= 1 && $cpt_pmfsh_count >= 0 && $cpt_cc_count >= 1 && $cpt_hpi_elements_count >= 1 && $cpt_hpi_elements_count <= 3){



            $cpt_code .= '99202 (if examine 1+ systems, 6-11 PE elements), ';

        }

        if(($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 1 || $user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 17) && $positive_ros_count >= 2 && $positive_ros_count <= 9 && $cpt_pmfsh_count >= 1 && ($cpt_cc_count > 1 || $cpt_cronic_condition_count >= 1) && ($cpt_hpi_elements_count >= 4 || $cpt_cronic_condition_count >= 3)){



            $cpt_code .= '99203 (if examine 2+ systems, 12+ PE elements; OTC meds, PT/OT), ';



        }

        if(($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 1 || $user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 17) && $positive_ros_count >= 10 && $cpt_pmfsh_count >= 3 && ($cpt_hpi_elements_count >= 4 || $cpt_cronic_condition_count >= 3)){



            $cpt_code .= '99204 (if examine 9+ systems, 18+ PE elements; Rx), 99205 (if examine 9+ systems, 18+ PE elements; angio, endoscopies w/ risk fx, or major surgery ordered), ';

        }

       if($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 2 && $positive_ros_count >= 10 && $age >= 18 && $age <= 39 && $cpt_pmfsh_count >= 2 && $cpt_hpi_elements_count >= 4){



            $cpt_code .= '99385 (if counseling/anticipatory guidance/risk factor reduction interventions), ';

        }

       if($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 2 && $positive_ros_count >= 10 && $age >= 40 && $age <= 64 && $cpt_pmfsh_count >= 2 && $cpt_hpi_elements_count >= 4){



            $cpt_code .= '99386 (if counseling/anticipatory guidance/risk factor reduction interventions), ';

        }



        if($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 2 && $positive_ros_count >= 10 && $age >= 65 && $cpt_pmfsh_count >= 2 && $cpt_hpi_elements_count >= 4){



            $cpt_code .= '99387 (if counseling/anticipatory guidance/risk factor reduction interventions), ';

        }





    }



    if($user_signed_data['patient_type'] == 2){



        //generate code for established patient



         $previous_annual_exam = $this->ChiefCompliantUserdetails->find('all')->where(['ChiefCompliantUserdetails.current_step_id' => 4,'ChiefCompliantUserdetails.id !='=> $user_detail['chief_compliant_userdetail']['id']]);



          $userId = $user_detail['user_id'];

          // compare previous appointement user id with the current appointemet user id

          $previous_annual_exam = $previous_annual_exam->matching('Appointments', function(\Cake\ORM\Query $q) use ($userId) {

                    return $q->where(['Appointments.user_id' =>$userId ]);

                });



          $previous_annual_exam = $previous_annual_exam->order(['ChiefCompliantUserdetails.id' => 'desc'])->first();



          $previous_annual_exam_diff = 0;

          if(!empty($previous_annual_exam)){



            $current_date = strtotime(date('Y-m-d'));

            $previous_date = strtotime(date('Y-m-d',strtotime($previous_annual_exam['created'])));

            $previous_annual_exam_diff = (($current_date-$previous_date)/60/60/24);

          }

          // pr($positive_ros_count);
          // pr($cpt_hpi_elements_count);
          // die('xc');

        if(in_array($user_detail['chief_compliant_userdetail']['current_step_id']['id'], [6,16,17]) && $positive_ros_count < 1 && $cpt_pmfsh_count < 1 && $cpt_hpi_elements_count < 1)

        {
            $cpt_code .= '99211 (if 5 minutes), ';
        }

        if(in_array($user_detail['chief_compliant_userdetail']['current_step_id']['id'], [6,16,17]) && $positive_ros_count < 1 && $cpt_pmfsh_count < 1 && $cpt_hpi_elements_count >= 1 && $cpt_hpi_elements_count <= 3)

        {
            $cpt_code .= '99212 (if examine 1+ systems, 1-5 PE elements), ';
        }

        if((in_array($user_detail['chief_compliant_userdetail']['current_step_id']['id'], [1,6,16,17]) || ($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 4 && $cpt_mild_count >= 1)) && $positive_ros_count >= 2 && $positive_ros_count < 10 && $cpt_pmfsh_count >= 1 && ($cpt_hpi_elements_count >= 4 || $cpt_cronic_condition_count >= 3))

        {
            $cpt_code .= '99214 (if examine 2+ systems, 12+ PE elements; or Rx given), ';

        }

        if((in_array($user_detail['chief_compliant_userdetail']['current_step_id']['id'], [6,16,17]) || ($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 4 && $cpt_serve_count >= 1)) && $positive_ros_count >= 10 && $cpt_pmfsh_count >= 2 && ($cpt_hpi_elements_count >= 4 || $cpt_cronic_condition_count >= 3))

        {
            $cpt_code .= '99215 (if examine 9+ systems, 18+ PE elements; or major surgery ordered), ';
        }

        if((in_array($user_detail['chief_compliant_userdetail']['current_step_id']['id'], [6,16,17]) || ($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 4 && empty($user_detail['chief_compliant_userdetail']['medication_side_effects']))) && $positive_ros_count >= 1 && $cpt_pmfsh_count == 0 && $cpt_hpi_elements_count <= 1)

        {
            $cpt_code .= '99213 (if examine 1+ systems, 6-11 PE elements; or PT/OT ordered), ';
        }

        if($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 2 && $positive_ros_count >= 10 && $age >= 18 && $age <= 39 && $previous_annual_exam_diff >= 365 && $cpt_pmfsh_count >= 2 && $cpt_hpi_elements_count >= 4 )
        {

            $cpt_code .= '99395 (if counseling/anticipatory guidance/risk factor reduction interventions), ';
        }

        if($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 2 && $positive_ros_count >= 10 && $age >= 40 && $age <= 64 && $previous_annual_exam_diff >= 365 && $cpt_pmfsh_count >= 2 && $cpt_hpi_elements_count >= 4 )
        {
            $cpt_code .= '99396 (if counseling/anticipatory guidance/risk factor reduction interventions), ';
        }

        elseif($user_detail['chief_compliant_userdetail']['current_step_id']['id'] == 2 && $positive_ros_count >= 10 && $age >= 65 && $previous_annual_exam_diff >= 365 && $cpt_pmfsh_count >= 2 && $cpt_hpi_elements_count >= 4)
        {
            $cpt_code = '99397 (if counseling/anticipatory guidance/risk factor reduction interventions), ';
        }

    }



    $cpt_code = rtrim($cpt_code,', ');



}



//logic for calculate cpt  Assessments/Inventories code

//pr($login_user);die;



$cpt_assessment_code = '';



$previous_phq_9 = $this->ChiefCompliantUserdetails->find('all')->where(['ChiefCompliantUserdetails.id !='=> $user_detail['chief_compliant_userdetail']['id'], 'ChiefCompliantUserdetails.phq_9_detail !='=> null, 'ChiefCompliantUserdetails.phq_9_detail !='=> '']);



$userId = $user_detail['user_id'];

// compare previous appointement user id with the current appointemet user id

$previous_phq_9 = $previous_phq_9->matching('Appointments', function(\Cake\ORM\Query $q) use ($userId) {

        return $q->where(['Appointments.user_id' =>$userId ]);

    });



$previous_phq_9 = $previous_phq_9->order(['ChiefCompliantUserdetails.id' => 'desc'])->first();



$previous_phq_9_diff = 0;

if(!empty($previous_phq_9))

{



    $current_date = strtotime(date('Y-m-d'));

    $previous_date = strtotime(date('Y-m-d',strtotime($previous_phq_9['created'])));

    $previous_phq_9_diff = (($current_date-$previous_date)/60/60/24);

}



if($login_user['guarantor'] == 'health insurance' && (!empty($user_detail->chief_compliant_userdetail->phq_9_detail))){



    $cpt_assessment_code .= '96127, ';

}

if($login_user['guarantor'] == 'medicare' && !empty($user_detail->chief_compliant_userdetail->phq_9_detail) && $previous_phq_9_diff >= 365){



    $cpt_assessment_code .= 'G0444 (if 15 min intervention), ';



}

if($login_user['guarantor'] == 'health insurance'){



    $cpt_assessment_code .= '96160, ';

}

if($login_user['guarantor'] == 'health insurance' && $cpt_dast_available == 1){



    $cpt_assessment_code .= '99408 (if 15-30 min intervention), 99409 (if >30 min intervention), ';

}



$cpt_assessment_code = rtrim($cpt_assessment_code, ', ');



$covid_screening = '';

$covid_layman = '';

$covid_detail_layman = array();
$chronic_pain_assessment_detail_layman = array();

$covid_risk = '';

// Pain management
if(($user_detail->chief_compliant_userdetail->current_step_id->id == 1 || $user_detail->chief_compliant_userdetail->current_step_id->id == 20) && !empty($user_detail->chief_compliant_userdetail->chronic_pain_assessment_tmb) && !empty($user_detail->chief_compliant_userdetail->chronic_pain_assessment_pmh)) {


    $chronic_pain_assessment_detail_layman = $this->chronic_pain_assessment_layman($user_detail,$user_detail->chief_compliant_userdetail->chronic_pain_assessment_tmb,$user_detail->chief_compliant_userdetail->chronic_pain_assessment_pmh,$user_detail->chief_compliant_userdetail->chronic_pain_treatment_history,$user_detail->chief_compliant_userdetail->chronic_pain_curr_treat_history,$user_detail->chief_compliant_userdetail->chronic_pain_past_treat_history,$user_detail->chief_compliant_userdetail->chronic_pain_opioid_overdose_risk,$user_detail->chief_compliant_userdetail->chronic_pain_assessment_ort);


    }

// End Pain management

if(($user_detail->chief_compliant_userdetail->current_step_id->id == 1 || $user_detail->chief_compliant_userdetail->current_step_id->id == 17) && !empty($user_detail->chief_compliant_userdetail->covid_detail)){



    $covid_screening = 0;



    if($user_detail->chief_compliant_userdetail->current_step_id->id == 1){



       foreach ($user_detail->chief_compliant_userdetail->covid_detail as $key => $value) {



            if($value['answer'] == 'Yes' && ($key == 141 || $key == 142)){



                $covid_screening = 1;

                //break;

            }



            if($key == 141 && $value['answer'] == 'Yes'){



                $covid_layman .= 'recent travel to affected geographical areas';

            }



            if($key == 142 && $value['answer'] == 'Yes'){



                $covid_layman .= ', close contact with laboratory-confirmed COVID-19 patient';

            }

        }



        if($covid_screening == 0){



            $hpi .= ' COVID-19 screening is negative. ';

            //$hpi .= $covid_layman;

        }

        else{



            $covid_layman = trim($covid_layman,', ');

            $hpi .= ' COVID-19 screening is positive for '.$covid_layman.'. ';

        }



        $covid_detail_layman = $this->covid_detail_layman($user_detail->chief_compliant_userdetail->covid_detail);

    }



    if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){



        $covid_risk = 'Low';

        $covid_layman = '';



        foreach ($user_detail->chief_compliant_userdetail->covid_detail as $key => $value) {



            switch ($value['question_id']) {

                case 201:



                    if($value['answer'] == 'Yes'){



                      $covid_risk = 'High';

                      $covid_layman .= 'recent international travel, ';

                    }



                    break;



                case 204:



                    if($value['answer'] == 'Yes'){



                      $covid_risk = 'High';

                      $covid_layman .= 'recent domestic travel, ';

                    }

                    break;



                case 207:



                    if($value['answer'] == 'Yes'){



                      $covid_risk = 'High';

                      $covid_layman .= 'exposure to lab-confirmed COVID-19, ';

                    }

                    break;



                case 208:



                   if($value['answer'] == 'Yes'){



                      $covid_risk = 'High';

                      $covid_layman .= 'health care provider or first responder, ';

                    }

                    break;

            }
        }

        $covid_layman = rtrim($covid_layman,', ');

    }

}



//calculate the health exposure risk for covid module (step_id = 17)

$health_risk = '';

$health_layman  = '';

if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){



    $health_risk_score = 0;



    if($age >= 60 && $age < 70){



        $health_risk_score += 1;

    }

    elseif($age >= 70 && $age < 80){



        $health_risk_score += 2;

    }

    elseif($age >= 80){



        $health_risk_score += 4;

    }



    if(!empty($user_detail->chief_compliant_userdetail->focused_history_detail)){



        if(isset($user_detail->chief_compliant_userdetail->focused_history_detail[213])){



            $health_conditions = $user_detail->chief_compliant_userdetail->focused_history_detail[213]['answer'];

            if(in_array("Chronic obstructive pulmonary disease (COPD)", $health_conditions)){



                $health_risk_score += 3;

                $health_layman .= 'COPD, ';

            }

            if(in_array("Heart disease (coronary artery disease)", $health_conditions)){



                $health_risk_score += 4;

                $health_layman .= 'CAD, ';

            }

            if(in_array("High blood pressure (hypertension)", $health_conditions)){



                $health_risk_score += 2;

                $health_layman .= 'HTN, ';

            }

            if(in_array("Diabetes", $health_conditions)){



                $health_risk_score += 2;

                $health_layman .= 'Diabetes, ';

            }

        }



        if(isset($user_detail->chief_compliant_userdetail->focused_history_detail[214]) && $user_detail->chief_compliant_userdetail->focused_history_detail[214]['answer'] == 'Yes'){



            $health_risk_score += 1;

            $health_layman .= 'current smoking';

        }



    }



    if($health_risk_score == 0){



        $health_risk = 'Low';

    }

    elseif($health_risk_score == 1){



        $health_risk = 'Moderate';

    }

    elseif($health_risk_score == 2 || $health_risk_score == 3){



        $health_risk = 'High';

    }

    else{



        $health_risk = 'Very high';

    }

    $health_layman = rtrim($health_layman,', ');

}





$phq_9_layman = '';

$phq_score = '';

if(!empty($user_detail->chief_compliant_userdetail->phq_9_detail) && ($user_detail->chief_compliant_userdetail->current_step_id->id == 1 || $user_detail->chief_compliant_userdetail->current_step_id->id == 2 || $user_detail->chief_compliant_userdetail->current_step_id->id == 17)){



    $phq_score = array_sum($user_detail->chief_compliant_userdetail->phq_9_detail);



    if($user_detail->chief_compliant_userdetail->current_step_id->id == 17){



        if($phq_score >= 2){



            $phq_9_layman = 'PHQ-2 is positive';

        }

        else{



            $phq_9_layman = 'PHQ-2 is negative';

        }

    }

    else

    {

        if($user_detail->chief_compliant_userdetail->current_step_id->id == 1){



            $phq_9_layman .= 'Score is '.$phq_score.", Depression severity is ";

        }

        if($user_detail->chief_compliant_userdetail->current_step_id->id == 2){



            $phq_9_layman .= 'The PHQ-9 score is '.$phq_score.". Depression severity is ";

        }





        if($phq_score <= 4){



            $phq_9_layman  .= 'Minimal or none: Monitor; may not require treatment';

        }

        elseif($phq_score >= 5 && $phq_score <= 9)

        {



            $phq_9_layman  .= 'Mild: Use clinical judgment (symptom duration, functional impairment) to determine necessity of treatment';

        }

        elseif($phq_score >= 10 && $phq_score <= 14)

        {



            $phq_9_layman  .= 'Moderate: Use clinical judgment (symptom duration, functional impairment) to determine necessity of treatment';

        }

        elseif($phq_score >= 15 && $phq_score <= 19)

        {



            $phq_9_layman  .= 'Moderately severe: Warrants active treatment with psychotherapy, medications, or combination';

        }

        elseif($phq_score >= 10 && $phq_score <= 27)

        {



            $phq_9_layman  .= 'Severe: Warrants active treatment with psychotherapy, medications, or combination';

        }

    }



    $phq_9_layman = rtrim($phq_9_layman,', ').'. ';

}



if($user_detail->chief_compliant_userdetail->current_step_id->id == 2){

    $hpi .= ' '.$phq_9_layman;

}



if(!empty($hpi)){

    $hpi = $this->sentence_uppercase($hpi);

    $hpi = str_replace(['y. O. Male','y. O. Female'], ['y.o. male','y.o. female'],$hpi);

}

$cronic_subjective_text_detail = $this->chronic_condition_subjective($user_detail->chief_compliant_userdetail,$positive_symptom,$negative_symptom,$meds);

$cancer_layman_detail = $this->cancer_layman($user_detail->chief_compliant_userdetail, $login_user->gender);
$pre_op_post_op_detial_res = $this->pre_op_post_op_detail_layman($user_detail->chief_compliant_userdetail,$login_user->gender);
$oncologyfollowup = $this->oncology_follow_up_detail_layman($user_detail->chief_compliant_userdetail,$login_user->gender);
$em_line = '<strong>Recommended E/M CPT Code:</strong> '.$cpt_code.(!empty($text_condition) ? '(if '.$text_condition.')' : "")."\n<strong>Other Codes:</strong> ".$cpt_assessment_code."\n<strong>Insurance information:</strong> ".$login_user['guarantor'];

//$line1 = 'Patient: '.h(ucfirst($login_user->last_name)).', '.h(ucfirst($login_user->first_name))."\nDOB: ".($login_user->dob->i18nFormat('MM/dd/yyyy')  )."\nAge: ".$age."\nSex: ".($login_user->gender == 1 ? 'M' : 'F') ;
$company_name = '';
$informant_present = '';
$RaceValue = array('1' =>'American Indian or Alaska Native','2' =>'Asian', '3' => 'Black or African American', '4' =>'Native Hawaiian or Other Pacific Islander', '5' =>'White' , '6' =>'Other Race');
$ethinicityValue = array('1' =>'Hispanic or Latino', '2' =>'Not Hispanic or Latino');

$patient_name = h(ucfirst($login_user->last_name)).', '.h(ucfirst($login_user->first_name));
$patient_dob = date('m-d-Y',strtotime($login_user->dob));
$patient_gender = ($login_user->gender == 0 ? 'FEMALE' : 'MALE');
$patient_race = !empty($login_user->clinical_race) ? $RaceValue[$login_user->clinical_race] : "";
$patient_ethinicity = !empty($login_user->clinical_ethnicity) ? $ethinicityValue[$login_user->clinical_ethnicity] : "";
$date_of_service = date('Y-m-d H:i',strtotime($user_detail->chief_compliant_userdetail->created));

$lineA = '<strong>Patient:</strong> '.$patient_name."\n<strong>MRN:</strong> ".$mrn;
$lineB = "<strong>DOB:</strong> ".$patient_dob."\n<strong>Gender:</strong> ".$patient_gender;
$lineC = "<strong>SSN:</strong> XXX-XX-XXXX\n<strong>Race:</strong> ".$patient_race."\n<strong>Ethnicity:</strong> ".$patient_ethinicity."\n<strong>Preferred Pharmacy:</strong> ".(!empty($login_user->pharmacy) ? $login_user->pharmacy : "");
$lineD = '<strong>Date of Service:</strong> '.$date_of_service;
$lineE = "<strong>Type of Service:</strong> Office or Other Outpatient Services";


$lineF = (empty($company_name) ? "" : "<strong>Informant/Present:</strong> ".rtrim(strtolower($company_name),', ')." \n  \n");
    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [26,27])){
        $all_inf_pre = array();
        $all_inf_pre = $user_detail->chief_compliant_userdetail->chief_complaint_psychiatry[614]['answer'] ? $user_detail->chief_compliant_userdetail->chief_complaint_psychiatry[614]['answer']:'';
        $informant_present .= (empty($user_detail->chief_compliant_userdetail->chief_complaint_psychiatry[614]) ? "" : $this->natural_word_join($all_inf_pre));
        $informant_present .= (empty($user_detail->chief_compliant_userdetail->chief_complaint_psychiatry[615]) ? "" :($informant_present ? ' and ' : ''). $user_detail->chief_compliant_userdetail->chief_complaint_psychiatry[615]['answer']);

        $lineF .= "<strong>Informant/Present:</strong> ".(empty($informant_present) ? "none provided" : $informant_present)."\n \n";
    }

$patient_basic_detail .= $lineA."\n";
$patient_basic_detail .= $lineB."\n";
$patient_basic_detail .= $lineC."\n";
$patient_basic_detail .= $lineD."\n";
$patient_basic_detail .= $lineE."\n";
$patient_basic_detail .= $lineF."\n";
$cnt = 1;

$document_section = array();
$section_text = '' ;
if($user_detail->chief_compliant_userdetail->current_step_id->id == 4)
{
    if(!empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details) && isset($user_detail->chief_compliant_userdetail->medication_refill_extra_details['padt']) && isset($user_detail->chief_compliant_userdetail->medication_refill_extra_details['dast']))
    {

        $coming_in_for = 'management of chronic pain and '.$coming_in_for;
    }
}

//update fh for chronic conditions module
if(isset($cronic_subjective_text_detail['fh_cond']) && !empty($cronic_subjective_text_detail['fh_cond'])){

    $family_history = array();
    $family_relation = [1=>'F', 2=>'M', 3=>'PGM', 4=>'PGF', 5=>'MGM', 6=>'MGF', 7=>'Brother', 8=>'Sister', 9=>'Son', 10=>'Daughter',11 =>"Cousin(mom's side)",12 =>"Cousin(dad's side)",13 =>"Aunt(mom's side)",14 =>"Aunt(dad's side)",15=>"Uncle(mom's side)",16 =>"Uncle(dad's side)"];
    if(!empty($login_user->family_history)){

        $family_history = unserialize((Security::decrypt(base64_decode($login_user->family_history), SEC_KEY)));
    }
    //pr($cronic_subjective_text_detail);die;
    if(empty($family_history)){

        foreach ($cronic_subjective_text_detail['fh_cond'] as $key => $value) {

            if(isset($value['members']) && !empty($value['members']) && is_array($value['members'])){

              foreach ($value['members'] as $fkey => $fvalue) {

                $temp_fh = $fvalue.' - ';
                $temp_fh .= $value['name'];
                $fh[] = $temp_fh;
              }
            }
            else{

                $temp_fh = $value['name'];
                $fh[] = $temp_fh;
            }
        }

    }
    else{

        $temp_chronic_fh = array_column($family_history, 'disease');

        foreach ($cronic_subjective_text_detail['fh_cond'] as $key => $value) {

            $temp_fh_cond_key = array_search($value['name'], $temp_chronic_fh);

            if($temp_fh_cond_key === false || (isset($value['members']) && $temp_fh_cond_key !== false && $value['members'] != $family_history[$temp_fh_cond_key]['name'])){

                if(isset($value['members']) && !empty($value['members']) && is_array($value['members'])){

                  foreach ($value['members'] as $fkey => $fvalue) {

                    $temp_fh = $fvalue.' - ';
                    $temp_fh .= $value['name'];
                    $fh[] = $temp_fh;
                  }
                }
                else{

                    $temp_fh = $value['name'];
                    $fh[] = $temp_fh;
                }
            }
        }
    }
}

if(isset($cronic_subjective_text_detail['sh_layman'])){

    $sh = $cronic_subjective_text_detail['sh_layman'].''.$sh;
   // $sh = $cronic_subjective_text_detail['sh_layman'];
    $sh = str_replace(". aerobic", ". Aerobic", $sh);
    $sh = str_replace(". patient", ". Patient", $sh);
}

if(isset($cronic_subjective_text_detail['med_layman'])){

    $meds = (!empty($cronic_subjective_text_detail['med_layman']) ? $cronic_subjective_text_detail['med_layman'].', ': '').$meds;
    $meds = rtrim($meds,', ');
}

if(isset($cancer_layman_detail['fh_negative']) && !empty($cancer_layman_detail['fh_negative'])){

    $temp_fh = "Denies ".$cancer_layman_detail['fh_negative'];
    array_push($fh, $temp_fh);
}


//declare all required variable for generate note headers and process here first

$cc_section = "";
$subjective_section = "";
$hpi_section = "";
$reason_for_visit_section = "";
$cc_hpi_section = "";
$sti_severe_sym_section = "";
$sti_moderate_sym_section = "";
$sti_mild_sym_section = "";
$sti_neg_sym_section = "";
$high_qol_section = "";
$avg_qol_section = "";
$low_qol_section = "";
$cipn_grade4_section = "";
$cipn_grade3_section = "";
$cipn_grade2_section = "";
$cipn_grade1_section = "";
$cipn_grade0_section = "";
$treatment_hx_section = "";
$preventative_health_section = "";

$exposure_risk_section = "";
$mortality_risk_section = "";
$domestic_risk_section = "";
$m_m_comorbidities_section = "";
$phq_9_section = "";
$gyn_hx_section = "";
$ehr_hpi_arr = [];
$basicDetails = array();
$medicalDetails = array();
$rosDetail = array();
$covid19EhrNote = array();

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 1 && !empty($covid_detail_layman))
{
        $dom_cluster_covid = '';
        if(!empty($covid_detail_layman['positive_sym'])){
            $dom_cluster_covid .= 'Significant for '.$covid_detail_layman['positive_sym'].'. ';
        }
        if(!empty($covid_detail_layman['negative_sym'])){
            $dom_cluster_covid .= 'Denies '.$covid_detail_layman['negative_sym'].'. ';
        }

        $comorbidities_covid = '';
        $temp_comob = array();
        if(!empty($covid_detail_layman['positive_cond'])){
            $comorbidities_covid .= 'Significant for '.$covid_detail_layman['positive_cond'].'. ';
            $temp_comob = explode(", ",$covid_detail_layman['positive_cond']);
        }
        if(!empty($covid_detail_layman['negative_cond'])){
            $comorbidities_covid .= 'Denies '.$covid_detail_layman['negative_cond'].'. ';
        }
        $covid_exposure_risk = '';
        if(empty($covid_detail_layman['positive_sym']) && $covid_screening == 0){
            $covid_exposure_risk = 'Low';
        }
        elseif(!empty($covid_detail_layman['positive_sym']) || $covid_screening == 1)
        {
            $covid_exposure_risk = 'High';
        }

        $covid_mortality_risk = '';

        if($age < 60 && count($temp_comob) < 1 && $covid_detail_layman['is_user_current_smoke'] == 'No'){
            $covid_mortality_risk = 'Low';
        }
        elseif(count($temp_comob) < 1 && (($age >= 60 && $age < 80) || ($age < 60 && $covid_detail_layman['is_user_current_smoke'] == 'Yes')) ){
            $covid_mortality_risk = 'Moderate';
        }
        elseif((count($temp_comob) >= 1 || $covid_detail_layman['is_user_current_smoke'] == 'Yes') && $age >= 80){
            $covid_mortality_risk = 'Very High';
        }
        elseif(count($temp_comob) >= 1 || $age >= 80 || ($age >= 60 && $age < 80 && $covid_detail_layman['is_user_current_smoke'] == 'Yes')){
            $covid_mortality_risk = 'High';
        }

        $exposure_risk_section = $covid_exposure_risk;
        $mortality_risk_section = $covid_mortality_risk;
        $domestic_risk_section = $dom_cluster_covid;
        $m_m_comorbidities_section = $comorbidities_covid;
        $phq_9_section = $phq_9_layman;

    }

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 4){

    $subjective_section = $hpi;
}


if($user_detail->specialization_id == 6 && ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 11 ) || ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 12 && $user_detail->chief_compliant_userdetail->follow_up_step_id == 11))
{
    $reason_for_visit_section = empty($procudure_name) && empty($procedure_date) ? "" : $procudure_name." day ".$procudure_since_date;
    $subjective_section = $subjective;

}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 16)
{
    $reason_for_visit_section = empty($follow_up_sx_detial_res['all_cc_name']) ? "" : "f/u ".$follow_up_sx_detial_res['all_cc_name'] ;
    $subjective_section = $follow_up_sx_detial_res['layman_summar'];
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 17)
{
    $covid_subjective_detail = $this->covid_module_subjective($user_detail->chief_compliant_userdetail);
    $subjective = "This is a ";
    if($covid_subjective_detail['is_pregnate'] == 1)
    {
        $subjective .= "currently pregnant ";
    }

    $subjective .= $age." y.o. ".($login_user->gender == 0 ? 'F ': "M ");
    $subjective .= $covid_subjective_detail['layman_summar'];
    $subjective .= $covid_associated_symp;
    $subjective .= $phq_9_layman;

    $hpi_section = $subjective;
    $cc_section = rtrim(strtolower($all_cc_name),', ');
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 18 || $user_detail->chief_compliant_userdetail->current_step_id['id'] == 25)
{
    $chronic_cond_name = (str_replace("DMII", 'DM',strtoupper(is_array($user_detail->chief_compliant_userdetail->chronic_condition) ? implode(", ", $user_detail->chief_compliant_userdetail->chronic_condition) : $user_detail->chief_compliant_userdetail->chronic_condition)));

    $all_chronic_cond_name = array('htn','cad','copd','asthma','dmii');
    $neg_chronic_cond_name_arr = array_diff($all_chronic_cond_name,$user_detail->chief_compliant_userdetail->chronic_condition);
    $neg_chronic_cond_name = (str_replace("DMII", 'DM',strtoupper(is_array($neg_chronic_cond_name_arr) ? implode(", ", $neg_chronic_cond_name_arr) : '')));
    $ethinicity_trans = array(

        0 => 'asian',
        1 => 'caucasian',
        2 => 'hispanic',
        3 => 'pacific',
        4 => 'native american',
        5 => 'african american',
        9 => 'prefer not to say'
    );
    $ethinicity = !empty($login_user->ethinicity) && isset($ethinicity_trans[$login_user->ethinicity]) ? ucfirst($ethinicity_trans[$login_user->ethinicity]) : '';
    $cronic_subjective_text ='';
    $cronic_subjective_text .= h(ucfirst($login_user->first_name)).' is a '.$age." y.o. ".(!empty($ethinicity) ? $ethinicity.' ' : '').($login_user->gender == 0 ? 'female': "male");
    if(!empty($pmh)){

        $cronic_subjective_text .= ' with a PMH significant for '.$pmh;
    }
    if(isset($cronic_subjective_text_detail['layman_summar'])){

        $cronic_subjective_text .= ' '.$cronic_subjective_text_detail['layman_summar'];
    }
    $cronic_subjective_text = str_replace(["dmii","Dm"], ['DM','DM'], $cronic_subjective_text);


    $subjective_section = $cronic_subjective_text;
    $reason_for_visit_section = "f/u ".$chronic_cond_name." management.";
    $cc_section = rtrim(strtolower($all_cc_name),', ');

}



if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19){


    $temp_cancer_hpi = "This is a ".$age." y.o. ".($login_user->gender == 0 ? "female" : 'male')." ";
    $cancer_hpi = $temp_cancer_hpi.$cancer_layman_detail['hpi'];
    if(!empty($cancer_layman_detail['ehr_hpi_arr']) && isset($cancer_layman_detail['ehr_hpi_arr'][0])){

        $cancer_layman_detail['ehr_hpi_arr'][0] = $temp_cancer_hpi.$cancer_layman_detail['ehr_hpi_arr'][0];
    }

    if(!empty($women_field) && isset($women_field->age_of_first_priod) && !empty($women_field->age_of_first_priod)) {

        $temp_menarche = "Menses at ".$women_field->age_of_first_priod.". ";
        $cancer_layman_detail['gyn_hx'] = str_replace("menarche ", $temp_menarche, $cancer_layman_detail['gyn_hx']);
    }
    else{

        $cancer_layman_detail['gyn_hx'] = str_replace("menarche ", "", $cancer_layman_detail['gyn_hx']);
    }

    $gyn_hx_section = $cancer_layman_detail['gyn_hx'];

    $ehr_hpi_arr = $cancer_layman_detail['ehr_hpi_arr'];
    $cancer_hpi = trim($cancer_hpi,' ');
    $cc_section = ucfirst($cancer_layman_detail['cancer_cc']);
    $hpi_section = $cancer_hpi;
    $sti_severe_sym_section = $cancer_layman_detail['sti_severe_sym'];
    $sti_moderate_sym_section = $cancer_layman_detail['sti_moderate_sym'];
    $sti_mild_sym_section = $cancer_layman_detail['sti_mild_sym'];
    $sti_neg_sym_section = $cancer_layman_detail['sti_neg_sym'];

    $high_qol_section = $cancer_layman_detail['sti_high_qol'];
    $avg_qol_section = $cancer_layman_detail['sti_avg_qol'];
    $low_qol_section = $cancer_layman_detail['sti_low_qol'];
    $cipn_grade4_section = $cancer_layman_detail['chemo_threatening'];
    $cipn_grade3_section = $cancer_layman_detail['chemo_severe'];
    $cipn_grade2_section = $cancer_layman_detail['chemo_moderate'];
    $cipn_grade1_section = $cancer_layman_detail['chemo_mild'];
    $cipn_grade0_section = $cancer_layman_detail['chemo_none'];
    $treatment_hx_section = $cancer_layman_detail['treatment_hx'];
}

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 20){

    $pre_op_post_op_subjective_text = (empty($pre_op_post_op_detial_res['layman_summar']) ? "none provided" : $login_user->first_name.' is a who is following up '.$pre_op_post_op_detial_res['layman_summar']);

    $reason_for_visit_section = $pre_op_post_op_detial_res['reason_for_visit'];
    $subjective_section = $pre_op_post_op_subjective_text;
}


if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 21){

    if(!empty($cancer_followup_positive_ROS)){

        $oncologyfollowup['layman_summar'] = $oncologyfollowup['layman_summar']." ROS is significant for ".(implode(", ", $cancer_followup_positive_ROS)).".";
    }

    if(!empty($cancer_followup_negative_ROS)){

        $oncologyfollowup['layman_summar'] = $oncologyfollowup['layman_summar']." Denies ".(implode(", ", $cancer_followup_negative_ROS)).". ";
    }

    $subjective_section = $hpi." ".$oncologyfollowup['layman_summar'];

    if(!empty($women_field) && isset($women_field->age_of_first_priod) && !empty($women_field->age_of_first_priod)) {

        $temp_menarche = "Menses at ".$women_field->age_of_first_priod.". ";
        $oncologyfollowup['gyn_hx'] = str_replace("menarche ", $temp_menarche, $oncologyfollowup['gyn_hx']);
    }
    else{
        $oncologyfollowup['gyn_hx'] = str_replace("menarche ", "", $oncologyfollowup['gyn_hx']);
    }
    $gyn_hx_section = $oncologyfollowup['gyn_hx'];
    $sti_severe_sym_section = $oncologyfollowup['sti_severe_sym'];
    $sti_moderate_sym_section = $oncologyfollowup['sti_moderate_sym'];
    $sti_mild_sym_section = $oncologyfollowup['sti_mild_sym'];
    $sti_neg_sym_section = $oncologyfollowup['sti_neg_sym'];

    $high_qol_section = $oncologyfollowup['sti_high_qol'];
    $avg_qol_section = $oncologyfollowup['sti_avg_qol'];
    $low_qol_section = $oncologyfollowup['sti_low_qol'];
    $cipn_grade4_section = $oncologyfollowup['chemo_threatening'];
    $cipn_grade3_section = $oncologyfollowup['chemo_severe'];
    $cipn_grade2_section = $oncologyfollowup['chemo_moderate'];
    $cipn_grade1_section = $oncologyfollowup['chemo_mild'];
    $cipn_grade0_section = $oncologyfollowup['chemo_none'];
    $treatment_hx_section = $oncologyfollowup['treatment_hx'];
    $preventative_health_section = $oncologyfollowup['preventative_health'];
}
// Hospital er detail subject and reason
if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 22){

    $hospital_er_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->hospital_er_detail), SEC_KEY));
    //pr($hospital_er_detail); die;
    $reason_for_visit_section = empty($hospital_er_detail[516]) ? "" : "f/u ".($hospital_er_detail[516] == "Hospital stay (inpatient)" ? "hospital dx" : "ed visit") ;
    $subjective_section = h(ucfirst($login_user->first_name)).' is a '.$age.' y.o.'.($login_user->gender == 1 ? ' MALE' : ' FEMALE')." here for f/u from ";
    if($hospital_er_detail[516] == "Emergency room visit only")
    {
        $subjective_section .= $hospital_er_detail[525].". ";                
        $subjective_section .= "Patient went to the ED at ".$hospital_er_detail[523].' on '.$hospital_er_detail[524].' for '.$hospital_er_detail[525].'. ';
        switch ($hospital_er_detail[527]) {
            case 'Yes':
                $subjective_section .= "Procedures were performed according to the patient".'. ';
                break;
                case 'No':
                $subjective_section .= "No procedure were performed according to the patient".'. ';
                break;
            
            default:
                
                $subjective_section .= "Patient does not recall if any procedures were performed".'. ';
                break;
        }
        switch ($hospital_er_detail[526]) {
            case 'Yes':
                $subjective_section .= "Lab tests were performed according to the patient".'. ';
                break;
                case 'No':
                $subjective_section .= "No test were done according to the patient".'. ';
                break;
            
            default:
                
                $subjective_section .= "Patient does not recall if any tests were performed".'. ';
                break;
        }
        
    }
    else if($hospital_er_detail[516] == "Hospital stay (inpatient)")
    {   
        $subjective_section .= $hospital_er_detail[520].". ";
        $subjective_section .= "Patient was admitted to ".$hospital_er_detail[517].' on '.$hospital_er_detail[518].' for '.$hospital_er_detail[520].'. ';
        switch ($hospital_er_detail[521]) {
            case 'Yes':
                $subjective_section .= "Procedures were performed according to the patient".'. ';
                break;
                case 'No':
                $subjective_section .= "No procedure were performed according to the patient".'. ';
                break;
            
            default:
                
                $subjective_section .= "Patient does not recall if any procedures were performed".'. ';
                break;
    }
    $subjective_section .= "Patient was discharged on ".$hospital_er_detail[519].'. ';
    }
}


// end
// ObGyn Dysurea module
    if(in_array($user_detail->specialization_id,[1,2]) && ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 1 )){

      $coming_in_for = strtolower(trim($user_detail->chief_compliant_userdetail->current_step_id->step_name)) ;
        if(!empty($tmp->is_curently_pregnant))

        $curr_preg_info =   ($tmp->is_curently_pregnant == 1 ? 'currently pregnant ' : 'not currently pregnant ');

        $hpi = h(ucfirst($login_user->first_name)).' is a '.(!empty($curr_preg_info) && $login_user->gender == 0 ? $curr_preg_info : '').$age.' y.o.'.($login_user->gender == 1 ? ' MALE' : ' FEMALE');

        if(stripos($coming_in_for, 'symptom') !== false){  // if the person is coming in for symptom complaint

        $cc = strtolower($cc);

            $hpi .= ' with complaints of '.$cc.' for '.h($user_detail->chief_compliant_userdetail->compliant_length).'.' ;

        }
        //pr($temp_obgyn_question = $user_detail->chief_compliant_userdetail->chief_compliant_details[116]); die;
        if(isset($user_detail->chief_compliant_userdetail->chief_compliant_details[116]))
            {
                $temp_obgyn_question = $user_detail->chief_compliant_userdetail->chief_compliant_details[116];

                foreach ($temp_obgyn_question as $cc_key => $cc_value)
                {
                        if(in_array($cc_value['question_id'], [182])){
                            if($cc_value['answer'] == "Yes") {
                                    $hpi .= ($login_user->gender == 1 ? ' He' : ' She')." is sexually active with "; 
                            }
                            else
                            {
                                    $hpi .= ($login_user->gender == 1 ? ' He' : ' She')." is not sexually active.";
                            }

                              
                        }
                        if(in_array($cc_value['question_id'], [183])){
                            if(!empty($cc_value['answer'])) {
                            
                                    $hpi .= $cc_value['answer']." sexual partner(s) in 2 month and";
                                }
                              
                        }
                        if(in_array($cc_value['question_id'], [184])){
                            if($cc_value['answer'] == "No") {
                                    $hpi .= " does not use condemns.";
                            }
                              
                        }
                        if(in_array($cc_value['question_id'], [185])){
                                if($cc_value['answer'] == "Always")
                                { 
                                $hpi .= " uses condemns consistently.";
                                }
                                elseif($cc_value['answer'] == "Sometimes")
                                {
                                    $hpi .= " uses condemns inconsistently.";
                                }
                            }

                }

            }
            // For Associated symptomps
            $positive_python_symp = '';
            $negative_python_symp = '';
            $positive_python_symp_arr = array();
            $negative_python_symp_arr = array();
            if(!empty($user_detail->chief_compliant_userdetail->python_file_option_3rd_tab))
            {
                $python_symptom_question = unserialize((Security::decrypt(base64_decode($user_detail->chief_compliant_userdetail->python_file_option_3rd_tab), SEC_KEY)));
                if(!empty($python_file_option_3rd_tab[1]))
                {
                    foreach ($python_file_option_3rd_tab[1] as $key => $value) {
                        $positive_python_symp_arr[] = $value['technical'];
                    }
                    $positive_python_symp = implode(', ', $positive_python_symp_arr);
                    $hpi .= " Associated symptoms include ".$positive_python_symp.'.';
                }
                if(!empty($python_file_option_3rd_tab[0]))
                {
                    foreach ($python_file_option_3rd_tab[0] as $key => $value) {
                        $negative_python_symp_arr[]= $value['technical'];
                    }
                    $negative_python_symp = implode(', ', $negative_python_symp_arr);
                    $hpi .= " Denies ".$negative_python_symp.'.';
                    
                }
            }
            // End associated symptoms

    }
    // End

//start set note headers

// note_format = full(ipatientcare), note_format = abbr(defualt), note_format = ehr(send note in ehr api)

//generate the default note

//generate the ipatient care note



    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [17,19,21])){

        $section_text .= "<strong>CC:</strong> ".(empty($cc_section) ? "none provided" : $cc_section)."\n \n";
    }
    else
    {
        if(!in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [18,19])){

            $section_text .= "<strong>CHIEF COMPLAINT:</strong> ".(empty($coming_in_for) ? "" : "The patient is here for ".$coming_in_for)." \n";
        }
    }

    if($login_user->gender == 0 && !in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [17,18,19])){

        $section_text .= "<strong>BMI:</strong> ".(empty($bmi) ? "none provided" : $bmi)." \n \n";
    }

    //reason for visit section

    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [16,18,20,11,25]) || ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 12 && $user_detail->chief_compliant_userdetail->follow_up_step_id == 11)){

        $section_text .= "<strong>REASON FOR VISIT:</strong> ".(empty($reason_for_visit_section) ? "none provided" : $reason_for_visit_section)." \n";

        $noteReasonforVisit = (empty($reason_for_visit_section) ? "none provided" : $reason_for_visit_section);


    }

    //subjective header

    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [4,16,18,20,11,21,25]) || ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 12 && $user_detail->chief_compliant_userdetail->follow_up_step_id == 11)){

        $section_text .= "<strong>SUBJECTIVE:</strong> ".(empty($subjective_section) ? "none provided" : $subjective_section)." \n\n";
    }


    //hpi header

    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [17,19])){

        $section_text .= "<strong>HPI:</strong> ".(empty($hpi_section) ? "none provided" : $hpi_section)." \n";
    }

    //assessments and CIPN headers

    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [19,21])){

        $section_text .= "<strong>Assessments:</strong> \n ";
        $section_text .= "<strong>SIT:</strong> \n&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>Symptoms:</strong> \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>Severe:</strong> ".(empty($sti_severe_sym_section) ? "" : $sti_severe_sym_section)."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>Moderate:</strong> ".(empty($sti_moderate_sym_section) ? "" : $sti_moderate_sym_section)."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>Mild:</strong> ".(empty($sti_mild_sym_section) ? "" : $sti_mild_sym_section)."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>Negative:</strong> ".(empty($sti_neg_sym_section) ? "" : $sti_neg_sym_section)."\n&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>QOL:</strong> \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>High:</strong> ".(empty($high_qol_section) ? "" : $high_qol_section)."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>Average:</strong> ".(empty($avg_qol_section) ? "" : $avg_qol_section)."\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        $section_text .= "<strong>Low:</strong> ".(empty($low_qol_section) ? "" : $low_qol_section)."\n \n";


        if(!empty($cipn_grade0_section) || !empty($cipn_grade1_section) || !empty($cipn_grade2_section) || !empty($cipn_grade3_section) || !empty($cipn_grade4_section)){
           
            $section_text .= "<strong>CIPN:</strong> \n&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Grade 4:</strong> ".(empty($cipn_grade4_section) ? "" : $cipn_grade4_section)."\n&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Grade 3:</strong> ".(empty($cipn_grade3_section) ? "" : $cipn_grade3_section)."\n&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Grade 2:</strong> ".(empty($cipn_grade2_section) ? "" : $cipn_grade2_section)."\n&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Grade 1:</strong> ".(empty($cipn_grade1_section) ? "" : $cipn_grade1_section)."\n&nbsp;&nbsp;&nbsp;";
            $section_text .= "<strong>Grade 0:</strong> ".(empty($cipn_grade0_section) ? "" : $cipn_grade0_section)."\n \n";
        }
    }


    //medication header and Treatment Hx
    if(in_array($user_detail->specialization_id,[1,2]) && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 1)
    {
        $section_text .= "<strong>MEDS:</strong> ".(empty($meds) ? "none provided" : $meds)." \n  \n";
    }
    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [19,21])){

        $section_text .= "<strong>MEDS:</strong> ".(empty($meds) ? "none provided" : $meds)." \n";
        $section_text .= "<strong>Treatment Hx:</strong> ".(empty($treatment_hx_section) ? "none provided" : $treatment_hx_section)." \n";
    }

    //Preventative Health
    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [21])){

        $section_text .= "<strong>Preventative Health:</strong> ".(empty($preventative_health_section) ? "none provided" : $preventative_health_section)." \n";
    }


    //COVID-19 Screening Tool header
    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [1])){

        $section_text .= "<strong>COVID-19 Screening Tool:</strong>\n ";
        $section_text .= "<strong>Exposure Risk:</strong> ".$exposure_risk_section."\n ";
        $section_text .= "<strong>Mortality Risk:</strong> ".$mortality_risk_section."\n ";
        $section_text .= "<strong>Domestic Cluster Exposure:</strong> ".(empty($domestic_risk_section) ? "none provided" : $domestic_risk_section)."\n ";
        $section_text .= "<strong>M&M Comorbidities:</strong> ".(empty($m_m_comorbidities_section) ? "none provided" : $m_m_comorbidities_section)."\n ";
        $section_text .= "<strong>PHQ-9:</strong> ".(empty($phq_9_section) ? "none provided" : $phq_9_section)."\n \n";

        $covid19exposure_risk_section = "Exposure Risk:".$exposure_risk_section;
        $covid19mortality_risk_section = "Mortality Risk:".$exposure_risk_section;
        $covid19domestic_risk_section = "Domestic Cluster Exposure:".(empty($domestic_risk_section) ? "none provided" : $domestic_risk_section);
        $covid19m_m_comorbidities_section = "M&M Comorbidities:".(empty($m_m_comorbidities_section) ? "none provided" : $m_m_comorbidities_section);
        $covid19PHQ9 = "PHQ-9:".(empty($phq_9_section) ? "none provided" : $phq_9_section);

        $covid19EhrNote = array($covid19exposure_risk_section,$covid19mortality_risk_section,$covid19domestic_risk_section,$covid19m_m_comorbidities_section,$covid19PHQ9);




    }
    // Negative collection of PMH Oncology
    $negpmh = '';
    $domInter_sh = '';
    if($user_detail->chief_compliant_userdetail->current_step_id['id']  == 19)
    {

        if(!empty($user_detail->chief_compliant_userdetail->cancer_medical_detail))
        {
            //pr($user_detail->chief_compliant_userdetail->cancer_medical_detail); die;
            foreach ($user_detail->chief_compliant_userdetail->cancer_medical_detail as $key => $value) {
                //pr($value); die;
               if(in_array($key, [528,529,530,531,532,533,534,535,536,537]) && $value['answer'] == "No")  
               {
                    $negpmh .= ($negpmh ? ", " :'').$value['question'];
               }
            }
            // SH TYpe Question Note
            foreach ($user_detail->chief_compliant_userdetail->cancer_medical_detail as $key => $value) {
               if(in_array($key, [538,539,540,541,542,543]))  
               {    
                    switch ($key) {
                            case 538:
                            $domInter_sh .= ($value['answer'] == "Yes" ? "Significant for recent domestic travel." : "Denies recent domestic travel.");
                            break;
                            case 539:
                            $domInter_sh .= $value['answer'] == "Yes" ? " Significant for recent international travel" : " Denies recent international travel.";

                            break;
                            case 540:
                            $domInter_sh .= $value['answer'] == "Yes" ? " Zika" : "";
                            $is_int_tra = $value['answer'] == "Yes" ? 1:'';
                            break;
                            case 541:
                            $domInter_sh .= ($value['answer'] == "Yes" &&  $is_int_tra == 1 ? ", Ebola" :($value['answer'] == "No" ? '':' Ebola'));
                            $is_int_tra = $value['answer'] == "Yes" ? 2:'';
                            break;
                            case 542:
                            $domInter_sh .= ($value['answer'] == "Yes" &&  $is_int_tra == 2) ? ". Contact with lab confirmed Ebola in past 30 days" : ($value['answer'] == "No" ? ".  Denies contact with lab confirmed Ebola in past 30 days" :'');
                            break;
                            case 543:
                            $domInter_sh .= $value['answer'] == "Yes" ? ". Sexual activity with international residents in past 6 months." :". Denies sexual activity with international residents in past 6 months.";
                            break;
                        
                        default:
                            break;
                    }
                    
               }
            }
            // End SH TYpe Question Note
        }
      
    }
    //  End negtaive PMH Oncology
    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [19,21])){

        // Add Negative PMH ONcology with Positive PMH For  19 current_step_id

        if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19)
        {
            if(!empty($negpmh))
            {
                $pmh .= ($pmh ? ". ":'')."Denies ".$negpmh.'.';
            }
            // SH TYpe Question Note
            if(!empty($domInter_sh))
            {
                $sh .= ($sh ? ". ":'').$domInter_sh;
            }
            // End SH TYpe Question Note
        }
        // End Adding PMH Oncology        
        $section_text .= "<strong>PMH:</strong> ".(empty($pmh) ? "none provided" : $pmh )." \n";
        $section_text .= "<strong>SH:</strong> ".(empty($sh) ? "none provided" : $sh )." \n";
        $section_text .= "<strong>PSH:</strong> ".(empty($psh) ? "none provided" : $psh )." \n";
        $section_text .= "<strong>FH:</strong> ";
        if(!empty($fh)){            
            $i = 1;
            $count_fh = count($fh);
            foreach ($fh as $key => $value) {
                $section_text .= $value;
                if($i < $count_fh)
                {
                    $section_text .=" \n ";
                }
                $i++;
            }
            $section_text .= $section_text;
            $section_text .= "  \n \n";
        }else{
            $section_text .= "none provided \n " ;
        }
    }


    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [18,25])){
    $section_text .= "<strong>CC:</strong> ".(empty($chronic_cond_name) ? "none provided" : ucfirst($chronic_cond_name))."\n";
    }



    if(!in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [19,21])){


        $section_text .= $user_detail->chief_compliant_userdetail->current_step_id['id'] == 17 ? "\n<strong>PMFSH:</strong> \n " : "\n<strong>PFSH:</strong> \n ";
        // Internal medicine module nutrition 
    $pos_int_nutri = "";
    $neg_int_nutri = "";
    $WATERFREQ = "";
    $DECAFSODAFREQ = "";
    $CAFSODAFREQ = "";
    $JUICEFREQ = "";
    $CAFTEAFREQ = "";
    $DECAFTEAFREQ = "";
    $SMOOTHIEFREQ = "";
    $MILKFREQ = "";
    $pertPosPmhRawFormat = array();
    $pertNegPmhRawFormat = array();
    $pertPosFhRawFormat = array();
    $pertNegFhRawFormat = array();
    if(!empty($chronic_cond_name))
    {
        $pertPosPmhRawFormat = explode(', ', $chronic_cond_name);
    }
    if(!empty($neg_chronic_cond_name))
    {
        $pertNegPmhRawFormat = explode(', ', $neg_chronic_cond_name);
    }
    //pr($pertPosPmhRawFormat); die;
    if($user_detail->chief_compliant_userdetail->current_step_id['id']  == 25)
    {
        //pr($user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail);die;
        //pr($user_detail->chief_compliant_userdetail->cancer_medical_detail); die;
        if(!empty($user_detail->chief_compliant_userdetail->cancer_medical_detail))
        {
            if(empty($user_detail->chief_compliant_userdetail->cancer_medical_detail[355]))
               {    
                    $pertNegFhRawFormat[] = "CA";
                    
               }
               if(empty($user_detail->chief_compliant_userdetail->cancer_medical_detail[360]))
               {    
                    $pertNegFhRawFormat[] = "CAD";
                    
               }
               if(empty($user_detail->chief_compliant_userdetail->cancer_medical_detail[362]))
               {    
                    $pertNegFhRawFormat[] = "DM";
                    
               }
               if(empty($user_detail->chief_compliant_userdetail->cancer_medical_detail[364]))
               {    
                    $pertNegFhRawFormat[] = "HLD";
                    
               }
               if(empty($user_detail->chief_compliant_userdetail->cancer_medical_detail[365]))
               {    
                    $pertNegFhRawFormat[] = "HTN";
                    
               }
               if(empty($user_detail->chief_compliant_userdetail->cancer_medical_detail[367]))
               {    
                    $pertNegFhRawFormat[] = "PVD";
                    
               }
            foreach ($user_detail->chief_compliant_userdetail->cancer_medical_detail as $key => $value) {
                //pr($value); die;
               if(in_array($key, [562,563,564,565,566,567]) && $value['answer'] == "No")  
               {
                    $negpmh .= ($negpmh ? ", " :'').$value['question'];
               }

            }
            // SH TYpe Question Note
            foreach ($user_detail->chief_compliant_userdetail->cancer_medical_detail as $key => $value) {
               if(in_array($key, [355,360,362,364,365,367,529,530,531,562,563,564,565,566,567]))  
               {    
                    switch ($key) {
                            case 355:
                                if($value['answer'] == "Yes")
                                {
                                    if(!empty($user_detail->chief_compliant_userdetail->cancer_family_members[$key]))
                                    {
                                        foreach($user_detail->chief_compliant_userdetail->cancer_family_members[$key]['answer'] as $k =>$v)
                                        { 
                                            if(!empty($user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail[$v]))
                                            {
                                            $pertPosFhRawFormat["CA"]["MEMBER"][strtoupper($v)]['CATYPE'] = $user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail[$v]['disease'] ? $user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail[$v]['disease'] :'';
                                            $pertPosFhRawFormat["CA"]["MEMBER"][strtoupper($v)]['AGEONSET'] = $user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail[$v]['age'] ? $user_detail->chief_compliant_userdetail->family_members_cancer_disease_detail[$v]['age'] : '';
                                            }else{
                                           $pertPosFhRawFormat["CA"]["MEMBER"] = $user_detail->chief_compliant_userdetail->cancer_family_members[$key]['answer'];
                                            }
                                        }
                                    }
                                    //$pertPosFhRawFormat[] = "CA";
                                }else
                                {
                                    $pertNegFhRawFormat[] = "CA";
                                }
                                break;
                            case 360:
                                if($value['answer'] == "Yes")
                                {
                                    if(!empty($user_detail->chief_compliant_userdetail->cancer_family_members[$key]))
                                    {
                                       $pertPosFhRawFormat["CAD"]["MEMBER"] = $user_detail->chief_compliant_userdetail->cancer_family_members[$key]['answer'];
                                    }
                                    //$pertPosFhRawFormat[] = "CAD";
                                }else
                                {
                                    $pertNegFhRawFormat[] = "CAD";
                                }
                                break;
                            case 362:
                                if($value['answer'] == "Yes")
                                {
                                    if(!empty($user_detail->chief_compliant_userdetail->cancer_family_members[$key]))
                                    {
                                       $pertPosFhRawFormat["DM"]["MEMBER"] = $user_detail->chief_compliant_userdetail->cancer_family_members[$key]['answer'];
                                    }
                                    //$pertPosFhRawFormat[] = "DM";
                                }else
                                {
                                    $pertNegFhRawFormat[] = "DM";
                                }
                                break;
                            case 364:
                                if($value['answer'] == "Yes")
                                {
                                    if(!empty($user_detail->chief_compliant_userdetail->cancer_family_members[$key]))
                                    {
                                       $pertPosFhRawFormat["HLD"]["MEMBER"] = $user_detail->chief_compliant_userdetail->cancer_family_members[$key]['answer'];
                                    }
                                    //$pertPosFhRawFormat[] = "HLD";
                                }else
                                {
                                    $pertNegFhRawFormat[] = "HLD";
                                }
                                break;
                            case 365:
                                if($value['answer'] == "Yes")
                                {
                                    if(!empty($user_detail->chief_compliant_userdetail->cancer_family_members[$key]))
                                    {
                                       $pertPosFhRawFormat["HTN"]["MEMBER"] = $user_detail->chief_compliant_userdetail->cancer_family_members[$key]['answer'];
                                    }
                                    //$pertPosFhRawFormat[] = "HTN";
                                }else
                                {
                                    $pertNegFhRawFormat[] = "HTN";
                                }
                                break;
                            case 367:
                                if($value['answer'] == "Yes")
                                {
                                    if(!empty($user_detail->chief_compliant_userdetail->cancer_family_members[$key]))
                                    {
                                       $pertPosFhRawFormat["PVD"]["MEMBER"] = $user_detail->chief_compliant_userdetail->cancer_family_members[$key]['answer'];
                                    }
                                    //$pertPosFhRawFormat[] = "PVD";
                                }else
                                {
                                    $pertNegFhRawFormat[] = "PVD";
                                }
                                break;
                            case 529:
                                if($value['answer'] == "Yes")
                                {
                                    $pertPosPmhRawFormat[] = "History of MIs";
                                }else
                                {
                                    $pertNegPmhRawFormat[] = "History of MIs";
                                }
                                break;
                            case 530:
                                if($value['answer'] == "Yes")
                                {
                                    $pertPosPmhRawFormat[] = "Strokes";
                                }else
                                {
                                    $pertNegPmhRawFormat[] = "History of strokes";
                                }
                                break;
                            case 531:
                                if($value['answer'] == "Yes")
                                {
                                    $pertPosPmhRawFormat[] = "Hx of blood clots";
                                }else
                                {
                                    $pertNegPmhRawFormat[] = "Hx of blood clots";
                                }
                                break;
                            case 562:
                            $pos_int_nutri .= "Patient drinks ".$value['answer']." cups of water each day. ";
                            $WATERFREQ = $value['answer'];
                            break;
                            case 563:
                            $drink_item = '';
                            //pr($singlelevel['answer']['time']);die;
                            if(!empty($value['answer']['time']))
                            { 
                              $count_item = count($value['answer']['time']);
                              $i = 1;
                              foreach($value['answer']['time'] as $k => $v)
                              {
                                $drink_item .= " ".$k." ".$v;
                                if($i < $count_item)
                                $drink_item .= ",";
                                if($k == "Non-caffeinated soda (ex: 7up, Sprite, etc)")
                                {
                                    $DECAFSODAFREQ = $v;
                                }
                                else if($k == "Caffeinated soda (ex: Coke, Pepsi)")
                                {
                                    $CAFSODAFREQ = $v;
                                }
                                else if ($k == "Juice") {
                                    $JUICEFREQ = $v;
                                }
                                else if($k == "Tea")
                                {
                                    $CAFTEAFREQ = $v;
                                }
                                else if ($k == "Herbal tea") {
                                    $DECAFTEAFREQ = $v;
                                }
                                else if ($k == "Smoothies") {
                                    $SMOOTHIEFREQ = $v;
                                }
                                else if ($k == "Milk") {
                                    $MILKFREQ = $v;
                                }
                                $i++;
                              }
                              $pos_int_nutri .= ($login_user->gender == 0 ? 'She':'He')." drinks".$drink_item.". ";
                            }
                            

                            break;
                            case 564:
                            $neg_int_nutri .= $value['answer'] == "Yes" ? "":'currently smoking';
                            break;
                            case 565:
                            $pos_int_nutri .= ($login_user->gender == 0 ? 'She':'He')." smokes ".(strtolower(implode(", ",$value['answer'])))." currently. ";
                            break;
                            case 566:
                            $neg_int_nutri .= $value['answer'] == "Yes" ? "":(!empty($neg_int_nutri) ? ", past smoking" : 'past smoking');
                            $pos_int_nutri .= $value['answer'] == "Yes" ? (($login_user->gender == 0 ? 'She':'He')." smoked in the past. ") :'';
                            break;
                            case 567:
                            $pos_int_nutri .= ($login_user->gender == 0 ? 'She':'He')." smoked ".(strtolower(implode(", ",$value['answer'])))." in the past. ";
                            break;
                        
                        default:
                            break;
                    }
                    
               }
            }
            // End nutrition Question Note
        }
      
    }
    $nutrition = "";
    //  nutrition for internal medication module
    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [25])){

        // Add Negative PMH ONcology with Positive PMH For  19 current_step_id

        if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 25)
        {
            //pr($pmh); die;
            if(!empty($pos_int_nutri))
            {
                $nutrition .= ($pos_int_nutri ? $pos_int_nutri:'');
                $nutrition .= ($neg_int_nutri ? "Denies ".$neg_int_nutri.'.':'');
            }
        }
        // End Adding nutrition

    }
    // ****
     // start psychiatric module
    $pph = '';
    $pos_pph = '';
    $neg_pph = '';
    $pos_followup_hpi = array();
    $neg_followup_hpi = array();
     if(!empty($user_detail->chief_compliant_userdetail->chief_complaint_psychiatry) && in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [26,27]))
    {
        $psychiatric_hist = Array("ADD/ADHD","Depression","Chronic pain","Bipolar","Anxiety Problems","PTSD");
        foreach($user_detail->chief_compliant_userdetail->chief_complaint_psychiatry as $key => $value)
        {
            switch ($value['question_id']) {
                case 612:
                            $singlelevel_ans = array();
                            $singlelevel_ans = $value['answer'];
                            if(in_array('Other',$value['answer']))
                            {
                                $singlelevel_ans = array_diff($singlelevel_ans,['Other']);
                            }
                            if(!in_array('None', $value['answer']))
                            {
                                $pph .= "Positive ".implode(', ', $singlelevel_ans);
                                $pos_pph .= (!empty($singlelevel_ans) ? implode(', ', $singlelevel_ans):'');
                            }
                            if(in_array('None',$value['answer']))
                            {
                                $singlelevel_ans = array_diff($singlelevel_ans,['Other','None']);
                            }
                            $neg_pph .= ($value['answer'] ? (!empty(array_diff($psychiatric_hist,$singlelevel_ans)) ? implode(', ', array_diff($psychiatric_hist,$singlelevel_ans)):'') :'');
                    break;  
                case 696:                        
                        if($value['answer'] == "Yes")
                        {
                            $pos_followup_hpi[] = "psych hospitalization";
                        }else
                        {
                            $neg_followup_hpi[] = "psych hospitalization";
                        }
                        break;
                case 697:                        
                        if($value['answer'] == "Yes")
                        {
                            $pos_followup_hpi[] = "SI";
                        }else
                        {
                            $neg_followup_hpi[] = "SI";
                        }
                        break;
                case 698:                        
                        if($value['answer'] == "Yes")
                        {
                            $pos_followup_hpi[] = "HI";
                        }else
                        {
                            $neg_followup_hpi[] = "HI";
                        }
                        break;
                case 699:                        
                        if($value['answer'] == "Yes")
                        {
                            $pos_followup_hpi[] = "hallucinations";
                        }else
                        {
                            $neg_followup_hpi[] = "hallucinations";
                        }
                        break;              
                default:
                    // code...
                    break;
            }
        }
        $hpi .= $pos_followup_hpi ? " History positive for ".$this->natural_word_join($pos_followup_hpi).". " :'';
        $hpi .= $neg_followup_hpi ? "Denies ".$this->natural_word_join($neg_followup_hpi).". ":'';
    }
    //pr($hpi); die;
    $social = '';
    $idu = '';
    $pos_idu = '';
    $neg_idu = '';
    $past_idu = '';
    $past_pos_idu = '';
    $past_neg_idu = '';
    $mari_edu = '';    
    //pr($user_detail->chief_compliant_userdetail->cancer_medical_detail); die;

     if(!empty($user_detail->chief_compliant_userdetail->cancer_medical_detail) && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 26)
    {
        foreach($user_detail->chief_compliant_userdetail->cancer_medical_detail as $key => $value)
        {
            switch ($value['question_id']) {
                
                case 613:
                    $pph .= ($pos_pph ? " and ":" ").$value['answer'];
                    $pos_pph .= ($pos_pph ? " and ":" ").$value['answer'];
                    break;
                case 616:
                    $pph .= (!empty($pph) ? '. ':'').($value['answer'] == "No" ? "Denies psychiatric input hx." :'');
                    break;
                case 617:
                    $pph .= ($login_user->gender == 0 ? 'She':"He")." has ".$value['answer']." time(s) ever stayed in a psychiatric hospital. ";
                    break;   
                case 683:
                    $pmh .= !empty($pmh) ? ', '.strtolower(implode(', ', $value['answer'])):strtolower(implode(', ', $value['answer']));
                    break;  
                case 684:
                    $pmh .= !empty($pmh) ? ' and '.$value['answer']:$value['answer'];
                case 618:
                    $social .= $value['answer'] == "Yes" ? "Positive currently smoking. " : "Denies currently smoking. ";
                    break;
                case 619:
                    $social .= $value['answer'] == "Yes" ? "Positive currently stopped smoking. " : "Denies currently stopped smoking. ";
                    break; 
                case 681:
                    $social .= $value['answer'] == "Yes" ? "Positive currently drink alcohol. " : "Denies currently drink alcohol. ";
                    break;  
                case 682:
                    $social .= $value['answer'] == "Yes" ? "Positive drink alcohol in the past. " : "Denies drink alcohol in the past. ";
                    break; 
                case 620:
                        $singlelevel_ans = array();
                            $singlelevel_ans = $value['answer'];
                            if(in_array('Other',$value['answer']))
                            {
                                $singlelevel_ans = array_diff($singlelevel_ans,['Other']);
                            }
                            if(!in_array('None', $value['answer']))
                            {
                                $idu .= implode(', ', $singlelevel_ans);
                            }
                            if(in_array('None', $value['answer']))
                            {
                                $neg_idu .= "Denies current IDU. ";
                            }
                    break;
                case 679:
                    $idu .= ($idu ? " and ":" ").$value['answer'];
                    break;
                case 621:
                        $singlelevel_ans = array();
                            $singlelevel_ans = $value['answer'];
                            if(in_array('Other',$value['answer']))
                            {
                                $singlelevel_ans = array_diff($singlelevel_ans,['Other']);
                            }
                            if(!in_array('None', $value['answer']))
                            {
                                $past_idu .= implode(', ', $singlelevel_ans);
                            }
                            if(in_array('None', $value['answer']))
                            {
                                $past_neg_idu .= "Denies past IDU. ";
                            }
                    break;
                case 680:
                    $past_idu .= ($past_idu ? " and ":" ").$value['answer'];
                    break; 
                case 622:
                    $mari_edu .= ($login_user->gender == 0 ? 'She':"He"). ' is '.strtolower($value['answer']).'. ';
                    break;
                case 623:
                    $mari_edu .= ($login_user->gender == 0 ? 'She':"He").$value['answer'] == "No" ? " hasn't children. ": '';
                    break;    
                case 624:
                    $mari_edu .= ($login_user->gender == 0 ? 'She':"He")." has ".$value['answer']." children. ";
                    break; 
                case 625:
                    $mari_edu .= "Highest grade level passed was ".$value['answer'].", ";
                    break;
                case 626:
                    $question_626 = array(
                          "1" => "Mostly A's",
                          "2" => "Mostly B's",
                          "3" => "Mostly C's",
                          "4" => "Mostly D's",
                          "5" => "Mostly F's",
                          );
                    $mari_edu .= "grades were ".$question_626[$value['answer']].", ";
                    break; 
                case 627:
                    $mari_edu .= $value['answer'] == "No" ? "denies special education. ":"special education. "; 
                    break;
                case 628:                          
                        if(in_array("None", $value['answer']))
                        {
                            $mari_edu .= "Denies legal history. ";
                        }
                        else
                        {   
                            $array_ans = array_diff($value['answer'],['DWI']);
                            if(!empty($array_ans))
                            {
                                $mari_edu .= ($login_user->gender == 0 ? 'She':"He")." has ever had or been to ".$this->natural_word_join($array_ans).'. ';
                            }                            
                        }
                        break;
                case 629:
                    $mari_edu .= ($login_user->gender == 0 ? 'She':"He")." has ever had or been to ".($value['answer'] != '4+' ? $value['answer']:'4 or more')." time(s) DWI. ";
                    // $mari_edu .= str_replace('DWI',(($value['answer'] == "4+" ? " 4 or more " : $value['answer'])." DWI "));
                    break;
                case 631:
                    $mari_edu .= $value['answer'] == "No" ? "Denies physical abuse hx. " : "Positive physical abuse hx. ";
                    break;
                case 632:
                    $mari_edu .= $value['answer'] == "No" ? "Denies sexual abuse hx. " : "Positive sexual abuse hx. ";
                    break;
                case 633:
                    $mari_edu .= in_array("None (civillian)",$value['answer']) ? "No military hx. " : "";
                    if(in_array("Reserves",$value['answer']))
                    {
                        $mari_edu .= "Positive military personnel. ";
                    }
                    break;
                case 634:
                    $mari_edu .= $value['answer'] == "No" ? "Active duty : never deployed. " : "Active duty : with deployments, ";
                    break;
                case 635:
                    $mari_edu .= $value['answer'] == "No" ? "no combat. " : "combat exposure";
                    break;
                case 636:
                    $mari_edu .= $value['answer'] == "No" ? ", denies flashbacks. " : ", flashbacks. ";
                    break;
                case 637:
                    $mari_edu .= $value['answer'] == "No" ? "Veteran : never deployed. " : "Veteran : with deployments, ";
                    break;
                case 638:
                    $mari_edu .= $value['answer'] == "No" ? "no combat. " : "combat exposure";
                    break;
                case 695:
                    $mari_edu .= $value['answer'] == "No" ? ", denies flashbacks, " : ", flashbacks. ";
                    break;
                case 639:
                    $discharge_status = Array(1 => "Honorable discharge", 2 => "Bad conduct discharge", 3 => "Dishonorable discharge",4 => "Separation (entry level medical)");
                        
                    $mari_edu .= strtolower($discharge_status[$value['answer']]).". ";
                    break;
                default:
                    // code...
                    break;
            }
        }
    }
    $pos_idu .= (!empty($idu) ? ($login_user->gender == 0 ? 'She':"He")." has used following current IDU street drugs ".$idu.' in the past 30 days. ' :'');
    $past_pos_idu .= (!empty($past_idu) ? ($login_user->gender == 0 ? 'She':"He")." has past IDU ever used of these ".$past_idu.'. ' :'');
    $social .= $pos_idu.$neg_idu.$past_pos_idu.$past_neg_idu.$mari_edu;
    $hpi .= !empty($pos_pph) ? ($hpi ? ' ':'')."History is positive for ".$pos_pph:'';
    $hpi .= !empty($neg_pph) ? ($hpi ? '. ':'')."History is negative for ".$neg_pph.'.':'';
    if(!empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3']) && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 26)
    {
        $pos_dementia_screnning = "";
        $neg_dementia_screnning = "";
        $pos_m3_dementia_summary ="";
        $neg_m3_dementia_summary = "";
        foreach($user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3'] as $key => $value)
        {
            if($value['answer'] == "Yes, A change")
            {
                $pos_m3_dementia_summary = $this->m3_dementia_summary($value['question_id']);
                $pos_dementia_screnning .= ($pos_dementia_screnning ? ", ".$pos_m3_dementia_summary : $pos_m3_dementia_summary);
            }else if($value['answer'] == "No, No change")
            {
                $neg_m3_dementia_summary = $this->m3_dementia_summary($value['question_id']);
                $neg_dementia_screnning .= ($neg_dementia_screnning ? ", ".$neg_m3_dementia_summary : $neg_m3_dementia_summary);
            }
        }

        if(!empty($user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3'])){            
            $hpi .= (empty($pos_dementia_screnning) ? "" : " Patient-administered dementia screen is positive for changes in ".$pos_dementia_screnning.'.');
            $hpi .= (empty($neg_dementia_screnning) ? "" : " Patient-administered dementia screen is negative for changes in ".$neg_dementia_screnning.'.');

        }
    }
    // end psychiatric module
        // $section_text .= "<strong>Nutrition:</strong> ".(empty($nutrition) ? "none provided" : $nutrition )." \n";
        $section_text .= "<strong>Past Psychiatric History:</strong> ".(empty($pph) ? "none provided" : $pph )." \n";
        $section_text .= "<strong>Past Medical Hx:</strong> ".(empty($pmh) ? "none provided" : $pmh)." \n ";
        $section_text .= "<strong>Family Hx:</strong> ";
        if(!empty($fh)){           
            $i = 1;
            $count_fh = count($fh);
            foreach ($fh as $key => $value) {
                $section_text .= $value;
                if($i < $count_fh)
                {
                    $section_text .=" \n ";
                }
                $i++;
            }          
            $section_text .= "  \n ";
        }else{
            $section_text .= "none provided \n " ;
        }
        $search_string = array('advair (fluticasone/salmeterol)','albuterol');
        $rep_string = array('Advair (fluticasone/salmeterol)','Albuterol');
        $fph = array();
        if(!empty($user_detail->chief_compliant_userdetail->cancer_family_members) && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 26)
        {
            
            $familyMemberDisease = array();
            // pr($user_detail->chief_compliant_userdetail->cancer_family_members); die;
            if (!empty($user_detail->chief_compliant_userdetail->cancer_family_members) && !in_array($user_detail->chief_compliant_userdetail->cancer_family_members,[692])) {
                foreach ($user_detail->chief_compliant_userdetail->cancer_family_members as $key => $value) {

                    if(isset($value['answer']) && !empty($value['answer']) && is_array($value['answer'])){

                      foreach ($value['answer'] as $fkey => $fvalue) {
                        $familyMemberDisease[$fvalue][] = $value['question'];
                      }
                    }
                }
            }
            if(!empty($familyMemberDisease))
            {
                foreach ($familyMemberDisease as $fkey => $fvalue) {

                        $temp_fh = ucfirst($fkey).' - ';
                        $temp_fh .= $this->natural_word_join($fvalue);
                        $fph[] = $temp_fh;
                      }
            }
            
            
        }
        $section_text .= "<strong>Family Psychiatry History:</strong> ".(empty($fph) ? "none provided" : implode("\n",$fph))." \n  \n";
        $section_text .= "<strong>Social/Marital/Education/Legal/Abuse/Military:</strong> ".(empty($social) ? "none provided" : $social)." \n  \n";
        $section_text .= "<strong>Social Hx:</strong> ".(empty($sh) ? "none provided" : $sh)." \n ";
        $section_text .= "<strong>Current Medications:</strong> ".(empty($meds) ? "none provided" : str_replace($search_string,$rep_string,$meds))." \n ";
        $section_text .= "<strong>Allergies:</strong> ".(empty($all) ? "none provided" : $all)." \n ";

        if($user_detail->chief_compliant_userdetail->current_step_id['id'] != 17)
        {

            $section_text .= "<strong>Immunization Hx:</strong> ".(empty($imm) ? "none provided" : $imm)." \n ";
            $section_text .= "<strong>Past Surgical Hx:</strong> ".(empty($psh) ? "none provided" : $psh)." \n ";
        }
    }



    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [19,21])){

        if($login_user->gender == 0){
            $section_text .= "<strong>GYN Hx:</strong> ".(empty($gyn_hx_section) ? "none provided" : $gyn_hx_section)." \n \n";
        }
        $section_text .= "<strong>ALL:</strong> ".(empty($all) ? "none provided" : $all)." \n";
    }

    if($user_detail->specialization_id == 6 && ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 11 ) || ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 12 && $user_detail->chief_compliant_userdetail->follow_up_step_id == 11))
    {
        $section_text .= "<strong>REASON FOR VISIT:</strong> ".(empty($procudure_name) && empty($procedure_date) ? "none provided" : $procudure_name." day ".$procudure_since_date)." \n";
        $section_text .= "<strong>SUBJECTIVE:</strong> ".(empty($subjective) ? "none provided" : $subjective)." \n";

    }
   

    // Hospital ER Note Detail
    if($user_detail->specialization_id == 1 && ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 22 ) || ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 22 && $user_detail->chief_compliant_userdetail->hospital_er_detail))
    {
        // $hospital_er_detail = unserialize(Security::decrypt( base64_decode($user_detail->chief_compliant_userdetail->hospital_er_detail), SEC_KEY));
        //pr($hospital_er_detail); die;
        $section_text .= "<strong>REASON FOR VISIT:</strong> ".(empty($reason_for_visit_section) ? "none provided" : $reason_for_visit_section)." \n";
        $section_text .= "<strong>SUBJECTIVE:</strong> ".(empty($subjective_section) ? "none provided" : $subjective_section)." \n";

    }
    // End Hospital ER Note detail
    else{        
        if(!in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [4,16,17,18,19,20,21]))
        {
            // $section_text .= "<strong>CC/HPI:</strong> ".(empty($all_cc_name) ? "" : $all_cc_name == 'symptom complaint' ? 'symptom complaints'." \n " : $all_cc_name." \n ").(empty($hpi) ? "none provided" : $hpi)." \n \n";
            $section_text .= "<strong>CC/HPI:</strong> ".(empty($hpi) ? "none provided" : $hpi)." \n \n";
        }
      }

      //set the chronic pain assessment

$marketing = "";
$ques_ans_706_707 = "";
$mpoa = array();
$raw_dmtype = '';
$marketing_arr = array();
if(!empty($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor) && $user_detail->chief_compliant_userdetail->current_step_id['id'] == 25)
    {
        $advncd_dir = "";
        foreach($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor as $key => $value)
        {
            switch ($value['question_id']) {
                case 559:
                    $advncd_dir .= "".($value['answer'] == "No" ? "" : "Patient attests to completing the ACP in the past.");
                    break;
                case 560:
                    $advncd_dir .= "".($value['answer'] == "No" ? "Declined ACP" : "Requested ACP");
                    break;
                case 606:
                    $raw_dmtype = ( $value['answer'] == "Type 1" ? "1" : ($value['answer'] == "Type 2" ? "2" :""));
                    break;
                case 704:
                    $marketing .= $this->natural_word_join($value['answer']);
                    $marketing_arr = $value['answer'];
                    break;
                case 705:
                    $marketing .= !empty($marketing) ? " and ".$value['answer'] : $value['answer'];
                    $marketing_arr[] = $value['answer'];
                    break;
                case 706:
                    $ques_ans_706_707 .= $value['answer'] ? ucfirst($value['answer']) : "";
                    break;
                case 707:
                    $ques_ans_706_707 .= $value['answer'] ? " ".ucfirst($value['answer']) : "";
                    break;
                case 708:
                    $mpoa[] = $ques_ans_706_707;
                    // pr($value['answer']);die;
                    $mpoa_rel = array_diff($value['answer'],['Other']);
                    // pr($mpoa_rel);die;
                    $mpoa = array_merge($mpoa,$mpoa_rel);
                    break;
                case 709:
                    $mpoa[] = $value['answer'] ? ucfirst($value['answer']):'';
                    break;
                default:
                    // code...
                    break;
            }
        }
        if(!in_array($user_detail->chief_compliant_userdetail->is_chief_complaint_doctor, [559,560])){            
            $section_text .= "<strong>Advanced Directives:</strong> ".(empty($advncd_dir) ? "none provided" : $advncd_dir)." \n";
            $section_text .= "<strong>MPOA:</strong> ".(empty($mpoa) ? "none provided" : $this->natural_word_join($mpoa))." \n  \n";

        }
        $section_text .= "<strong>Marketing:</strong> ".(empty($marketing) ? "none provided" : $marketing)." \n";
    }

if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 1 && !empty($chronic_pain_assessment_detail_layman)){
   // pr($chronic_pain_assessment_detail_layman);die;

        $section_text .= "<strong>Chronic Pain Hx & Assessment:</strong>\n ";

        $section_text .= '<strong>Severity: </strong>'.$chronic_pain_assessment_detail_layman['sevrity'].'.'."\n";

        $section_text .= '<strong> Comorbidities: </strong>'.$chronic_pain_assessment_detail_layman['comorbidities'].'.'."\n ";

        $section_text .= '<strong>Current Tx: </strong>'.$chronic_pain_assessment_detail_layman['currentTx']."\n";

        $section_text .= '<strong>Past Tx: </strong>'.$chronic_pain_assessment_detail_layman['pastTx'].'.'."\n"; 

        $section_text .= '<strong>Physical/Psychosocial fx: </strong>'.$chronic_pain_assessment_detail_layman['physicalPhychological']."\n";                

        $section_text .= '<strong>Opioid Overdose Risks: </strong>'.$chronic_pain_assessment_detail_layman['opoidOverdoseRisk'].'.'."\n ";

        $section_text .= '<strong>Opioid Risk Tool (ORT) score: </strong>'.$chronic_pain_assessment_detail_layman['ortTool'].', '.$chronic_pain_assessment_detail_layman['ortIndication'].'.'."\n\n";

}

// end pain management

      if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 23){

        $uremia = '';
        $volume = '';


     if(!empty($healthscreening_uremia_negative_ROS)){        

                $uremia = "Uremia ROS is negative. Uremia ROS is significant for ".(implode(", ", $healthscreening_uremia_negative_ROS)).".";
            }
            if(!empty($healthscreening_volume_negative_ROS)){        

                $volume = "Volume overload ROS is negative. Volume overload is significant for ".(implode(", ", $healthscreening_volume_negative_ROS)).".";
            }
            if(!empty($uremia)){
               $section_text .= "<strong>Summary:</strong> ".$uremia." \n";
            } 
            if(!empty($volume))
            {
               $section_text .= $volume." \n\n";
            }  
}




    //not for covid module
    if( $user_detail->chief_compliant_userdetail->current_step_id['id'] != 17)
    {
        // female related field not present in orthopedics and orthopedics spine

        if($login_user->gender == 0 && $user_detail->specialization_id != 3 && $user_detail->specialization_id != 4 && $user_detail->specialization_id != 7 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 18) {
        // only for female and not for orthopedic module
            if($user_detail->chief_compliant_userdetail->current_step_id['id'] != 19 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 21){
                $section_text .= "<strong>GYNHX:</strong> ".(empty($lmp) ? "none provided" : $lmp)." \n";
            }

            if(!in_array($user_detail->chief_compliant_userdetail->current_step_id['id'],[19,21])){

            $section_text .= "<strong>Paps:</strong> ".(empty($paps) ? "none provided" : $paps)." \n";
          }

        }

        if($user_detail->specialization_id == 2) {

        $section_text .= "<strong>STI:</strong> ".(empty($sti) ? "none provided" : $sti)." \n";

        }

        if($login_user->gender == 0 && $user_detail->specialization_id != 3 && $user_detail->specialization_id != 4 && $user_detail->chief_compliant_userdetail->current_step_id['id'] != 18) {


          if(!in_array($user_detail->chief_compliant_userdetail->current_step_id['id'],[19,21])){
            $section_text .= "<strong>Breast:</strong> ".(empty($breast) ? "none provided" : $breast)." \n";
            $section_text .= "<strong>BCM:</strong> ".(empty($bcm) ? "none provided" : $bcm)." \n";
            // only for female and not for orthopedic module

            // $section_text .= "#OBHX: \n ";

              $section_text .= "<strong>OBHX:</strong> ";

              if(!empty($prev_birth_data)){

                  foreach ($prev_birth_data as $key => $value) {

                    $section_text .= $value." \n ";

                  }

                     $section_text .= "  \n";

              } else {

                    $section_text .= "none provided \n" ;

              }
            }
        }
    }

    // psychiatric module
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 26)
    {
        $section_text .= "\n<strong>My Mood Monitor (M3):</strong> \n ";       
        $m3_deme_screen_scoring = array("Yes, A change" =>1,"No, No change" =>0,"N/A, Don't know" =>0);
        $m3_scoring = array("Not at all" =>0,"Rarely" =>0,'Sometimes'=>1,'Often'=>2,'Most of the time'=>2);
        $anxiety_whole_score = 0;
        $depression_whole_score = 0;
        $bipolar_score = 0;
        $PTSD_score = 0;
        $total_score = 0;
        $AD8_score = 0;
        $i = 1;
        $dementia_screen_ques = "";
        $anxiety_interpretation = '';   
        $depression_interpretation = '';  
        $bipolar_interpretation= '';  
        $PTSD_interpretation= '';
        $yes_a_change = '';
        $no_no_chnage = '';
        $na_dont_know = '';
         // pr($user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3']); die;
        foreach ($user_detail->chief_compliant_userdetail->medication_refill_extra_details['m3'] as $key => $value) {
            if(in_array($value['question_id'], [647,648,649,650,651,652,653,654,655,656,657,658]))
            {
                $anxiety_whole_score = $anxiety_whole_score + $m3_scoring[$value['answer']];
            }
            if(in_array($value['question_id'], [640,641,642,643,644,645,646]))
            {
                $depression_whole_score = $depression_whole_score + $m3_scoring[$value['answer']];
            }
            if(in_array($value['question_id'], [658,659,660,661,662]))
            {
                $bipolar_score = $bipolar_score + $m3_scoring[$value['answer']];
            }
            if(in_array($value['question_id'], [652,653,654,655]))
            {
                $PTSD_score = $PTSD_score + $m3_scoring[$value['answer']];
            }
            if($value['question_id'] >= 647 && $value['question_id'] <= 670)
            {
                $total_score = $total_score + $m3_scoring[$value['answer']];
            }
            if($value['question_id'] >= 671 && $value['question_id'] <= 678)
            {
                $AD8_score = $AD8_score + $m3_deme_screen_scoring[$value['answer']];
                if($value['answer'] == "Yes, A change")
                {
                    $yes_m3_dementia_summary = $this->m3_dementia_summary($value['question_id']);
                    $yes_a_change .= $yes_a_change ? ', '.$yes_m3_dementia_summary :$yes_m3_dementia_summary;
                }
                else if($value['answer'] == "No, No change")
                {
                    $no_m3_dementia_summary = $this->m3_dementia_summary($value['question_id']);
                    $no_no_chnage .= $no_no_chnage ? ', '.$no_m3_dementia_summary :$no_m3_dementia_summary;
                }
                else if($value['answer'] == "N/A, Don't know")
                {
                    $na_m3_dementia_summary = $this->m3_dementia_summary($value['question_id']);
                    $na_dont_know .= $na_dont_know ? ', '.$na_m3_dementia_summary :$na_m3_dementia_summary;
                }
                $dementia_screen_ques .= "<strong>Q".$i++.":</strong> ".(empty($value['question']) ? "" : $value['question'])."<strong>  A:</strong> ".(!empty($value['answer']) ? $value['answer'] :"none provided")." \n ";                
            }
        }
        $anxiety_interpretation = $this->m3_score_range('anxiety',$anxiety_whole_score);
        $depression_interpretation = $this->m3_score_range('depression',$depression_whole_score);
        $bipolar_interpretation = $this->m3_score_range('bipolar',$bipolar_score);
        $PTSD_interpretation = $this->m3_score_range('PTSD',$PTSD_score);

        $section_text .= "\n<strong>Anxiety Score [M3]:</strong> ".$anxiety_whole_score." \n";   

        $section_text .= "<strong>Score out of Range [M3]:</strong> 60 \n";
        $section_text .= "<strong>Score Interpretation [M3]:</strong> ".$anxiety_interpretation." \n";


        $section_text .= "\n<strong>Depression Score [M3]:</strong> ".$depression_whole_score." \n";   

        $section_text .= "<strong>Score out of Range [M3]:</strong> 35 \n";
        $section_text .= "<strong>Score Interpretation [M3]:</strong> ".$depression_interpretation." \n";

        $section_text .= "\n<strong>Bipolar Score [M3]:</strong> ".$bipolar_score." \n";   

        $section_text .= "<strong>Score out of Range [M3]:</strong> 25 \n";
        $section_text .= "<strong>Score Interpretation [M3]:</strong> ".$bipolar_interpretation." \n";

        $section_text .= "\n<strong>PTSD Score [M3]:</strong> ".$PTSD_score." \n";   

        $section_text .= "<strong>Score out of Range [M3]:</strong> 20 \n";
        $section_text .= "<strong>Score Interpretation [M3]:</strong> ".$PTSD_interpretation." \n";

        $section_text .= "\n<strong>Total Score [M3]:</strong> ".$total_score." \n";
        $section_text .= "\n<strong>Ascertain Dementia 8 (AD8) Screening</strong> \n";
        $section_text .= "<strong>AD8 Score:</strong> ".$AD8_score." \n";        
        $section_text .= "<strong>AD8 Interpretation:</strong> ".($AD8_score <=1 ? 'Normal cognition':'Cognitive impairment is likely to be present.')." \n";
        $section_text .= "\n<strong>Summary:</strong> \n ";
        $section_text .= "<strong>Yes, A change:</strong> ".(empty($yes_a_change) ? "none provided" : $yes_a_change)." \n ";
        $section_text .= "<strong>No, No change:</strong> ".(empty($no_no_chnage) ? "none provided" : $no_no_chnage)." \n ";
        $section_text .= "<strong>N/A, Don't Know:</strong> ".(empty($na_dont_know) ? "none provided" : $na_dont_know)." \n ";
        $section_text .= "\n<strong>Submissions:</strong> \n ";
        
        $section_text .= (empty($dementia_screen_ques) ? "none provided" : $dementia_screen_ques)." \n ";
        
    }
    // end
    // pr($user_detail->chief_compliant_userdetail->current_step_id['id']);die;
    // Internal medication assessment note section
    $energyLevelRawFormat = "";
    $subjAgeRawFormat = "";
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 25)
    {
        $internal_ehr_note = array();
        
        $section_text .= "\n<strong>Other Notes:</strong> \n ";
        // pr($user_detail->chief_compliant_userdetail->internal_general_assessment_detail); die;
        // General Note
        if(!empty($user_detail->chief_compliant_userdetail->internal_general_assessment_detail))
        {
        foreach ($user_detail->chief_compliant_userdetail->internal_general_assessment_detail as $key => $value) {
                switch ($value['question_id']) {
                    case 568:
                    $section_text .= "<strong>Overall Energy Level:</strong> ".(empty($value['answer']) ? "none provided" : $value['answer'])." \n ";
                    $internal_ehr_note['general']['overall_energy_level'] = (empty($value['answer']) ? "none provided" : $value['answer']);
                    $energyLevelRawFormat = (empty($value['answer']) ? "none provided" : $value['answer']);
                        break;
                    case 607:
                        $section_text .= (!empty($value['answer']) && $value['answer'] == 'About my age' ? "<strong>Subjective Age:</strong> ".$value['answer']." \n" : "");      
                        $internal_ehr_note['general']['subjective_age'] = (!empty($value['answer']) && $value['answer'] == 'About my age' ? $value['answer']: "");
                        $subjAgeRawFormat = (!empty($value['answer']) && $value['answer'] == 'About my age' ? $value['answer']: "");
                        break;
                    case 569:
                        $section_text .= (!empty($value['answer']) ? "<strong>Subjective Age:</strong> ".$value['answer']." years older"." \n" : "");
                        if(!empty($value['answer']))
                        {
                            $internal_ehr_note['general']['subjective_age'] = (!empty($value['answer']) ? $value['answer']." years older" : "");
                            $subjAgeRawFormat = (!empty($value['answer']) ? $value['answer']." years older" : "");
                        }
                        
                        break;

                    case 570:
                        $section_text .= (!empty($value['answer']) ? "<strong>Subjective Age:</strong> ".$value['answer']." years younger"." \n" : "");  
                        if(!empty($value['answer']))
                        {    
                            $internal_ehr_note['general']['subjective_age'] = (!empty($value['answer']) ? $value['answer']." years younger" : "");  
                            $subjAgeRawFormat = (!empty($value['answer']) ? $value['answer']." years younger" : "");
                        }                
                        break;
                    default:
                        // code...
                        break;
                }
        } 
        } 

        // pr($internal_ehr_note); die;


        // TAPS-1 Note
        $scoring = array("Daily or Almost" =>1,"Daily" =>1,"Weekly" =>1,"Monthly" =>1,"Less Than Monthly" =>1,"Never" => 0);
        $taps2_scoring = array("Yes" =>1,"No" =>0);
        $summary_scale = array(571 =>"tobacco use (12 months)",572 =>"binge drinking male (12 months)",573 =>"binge drinking female (12 months)",574 =>"IDU (12 months)",575 =>"prescription drug abuse (12 months)");
        $whole_score = 0;
        $i = 1;
        $taps1_ques = "";
        $ehr_note_taps1_ques = array();
        $Daily_or_Almost = array();
        $Daily = array();
        $Weekly = array();
        $Monthly = array();
        $Less_Than_Monthly = array();
        $Never = array();
        if(!empty($user_detail->chief_compliant_userdetail->internal_taps1_assessment_detail))
        {
        foreach ($user_detail->chief_compliant_userdetail->internal_taps1_assessment_detail as $key => $value) {
            $whole_score = $whole_score + $scoring[$value['answer']];
            $taps1_ques .= "<strong>Q".$i++.":</strong> ".(empty($value['question']) ? "" : $value['question'])."<strong>  A:</strong> ".(!empty($value['answer']) ? $value['answer'] :"none provided")." \n ";
            $ehr_note_taps1_ques[] = array(
                'ques' => (empty($value['question']) ? "" : $value['question']),
                'ans' => (!empty($value['answer']) ? $value['answer'] :"none provided")
            );
            // $ehr_note_taps1_ques['taps1_q']['ques'] = (empty($value['question']) ? "" : $value['question']);
            // $ehr_note_taps1_ques['taps1_q']['ans'] = (!empty($value['answer']) ? $value['answer'] :"none provided"); 

            if($value['answer'] == "Daily or Almost")
            {
                $Daily_or_Almost[] = $summary_scale[$value['question_id']];
            }
            else if($value['answer'] == "Daily")
            {
                $Daily[] = $summary_scale[$value['question_id']];
            }
            else if($value['answer'] == "Weekly")
            {
                $Weekly[] = $summary_scale[$value['question_id']];
            }
            else if($value['answer'] == "Monthly")
            {
                $Monthly[] = $summary_scale[$value['question_id']];
            }
            else if($value['answer'] == "Less Than Monthly")
            {
                $Less_Than_Monthly[] = $summary_scale[$value['question_id']];
            }
            else if($value['answer'] == "Never")
            {
                $Never[] = $summary_scale[$value['question_id']];
            }

        }
     }
        $section_text .= "<strong>TAPS-1 Score:</strong> ".($whole_score == 1 ? $whole_score : ($whole_score > 1 ? "2+" : 0))." \n";   
        $internal_ehr_note['taps1']['score'] = ($whole_score == 1 ? $whole_score : ($whole_score > 1 ? "2+" : 0));
        $section_text .= "<strong>Risk Category:</strong> ".($whole_score == 1 ? "Problem Use" : ($whole_score > 1 ? "Higher Risk" : "No Use Past 3 Months"))." \n";
        $internal_ehr_note['taps1']['risk_category'] = ($whole_score == 1 ? "Problem Use" : ($whole_score > 1 ? "Higher Risk" : "No Use Past 3 Months"));
        $section_text .= "\n<strong>Summary:</strong> \n ";
        $section_text .= "<strong>Daily or Almost:</strong> ".(empty($Daily_or_Almost) ? "none provided" : implode(", ",$Daily_or_Almost))." \n ";
        $internal_ehr_note['taps1']['summary']['daily_or_almost'] = (empty($Daily_or_Almost) ? "none provided" : implode(", ",$Daily_or_Almost));
        $section_text .= "<strong>Daily:</strong> ".(empty($Daily) ? "none provided" : implode(", ",$Daily))." \n ";
        $internal_ehr_note['taps1']['summary']['daily'] = (empty($Daily) ? "none provided" : implode(", ",$Daily));
        $section_text .= "<strong>Weekly:</strong> ".(empty($Weekly) ? "none provided" : implode(", ",$Weekly))." \n "; 
        $internal_ehr_note['taps1']['summary']['weekly'] = (empty($Weekly) ? "none provided" : implode(", ",$Weekly));
        $section_text .= "<strong>Monthly:</strong> ".(empty($Monthly) ? "none provided" : implode(", ",$Monthly))." \n ";
        $internal_ehr_note['taps1']['summary']['monthly'] = (empty($Monthly) ? "none provided" : implode(", ",$Monthly));
        $section_text .= "<strong>Less Than Monthly:</strong> ".(empty($Less_Than_Monthly) ? "none provided" : implode(", ",$Less_Than_Monthly))." \n ";
        $internal_ehr_note['taps1']['summary']['less_than_monthly'] = (empty($Less_Than_Monthly) ? "none provided" : implode(", ",$Less_Than_Monthly));
        $section_text .= "<strong>Never:</strong> ".(empty($Never) ? "none provided" : implode(", ",$Never))." \n ";
        $internal_ehr_note['taps1']['summary']['never'] = (empty($Never) ? "none provided" : implode(", ",$Never));
        $section_text .= "\n<strong>Submissions:</strong> \n ";
        
        $section_text .= (empty($taps1_ques) ? "none provided" : $taps1_ques)." \n ";
        $internal_ehr_note['taps1']['submission'] = (empty($ehr_note_taps1_ques) ? "none provided" : $ehr_note_taps1_ques);

        // TAPS-2 Note
        $taps2_ques = "";
        $ehr_note_taps2_ques = array();
        $Tobacco_Score = 0;
        $Alcohol_Score = 0;
        $Cannabis_Score = 0;
        $Street_Stimulant_Score = 0;
        $Heroin_Score = 0;
        $Opioid_Score = 0;
        $Street_Stimulant_Score = 0;
        $Rx_Stimulant_Score = 0;
        $IDU_Score = 0;
        $i = 1;
        if(!empty($user_detail->chief_compliant_userdetail->internal_taps2_assessment_detail))
        {
            foreach ($user_detail->chief_compliant_userdetail->internal_taps2_assessment_detail as $key => $value) {
                $taps2_ques .= "<strong>Q".$i++.":</strong> ".(empty($value['question']) ? "" : $value['question'])."<strong>  A:</strong> ".(!empty($value['answer']) ? $value['answer'] :"none provided")." \n ";
                $ehr_note_taps2_ques[] = array(
                    'ques' => (empty($value['question']) ? "" : $value['question']),
                    'ans' => (!empty($value['answer']) ? $value['answer'] :"none provided")
                );
                // $ehr_note_taps2_ques = (empty($value['question']) ? "" : $value['question']);
                // $ehr_note_taps2_ques = (!empty($value['answer']) ? $value['answer'] :"none provided");

                if(in_array($value['question_id'], [576,577,578]))
                {
                    $Tobacco_Score = $Tobacco_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }
                else if(in_array($value['question_id'], [579,580,581.582,583]))
                {
                    $Alcohol_Score = $Alcohol_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }
                else if(in_array($value['question_id'], [584,585,586]))
                {
                    $Cannabis_Score = $Cannabis_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }
                else if(in_array($value['question_id'], [587,588,589]))
                {
                    $Street_Stimulant_Score = $Street_Stimulant_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }
                else if(in_array($value['question_id'], [590,591,592]))
                {
                    $Heroin_Score = $Heroin_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }
                else if(in_array($value['question_id'], [593,594,595]))
                {
                    $Opioid_Score = $Opioid_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }
                else if(in_array($value['question_id'], [596,597,598]))
                {
                    $Street_Stimulant_Score = $Street_Stimulant_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }
                else if(in_array($value['question_id'], [599,600,601]))
                {
                    $Rx_Stimulant_Score = $Rx_Stimulant_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }
                else if(in_array($value['question_id'], [602]))
                {
                    $IDU_Score = $IDU_Score + ($value['answer'] == "Yes" ? 1 : 0);
                }

            }
        }
        $section_text .= "\n<strong>TAPS-2 Scores:</strong> \n ";
        $section_text .= "<strong>Tobacco Score:</strong> ".($Tobacco_Score == 1 ? $Tobacco_Score : ($Tobacco_Score > 1 ? "2+" : 0))." \n ";
        $internal_ehr_note['taps2']['score']['tobacco'] = ($Tobacco_Score == 1 ? $Tobacco_Score : ($Tobacco_Score > 1 ? "2+" : 0));

        $section_text .= "<strong>Alcohol Score:</strong> ".($Alcohol_Score == 1 ? $Alcohol_Score : ($Alcohol_Score > 1 ? "2+" : 0))." \n ";

        $internal_ehr_note['taps2']['score']['alcohol'] = ($Alcohol_Score == 1 ? $Alcohol_Score : ($Alcohol_Score > 1 ? "2+" : 0));

        $section_text .= "<strong>Cannabis Score:</strong> ".($Cannabis_Score == 1 ? $Cannabis_Score : ($Cannabis_Score > 1 ? "2+" : 0))." \n "; 
        $internal_ehr_note['taps2']['score']['cannabis'] = ($Cannabis_Score == 1 ? $Cannabis_Score : ($Cannabis_Score > 1 ? "2+" : 0));

        $section_text .= "<strong>Street Stimulant Score:</strong> ".($Street_Stimulant_Score == 1 ? $Street_Stimulant_Score : ($Street_Stimulant_Score > 1 ? "2+" : 0))." \n ";

        $internal_ehr_note['taps2']['score']['street_stimulant'] = ($Street_Stimulant_Score == 1 ? $Street_Stimulant_Score : ($Street_Stimulant_Score > 1 ? "2+" : 0));

        $section_text .= "<strong>Heroin Score:</strong> ".($Heroin_Score == 1 ? $Heroin_Score : ($Heroin_Score > 1 ? "2+" : 0))." \n ";

        $internal_ehr_note['taps2']['score']['heroin'] = ($Heroin_Score == 1 ? $Heroin_Score : ($Heroin_Score > 1 ? "2+" : 0));

        $section_text .= "<strong>Opioid Score:</strong> ".($Opioid_Score == 1 ? $Opioid_Score : ($Opioid_Score > 1 ? "2+" : 0))." \n ";

        $internal_ehr_note['taps2']['score']['opioid'] = ($Opioid_Score == 1 ? $Opioid_Score : ($Opioid_Score > 1 ? "2+" : 0));

        // $section_text .= "<strong>Street Stimulant Score:</strong> ".($Street_Stimulant_Score == 1 ? $Street_Stimulant_Score : ($Street_Stimulant_Score > 1 ? "2+" : 0))." \n ";

        $section_text .= "<strong>Rx Stimulant Score:</strong> ".($Rx_Stimulant_Score == 1 ? $Rx_Stimulant_Score : ($Rx_Stimulant_Score > 1 ? "2+" : 0))." \n ";

        $internal_ehr_note['taps2']['score']['rx_stimulant'] = ($Rx_Stimulant_Score == 1 ? $Rx_Stimulant_Score : ($Rx_Stimulant_Score > 1 ? "2+" : 0));

        $section_text .= "<strong>IDU Score:</strong> ".($IDU_Score == 1 ? $IDU_Score : ($IDU_Score > 1 ? "2+" : 0))." \n ";

        $internal_ehr_note['taps2']['score']['idu'] = ($IDU_Score == 1 ? $IDU_Score : ($IDU_Score > 1 ? "2+" : 0));

        $section_text .= "\n<strong>Submissions:</strong> \n ";
        $section_text .= (empty($taps2_ques) ? "none provided" : $taps2_ques)." \n ";

        $internal_ehr_note['taps2']['submission'] = (empty($ehr_note_taps2_ques) ? "none provided" : $ehr_note_taps2_ques);
    }
    // end internal medication assessment section

    $section_text .= "\n";
    if(!in_array($user_detail->chief_compliant_userdetail->current_step_id['id'],[26,27]))
    {
    $section_text .= "\n<strong>ROS (last 30 days):</strong> \n ";

    if($user_detail->specialization_id == 1 || $user_detail->specialization_id == 2 || $user_detail->specialization_id == 5 || $user_detail->specialization_id == 6 || $user_detail->specialization_id == 9){  // For specialization id 1,2 related health questionaire logic



       // if($user_detail->chief_compliant_userdetail->current_step_id->id == 11){

        if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 11 || $user_detail->chief_compliant_userdetail->current_step_id['id'] == 20 || ($user_detail->chief_compliant_userdetail->current_step_id['id'] == 12 && $user_detail->chief_compliant_userdetail->follow_up_step_id == 11)){



            $q_general = rtrim($q_general,', ');

            $q_CV_RESP = rtrim($q_CV_RESP,', ');

            $q_GIGU = rtrim($q_GIGU,', ' );

            $q_THROAT = rtrim($q_THROAT,', ');
          $section_text .= "<strong>Constitutional Symptoms:</strong> ".(empty($q_general) ? "none provided" : $q_general)." \n ";

          $section_text .= "<strong>Cardiovascular/Respiratory:</strong> ".(empty($q_CV_RESP) ? "none provided" : $q_CV_RESP)." \n ";

          $section_text .= "<strong>Gastrointestinal:</strong> ".(empty($q_GIGU) ? "none provided" : $q_GIGU)." \n ";

          $section_text .= "<strong>THROAT:</strong> ".(empty($q_THROAT) ? "none provided" : $q_THROAT)." \n";

      }

      elseif($user_detail->chief_compliant_userdetail->current_step_id['id'] == 17){



            $q_general = rtrim($q_general,', ');

            $q_NEURO = rtrim($q_NEURO,', ');

            $q_NEURO = str_replace("loc", "LOC", $q_NEURO);
            $q_MSK = rtrim($q_MSK,', ');

            $q_GI = rtrim($q_GI,', ');

            $q_GU = rtrim($q_GU,', ');

            $q_ENT = rtrim($q_ENT,', ');

            $q_CV = rtrim($q_CV,', ');

            $q_PSYCH = rtrim($q_PSYCH,', ');
            $q_PSYCH = str_replace("si", "SI", $q_PSYCH);

            $q_SKIN = rtrim($q_SKIN,', ');

            $q_RESP = rtrim($q_RESP,', ');



          $section_text .= "<strong>Constitutional Symptoms:</strong> ".(empty($q_general) ? "none provided" : $q_general)." \n ";

          $section_text .= "<strong>Ears, nose, throat:</strong> ".(empty($q_ENT) ? "none provided" : $q_ENT)." \n ";

          $section_text .= "<strong>Cardiovascular:</strong> ".(empty($q_CV) ? "none provided" : $q_CV)." \n ";

          $section_text .= "<strong>Respiratory:</strong> ".(empty($q_RESP) ? "none provided" : $q_RESP)." \n ";

          $section_text .= "<strong>Gastrointestinal:</strong> ".(empty($q_GI) ? "none provided" : $q_GI)." \n ";

          $section_text .= "<strong>Genitourinary:</strong> ".(empty($q_GU) ? "none provided" : $q_GU)." \n ";

          $section_text .= "<strong>Musculoskeletal:</strong> ".(empty($q_MSK) ? "none provided" : $q_MSK)." \n ";

          $section_text .= "<strong>Neurological:</strong> ".(empty($q_NEURO) ? "none provided" : $q_NEURO)." \n ";

          $section_text .= "<strong>Integumentary:</strong> ".(empty($q_SKIN) ? "none provided" : $q_SKIN)." \n ";

          $section_text .= "<strong>Psychiatric:</strong> ".(empty($q_PSYCH) ? "none provided" : $q_PSYCH)." \n ";


          $Constitutional = "Constitutional Symptoms: ".$q_general;
          $ENT = "Ears, nose, throat: ".$q_ENT;
          $Cardiovascular = "Cardiovascular: ".$q_CV;
          $Respiratory = "Respiratory: ".$q_RESP;
          $Gastrointestinal = "Gastrointestinal: ".$q_GI;
          $Genitourinary = "Genitourinary: ".$q_GU;
          $Musculoskeletal = "Musculoskeletal: ".$q_MSK;
          $Neurological = "Neurological: ".$q_NEURO;
          $Integumentary = "Integumentary: ".$q_SKIN;
          $Psychiatric = "Psychiatric: ".$q_PSYCH;                        

          $rosDetail = array($Constitutional,$ENT,$Cardiovascular,$Respiratory,$Gastrointestinal,$Genitourinary,$Musculoskeletal,$Neurological,$Integumentary,$Psychiatric);




      }
      elseif($user_detail->chief_compliant_userdetail->current_step_id['id'] == 18){

            $q_general = rtrim($q_general,', ');
            $q_NEURO = rtrim($q_NEURO,', ');
            $q_NEURO = str_replace("loc", "LOC", $q_NEURO);
            $q_GI = rtrim($q_GI,', ');
            $q_CV = rtrim($q_CV,', ');
            $q_PSYCH = rtrim($q_PSYCH,', ');
            $q_PSYCH = str_replace("si", "SI", $q_PSYCH);
            $q_RESP = rtrim($q_RESP,', ');
            $q_MSK = rtrim($q_MSK,', ');
            $q_SKIN = rtrim($q_SKIN,', ');
            $q_ENT = rtrim($q_ENT,', ');
            $q_EYES = rtrim($q_EYES,', ');


            if(!empty($temp_general_health_questionnaire_grp_arr)){

                if(array_key_exists("GEN", $temp_general_health_questionnaire_grp_arr)){

                    $section_text .= "<strong>Constitutional Symptoms:</strong> ".(empty($q_general) ? "none provided" : $q_general)." \n ";
                }

                if(array_key_exists("GI", $temp_general_health_questionnaire_grp_arr)){

                    $section_text .= "<strong>Gastrointestinal:</strong> ".(empty($q_GI) ? "none provided" : $q_GI)." \n ";
                }

                if(array_key_exists("CV", $temp_general_health_questionnaire_grp_arr)){

                    $section_text .= "<strong>Cardiovascular:</strong> ".(empty($q_CV) ? "none provided" : $q_CV)." \n ";
                }

                if(array_key_exists("NEURO", $temp_general_health_questionnaire_grp_arr)){

                    $section_text .= "<strong>Neurological:</strong> ".(empty($q_NEURO) ? "none provided" : $q_NEURO)." \n ";
                }

                if(array_key_exists("PSYCH", $temp_general_health_questionnaire_grp_arr)){

                    $section_text .= "<strong>Psychiatric:</strong> ".(empty($q_PSYCH) ? "none provided" : $q_PSYCH)." \n ";
                }

                if(array_key_exists("RESP", $temp_general_health_questionnaire_grp_arr)){

                    $section_text .= "<strong>Respiratory:</strong> ".(empty($q_RESP) ? "none provided" : $q_RESP)." \n ";
                }

                if(array_key_exists("MSK", $temp_general_health_questionnaire_grp_arr)){

                    $section_text .= "<strong>Musculoskeletal:</strong> ".(empty($q_MSK) ? "none provided" : $q_MSK)." \n ";
                }

                if(array_key_exists("ENT", $temp_general_health_questionnaire_grp_arr)){

                    $section_text .= "<strong>Ears, nose, throat:</strong> ".(empty($q_ENT) ? "none provided" : $q_ENT)." \n ";
                }

                if(array_key_exists("SKIN", $temp_general_health_questionnaire_grp_arr)){

                    $section_text .= "<strong>Integumentary:</strong> ".(empty($q_SKIN) ? "none provided" : $q_SKIN)." \n ";
                }

                if(array_key_exists("EYES", $temp_general_health_questionnaire_grp_arr)){

                    $section_text .= "<strong>EYES:</strong> ".(empty($q_EYES) ? "none provided" : $q_EYES)." \n ";
                }
            }

            $Constitutional = "Constitutional Symptoms: ".$q_general;
            $Gastrointestinal = "Gastrointestinal: ".$q_GI;
            $Cardiovascular = "Cardiovascular: ".$q_CV;
            $Neurological = "Neurological: ".$q_NEURO;
            $Psychiatric = "Psychiatric: ".$q_PSYCH;
            $Respiratory = "Respiratory: ".$q_RESP;
            $Musculoskeletal = "Musculoskeletal: ".$q_MSK;
            $ENT = "Ears, nose, throat:: ".$q_ENT;
            $Integumentary = "Integumentary: ".$q_SKIN;
            $EYES = "EYES: ".$q_EYES;                        

            $rosDetail = array($Constitutional,$Gastrointestinal,$Cardiovascular,$Neurological,$Psychiatric,$Respiratory,$Musculoskeletal,$ENT,$Integumentary,$EYES);

      }
      elseif($user_detail->chief_compliant_userdetail->current_step_id['id'] == 22){

            $q_general = rtrim($q_general,', ');
        // $q_GI = rtrim($q_GI,', ');
        // $q_GU = rtrim($q_GU,', ');
        $q_GIGU = rtrim($q_GIGU,', ');
        $q_CV = rtrim($q_CV,', ');
        $q_PSYCH = rtrim($q_PSYCH,', ');
        $q_PSYCH = str_replace("si", "SI", $q_PSYCH);
        $q_RESP = rtrim($q_RESP,', ');
        
        $section_text .= "<strong>Constitutional Symptoms:</strong> ".(empty($q_general) ? "none provided" : $q_general)." \n ";
            $section_text .= "<strong>Cardiovascular:</strong> ".(empty($q_CV) ? "none provided" : $q_CV)." \n ";
            $section_text .= "<strong>Respiratory:</strong> ".(empty($q_RESP) ? "none provided" : $q_RESP)." \n ";
            $section_text .= "<strong>GI/GU:</strong> ".(empty($q_GIGU) ? "none provided" : $q_GIGU)." \n ";
            // $section_text .= "<strong>Genitourinary:</strong> ".(empty($q_GU) ? "none provided" : $q_GU)." \n ";
            
            $section_text .= "<strong>Psychiatric:</strong> ".(empty($q_PSYCH) ? "none provided" : $q_PSYCH)." \n ";  
        
      }
      elseif($user_detail->chief_compliant_userdetail->current_step_id['id'] == 23){

        $q_general = rtrim($q_general,', ');
        $q_GI = rtrim($q_GI,', ');            
        $q_EYES = rtrim($q_EYES,', ');
        $q_HEENT = rtrim($q_HEENT,', ');
        $q_GU = rtrim($q_GU,', ');
        $q_GIGU = rtrim($q_GIGU,', ');
        $q_CV = rtrim($q_CV,', ');
        $q_PSYCH = rtrim($q_PSYCH,', ');
       // $q_PSYCH = str_replace("si", "SI", $q_PSYCH);
        $q_RESP = rtrim($q_RESP,', ');
        $q_MOUTH = rtrim($q_MOUTH,', ');
        $q_NEUROMSK = rtrim($q_NEUROMSK,', ');
        
        
        $section_text .= "<strong>Constitutional: </strong> ".(empty($q_general) ? "none provided" : $q_general)." \n ";
        $section_text .= "<strong>Eyes: </strong> ".(empty($q_EYES) ? "none provided" : $q_EYES)." \n ";
        $section_text .= "<strong>Nose: </strong> ".(empty($q_HEENT) ? "none provided" : $q_HEENT)." \n ";
        $section_text .= "<strong>Mouth: </strong> ".(empty($q_MOUTH) ? "none provided" : $q_MOUTH)." \n ";
        $section_text .= "<strong>Cardiovascular:</strong> ".(empty($q_CV) ? "none provided" : $q_CV)." \n ";
        $section_text .= "<strong>Respiratory:</strong> ".(empty($q_RESP) ? "none provided" : $q_RESP)." \n ";
        $section_text .= "<strong>Gastrointestinal:</strong> ".(empty($q_GI) ? "none provided" : $q_GI)." \n ";
        $section_text .= "<strong>Genitourinary:</strong> ".(empty($q_GU) ? "none provided" : $q_GU)." \n ";
        $section_text .= "<strong>Neurological:</strong> ".(empty($q_NEUROMSK) ? "none provided" : $q_NEUROMSK)." \n ";        
        $section_text .= "<strong>Hematological:</strong> ".(empty($q_PSYCH) ? "none provided" : $q_PSYCH)." \n ";          
      }
      elseif($user_detail->chief_compliant_userdetail->current_step_id['id'] == 25){

        $q_CV = rtrim($q_CV,', ');
        $q_general = rtrim($q_general,', ');
        $q_HEENT = rtrim($q_HEENT,', ');
        // $ortho_ENDO = rtrim($ortho_ENDO,', ');
        $ortho_MSK = rtrim($ortho_MSK,', ');
        $spine_HEMELYMPH = rtrim($spine_HEMELYMPH,', ');
        $q_RESP = rtrim($q_RESP,', ');
        $q_NEUROMSK = rtrim($q_NEUROMSK,', ');
        $q_GI = rtrim($q_GI,', ');  
        $q_PSYCH = rtrim($q_PSYCH,', ');                  
        $q_SKIN = rtrim($q_SKIN,', ');        
        $q_GU = rtrim($q_GU,', '); 
        $q_IMMUNO = "";      
        // $ortho_ENDO = rtrim($ortho_ENDO,', ');

        
        $section_text .= "<strong>Cardiovascular:</strong> ".(empty($q_CV) ? "none provided" : $q_CV)." \n ";
        $section_text .= "<strong>Constitutional: </strong> ".(empty($q_general) ? "none provided" : $q_general)." \n ";
        $section_text .= "<strong>HEENT: </strong> ".(empty($q_HEENT) ? "none provided" : $q_HEENT)." \n ";
        $section_text .= "<strong>Musculoskeletal:</strong> ".(empty($ortho_MSK) ? "none provided" : $ortho_MSK)." \n ";
        // $section_text .= "<strong>Metabolic/Endocrine:</strong> ".(empty($ortho_ENDO) ? "none provided" : $ortho_ENDO)." \n ";
        $section_text .= "<strong>Hematologic/Lymphatic:</strong> ".(empty($spine_HEMELYMPH) ? "none provided" : $spine_HEMELYMPH)." \n";
        // $section_text .= "<strong>Reproductive Male:</strong> ".(empty($q_RESP) ? "none provided" : $q_RESP)." \n ";
        // $section_text .= "<strong>Reproductive Female:</strong> ".(empty($q_NEUROMSK) ? "none provided" : $q_NEUROMSK)." \n ";
        $seach_array_str = array('sob','tb exposure');
        $rep_array_str = array('SOB','TB exposure');
        $section_text .= "<strong>Respiratory:</strong> ".(empty($q_RESP) ? "none provided" : str_replace($seach_array_str,$rep_array_str,$q_RESP))." \n ";
        $section_text .= "<strong>Neurological:</strong> ".(empty($q_NEUROMSK) ? "none provided" : $q_NEUROMSK)." \n ";
        $section_text .= "<strong>Gastrointestinal:</strong> ".(empty($q_GI) ? "none provided" : $q_GI)." \n ";
        $section_text .= "<strong>Psychiatric:</strong> ".(empty($q_PSYCH) ? "none provided" : str_replace('si','SI',$q_PSYCH))." \n ";
        $section_text .= "<strong>Immunologic:</strong> ".(empty($q_IMMUNO) ? "none provided" : $q_IMMUNO)." \n ";
        $section_text .= "<strong>Integumentary:</strong> ".(empty($q_SKIN) ? "none provided" : $q_SKIN)." \n ";
        $section_text .= "<strong>Genitourinary:</strong> ".(empty($q_GU) ? "none provided" : $q_GU)." \n ";  

        $internal_q_CV = "Cardiovascular: ".(empty($q_CV) ? "none provided" : $q_CV);
        $internal_general = "Constitutional: ".(empty($q_general) ? "none provided" : $q_general);
        $internal_HEENT = "HEENT: ".(empty($q_HEENT) ? "none provided" : $q_HEENT);
        $internal_MSK = "Musculoskeletal: ".(empty($ortho_MSK) ? "none provided" : $ortho_MSK);
        $internal_HEMELYMPH = "Hematologic/Lymphatic:: ".(empty($spine_HEMELYMPH) ? "none provided" : $spine_HEMELYMPH);
        $internal_Respiratory = "Respiratory: ".(empty($q_RESP) ? "none provided" : str_replace($seach_array_str,$rep_array_str,$q_RESP));
        $internal_NEUROMSK = "Neurological: ".(empty($q_NEUROMSK) ? "none provided" : $q_NEUROMSK);
        $internal_GI = "Gastrointestinal: ".(empty($q_GI) ? "none provided" : $q_GI);
        $internal_PSYCH = "Psychiatric: ".(empty($q_PSYCH) ? "none provided" : str_replace('si','SI',$q_PSYCH));
        $internal_IMMUNO = "Immunologic: ".(empty($q_IMMUNO) ? "none provided" : $q_IMMUNO);
        $internal_SKIN = "Integumentary: ".(empty($q_SKIN) ? "none provided" : $q_SKIN);
        $internal_GU = "Genitourinary: ".(empty($q_GU) ? "none provided" : $q_GU);       

        $rosDetail = array($internal_q_CV,$internal_general,$internal_HEENT,$internal_MSK,$internal_HEMELYMPH,$internal_Respiratory,$internal_NEUROMSK,$internal_GI,$internal_PSYCH,$internal_IMMUNO,$internal_SKIN,$internal_GU);      




      }
      else{

            $q_general = rtrim($q_general,', ');
            $q_HEENT = rtrim($q_HEENT,', ');
            $q_GIGU = rtrim($q_GIGU,', ');
            $q_HEMEENDO = rtrim($q_HEMEENDO,', ');
            $q_CV = rtrim($q_CV,', ');
            $q_NEUROMSK = rtrim($q_NEUROMSK,', ');
            $q_RESP = rtrim($q_RESP,', ');
            $q_PSYCH = rtrim($q_PSYCH,', ');
            $q_SKIN = rtrim($q_SKIN,', ');

          $section_text .= "<strong>Constitutional Symptoms:</strong> ".(empty($q_general) ? "none provided" : $q_general)." \n ";
          $section_text .= "<strong>Cardiovascular:</strong> ".(empty($q_CV) ? "none provided" : $q_CV)." \n ";
          $section_text .= "<strong>Respiratory:</strong> ".(empty($q_RESP) ? "none provided" : $q_RESP)." \n ";
          $section_text .= "<strong>Gastrointestinal/Genitourinary:</strong> ".(empty($q_GIGU) ? "none provided" : $q_GIGU)." \n ";
          $section_text .= "<strong>Integumentary:</strong> ".(empty($q_SKIN) ? "none provided" : $q_SKIN)." \n ";
          $section_text .= "<strong>Neurological/Musculoskeletal:</strong> ".(empty($q_NEUROMSK) ? "none provided" : $q_NEUROMSK)." \n ";
          $section_text .= "<strong>Psychiatric:</strong> ".(empty($q_PSYCH) ? "none provided" : $q_PSYCH)." \n ";
          $section_text .= "<strong>Hematologic/Endocrine:</strong> ".(empty($q_HEMEENDO) ? "none provided" : $q_HEMEENDO)." \n ";
          $section_text .= "<strong>Head,ears,eyes,nose,throat:</strong> ".(empty($q_HEENT) ? "none provided" : $q_HEENT)." \n ";

          $primaryCareGen = "Constitutional Symptoms:: ".$q_general;
          $primaryCareCV = "Cardiovascular: ".$q_CV;
          $primaryCareRESP = "Respiratory: ".$q_RESP;
          $primaryCareq_GIGU = "Gastrointestinal/Genitourinary: ".$q_GIGU;
          $primaryCareCV = "Integumentary: ".$q_SKIN;
          $primaryCareNEUROMSK = "Neurological/Musculoskeletal: ".$q_NEUROMSK;
          $primaryCarePSYCH = "Psychiatric: ".$q_PSYCH;
          $primaryCareHEMEENDO = "Hematologic/Endocrine: ".$q_HEMEENDO;
          $primaryCareHEENT = "Head,ears,eyes,nose,throat: ".$q_HEENT;          

          $rosDetail = array($primaryCareGen,$primaryCareCV,$primaryCareRESP,$primaryCareq_GIGU,$primaryCareCV,$primaryCareNEUROMSK,$primaryCarePSYCH,$primaryCareHEMEENDO,$primaryCareHEENT);

      }

    }



    if($user_detail->specialization_id == 3){  // For specialization id 3 related health questionaire logic



        $ortho_GEN = rtrim($ortho_GEN,', ');

        $ortho_EYES = rtrim($ortho_EYES,', ');

        $ortho_ENT = rtrim($ortho_ENT,', ');

        $ortho_CV = rtrim($ortho_CV,', ');

        $ortho_RESP = rtrim($ortho_RESP,', ');

        $ortho_NEURO = rtrim($ortho_NEURO,', ');

        $ortho_MSK = rtrim($ortho_MSK,', ');

        $ortho_GI = rtrim($ortho_GI,', ');

        $ortho_GU = rtrim($ortho_GU,', ' );

        $ortho_SKINBREAST = rtrim($ortho_SKINBREAST,', ');

        $ortho_ENDO = rtrim($ortho_ENDO,', ');

        $ortho_PSYCH = rtrim($ortho_PSYCH,', ');

       // $ortho_ALLIMM = rtrim($ortho_ALLIMM,', ');



     $section_text .= "<strong>Constitutional Symptoms:</strong> ".(empty($ortho_GEN) ? "none provided" : $ortho_GEN)." \n ";

     $section_text .= "<strong>EYES:</strong> ".(empty($ortho_EYES) ? "none provided" : $ortho_EYES)." \n ";

     $section_text .= "<strong>ENT:</strong> ".(empty($ortho_ENT) ? "none provided" : $ortho_ENT)." \n ";

     $section_text .= "<strong>Cardiovascular:</strong> ".(empty($ortho_CV) ? "none provided" : $ortho_CV)." \n ";

     $section_text .= "<strong>Respiratory:</strong> ".(empty($ortho_RESP) ? "none provided" : $ortho_RESP)." \n ";

     $section_text .= "<strong>Gastrointestinal:</strong> ".(empty($ortho_GI) ? "none provided" : $ortho_GI)." \n ";

     $section_text .= "<strong>Musculoskeletal:</strong> ".(empty($ortho_MSK) ? "none provided" : $ortho_MSK)." \n ";

     $section_text .= "<strong>Integumentary/BREAST:</strong> ".(empty($ortho_SKINBREAST) ? "none provided" : $ortho_SKINBREAST)." \n ";

     $section_text .= "<strong>Neurological:</strong> ".(empty($ortho_NEURO) ? "none provided" : $ortho_NEURO)." \n ";

     $section_text .= "<strong>Psychiatric:</strong> ".(empty($ortho_PSYCH) ? "none provided" : $ortho_PSYCH)." \n ";

     $section_text .= "<strong>Endocrine:</strong> ".(empty($ortho_ENDO) ? "none provided" : $ortho_ENDO)." \n ";

     $section_text .= "<strong>Hematologic/Lymphatic:</strong> ".(empty($ortho_HEMELYMPH) ? "none provided" : $ortho_HEMELYMPH)." \n ";

     $section_text .= "<strong>Genitourinary:</strong> ".(empty($ortho_GU) ? "none provided" : $ortho_GU)." \n ";

     $section_text .= "<strong>Allergy/Immunology:</strong> ".(empty($ortho_ALLIMM) ? "none provided" : $ortho_ALLIMM)." \n";  // currently $ortho_ALLIMM varuable is empty because client not provided data for this seciton will provide in future
    }

    if($user_detail->specialization_id == 4 || $user_detail->specialization_id == 7){  // For specialization id 4 related health questionaire logic

        $spine_MSK = rtrim($spine_MSK,', ');

        $spine_NEURO = rtrim($spine_NEURO,', ');

        $spine_GEN = rtrim($spine_GEN,', ');

        $spine_ENT = rtrim($spine_ENT,', ');

        $spine_CV = rtrim($spine_CV,', ');

        $spine_RESP = rtrim($spine_RESP,', ');

        $spine_GI = rtrim($spine_GI,', ');

        $spine_SKINBREAST = rtrim($spine_SKINBREAST,', ');

        $spine_ENDO = rtrim($spine_ENDO,', ');

        $spine_HEMELYMPH = rtrim($spine_HEMELYMPH,', ');



    $section_text .= "<strong>Constitutional Symptoms:</strong> ".(empty($spine_GEN) ? "none provided" : $spine_GEN)." \n ";

    $section_text .= "<strong>ENT:</strong> ".(empty($spine_ENT) ? "none provided" : $spine_ENT)." \n ";

    $section_text .= "<strong>Cardiovascular:</strong> ".(empty($spine_CV) ? "none provided" : $spine_CV)." \n ";

    $section_text .= "<strong>Respiratory:</strong> ".(empty($spine_RESP) ? "none provided" : $spine_RESP)." \n ";

    $section_text .= "<strong>Gastrointestinal:</strong> ".(empty($spine_GI) ? "none provided" : $spine_GI)." \n ";

    $section_text .= "<strong>Musculoskeletal:</strong> ".(empty($spine_MSK) ? "none provided" : $spine_MSK)." \n ";

    $section_text .= "<strong>Integumentary/BREAST:</strong> ".(empty($spine_SKINBREAST) ? "none provided" : $spine_SKINBREAST)." \n ";

    $section_text .= "<strong>Neurological:</strong> ".(empty($spine_NEURO) ? "none provided" : $spine_NEURO)." \n ";

    $section_text .= "<strong>Endocrine:</strong> ".(empty($spine_ENDO) ? "none provided" : $spine_ENDO)." \n ";

    $section_text .= "<strong>Hematologic/Lymphatic:</strong> ".(empty($spine_HEMELYMPH) ? "none provided" : $spine_HEMELYMPH)." \n";

    }

    if($user_detail->specialization_id == 8)
    {
      // For specialization id 8 related health questionaire logic
            $oncology_GEN   = rtrim($oncology_GEN , ', ');
            $oncology_EYE   = rtrim($oncology_EYE , ', ');
            $oncology_ENT   = rtrim($oncology_ENT , ', ');
            $oncology_CV   = rtrim($oncology_CV , ', ');
            $oncology_RESP   = rtrim($oncology_RESP , ', ');
            $oncology_GI   = rtrim($oncology_GI , ', ');
            $oncology_GU   = rtrim($oncology_GU , ', ');
            $oncology_MSK   = rtrim($oncology_MSK , ', ');
            $oncology_SKIN   = rtrim($oncology_SKIN , ', ');
            $oncology_BREAST   = rtrim($oncology_BREAST , ', ');
            $oncology_NEURO  = rtrim($oncology_NEURO , ', ');
            $oncology_PSYCH   = rtrim($oncology_PSYCH , ', ');
            $oncology_ENDO   = rtrim($oncology_ENDO , ', ');
            $oncology_HEME_LYMPH   = rtrim($oncology_HEME_LYMPH , ', ');
            $oncology_ALL_IMM   = rtrim($oncology_ALL_IMM , ', ');


            $oncology_NEURO = isset($cancer_layman_detail['qa_neuro']) && !empty($cancer_layman_detail['qa_neuro']) ? $cancer_layman_detail['qa_neuro'].(!empty($oncology_NEURO) ? ", ".$oncology_NEURO : '') : $oncology_NEURO;

            $oncology_GI = isset($cancer_layman_detail['qa_gi']) && !empty($cancer_layman_detail['qa_gi']) ? $cancer_layman_detail['qa_gi'].(!empty($oncology_GI) ? ", ".$oncology_GI : '') : $oncology_GI;

            $oncology_EYE = isset($cancer_layman_detail['qa_eye']) && !empty($cancer_layman_detail['qa_eye']) ? $cancer_layman_detail['qa_eye'].(!empty($oncology_EYE) ? ", ".$oncology_EYE : '') : $oncology_EYE;

            $oncology_PSYCH = isset($cancer_layman_detail['qa_psych']) && !empty($cancer_layman_detail['qa_psych']) ? $cancer_layman_detail['qa_psych'].(!empty($oncology_PSYCH) ? $oncology_PSYCH : '') : $oncology_PSYCH;

            $oncology_RESP = isset($cancer_layman_detail['qa_resp']) && !empty($cancer_layman_detail['qa_resp']) ? $cancer_layman_detail['qa_resp'].(!empty($oncology_RESP) ? ", ".$oncology_RESP : '') : $oncology_RESP;

            $oncology_CV = isset($cancer_layman_detail['qa_cv']) && !empty($cancer_layman_detail['qa_cv']) ? $cancer_layman_detail['qa_cv'].(!empty($oncology_CV) ? ", ".$oncology_CV : '') : $oncology_CV ;

            $oncology_SKIN = isset($cancer_layman_detail['qa_skin']) && !empty($cancer_layman_detail['qa_skin']) ? $cancer_layman_detail['qa_skin'].(!empty($oncology_SKIN) ? ", ".$oncology_SKIN : '') : $oncology_SKIN;

            $oncology_MSK = isset($cancer_layman_detail['qa_msk']) && !empty($cancer_layman_detail['qa_msk']) ? $cancer_layman_detail['qa_msk'].(!empty($oncology_MSK) ? ", ".$oncology_MSK : '') : $oncology_MSK;

            $oncology_GU = isset($cancer_layman_detail['qa_gu']) && !empty($cancer_layman_detail['qa_gu']) ? $cancer_layman_detail['qa_gu'].(!empty($oncology_GU) ? ", ".$oncology_GU : '') : $oncology_GU;

            $oncology_GEN = isset($cancer_layman_detail['qa_gen']) && !empty($cancer_layman_detail['qa_gen']) ? $cancer_layman_detail['qa_gen'].(!empty($oncology_GEN) ? ", ".$oncology_GEN : '') : $oncology_GEN;

            $oncology_HEME_LYMPH = isset($cancer_layman_detail['qa_heme_lymph']) && !empty($cancer_layman_detail['qa_heme_lymph']) ? $cancer_layman_detail['qa_heme_lymph'].(!empty($oncology_HEME_LYMPH) ? ", ".$oncology_HEME_LYMPH : '') : $oncology_HEME_LYMPH;

            $oncology_ENT = isset($cancer_layman_detail['qa_ent']) && !empty($cancer_layman_detail['qa_ent']) ? $cancer_layman_detail['qa_ent'].(!empty($oncology_ENT) ? ", ".$oncology_ENT : '') : $oncology_ENT;

            $oncology_ALL_IMM = isset($cancer_layman_detail['qa_all_imm']) && !empty($cancer_layman_detail['qa_all_imm']) ? $cancer_layman_detail['qa_all_imm'].(!empty($oncology_ALL_IMM) ? ", ".$oncology_ALL_IMM : '') : $oncology_ALL_IMM;

            $oncology_BREAST = isset($cancer_layman_detail['qa_breast']) && !empty($cancer_layman_detail['qa_breast']) ? $cancer_layman_detail['qa_breast'].(!empty($oncology_BREAST) ? ", ".$oncology_BREAST : '') : $oncology_BREAST;

            $oncology_GEN   = trim($oncology_GEN , ', ');
            $oncology_EYE   = trim($oncology_EYE , ', ');
            $oncology_ENT   = trim($oncology_ENT , ', ');
            $oncology_CV   = trim($oncology_CV , ', ');
            $oncology_RESP   = trim($oncology_RESP , ', ');
            $oncology_GI   = trim($oncology_GI , ', ');
            $oncology_GU   = trim($oncology_GU , ', ');
            $oncology_MSK   = trim($oncology_MSK , ', ');
            $oncology_SKIN   = trim($oncology_SKIN , ', ');
            $oncology_BREAST   = trim($oncology_BREAST , ', ');
            $oncology_NEURO  = trim($oncology_NEURO , ', ');
            $oncology_PSYCH   = trim($oncology_PSYCH , ', ');
            $oncology_ENDO   = trim($oncology_ENDO , ', ');
            $oncology_HEME_LYMPH   = trim($oncology_HEME_LYMPH , ', ');
            $oncology_ALL_IMM   = trim($oncology_ALL_IMM , ', ');



            $section_text .= "<strong>GEN:</strong> ".(empty($oncology_GEN) ? "none provided" : $oncology_GEN)." \n ";
            $section_text .= "<strong>EYES:</strong> ".(empty($oncology_EYE) ? "none provided" : $oncology_EYE)." \n ";
            $section_text .= "<strong>ENT:</strong> ".(empty($oncology_ENT) ? "none provided" : $oncology_ENT)." \n ";
            $section_text .= "<strong>CV:</strong> ".(empty($oncology_CV) ? "none provided" : $oncology_CV)." \n ";
            $section_text .= "<strong>RESP:</strong> ".(empty($oncology_RESP) ? "none provided" : $oncology_RESP)." \n ";
            $section_text .= "<strong>GI:</strong> ".(empty($oncology_GI) ? "none provided" : $oncology_GI)." \n ";
            $section_text .= "<strong>GU:</strong> ".(empty($oncology_GU) ? "none provided" : $oncology_GU)." \n ";
            $section_text .= "<strong>MSK:</strong> ".(empty($oncology_MSK) ? "none provided" : $oncology_MSK)." \n ";
            $section_text .= "<strong>SKIN:</strong> ".(empty($oncology_SKIN) ? "none provided" : $oncology_SKIN)." \n ";
            $section_text .= "<strong>BREAST:</strong> ".(empty($oncology_BREAST) ? "none provided" : $oncology_BREAST)." \n ";
            $section_text .= "<strong>NEURO:</strong> ".(empty($oncology_NEURO) ? "none provided" : $oncology_NEURO)." \n ";
            $section_text .= "<strong>PSYCH:</strong> ".(empty($oncology_PSYCH) ? "none provided" : $oncology_PSYCH)." \n ";
            $section_text .= "<strong>ENDO:</strong> ".(empty($oncology_ENDO) ? "none provided" : $oncology_ENDO)." \n ";
            $section_text .= "<strong>HEME/LYMPH:</strong> ".(empty($oncology_HEME_LYMPH) ? "none provided" : $oncology_HEME_LYMPH)." \n ";
            $section_text .= "<strong>ALL/IMM:</strong> ".(empty($oncology_ALL_IMM) ? "none provided" : $oncology_ALL_IMM)." \n";

            $oncology_GEN = "GEN: ".$oncology_GEN;
            $oncology_EYE = "EYES: ".$oncology_EYE;
            $oncology_ENT = "ENT: ".$oncology_ENT;
            $oncology_CV = "CV: ".$oncology_CV;
            $oncology_RESP = "RESP: ".$oncology_RESP;
            $oncology_GI = "GI: ".$oncology_GI;
            $oncology_GU = "GU: ".$oncology_GU;
            $oncology_MSK = "MSK: ".$oncology_MSK;
            $oncology_SKIN = "SKIN: ".$oncology_SKIN;
            $oncology_BREAST = "BREAST: ".$oncology_BREAST;
            $oncology_NEURO = "NEURO: ".$oncology_NEURO;
            $oncology_PSYCH = "PSYCH: ".$oncology_PSYCH;
            $oncology_ENDO = "ENDO: ".$oncology_ENDO;
            $oncology_HEME_LYMPH = "HEME/LYMPH: ".$oncology_HEME_LYMPH;
            $oncology_ALL_IMM = "ALL/IMM: ".$oncology_ALL_IMM;

            $rosDetail = array($oncology_GEN,$oncology_EYE,$oncology_ENT,$oncology_CV,$oncology_RESP,$oncology_GI,$oncology_GU,$oncology_MSK,$oncology_SKIN,$oncology_BREAST,$oncology_NEURO,$oncology_PSYCH,$oncology_ENDO,$oncology_HEME_LYMPH,$oncology_ALL_IMM);
    }
}
    $section_text .= "\n";
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 18){

        $temp_section_text = '';
        $temp_section_text .= "<strong>Vitals:</strong> <strong>BMI:</strong> ".(empty($bmi) ? 'none provided' : $bmi).", <strong>GLU:</strong> ".(empty($cronic_subjective_text_detail['glu_layman']) ? 'none provided' : $cronic_subjective_text_detail['glu_layman']).", <strong>BP:</strong> ".(empty($cronic_subjective_text_detail['bp_layman']) ? 'none provided' : $cronic_subjective_text_detail['bp_layman']).", <strong>SPO2:</strong> ".(empty($cronic_subjective_text_detail['spo2_layman']) ? 'none provided' : $cronic_subjective_text_detail['spo2_layman'])."\n";
        $temp_section_text .= "<strong>Glucose Log:</strong> ".(empty($cronic_subjective_text_detail['glu_log']) ? 'none provided' : "\n ".$cronic_subjective_text_detail['glu_log'])."\n";
        $temp_section_text .= "<strong>BP Log:</strong> ".(empty($cronic_subjective_text_detail['bp_log']) ? 'none provided' : "\n ".$cronic_subjective_text_detail['bp_log'])."\n";
        $temp_section_text .= "<strong>Peak Flow Log:</strong> ".(empty($cronic_subjective_text_detail['peak_flow_log']) ? 'none provided' : "\n ".$cronic_subjective_text_detail['peak_flow_log'])."\n";
        $section_text.= $temp_section_text;

        //For showing in api section
        $ehr_section = array();
        $ehr_section['vitals'] = "BMI: ".(empty($bmi) ? 'none provided' : $bmi).", GLU: ".(empty($cronic_subjective_text_detail['glu_layman']) ? 'none provided' : $cronic_subjective_text_detail['glu_layman']).", BP: ".(empty($cronic_subjective_text_detail['bp_layman']) ? 'none provided' : $cronic_subjective_text_detail['bp_layman']).", SPO2: ".(empty($cronic_subjective_text_detail['spo2_layman']) ? 'none provided' : $cronic_subjective_text_detail['spo2_layman']); 
        $ehr_section['glucose_log'] = (empty($cronic_subjective_text_detail['glu_log']) ? 'none provided' : str_replace("\n",'', $cronic_subjective_text_detail['glu_log']));
        $ehr_section['bp_log'] = (empty($cronic_subjective_text_detail['bp_log']) ? 'none provided' : str_replace("\n",'',$cronic_subjective_text_detail['bp_log']));
        $ehr_section['peak_flow_log'] = (empty($cronic_subjective_text_detail['peak_flow_log']) ? 'none provided' : str_replace("\n",'', $cronic_subjective_text_detail['peak_flow_log']));        
    }

    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 17){

        $ehrSectionCovidIntake = array();
        $temp_section_text = '';
        $temp_section_text .= "\n<strong>Vitals:</strong> ".($login_user->gender == 0 ? "<strong>BMI:</strong> ".(empty($bmi) ? 'none provided' : $bmi).', ' : "" )."<strong>T:</strong> ".(empty($covid_subjective_detail['temperature']) ? 'none provided' : $covid_subjective_detail['temperature']).", <strong>SpO2:</strong> ".(empty($covid_subjective_detail['spo2']) ? 'none provided' : $covid_subjective_detail['spo2'])."\n";
       // $temp_section_text .= "<strong>Social Hx:</strong> "

        $temp_section_text .= "\n<strong>IMPRESSION:</strong> ".$covid_risk." COVID-19 exposure risk".(!empty($covid_layman) ? " due to ".$covid_layman: "").", ".$health_risk." mortality risk ".(!empty($health_layman) ? "due to ".$health_layman:"").". \n";
        $temp_section_text .= "\n<strong>OBJECTIVE:</strong> \n ";
        $temp_section_text .= "Vitals: None reported by patient. \n ";
        $temp_section_text .= "Constitutional: Patient is speaking full sentences. No audible wheezing heard. \n ";
        $temp_section_text .= "Head and Face: No tenderness with guided palpation and percussion of frontal and maxillary sinuses. \n ";
        $temp_section_text .= "Ears, Nose, Mouth, Throat: No enlarged cervical and axillary lymph nodes felt on guided palpation. \n ";
        $temp_section_text .= "Neck: Full active ROM of neck in all directions without pain. \n ";
        $temp_section_text .= "Chest: No anterior chest wall tenderness on self-palpation. \n ";
        $temp_section_text .= "Abdomen: No tenderness with guided light and deep palpation of all abdominal quadrants. \n ";
        $temp_section_text .= "Musculoskeletal: Self-reports normal gait. Full active ROM of all extremities without pain or weakness. \n ";
        $temp_section_text .= "Psych: Oriented to time, place, person. Mood and affect appropriate. \n \n";

        $ehrNoteObjective = '';
        $ehrNoteObjective = "Vitals: None reported by patient. ";
        $ehrNoteObjective .= "Constitutional: Patient is speaking full sentences. No audible wheezing heard. ";
        $ehrNoteObjective .= "Head and Face: No tenderness with guided palpation and percussion of frontal and maxillary sinuses. ";
        $ehrNoteObjective .= "Ears, Nose, Mouth, Throat: No enlarged cervical and axillary lymph nodes felt on guided palpation.";
        $ehrNoteObjective .= "Neck: Full active ROM of neck in all directions without pain. ";
        $ehrNoteObjective .= "Chest: No anterior chest wall tenderness on self-palpation. ";
        $ehrNoteObjective .= "Abdomen: No tenderness with guided light and deep palpation of all abdominal quadrants.  ";
        $ehrNoteObjective .= "Musculoskeletal: Self-reports normal gait. Full active ROM of all extremities without pain or weakness. ";
        $ehrNoteObjective .= "Psych: Oriented to time, place, person. Mood and affect appropriate.";

        $ehrNoterecommendation = '';

        $temp_section_text .= "\n<strong>RECOMMENDATIONS:</strong> \n ";
        $temp_section_text .= "1. Obtain immediate medical care if any trouble breathing, persistent chest pain, confusion or worsening of condition. \n ";
        $temp_section_text .= "2. Call your local public health department to obtain a COVID-19 test. \n ";
        $temp_section_text .= "3. Take hydroxychloroquine 200 mg twice a day for 5 days, zinc 50 mg twice a day for 5 days. \n ";
        $temp_section_text .= "4. Take Tylenol (acetaminophen) 500mg to 1000g every 4 hours for temperature >100 degrees F. \n ";
        $temp_section_text .= "5. Drink plenty of fluids. \n ";
        $temp_section_text .= "6. Obtain as much rest as possible. \n ";
        $temp_section_text .= "7. Keep yourself nourished with a balanced diet and hydrated with water. \n ";
        $temp_section_text .= "8. Isolate yourself as much as possible until at least 3 days after the end of symptoms or 7 days from the beginning of symptoms. \n ";
        $temp_section_text .= "9. Avoid sharing dishes, towels, bed. \n ";
        $temp_section_text .= "10. Wear your own clean mask around others. \n ";
        $temp_section_text .= "11. Dispose of used tissue in a lined trash can. \n ";
        $temp_section_text .= "12. Wash your hands frequently, especially after blowing your nose. \n ";
        $temp_section_text .= "13. Disinfect all high-touch areas (e.g. phone, keyboard, tabletops, doorknobs) to prevent the spread of your infection to others. \n ";
        $temp_section_text .= "14. Call again if condition worsens or if no improvement in 2-3 days. \n ";
        $temp_section_text .= "15. Referral to telepsychiatry due to positive PHQ-2. \n \n";

        $ehrNoterecommendation = "1. Obtain immediate medical care if any trouble breathing, persistent chest pain, confusion or worsening of condition. ";
        $ehrNoterecommendation .= "2. Call your local public health department to obtain a COVID-19 test.";
        $ehrNoterecommendation .= "3. Take hydroxychloroquine 200 mg twice a day for 5 days, zinc 50 mg twice a day for 5 days.";
        $ehrNoterecommendation .= "4. Take Tylenol (acetaminophen) 500mg to 1000g every 4 hours for temperature >100 degrees F.";
        $ehrNoterecommendation .= "5. Drink plenty of fluids. ";
        $ehrNoterecommendation .= "6. Obtain as much rest as possible. ";
        $ehrNoterecommendation .= "7. Keep yourself nourished with a balanced diet and hydrated with water. ";
        $ehrNoterecommendation .= "8. Isolate yourself as much as possible until at least 3 days after the end of symptoms or 7 days from the beginning of symptoms. ";
        $ehrNoterecommendation .= "9. Avoid sharing dishes, towels, bed.  ";
        $ehrNoterecommendation .= "10. Wear your own clean mask around others.  ";
        $ehrNoterecommendation .= "11. Dispose of used tissue in a lined trash can.  ";
        $ehrNoterecommendation .= "12. Wash your hands frequently, especially after blowing your nose. ";
        $ehrNoterecommendation .= "13. Disinfect all high-touch areas (e.g. phone, keyboard, tabletops, doorknobs) to prevent the spread of your infection to others. ";
        $ehrNoterecommendation .= "14. Call again if condition worsens or if no improvement in 2-3 days. ";
        $ehrNoterecommendation .= "15. Referral to telepsychiatry due to positive PHQ-2.";

        $section_text.= $temp_section_text;

        $ehrSectionCovidIntake['vitals'] = ($login_user->gender == 0 ? "BMI: ".(empty($bmi) ? 'none provided' : $bmi).', ' : "" )."T: ".(empty($covid_subjective_detail['temperature']) ? 'none provided' : $covid_subjective_detail['temperature']).", SpO2:".(empty($covid_subjective_detail['spo2']) ? 'none provided' : $covid_subjective_detail['spo2']);

        $ehrSectionCovidIntake['IMPRESSION'] = $covid_risk." COVID-19 exposure risk".(!empty($covid_layman) ? " due to ".$covid_layman: "").", ".$health_risk." mortality risk ".(!empty($health_layman) ? "due to ".$health_layman:"");

        $ehrSectionCovidIntake['OBJECTIVE'] = $ehrNoteObjective;
        $ehrSectionCovidIntake['RECOMMENDATIONS'] = $ehrNoterecommendation;
    }


    $additional_comment_section = $user_detail->chief_compliant_userdetail->additional_comment;;

    $section_text .= "<strong>Final patient symptoms/comments:</strong> ".(!empty($user_detail->chief_compliant_userdetail->additional_comment) ? $user_detail->chief_compliant_userdetail->additional_comment : "no additional comments")." \n \n";
    $patient_medical_detail = $section_text;
    $patient_other_detail = '';
    $soapp_summary = '';
    $comm_summary = '';
    $dast_summary = '';
    if(isset($patient_other_detail_score) && !empty($patient_other_detail_score)){

        if(!empty($patient_other_detail_score['soapp_description']))
        {
            $soapp_summary = $patient_other_detail_score['soapp_summary']."<strong>Patient Answers:</strong> ".$patient_other_detail_score['soapp_description'];
        }

        if(!empty($patient_other_detail_score['comm_description'])){
           $comm_summary = $patient_other_detail_score['comm_summary']."<strong>Patient Answers:</strong> ".$patient_other_detail_score['comm_description'];
        }
        if(!empty($patient_other_detail_score['dast_description'])){
            $dast_summary = $patient_other_detail_score['dast_summary']."<strong>Patient Answers:</strong> ".$patient_other_detail_score['dast_description'];
        }
    }

if($note_format == "full"){

    $response = array('patient_basic_detail' => $patient_basic_detail, 'patient_medical_detail' => $patient_medical_detail,'patient_other_detail' => $patient_other_detail,'soapp_summary' => $soapp_summary, 'comm_summary'=> $comm_summary,'dast_summary' =>$dast_summary,'em_line' => $em_line);

    return $response;
    //end of ipatient care
}

$basicDetails = array();
   

if($note_format == 'FHIR'){

    $schedule_detail['appointment_time'] = !empty($schedule_detail['appointment_time'])?$this->CryptoSecurity->decrypt(base64_decode($schedule_detail['appointment_time']),SEC_KEY):'';
    $schedule_detail['appointment_date'] = !empty($schedule_detail['appointment_date'])?date('Y-m-d',strtotime($schedule_detail['appointment_date'])):'';  

    //manage the array for store the note in database for EHR
//h(ucfirst($login_user->last_name)).', '.h(ucfirst($login_user->first_name));
    // $basicDetails = array(
    //     'encounterId' => !empty($schedule_detail['id'])?$schedule_detail['id']:'',
    //     'clinicAppointmentId' => !empty($schedule_detail['clinic_appointment_id'])?$schedule_detail['clinic_appointment_id']:'',
    //     'firstName' => !empty($login_user->first_name) ? $login_user->first_name : '',
    //     'lastName' => !empty($login_user->last_name) ? $login_user->last_name : '',
    //     'mrn' => !empty($mrn) ? $mrn : '',
    //     'dob' => !empty($patient_dob) ? $patient_dob : '',
    //     'gender' => !empty($patient_gender) ? $patient_gender : '',
    //     'ssn' => "XXX-XX-XXXX",
    //     'race' => !empty($patient_race) ? $patient_race : '',
    //     'preferredPharmacy' => !empty($login_user->pharmacy) ? $login_user->pharmacy : '',
    //     'dateOfService' => !empty($date_of_service) ? $date_of_service : '',
    //     'timezone' => 'CST',
    //     'typeOfService' => "Office or Other Outpatient Services",
        
    // );


    $RaceCode = array('1' =>'1002-5','2' =>'2028-9','3' =>'2054-5','4' =>'2076-8', '5' =>'2106-3','6' =>'2131-1');
    $RaceValue = array('1' =>'American Indian or Alaska Native','2' =>'Asian', '3' => 'Black or African American', '4' =>'Native Hawaiian or Other Pacific Islander', '5' =>'White' , '6' =>'Other Race');

    $ethinicityCode = array('1' =>'2135-2' , '2' =>'2186-5');
    $ethinicityValue = array('1' =>'Hispanic or Latino', '2' =>'Not Hispanic or Latino');
   // $genderCode = array('0' =>'F', '1' =>'M');

   // $patient_dob = date('Ymd',strtotime($login_user->dob));



    // $patientRole = array(                       
    //             "telecom" => array(
    //                 "value" => !empty($login_user->phone) ? $login_user->phone : ''
    //             ),
    //             "preferredPharmacy" => array(
    //                 "value" => !empty($login_user->pharmacy) ? $login_user->pharmacy : ''
    //             ),
    //             "dateOfService" => array(
    //                 "value" => !empty($date_of_service) ? $date_of_service : ''
    //             ),
    //             "timezone" => array(
    //                 "value" => "CST"
    //             ),
    //             "typeOfService" => array(
    //                 "value" => "Office or Other Outpatient Services"
    //             ),
    //             "patient" => array(
    //                 "name" => array(
    //                     "given" => !empty($login_user->first_name) ? $login_user->first_name : '',
    //                     "family" => !empty($login_user->last_name) ? $login_user->last_name : ''
    //                 ),
    //                 "administrativeGenderCode" => array(
    //                     "code" => !empty($login_user->gender) ? $genderCode[$login_user->gender] : ''
    //                 ),
    //                 "birthTime" => array(
    //                     "value" => !empty($patient_dob) ? $patient_dob : ''
    //                 ),
    //                 "raceCode" => array(
    //                     "code" => !empty($login_user->clinical_race) ? $RaceCode[$login_user->clinical_race] : '',
    //                     "name" => !empty($login_user->clinical_race) ? $RaceValue[$login_user->clinical_race] : ''
    //                 ),
    //                 "ethnicGroupCode" => array(
    //                     "code" => !empty($login_user->clinical_ethnicity) ? $ethinicityCode[$login_user->clinical_ethnicity] : '',
    //                     "name" => !empty($login_user->clinical_ethnicity) ? $ethinicityValue[$login_user->clinical_ethnicity] : ''
    //                 )
    //             )
    //         );

    $first_name = !empty($login_user->first_name) ? $login_user->first_name : '';
    $last_name = !empty($login_user->last_name) ? $login_user->last_name : '';
    $phone = !empty($login_user->phone) ? $login_user->phone : '';
    $mrn = !empty($mrn) ? $mrn : '';

    $fullAddress =  !empty($login_user->street) ? $login_user->street.',' : '';
    $fullAddress .= !empty($login_user->city) ? $login_user->city.',' : '';
    $fullAddress .= !empty($login_user->state) ? $login_user->state.',' : '';
    $fullAddress .= !empty($login_user->country) ? $login_user->country.',' : '';
    $fullAddress .= !empty($login_user->zip) ? $login_user->zip : '';

    $fullAddress   = rtrim($fullAddress , ', ');    

    $patientRole =  array(
        "resourceType" => "Patient",
        "text" => array(
            "status" => "generated",
            "div" => '<div xmlns="http://www.w3.org/1999/xhtml">
            <table>
               <tbody>
                  <tr>
                            <td>Name</td>
                            <td>'.$first_name.' 
                          <b>'.$last_name.'</b>
                         </td>
                        </tr>
                        <tr>
                            <td>Address</td>
                            <td>'.$fullAddress.'</td>
                        </tr>
                        <tr>
                            <td>Contacts</td>
                            <td>Home: unknown. Work: +'.$phone.'</td>
                        </tr>
                        <tr>
                            <td>Id</td>
                            <td>MRN: '.$mrn.' (Valhalla Demo Clinic)</td>
                        </tr>
                    </tbody>
                </table>
            </div>'
        ),
        "active" => true,
        "name" => array(
            array(
                "use" => "official",
                "family" => !empty($login_user->last_name) ? $login_user->last_name : '',
                "given" => array(
                    !empty($login_user->first_name) ? $login_user->first_name : ''
                )
            )
        ),
        "telecom" => array(
            array(
                "system" => "phone",
                "value" => !empty($login_user->phone) ? $login_user->phone : '',
                "use" => "mobile",
                "rank" => 1
            )
        ),
        "gender" => !empty($patient_gender) ? $patient_gender : '',
        'doctorName' => !empty($schedule_detail['doctor_name']) ? $this->CryptoSecurity->decrypt(base64_decode($schedule_detail['doctor_name']),SEC_KEY): '',
        "birthDate" => !empty($patient_dob) ? date('Y-m-d',strtotime($patient_dob)) : '',
        "deceasedBoolean" => false,
        "preferredPharmacy" => !empty($login_user->pharmacy) ? $login_user->pharmacy : '',
        "dateOfService" => !empty($date_of_service) ? $date_of_service : '',
        "timezone" => "CST",
        "typeOfService" => "Office or Other Outpatient Services",
        "appointmentTime" =>  $schedule_detail['appointment_date'].' '.$schedule_detail['appointment_time'],
        "race" => array(
            "code" => !empty($login_user->clinical_race) ? $RaceCode[$login_user->clinical_race] : '',
            "display" => !empty($login_user->clinical_race) ? $RaceValue[$login_user->clinical_race] : ''
        ),
        "ethnicity" => array(
            "code" => !empty($login_user->clinical_ethnicity) ? $ethinicityCode[$login_user->clinical_ethnicity] : '',
            "display" => !empty($login_user->clinical_ethnicity) ? $ethinicityValue[$login_user->clinical_ethnicity] : ''
        ),
        "address" => array(
            array(
                "use" => "home",
                "type" => "both",
                "text" => $fullAddress,
                "line" => array(
                    !empty($login_user->street) ? $login_user->street : '',                    
                ),
                "city" => !empty($login_user->city) ? $login_user->city : '',
                "state" => !empty($login_user->state) ? $login_user->state : '',
                "postalCode" => !empty($login_user->zip) ? $login_user->zip : ''
            )
        )
    );    
       
    
    $insuranceDetails = array(
            'insuranceType' => !empty($login_user->insuranceType) ? $login_user->insuranceType : '',
            'subscriberName' => !empty($login_user->subscriberName) ? $login_user->subscriberName : '',
            'identificationNumber' =>!empty($login_user->identificationNumber) ? $login_user->identificationNumber : '',
            'groupNumber' =>!empty($login_user->groupNumber) ? $login_user->groupNumber : '',
            'insuranceCompany' =>!empty($login_user->insuranceCompany) ? $login_user->insuranceCompany : '',
    );
    
    $medicalDetails['cc'] = !empty($cc_section) ? array($cc_section): array("");
    //pr($medicalDetails);die;


    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'],[18,25])){
        $medicalDetails['hpi'] = !empty($subjective_section) ? array(str_replace("none of these","",$subjective_section)) : '';
        $medicalDetails['cc'] = !empty($chronic_cond_name) ? array($chronic_cond_name): '';
    }
    //pr($medicalDetails);die;
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19){
        $hpi_section = strip_tags($hpi_section);        
        $splitHpiSection  = explode("\n", $hpi_section);        
        $ehrHpi = array();        
        if(!empty($splitHpiSection))
        {     
           $splitHpiSection = array_filter($splitHpiSection);      
            foreach ($splitHpiSection as $key => $value) {
                $ehrHpi[] = trim($value);                
            }            
        }
        $medicalDetails['hpi'] = !empty($ehrHpi) ? $ehrHpi : array("");
    }   
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 17){
        $medicalDetails['hpi'] = !empty($hpi_section) ? $hpi_section : array("");
    }   

    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 21){
        $medicalDetails['hpi'] = !empty($subjective_section) ? array($subjective_section) : '';
    }
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 25){
        $medicalDetails['cc/HPI'] = (empty($hpi) ? "none provided" : $hpi);
        $medicalDetails['advanced_directive']['acp_status'] = !empty($advncd_dir) ? array($advncd_dir) : '';
        $medicalDetails['advanced_directive']['mpoa'] = !empty($mpoa) ? array($this->natural_word_join($mpoa)) : 'none provided';
        $medicalDetails['marketing'] = !empty($marketing) ? array($marketing) : '';
    }
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 2){
        $medicalDetails['cc/HPI'] = (empty($hpi) ? "none provided" : $hpi);        
    }


    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 1){
        $medicalDetails['COVID-19 Screening Tool'] = $covid19EhrNote;
        $medicalDetails['cc/HPI'] = (empty($hpi) ? "none provided" : $hpi);
    }

    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 16){   
       
        $medicalDetails['REASON FOR VISIT'] = !empty($noteReasonforVisit) ? array($noteReasonforVisit) : '';
        $medicalDetails['SUBJECTIVE'] = !empty($subjective_section) ? array($subjective_section) : '';
    }    

    if(!in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [18,1,2,4,16,17,25])){
    

    $sti_severe_sym_section = "Severe: ".$sti_severe_sym_section;
    $sti_moderate_sym_section = "Moderate: ".$sti_moderate_sym_section;
    $sti_mild_sym_section = "Mild: ".$sti_mild_sym_section;
    $sti_neg_sym_section = "Negative: ".$sti_neg_sym_section;

    $medicalDetails['sitSymptoms'] = array($sti_severe_sym_section,$sti_moderate_sym_section,$sti_mild_sym_section,$sti_neg_sym_section);

    $high_qol_section = "High: ".$high_qol_section;
    $avg_qol_section = "Average: ".$avg_qol_section;
    $low_qol_section = "Low: ".$low_qol_section;

    $medicalDetails['sitQol'] = array($high_qol_section,$avg_qol_section,$low_qol_section);


    $cipn_grade0_section = "Grade 0: ".$cipn_grade0_section;
    $cipn_grade1_section = "Grade 1: ".$cipn_grade1_section;
    $cipn_grade2_section = "Grade 2: ".$cipn_grade2_section;
    $cipn_grade3_section = "Grade 3: ".$cipn_grade3_section;
    $cipn_grade4_section = "Grade 4: ".$cipn_grade4_section;

    $medicalDetails['cipn'] = array($cipn_grade4_section,$cipn_grade3_section,$cipn_grade2_section,$cipn_grade1_section,$cipn_grade0_section);    
    }
    $medicalDetails['treatment'] = !empty($treatment_hx_section) ? array($treatment_hx_section) : '';

    $medicalDetails['meds'] = !empty($meds) ? $apiNoteMeds : array("");
    

    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 21){
        $medicalDetails['preventativeHealth'] = !empty($preventative_health_section) ? $preventative_health_section : array("");
    }
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 25){
       // $medicalDetails['nutrition'] = !empty($nutrition) ? array($nutrition) : array("");
    }
    $medicalDetails['pmh'] = !empty($pmh) ? array(str_replace("none of these","",$pmh)) : array("");
    $medicalDetails['sh'] = !empty($sh) ? array($sh) : array("");
    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'],[18,25]))
    {
       $medicalDetails['immunizationHx'] = !empty($imm) ? array($imm) : array(""); 
    }

    $medicalDetails['psh'] = !empty($psh) ? array($psh) : array("");


    $medicalDetails['fh'] = !empty($fh) ? $fh : array("");
    
    $medicalDetails['all'] = !empty($all) ? array($all) : array("");
    

    if($login_user->gender == 0){
        $medicalDetails['gynHx'] = !empty($gyn_hx_section) ? array($gyn_hx_section) : array("");
    }
    $medicalDetails['ros'] = !empty($rosDetail) ? $rosDetail: array("");

    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'],[17])){
         $medicalDetails['Vitals'] =  !empty($ehrSectionCovidIntake['vitals']) ? array($ehrSectionCovidIntake['vitals']): array("");
         $medicalDetails['IMPRESSION'] =  !empty($ehrSectionCovidIntake['IMPRESSION']) ? array($ehrSectionCovidIntake['IMPRESSION']): array("");
         $medicalDetails['OBJECTIVE'] =  !empty($ehrSectionCovidIntake['OBJECTIVE']) ? array($ehrSectionCovidIntake['OBJECTIVE']): array("");
         $medicalDetails['RECOMMENDATIONS'] =  !empty($ehrSectionCovidIntake['RECOMMENDATIONS']) ? array($ehrSectionCovidIntake['RECOMMENDATIONS']): array("");         
    }

    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [18,25])){
         $medicalDetails['vitals'] =  !empty($ehr_section['vitals']) ? array($ehr_section['vitals']): array("");
         $medicalDetails['glucoseLog'] =  !empty($ehr_section['glucose_log']) ? array($ehr_section['glucose_log']): array("");
         $medicalDetails['bpLog'] =  !empty($ehr_section['bp_log']) ? array($ehr_section['bp_log']): array("");
         $medicalDetails['peakFlowLog'] =  !empty($ehr_section['peak_flow_log']) ? array($ehr_section['peak_flow_log']): array("");
         $medicalDetails['assessments'] =  !empty($internal_ehr_note) ? array($internal_ehr_note): array("");
    }

    
    $medicalDetails['finalPatientSymptomsComments'] = !empty($additional_comment_section) ? array($additional_comment_section) : array("");

    $ehr_note_arr = json_encode(array('patientRole' => $patientRole,'insuranceDetails' =>$insuranceDetails,'medicalDetails' => $medicalDetails));  
  
    return $ehr_note_arr;
 }

 if($note_format == 'readable' || $note_format == 'rawAndReadable'){   

        $schedule_detail['appointment_time'] = !empty($schedule_detail['appointment_time'])?$this->CryptoSecurity->decrypt(base64_decode($schedule_detail['appointment_time']),SEC_KEY):'';
        $schedule_detail['appointment_date'] = !empty($schedule_detail['appointment_date'])?date('Y-m-d',strtotime($schedule_detail['appointment_date'])):'';     

        $basicDetails = array(
        'encounterId' => !empty($schedule_detail['id'])?$schedule_detail['id']:'',
        'clinicAppointmentId' => !empty($schedule_detail['clinic_appointment_id'])?$schedule_detail['clinic_appointment_id']:'',
        'firstName' => !empty($login_user->first_name) ? $login_user->first_name : '',
        'lastName' => !empty($login_user->last_name) ? $login_user->last_name : '',
        'mrn' => !empty($mrn) ? $mrn : '',
        'dob' => !empty($patient_dob) ? date('Y-m-d',strtotime($patient_dob)) : '',
        'gender' => !empty($patient_gender) ? $patient_gender : '',
        'ssn' => "XXX-XX-XXXX",
        'doctorName' => !empty($schedule_detail['doctor_name']) ? $this->CryptoSecurity->decrypt(base64_decode($schedule_detail['doctor_name']),SEC_KEY): '',
        'race' => !empty($patient_race) ? $patient_race : '',
        'preferredPharmacy' => !empty($login_user->pharmacy) ? $login_user->pharmacy : '',
        'dateOfService' => !empty($date_of_service) ? $date_of_service : '',
        'timezone' => 'CST',
        'typeOfService' => "Office or Other Outpatient Services",
        'appointmentTime' =>  $schedule_detail['appointment_date'].' '.$schedule_detail['appointment_time'],
    );


    $RaceCode = array('1' =>'1002-5','2' =>'2028-9','3' =>'2054-5','4' =>'2076-8', '5' =>'2106-3','6' =>'2131-1');
    $RaceValue = array('1' =>'American Indian or Alaska Native','2' =>'Asian', '3' => 'Black or African American', '4' =>'Native Hawaiian or Other Pacific Islander', '5' =>'White' , '6' =>'Other Race');

    $ethinicityCode = array('1' =>'2135-2' , '2' =>'2186-5');
    $ethinicityValue = array('1' =>'Hispanic or Latino', '2' =>'Not Hispanic or Latino');       
    
    $insuranceDetails = array(
            'insuranceType' => !empty($login_user->insuranceType) ? $login_user->insuranceType : '',
            'subscriberName' => !empty($login_user->subscriberName) ? $login_user->subscriberName : '',
            'identificationNumber' =>!empty($login_user->identificationNumber) ? $login_user->identificationNumber : '',
            'groupNumber' =>!empty($login_user->groupNumber) ? $login_user->groupNumber : '',
            'insuranceCompany' =>!empty($login_user->insuranceCompany) ? $login_user->insuranceCompany : '',
    );
    
    $medicalDetails['cc'] = !empty($cc_section) ? array($cc_section): array("");


    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'],[18,25])){
        $medicalDetails['hpi'] = !empty($subjective_section) ? array(str_replace("none of these","",$subjective_section)) : '';
        $medicalDetails['cc'] = !empty($chronic_cond_name) ? array($chronic_cond_name): '';
    }
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 19){
        $hpi_section = strip_tags($hpi_section);        
        $splitHpiSection  = explode("\n", $hpi_section);        
        $ehrHpi = array();        
        if(!empty($splitHpiSection))
        {     
           $splitHpiSection = array_filter($splitHpiSection);      
            foreach ($splitHpiSection as $key => $value) {
                $ehrHpi[] = trim($value);                
            }            
        }
        $medicalDetails['hpi'] = !empty($ehrHpi) ? $ehrHpi : array("");
    }    
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 17){
        $medicalDetails['hpi'] = !empty($hpi_section) ? $hpi_section : array("");
    }    


    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 21){
        $medicalDetails['hpi'] = !empty($subjective_section) ? array($subjective_section) : '';
    }
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 25){
        $medicalDetails['cc/HPI'] = (empty($hpi) ? "none provided" : $hpi);
        $medicalDetails['advanced_directive']['acp_status'] = !empty($advncd_dir) ? array($advncd_dir) : '';
        $medicalDetails['advanced_directive']['mpoa'] = !empty($mpoa) ? array($this->natural_word_join($mpoa)) : 'none provided';
        $medicalDetails['marketing'] = !empty($marketing) ? array($marketing) : '';
    }
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 2){
        $medicalDetails['cc/HPI'] = (empty($hpi) ? "none provided" : $hpi);        
    }
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 1){

        $medicalDetails['COVID-19 Screening Tool'] = $covid19EhrNote;
        $medicalDetails['cc/HPI'] = (empty($hpi) ? "none provided" : $hpi);        
    }
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 16){ 
       
        $medicalDetails['REASON FOR VISIT'] = !empty($noteReasonforVisit) ? array($noteReasonforVisit) : '';
        $medicalDetails['SUBJECTIVE'] = !empty($subjective_section) ? array($subjective_section) : '';
    }

    if(!in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [18,1,2,4,16,17,25])){
    

    $sti_severe_sym_section = "Severe: ".$sti_severe_sym_section;
    $sti_moderate_sym_section = "Moderate: ".$sti_moderate_sym_section;
    $sti_mild_sym_section = "Mild: ".$sti_mild_sym_section;
    $sti_neg_sym_section = "Negative: ".$sti_neg_sym_section;

    $medicalDetails['sitSymptoms'] = array($sti_severe_sym_section,$sti_moderate_sym_section,$sti_mild_sym_section,$sti_neg_sym_section);

    $high_qol_section = "High: ".$high_qol_section;
    $avg_qol_section = "Average: ".$avg_qol_section;
    $low_qol_section = "Low: ".$low_qol_section;

    $medicalDetails['sitQol'] = array($high_qol_section,$avg_qol_section,$low_qol_section);

    $cipn_grade0_section = "Grade 0: ".$cipn_grade0_section;
    $cipn_grade1_section = "Grade 1: ".$cipn_grade1_section;
    $cipn_grade2_section = "Grade 2: ".$cipn_grade2_section;
    $cipn_grade3_section = "Grade 3: ".$cipn_grade3_section;
    $cipn_grade4_section = "Grade 4: ".$cipn_grade4_section;

    $medicalDetails['cipn'] = array($cipn_grade4_section,$cipn_grade3_section,$cipn_grade2_section,$cipn_grade1_section,$cipn_grade0_section);
    
    }
    $medicalDetails['treatment'] = !empty($treatment_hx_section) ? array($treatment_hx_section) : '';

    $medicalDetails['meds'] = !empty($meds) ? $apiNoteMeds : array("");
    

    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 21){
        $medicalDetails['preventativeHealth'] = !empty($preventative_health_section) ? $preventative_health_section : array("");
    }
    if($user_detail->chief_compliant_userdetail->current_step_id['id'] == 25){
        //$medicalDetails['nutrition'] = !empty($nutrition) ? array($nutrition) : array("");
    }
    
    $medicalDetails['pmh'] = !empty($pmh) ? array(str_replace("none of these","",$pmh)) : array("");
    $medicalDetails['sh'] = !empty($sh) ? array($sh) : array("");
    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [18,25]))
    {
       $medicalDetails['immunizationHx'] = !empty($imm) ? array($imm) : array(""); 
    }

    $medicalDetails['psh'] = !empty($psh) ? array($psh) : array("");


    $medicalDetails['fh'] = !empty($fh) ? $fh : array("");
    
    $medicalDetails['all'] = !empty($all) ? array($all) : array("");    

    if($login_user->gender == 0){
        $medicalDetails['gynHx'] = !empty($gyn_hx_section) ? array($gyn_hx_section) : array($ehr_gyn_hx);
    }
    $medicalDetails['ros'] = !empty($rosDetail) ? $rosDetail: array("");

    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'],[17])){
         $medicalDetails['Vitals'] =  !empty($ehrSectionCovidIntake['vitals']) ? array($ehrSectionCovidIntake['vitals']): array("");
         $medicalDetails['IMPRESSION'] =  !empty($ehrSectionCovidIntake['IMPRESSION']) ? array($ehrSectionCovidIntake['IMPRESSION']): array("");
         $medicalDetails['OBJECTIVE'] =  !empty($ehrSectionCovidIntake['OBJECTIVE']) ? array($ehrSectionCovidIntake['OBJECTIVE']): array("");
         $medicalDetails['RECOMMENDATIONS'] =  !empty($ehrSectionCovidIntake['RECOMMENDATIONS']) ? array($ehrSectionCovidIntake['RECOMMENDATIONS']): array("");         
    }

    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [18,25])){
         $medicalDetails['vitals'] =  !empty($ehr_section['vitals']) ? array($ehr_section['vitals']): array("");
         $medicalDetails['glucoseLog'] =  !empty($ehr_section['glucose_log']) ? array($ehr_section['glucose_log']): array("");
         $medicalDetails['bpLog'] =  !empty($ehr_section['bp_log']) ? array($ehr_section['bp_log']): array("");
         $medicalDetails['peakFlowLog'] =  !empty($ehr_section['peak_flow_log']) ? array($ehr_section['peak_flow_log']): array("");
         $medicalDetails['assessments'] =  !empty($internal_ehr_note) ? array($internal_ehr_note): array("");
         
    }
    
    $medicalDetails['finalPatientSymptomsComments'] = !empty($additional_comment_section) ? array($additional_comment_section) : array(""); 
    
    $ehr_note_arr = json_encode(array('basicDetails' => $basicDetails,'insuranceDetails' =>$insuranceDetails,'medicalDetails' => $medicalDetails));   

    if($note_format == 'rawAndReadable')
    {
        $symptoms = ltrim($all_cc_name,$cc.', ');
        $symptoms_arr = !empty($symptoms) ? explode(', ', $symptoms) : '';
        $medicalDetails['CC'] = !empty($cc) ? $cc: "none provided";
        $medicalDetails['SYMPTOMS'] = !empty($symptoms_arr) ? $symptoms_arr: array("");
        $medicalDetails['PERTPOSPMH'] = !empty($pertPosPmhRawFormat) ? $pertPosPmhRawFormat: array('');
        $medicalDetails['PERTNEGPMH'] = !empty($pertNegPmhRawFormat) ? $pertNegPmhRawFormat: array(''); 
        $medicalDetails['PERTPOSFH'] = !empty($pertPosFhRawFormat) ? $pertPosFhRawFormat: array('');
        $medicalDetails['PERTNEGFH'] = !empty($pertNegFhRawFormat) ? $pertNegFhRawFormat: array('');
        $medicalDetails['DMTYPE'] = !empty($raw_dmtype) ? $raw_dmtype: '';  
        $medicalDetails['REFERPROVIDER'] = !empty($raw_reff_provider) ? $raw_reff_provider : "none provided";
        $medicalDetails['ACPSTATUS'] = !empty($advncd_dir) ? $advncd_dir : '';  
        $medicalDetails['MARKETING'] = !empty($marketing_arr) ? $marketing_arr : '';
        $medicalDetails['MPOA'] = !empty($mpoa) ? $mpoa : 'none provided';
        $medicalDetails['ALL'] = !empty($allergy_arr) ? $allergy_arr : array("");
        $medicalDetails['WATERFREQ'] = !empty($WATERFREQ) ? $WATERFREQ : "";  
        $medicalDetails['DECAFSODAFREQ'] = !empty($DECAFSODAFREQ) ? $DECAFSODAFREQ : "";
        $medicalDetails['CAFSODAFREQ'] = !empty($CAFSODAFREQ) ? $CAFSODAFREQ : "";  
        $medicalDetails['JUICEFREQ'] = !empty($JUICEFREQ) ? $JUICEFREQ : "";
        $medicalDetails['CAFTEAFREQ'] = !empty($CAFTEAFREQ) ? $CAFTEAFREQ : "";
        $medicalDetails['DECAFTEAFREQ'] = !empty($DECAFTEAFREQ) ? $DECAFTEAFREQ : "";  
        $medicalDetails['SMOOTHIEFREQ'] = !empty($SMOOTHIEFREQ) ? $SMOOTHIEFREQ : "";
        $medicalDetails['MILKFREQ'] = !empty($MILKFREQ) ? $MILKFREQ : "";
        $medicalDetails['ENERGYLVL'] = !empty($energyLevelRawFormat) ? $energyLevelRawFormat : "";
        $medicalDetails['SUBJAGE'] = !empty($subjAgeRawFormat) ? $subjAgeRawFormat : "";  
        $ehr_note_arr = json_encode(array('basicDetails' => $basicDetails,'insuranceDetails' =>$insuranceDetails,'medicalDetails' => $medicalDetails));  
    }
      
    return $ehr_note_arr;

 } 

 if($note_format == 'raw'){ 

    $rawCcDuration = array();
    $rawRosDetail = array();
    $rawCcDuration[$cc] = $user_detail->chief_compliant_userdetail->compliant_length;
    $symptoms = ltrim($all_cc_name,$cc.', ');
    $symptoms_arr = !empty($symptoms) ? explode(', ', $symptoms) : '';
    $chronic_cond_name_arr = !empty($chronic_cond_name) ? explode(', ', $chronic_cond_name):'';
    $basicDetails = array(
        'encounterId' => !empty($schedule_detail['id'])?$schedule_detail['id']:'',
        'clinicAppointmentId' => !empty($schedule_detail['clinic_appointment_id'])?$schedule_detail['clinic_appointment_id']:'',
        'FIRSTNAME' => !empty($login_user->first_name) ? $login_user->first_name : '',
        'LASTNAME' => !empty($login_user->last_name) ? $login_user->last_name : '',
        'MRN' => !empty($mrn) ? $mrn : '',
        'DOB' => !empty($patient_dob) ? date('Y-m-d',strtotime($patient_dob)) : '',
        'GENDER' => !empty($patient_gender) ? $patient_gender : '',
        'SSN' => "XXX-XX-XXXX",
        'DOCTORNAME' => !empty($schedule_detail['doctor_name']) ? $this->CryptoSecurity->decrypt(base64_decode($schedule_detail['doctor_name']),SEC_KEY): '',
        'RACE' => !empty($patient_race) ? $patient_race : '',
        'preferredPharmacy' => !empty($login_user->pharmacy) ? $login_user->pharmacy : '',
        'dateOfService' => !empty($date_of_service) ? $date_of_service : '',
        'TIMEZONE' => 'CST',
        'typeOfService' => "Office or Other Outpatient Services",
        'appointmentTime' =>  $schedule_detail['appointment_date'].' '.$schedule_detail['appointment_time'],
    );
    $rawRosDetail['Cardiovascular']['positive'] = !empty($q_CV_pos) ? $q_CV_pos : array('');
    $rawRosDetail['Cardiovascular']['negative'] = !empty($q_CV_neg) ? $q_CV_neg : array('');
    $rawRosDetail['Constitutional']['positive'] = !empty($q_general_pos) ? $q_general_pos : array('');
    $rawRosDetail['Constitutional']['negative'] = !empty($q_general_neg) ? $q_general_neg : array('');
    $rawRosDetail['HEENT']['positive'] = !empty($q_HEENT_pos) ? $q_HEENT_pos : array('');
    $rawRosDetail['HEENT']['negative'] = !empty($q_HEENT_neg) ? $q_HEENT_neg : array('');
    $rawRosDetail['Musculoskeletal']['positive'] = !empty($q_MSK_pos) ? $q_MSK_pos : array('');
    $rawRosDetail['Musculoskeletal']['negative'] = !empty($q_MSK_neg) ? $q_MSK_neg : array('');
    $rawRosDetail['Hematologic/Lymphatic']['positive'] = !empty($spine_HEMELYMPH_pos) ? $spine_HEMELYMPH_pos : array('');
    $rawRosDetail['Hematologic/Lymphatic']['negative'] = !empty($spine_HEMELYMPH_neg) ? $spine_HEMELYMPH_neg : array('');
    $rawRosDetail['Respiratory']['positive'] = !empty($q_RESP_pos) ? $q_RESP_pos : array('');
    $rawRosDetail['Respiratory']['negative'] = !empty($q_RESP_neg) ? $q_RESP_neg : array('');
    $rawRosDetail['Neurological']['positive'] = !empty($q_NEURO_pos) ? $q_NEURO_pos : array('');
    $rawRosDetail['Neurological']['negative'] = !empty($q_NEURO_neg) ? $q_NEURO_neg : array('');
    $rawRosDetail['Gastrointestinal']['positive'] = !empty($q_GI_pos) ? $q_GI_pos : array('');
    $rawRosDetail['Gastrointestinal']['negative'] = !empty($q_GI_neg) ? $q_GI_neg : array('');
    $rawRosDetail['Psychiatric']['positive'] = !empty($q_PSYCH_pos) ? $q_PSYCH_pos : array('');
    $rawRosDetail['Psychiatric']['negative'] = !empty($q_PSYCH_neg) ? $q_PSYCH_neg : array('');
    $rawRosDetail['Immunologic']['positive'] = !empty($q_IMMUNO_pos) ? $q_IMMUNO_pos : array('');
    $rawRosDetail['Immunologic']['negative'] = !empty($q_IMMUNO_neg) ? $q_IMMUNO_neg : array('');
    $rawRosDetail['Integumentary']['positive'] = !empty($q_SKIN_pos) ? $q_SKIN_pos : array('');
    $rawRosDetail['Integumentary']['negative'] = !empty($q_SKIN_neg) ? $q_SKIN_neg : array('');
    $rawRosDetail['Genitourinary']['positive'] = !empty($q_GU_pos) ? $q_GU_pos : array('');
    $rawRosDetail['Genitourinary']['negative'] = !empty($q_GU_neg) ? $q_GU_neg : array('');

    $medicalDetails['BASICDETAILS'] = !empty($basicDetails) ? $basicDetails :array('');
    $medicalDetails['CC'] = !empty($cc) ? array($cc): array("none provided");
    $medicalDetails['CCDURATION'] = !empty($rawCcDuration) ? array($rawCcDuration): array("none provided");
    $medicalDetails['SYMPTOMS'] = !empty($symptoms_arr) ? $symptoms_arr: array("");
    $medicalDetails['MEDS'] = !empty($meds) ? $apiNoteMeds : array("");
    $medicalDetails['DIAGNOSES'] = !empty($chronic_cond_name) ? $chronic_cond_name_arr : array('');
    $medicalDetails['PERTPOSPMH'] = !empty($pertPosPmhRawFormat) ? $pertPosPmhRawFormat: array('');
    $medicalDetails['PERTNEGPMH'] = !empty($pertNegPmhRawFormat) ? $pertNegPmhRawFormat: array(''); 
    $medicalDetails['PERTPOSFH'] = !empty($pertPosFhRawFormat) ? $pertPosFhRawFormat: array('');
    $medicalDetails['PERTNEGFH'] = !empty($pertNegFhRawFormat) ? $pertNegFhRawFormat: array('');
    $medicalDetails['DMTYPE'] = !empty($raw_dmtype) ? $raw_dmtype: '';  
    $medicalDetails['REFERPROVIDER'] = !empty($raw_reff_provider) ? $raw_reff_provider : "none provided";
    $medicalDetails['ACPSTATUS'] = !empty($advncd_dir) ? $advncd_dir : '';  
    $medicalDetails['MARKETING'] = !empty($marketing_arr) ? $marketing_arr : '';
    $medicalDetails['MPOA'] = !empty($mpoa) ? $mpoa : 'none provided';
    $medicalDetails['ALL'] = !empty($allergy_arr) ? $allergy_arr : array("");
    $medicalDetails['WATERFREQ'] = !empty($WATERFREQ) ? $WATERFREQ : "";  
    $medicalDetails['DECAFSODAFREQ'] = !empty($DECAFSODAFREQ) ? $DECAFSODAFREQ : "";
    $medicalDetails['CAFSODAFREQ'] = !empty($CAFSODAFREQ) ? $CAFSODAFREQ : "";  
    $medicalDetails['JUICEFREQ'] = !empty($JUICEFREQ) ? $JUICEFREQ : "";
    $medicalDetails['CAFTEAFREQ'] = !empty($CAFTEAFREQ) ? $CAFTEAFREQ : "";
    $medicalDetails['DECAFTEAFREQ'] = !empty($DECAFTEAFREQ) ? $DECAFTEAFREQ : "";  
    $medicalDetails['SMOOTHIEFREQ'] = !empty($SMOOTHIEFREQ) ? $SMOOTHIEFREQ : "";
    $medicalDetails['MILKFREQ'] = !empty($MILKFREQ) ? $MILKFREQ : "";
    $medicalDetails['ENERGYLVL'] = !empty($energyLevelRawFormat) ? $energyLevelRawFormat : "";
    $medicalDetails['SUBJAGE'] = !empty($subjAgeRawFormat) ? $subjAgeRawFormat : ""; 
    $medicalDetails['HPI'] = !empty($subjective_section) ? array(str_replace("none of these","",$subjective_section)) : '';
    $medicalDetails['CC/HPI'] = (empty($hpi) ? "none provided" : $hpi);
    if(!in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [25])){
    

    $sti_severe_sym_section = "Severe: ".$sti_severe_sym_section;
    $sti_moderate_sym_section = "Moderate: ".$sti_moderate_sym_section;
    $sti_mild_sym_section = "Mild: ".$sti_mild_sym_section;
    $sti_neg_sym_section = "Negative: ".$sti_neg_sym_section;

    $medicalDetails['sitSymptoms'] = array($sti_severe_sym_section,$sti_moderate_sym_section,$sti_mild_sym_section,$sti_neg_sym_section);

    $high_qol_section = "High: ".$high_qol_section;
    $avg_qol_section = "Average: ".$avg_qol_section;
    $low_qol_section = "Low: ".$low_qol_section;

    $medicalDetails['sitQol'] = array($high_qol_section,$avg_qol_section,$low_qol_section);

    $cipn_grade0_section = "Grade 0: ".$cipn_grade0_section;
    $cipn_grade1_section = "Grade 1: ".$cipn_grade1_section;
    $cipn_grade2_section = "Grade 2: ".$cipn_grade2_section;
    $cipn_grade3_section = "Grade 3: ".$cipn_grade3_section;
    $cipn_grade4_section = "Grade 4: ".$cipn_grade4_section;

    $medicalDetails['CIPN'] = array($cipn_grade4_section,$cipn_grade3_section,$cipn_grade2_section,$cipn_grade1_section,$cipn_grade0_section);
    
    }
    $medicalDetails['TREATMENT'] = !empty($treatment_hx_section) ? array($treatment_hx_section) : '';
    $medicalDetails['PMH'] = !empty($pmh) ? array(str_replace("none of these","",$pmh)) : array("");
    $medicalDetails['SH'] = !empty($sh) ? array($sh) : array("");
    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [18,25]))
    {
       $medicalDetails['immunizationHx'] = !empty($imm) ? array($imm) : array(""); 
    }

    $medicalDetails['PSH'] = !empty($psh) ? array($psh) : array("");


    $medicalDetails['FH'] = !empty($fh) ? $fh : array("");  

    if($login_user->gender == 0){
        $medicalDetails['gynHx'] = !empty($gyn_hx_section) ? array($gyn_hx_section) : array($ehr_gyn_hx);
    }
    if(in_array($user_detail->chief_compliant_userdetail->current_step_id['id'], [18,25])){
         $medicalDetails['vitals'] =  !empty($ehr_section['vitals']) ? array($ehr_section['vitals']): array("");
         $medicalDetails['glucoseLog'] =  !empty($ehr_section['glucose_log']) ? array($ehr_section['glucose_log']): array("");
         $medicalDetails['bpLog'] =  !empty($ehr_section['bp_log']) ? array($ehr_section['bp_log']): array("");
         $medicalDetails['peakFlowLog'] =  !empty($ehr_section['peak_flow_log']) ? array($ehr_section['peak_flow_log']): array("");
         $medicalDetails['ASSESMENTS'] = !empty($internal_ehr_note) ? array($internal_ehr_note): array("");
         
    }
    
    $medicalDetails['finalPatientSymptomsComments'] = !empty($additional_comment_section) ? array($additional_comment_section) : array("");
    $medicalDetails['ROS'] = !empty($rawRosDetail) ? $rawRosDetail : array('');    
    //$medicalDetails['rosDetail'] = !empty($rosDetail) ? $rosDetail : array('');  
     
    $ehr_note_arr = json_encode(array('medicalDetails' => $medicalDetails));  
    return $ehr_note_arr;
 }

}


 public function prepare_medication_refill_extra_details_layman($question_detail = null,$soapp_comm_question_detail = null){

  //pr($question_detail);die;

  $dast_score = 0;

  $comm_score = 0;

  $comm_nagative = 0;

  $soapp_score = 0;

  $soapp_nagative = 0;

  $soapp_summary = '';

  $comm_summary = '';

  $dast_summary = '';

  $soapp_description = '';

  $comm_description = '';

  $dast_description = '';

  $padt_description = '';



  if(!empty($soapp_comm_question_detail) && is_array($soapp_comm_question_detail)){



    if(isset($soapp_comm_question_detail['soapp']) && !empty($soapp_comm_question_detail['soapp'])){



        $soapp_seldom = '';

        $soapp_sometimes = '';

        $soapp_often = '';

        $soapp_very_often = '';

        $soapp_naver = '';

        $count = 1;



        foreach ($soapp_comm_question_detail['soapp'] as $key => $singlelevel) {





           // pr($singlelevel);

            switch ($singlelevel['question_id']) {

                case 87:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'mood swings, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'mood swings, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'mood swings, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'mood swings, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'mood swings, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }



                     // $soapp_description .= 'You have '.strtolower($singlelevel['answer']).' swing mood. ';

                      //$soapp_description .= 'Q'.$count.': '.$singlelevel['question'] .' | '.$singlelevel['answer'].".\n";

                     // $count ++;

                    break;



                case 88:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'increased doses, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'increased doses, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'increased doses, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'increased doses, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'increased doses, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                     // $soapp_description .= 'Patient have '.strtolower($singlelevel['answer']).' felt a need for higher dose of medication to treat your pain. ';

                      //$soapp_description .= 'Q'.$count.': '.$singlelevel['question'] .' | '.$singlelevel['answer'].".\n";

                     // $count ++;

                    break;

                case 89:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'impatience with physicians, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'impatience with physicians, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'impatience with physicians, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'impatience with physicians, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'impatience with physicians, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                      //$soapp_description .= 'Patient have '.strtolower($singlelevel['answer']).' felt impatient with your doctors. ';

                    break;

                case 90:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'overwhelmed, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'overwhelmed, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'overwhelmed, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'overwhelmed, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'overwhelmed, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                      //$soapp_description .= 'Patient have '.strtolower($singlelevel['answer'])." felt that things are just too overwhelming that patient can't handle them. ";

                    break;

                case 91:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'tension at home, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'tension at home, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'tension at home, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'tension at home, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'tension at home, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                     // $soapp_description .= ucfirst($singlelevel['answer'])." tension in the home. ";

                    break;

                case 92:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'pill counting, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'pill counting, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'pill counting, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'pill counting, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'pill counting, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                      //$soapp_description .= 'Patient have '.strtolower($singlelevel['answer'])." counted pain pills to see how many are remaining. ";



                    break;

                case 93:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'judgment concerns, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'judgment concerns, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'judgment concerns, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'judgment concerns, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'judgment concerns, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }



                     //$soapp_description .= 'Patient have '.strtolower($singlelevel['answer'])." been concerned that people will judge you for taking pain medication. ";

                    break;

                case 94:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'boredom, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'boredom, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'boredom, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'boredom, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'boredom, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }



                      //$soapp_description .= 'Patient '.strtolower($singlelevel['answer'])." feel bored. ";

                    break;

                case 95:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'increased frequency, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'increased frequency, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'increased frequency, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'increased frequency, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'increased frequency, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                     //$soapp_description .= 'Patient have '.strtolower($singlelevel['answer'])." taken more pain medication than you were supposed to. ";

                    break;

                case 96:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'worries of being alone, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'worries of being alone, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'worries of being alone, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'worries of being alone, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'worries of being alone, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                      //$soapp_description .= 'Patient have '.strtolower($singlelevel['answer'])." worried about being left alone. ";

                    break;

                case 97:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'craving, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'craving, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'craving, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'craving, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'craving, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                      //$soapp_description .= 'Patient have '.strtolower($singlelevel['answer'])." felt a craving for medication. ";



                    break;

                case 98:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'concern by others, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'concern by others, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'concern by others, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'concern by others, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'concern by others, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                      //$soapp_description .= ucfirst($singlelevel['answer'])." others expressed concern over your use of medication. ";

                    break;

                case 99:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'addiction in close friends, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'addiction in close friends, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'addiction in close friends, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'addiction in close friends, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'addiction in close friends, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                      //$soapp_description .= ucfirst($singlelevel['answer'])." any of your close friends had a problem with alcohol or drugs. ";



                    break;

                case 100:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'bad temper, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'bad temper, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'bad temper, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'bad temper, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'bad temper, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                      //$soapp_description .= ucfirst($singlelevel['answer'])." others told you had a bad temper. ";



                    break;

                case 101:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'obsession for medication, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'obsession for medication, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'obsession for medication, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'obsession for medication, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'obsession for medication, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                     // $soapp_description .= 'Patient have '.strtolower($singlelevel['answer'])." felt consumed by the need to get pain medication. ";

                    break;

                case 102:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'early empty scripts, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'early empty scripts, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'early empty scripts, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'early empty scripts, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'early empty scripts, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                     // $soapp_description .= 'Patient have '.strtolower($singlelevel['answer'])." run out of pain medication early. ";

                    break;

                case 103:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'feeling stopped by others, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'feeling stopped by others, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'feeling stopped by others, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'feeling stopped by others, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'feeling stopped by others, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                      //$soapp_description .= ucfirst($singlelevel['answer'])." others kept you from getting what you deserve. ";

                    break;

                case 104:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'legal problems or arrests, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'legal problems or arrests, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'legal problems or arrests, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'legal problems or arrests, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'legal problems or arrests, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                      //$soapp_description .= 'Patient had '.strtolower($singlelevel['answer'])." legal problems or been arrested in your lifetime. ";

                    break;

                case 105:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'AA or NA attendance, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'AA or NA attendance, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'AA or NA attendance, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'AA or NA attendance, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'AA or NA attendance, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                      //$soapp_description .= 'Patient have '.strtolower($singlelevel['answer'])." attended an AA or NA meeting. ";

                    break;

                case 106:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'voilent arguments, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'voilent arguments, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'voilent arguments, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'voilent arguments, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'voilent arguments, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                      //$soapp_description .= 'Patient have '.strtolower($singlelevel['answer'])." been in an argument that was so out of control that someone got hurt. ";

                    break;

                case 107:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'sexual abuse, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'sexual abuse, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'sexual abuse, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'sexual abuse, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'sexual abuse, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                      //$soapp_description .= 'Patient have '.strtolower($singlelevel['answer'])." been sexually abused. ";

                    break;



                case 108:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'suggestion of problem by others, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'suggestion of problem by others, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'suggestion of problem by others, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'suggestion of problem by others, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'suggestion of problem by others, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                      //$soapp_description .= ucfirst($singlelevel['answer'])." others suggested that you have a drug or alcohol problem. ";

                    break;



                case 109:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'medication borrowing, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'medication borrowing, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'medication borrowing, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'medication borrowing, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'medication borrowing, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                      //$soapp_description .= 'Patient had '.strtolower($singlelevel['answer'])." to borrow pain medication from your family or friends. ";

                    break;



                case 110:



                    switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $soapp_seldom .= 'alcohol or drug treatments, ';

                          $soapp_score = $soapp_score + 1;

                          break;



                        case 'Sometimes':



                          $soapp_sometimes .= 'alcohol or drug treatments, ';

                          $soapp_score = $soapp_score + 2;

                          break;



                        case 'Often':



                          $soapp_often .= 'alcohol or drug treatments, ';

                          $soapp_score = $soapp_score + 3;

                          break;



                        case 'Very often':



                          $soapp_very_often .= 'alcohol or drug treatments, ';

                          $soapp_score = $soapp_score + 4;

                          break;



                        case 'Never':



                          $soapp_naver .= 'alcohol or drug treatments, ';

                          $soapp_nagative = $soapp_nagative + 1;

                          break;

                      }

                      //$soapp_description .= 'Patient have '.strtolower($singlelevel['answer'])." been treated for an alcohol or drug problem. ";

                    break;

            }



            $singlelevel['question'] = ucfirst($singlelevel['question']);

            $singlelevel['answer'] = strtoupper($singlelevel['answer']);

        	$soapp_description .= 'Q'.$count.'. '.$singlelevel['question'] .' | <strong>'.$singlelevel['answer']."</strong>\n";

            $count ++;

        }



        $soapp_seldom = rtrim($soapp_seldom,', ');

        $soapp_sometimes = rtrim($soapp_sometimes,', ');

        $soapp_often = rtrim($soapp_often,', ');

        $soapp_very_often = rtrim($soapp_very_often,', ');

        $soapp_naver = rtrim($soapp_naver,', ');



        $soapp_summary .= '<strong>Very Often:</strong> '.(!empty($soapp_very_often) ? $soapp_very_often: "none provided").".\n";



       $soapp_summary .= '<strong>Often:</strong> '.(!empty($soapp_often) ? $soapp_often : "none provided").".\n";

       $soapp_summary .= '<strong>Sometimes:</strong> '.(!empty($soapp_sometimes) ? $soapp_sometimes : "none provided").".\n";



       $soapp_summary .= '<strong>Seldom:</strong> '.(!empty($soapp_seldom) ? $soapp_seldom : "none provided").".\n";



       $soapp_summary .= '<strong>Never:</strong> '.(!empty($soapp_naver) ? $soapp_naver : "none provided").".\n";

       $soapp_description = "\n".$soapp_description;

        //die;

    }



      if(isset($soapp_comm_question_detail['comm']) && !empty($soapp_comm_question_detail['comm'])){



        //pr($question_detail['comm']);die;

        $comm_seldom = '';

        $comm_sometimes = '';

        $comm_often = '';

        $comm_very_often = '';

        $comm_naver = '';

        $count = 1;



        foreach ($soapp_comm_question_detail['comm'] as $key => $singlelevel) {

            // pr($singlelevel);

            // pr($singlelevel['answer']);



            switch ($singlelevel['question_id']) {

                case 60:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':





                          $comm_seldom .= 'thinking or memory difficulty, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'thinking or memory difficulty, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'thinking or memory difficulty, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'thinking or memory difficulty, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'thinking or memory difficulty, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }



                     // $comm_description .= 'In the past 30 days you had '.strtolower($singlelevel['answer']).' trouble with thinking clearly or had memory problems. ';



                    break;

                case 61:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $comm_seldom .= 'task incompletion, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'task incompletion, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'task incompletion, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'task incompletion, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'task incompletion, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }



                     // $comm_description .= 'In the past 30 days '.strtolower($singlelevel['answer']).' people complain that you are not completing necessary tasks (ie: Doing things that need to be done, such as going to class work or appointments). ';



                    break;

                case 62:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $comm_seldom .= 'seeking medication from other physicians, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'seeking medication from other physicians, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'seeking medication from other physicians, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'seeking medication from other physicians, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'seeking medication from other physicians, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }



                    //  $comm_description .= 'In the past 30 days you have '.strtolower($singlelevel['answer']).' to go to someone other than your prescribing physician to get sufficient pain relief from medications (ie: another doctor, the emergency room, friends, street sources). ';



                    break;

                case 63:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $comm_seldom .= 'regimen alteration, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'regimen alteration, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'regimen alteration, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'regimen alteration, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'regimen alteration, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }



                       // $comm_description .= 'In the past 30 days you have '.strtolower($singlelevel['answer']).' taken your medications differently from how they are prescribed. ';



                    break;

                case 64:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $comm_seldom .= 'self harm ideation, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'self harm ideation, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'self harm ideation, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'self harm ideation, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'self harm ideation, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }

                    //  $comm_description .= 'In the past 30 days you have '.strtolower($singlelevel['answer']).' seriously thought about hurting yourself. ';



                    break;

                case 65:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $comm_seldom .= 'preoccupation, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'preoccupation, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'preoccupation, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'preoccupation, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'preoccupation, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }

                       //$comm_description .= 'In the past 30 days '.strtolower($singlelevel['answer']).' your time was spent thinking about opioid medications (having enough, taking them, dosing schedule, etc.). ';

                    break;

                case 66:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $comm_seldom .= 'arguments, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'arguments, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'arguments, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'arguments, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'arguments, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }

                      // $comm_description .= 'In the past 30 days you have '.strtolower($singlelevel['answer']).' been in an argument. ';

                    break;

                case 67:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $comm_seldom .= 'outbursts, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'outbursts, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'outbursts, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'outbursts, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'outbursts, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }

                     // $comm_description .= 'In the past 30 days you had '.strtolower($singlelevel['answer']).' trouble controlling your anger (ex: road rage, screaming, etc.). ';



                    break;

                case 68:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $comm_seldom .= 'using medication from others, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'using medication from others, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'using medication from others, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'using medication from others, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'using medication from others, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }

                     // $comm_description .= 'In the past 30 days you have '.strtolower($singlelevel['answer']).' needed to take pain medications belonging to someone else. ';

                    break;

                case 69:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $comm_seldom .= 'self-worry, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'self-worry, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'self-worry, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'self-worry, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'self-worry, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }

                      // $comm_description .= 'In the past 30 days you have '.strtolower($singlelevel['answer'])." been worried about how you're handling your medication. ";

                    break;

                case 70:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $comm_seldom .= 'worry by others, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'worry by others, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'worry by others, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'worry by others, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'worry by others, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }

                      //$comm_description .= 'In the past 30 days '.strtolower($singlelevel['answer'])." others been worried about how you're handling your medications. ";



                    break;

                case 71:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $comm_seldom .= 'emergency clinic visits, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'emergency clinic visits, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'emergency clinic visits, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'emergency clinic visits, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'emergency clinic visits, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }

                       //$comm_description .= 'In the past 30 days you had '.strtolower($singlelevel['answer'])." to make an emergency phone call or show up at the clinic without an appointment. ";

                    break;

                case 72:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $comm_seldom .= 'anger, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'anger, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'anger, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'anger, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'anger, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }

                     // $comm_description .= 'In the past 30 days you had '.strtolower($singlelevel['answer'])." gotten angry with people. ";

                    break;

                case 73:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $comm_seldom .= 'using more than rx, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'using more than rx, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'using more than rx, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'using more than rx, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'using more than rx, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }

                       //$comm_description .= 'In the past 30 days you have '.strtolower($singlelevel['answer'])." take more of your medication than prescribed. ";

                    break;

                case 74:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $comm_seldom .= 'borrowing medication, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'borrowing medication, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'borrowing medication, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'borrowing medication, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'borrowing medication, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }

                      // $comm_description .= 'In the past 30 days you have '.strtolower($singlelevel['answer'])." borrowed pain medication from someone else. ";

                    break;

                case 75:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $comm_seldom .= 'non-indication uses, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'non-indication uses, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'non-indication uses, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'non-indication uses, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'non-indication uses, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }

                       //$comm_description .= 'In the past 30 days you have '.strtolower($singlelevel['answer'])." used your pain medicine for symptoms other than for pain (ex: to help you sleep, improve your mood or relieve stress). ";

                    break;

                case 76:



                      switch ($singlelevel['answer']) {

                        case 'Seldom':



                          $comm_seldom .= 'ER visits, ';

                          $comm_score = $comm_score + 1;

                          break;



                        case 'Sometimes':



                          $comm_sometimes .= 'ER visits, ';

                          $comm_score = $comm_score + 2;

                          break;



                        case 'Often':



                          $comm_often .= 'ER visits, ';

                          $comm_score = $comm_score + 3;

                          break;



                        case 'Very often':



                          $comm_very_often .= 'ER visits, ';

                          $comm_score = $comm_score + 4;

                          break;



                        case 'Never':



                          $comm_naver .= 'ER visits, ';

                          $comm_nagative = $comm_nagative + 1;

                          break;

                      }

                      //$comm_description .= 'In the past 30 days you had '.strtolower($singlelevel['answer'])." visit the emergency room (ER). ";



                    break;



            }



            $singlelevel['question'] = ucfirst($singlelevel['question']);

            $singlelevel['answer'] = strtoupper($singlelevel['answer']);

        	$comm_description .= 'Q'.$count.'. '.$singlelevel['question'] .' | <strong>'.$singlelevel['answer']."</strong>\n";

            $count ++;

        }



        $comm_seldom = rtrim($comm_seldom,', ');

        $comm_sometimes = rtrim($comm_sometimes,', ');

        $comm_often = rtrim($comm_often,', ');

        $comm_very_often = rtrim($comm_very_often,', ');

        $comm_naver = rtrim($comm_naver,', ');



        $comm_summary .= '<strong>Very Often:</strong> '.(!empty($comm_very_often) ? $comm_very_often: "none provided").".\n";



       $comm_summary .= '<strong>Often:</strong> '.(!empty($comm_often) ? $comm_often : "none provided").".\n";

       $comm_summary .= '<strong>Sometimes:</strong> '.(!empty($comm_sometimes) ? $comm_sometimes : "none provided").".\n";



       $comm_summary .= '<strong>Seldom:</strong> '.(!empty($comm_seldom) ? $comm_seldom : "none provided").".\n";



       $comm_summary .= '<strong>Never:</strong> '.(!empty($comm_naver) ? $comm_naver : "none provided").".\n";

       $comm_description = "\n".$comm_description;



    }

  }



  if(!empty($question_detail) && is_array($question_detail)){



    if(isset($question_detail['dast']) && !empty($question_detail['dast'])){



        $dast_yes_summary = '';

        $dast_no_summary = '';

        $count = 1;



        foreach ($question_detail['dast'] as $key => $singlelevel) {





            switch ($singlelevel['question_id']) {



                case 77 :



                        if($singlelevel['answer'] == 'Yes'){



                           $dast_yes_summary .= 'drug use, ';

                           //$dast_description .= 'In the past 12 months, you have used drugs other than those required for medical reasons. ';



                        }

                        else{



                           $dast_no_summary .= 'drug use, ';

                           //$dast_description .= 'In the past 12 months, you have not used drugs other than those required for medical reasons. ';

                        }

                        //$singlelevel['answer'] == 'Yes' ? $dast_yes_summary .= 'drug use, ' : $dast_no_summary .= 'drug use, ';



                        break;

                case 78 :



                        if($singlelevel['answer'] == 'Yes'){



                            $dast_yes_summary .= 'multi drug abuse, ';

                           // $dast_description .= 'In the past 12 months, you did abused more than one drug at a time. ';

                        }

                        else{



                            $dast_no_summary .= 'multi drug abuse, ';

                           // $dast_description .= 'In the past 12 months, you did not abused more than one drug at a time. ';

                        }



                        //$singlelevel['answer'] == 'Yes' ? $dast_yes_summary .= 'multi drug abuse, ' : $dast_no_summary .= 'multi drug abuse, ';

                        break;

                case 79 :



                        if($singlelevel['answer'] == 'Yes'){



                            $dast_yes_summary .= 'inability to stop abuse, ';

                            //$dast_description .= 'In the past 12 months, you were unable to stop abusing drugs when you want to. ';

                        }

                        else{



                            $dast_no_summary .= 'inability to stop abuse, ';

                            //$dast_description .= 'In the past 12 months, you were able to stop abusing drugs when you want to. ';

                        }

                        //$singlelevel['answer'] == 'Yes' ? $dast_yes_summary .= 'inability to stop abuse, ' : $dast_no_summary .= 'inability to stop abuse, ';

                        break;

                case 80 :



                        if($singlelevel['answer'] == 'Yes'){



                           $dast_yes_summary .= 'blackouts or flashbacks, ';

                           //$dast_description .= 'In the past 12 months, you had blackouts or flashbacks as a result of drug use. ';

                        }

                        else{



                            $dast_no_summary .= 'blackouts or flashbacks, ';

                            //$dast_description .= 'In the past 12 months, you had not blackouts or flashbacks as a result of drug use. ';

                        }

                        //$singlelevel['answer'] == 'Yes' ? $dast_yes_summary .= 'blackouts or flashbacks, ' : $dast_no_summary .= 'blackouts or flashbacks, ';

                        break;

                case 81 :



                        if($singlelevel['answer'] == 'Yes'){



                            $dast_yes_summary .= 'guilt, ';

                            //$dast_description .= 'In the past 12 months, you did feel bad or guilty about your drug use. ';

                        }

                        else{



                            $dast_no_summary .= 'guilt, ';

                           // $dast_description .= 'In the past 12 months, you did not feel bad or guilty about your drug use. ';

                        }

                       // $singlelevel['answer'] == 'Yes' ? $dast_yes_summary .= 'guilt, ' : $dast_no_summary .= 'guilt, ';

                        break;

                case 82 :



                        if($singlelevel['answer'] == 'Yes'){



                            $dast_yes_summary .= 'spouse or family complaints, ';

                           // $dast_description .= 'In the past 12 months, your spouse or family members were complain about your involvement with drugs. ';

                        }

                        else{



                            $dast_no_summary .= 'spouse or family complaints, ';

                           // $dast_description .= 'In the past 12 months, your spouse or family members were not complain about your involvement with drugs. ';



                        }

                        //$singlelevel['answer'] == 'Yes' ? $dast_yes_summary .= 'spouse or family comlaints, ' : $dast_no_summary .= 'spouse or family comlaints, ';

                        break;

                case 83 :



                        if($singlelevel['answer'] == 'Yes'){



                            $dast_yes_summary .= 'family neglect, ';

                           // $dast_description .= 'In the past 12 months, you have neglected your family because of your use of drugs. ';

                        }

                        else{



                            $dast_no_summary .= 'family neglect, ';

                           // $dast_description .= 'In the past 12 months, you have not neglected your family because of your use of drugs. ';

                        }

                        //$singlelevel['answer'] == 'Yes' ? $dast_yes_summary .= 'family neglect, ' : $dast_no_summary .= 'family neglect, ';

                        break;

                case 84 :



                        if($singlelevel['answer'] == 'Yes'){



                            $dast_yes_summary .= 'illegal activities, ';

                            //$dast_description .= 'In the past 12 months, you have engaged in illegal activities in order to obtain drugs. ';

                        }

                        else{



                            $dast_no_summary .= 'illegal activities, ';

                            //$dast_description .= 'In the past 12 months, you have not engaged in illegal activities in order to obtain drugs. ';

                        }



                        //$singlelevel['answer'] == 'Yes' ? $dast_yes_summary .= 'illegal activities, ' : $dast_no_summary .= 'illegal activities, ';

                        break;

                case 85 :



                        if($singlelevel['answer'] == 'Yes'){



                            $dast_yes_summary .= 'withdrawals, ';

                           // $dast_description .= 'In the past 12 months, you have experienced withdrawal symptoms (felt sick) when you stopped taking drugs. ';

                        }

                        else{



                            $dast_no_summary .= 'withdrawals, ';

                           // $dast_description .= 'In the past 12 months, you have not experienced withdrawal symptoms (felt sick) when you stopped taking drugs. ';

                        }



                        //$singlelevel['answer'] == 'Yes' ? $dast_yes_summary .= 'withdrawals, ' : $dast_no_summary .= 'withdrawals, ';

                        break;

                case 86 :



                        if($singlelevel['answer'] == 'Yes'){



                            $dast_yes_summary .= 'conditions secondary to abuse, ';

                           // $dast_description .= 'In the past 12 months, you had medical problems as a result of your drug use (ex: memory loss, hepatitis, convulsions, bleeding). ';

                        }

                        else{



                            $dast_no_summary .= 'conditions secondary to abuse, ';

                           // $dast_description .= 'In the past 12 months, you had medical problems as a result of your drug use (ex: memory loss, hepatitis, convulsions, bleeding). ';

                        }



                        //$singlelevel['answer'] == 'Yes' ? $dast_yes_summary .= 'conditions secondary to abuse, ' : $dast_no_summary .= 'conditions secondary to abuse, ';

                        break;

            }



            $singlelevel['question'] = ucfirst($singlelevel['question']);

            $singlelevel['answer'] = strtoupper($singlelevel['answer']);

          	$dast_description .= 'Q'.$count.'. '.$singlelevel['question'] .' | <strong>'.$singlelevel['answer']."</strong>\n";

            $count ++;



            if(isset($singlelevel['answer'])){



              switch ($singlelevel['answer']) {

                case 'YES':



                  if($key != 79){

                    $dast_score = $dast_score + 1;

                  }



                  break;

                case 'NO':



                  if($key == 79){

                    $dast_score = $dast_score + 1;



                  }

                  break;

              }

            }

        }





        $dast_yes_summary = rtrim($dast_yes_summary,', ');

        $dast_no_summary = rtrim($dast_no_summary, ', ');

        $dast_summary .= "<strong>Yes:</strong> ".(!empty($dast_yes_summary) ? $dast_yes_summary : "none provided").".\n";

        $dast_summary .= "<strong>No:</strong> ".(!empty($dast_no_summary) ? $dast_no_summary : "none provided").".\n";

        $dast_description = "\n".$dast_description;

        //die;

    }



    if(isset($question_detail['padt']) && !empty($question_detail['padt'])){



      $padt_severe = '';

      $padt_moderate = '';

      $padt_mild = '';

      $padt_none = '';

      $padt_worse = '';

      $padt_better = '';

      $padt_same = '';

      $padt_question = '';

        $count = 1;

      foreach ($question_detail['padt'] as $key => $singlelevel) {



        if($singlelevel['question_id'] >= 111 && $singlelevel['question_id'] <= 119){



            if($singlelevel['question_id'] == 119 && isset($question_detail['padt_other_question_119']) && !empty($question_detail['padt_other_question_119'])){



              $singlelevel['question'] = $question_detail['padt_other_question_119'];

            }



            $singlelevel['question'] = ucfirst($singlelevel['question']);



            switch ($singlelevel['answer']) {



                case 'Severe':



                  $padt_severe .= $singlelevel['question'].', ';

                  break;

                case 'Moderate':



                  $padt_moderate .= $singlelevel['question'].', ';

                  break;

                case 'Mild':



                  $padt_mild .= $singlelevel['question'].', ';

                  break;



                case 'None':



                  $padt_none .= $singlelevel['question'].', ';

                  break;



            }

          continue;

        }



        switch($singlelevel['question_id']){



            case 120 :



              $padt_description .= 'Average pain level is '.$singlelevel['answer'].'/10';

              break;



            case 121 :



              $padt_description .= ', pain at worst is '.$singlelevel['answer'].'/10. ';

              break;



            case 122:



                $padt_description .= 'Approximately '.$singlelevel['answer'].'% relief with current regimen. ';

              break;

            case 123 :



                $padt_description .= $singlelevel['answer'] == 'Yes' ? 'Current pain relievers provide significant relief to the patient. ' : 'Patient reported current pain relievers do not provide significant relief. ';

                break;



            case 124:



                switch ($singlelevel['answer']) {



                    case 'Better':



                      $padt_better .= 'physical functioning, ';

                      break;

                    case 'Worse':



                      $padt_worse .= 'physical functioning, ';

                      break;

                    case 'Same':



                      $padt_same .= 'physical functioning, ';

                      break;



                }



              //$padt_description .= 'Your physical functioning '.$arr_124[$singlelevel['answer']].'.<br>';

              break;



            case 125:



                switch ($singlelevel['answer']) {



                    case 'Better':



                      $padt_better .= 'family relationships, ';

                      break;

                    case 'Worse':



                      $padt_worse .= 'family relationships, ';

                      break;

                    case 'Same':



                      $padt_same .= 'family relationships, ';

                      break;



                }



              //$padt_description .= 'Your family relationships '.$arr_124[$singlelevel['answer']].'.<br>';

              break;



            case 126:



                switch ($singlelevel['answer']) {



                    case 'Better':



                      $padt_better .= 'social relationships, ';

                      break;

                    case 'Worse':



                      $padt_worse .= 'social relationships, ';

                      break;

                    case 'Same':



                      $padt_same .= 'social relationships, ';

                      break;



                }



             // $padt_description .= 'Your social relationships '.$arr_124[$singlelevel['answer']].'.<br>';

              break;



            case 127:



                switch ($singlelevel['answer']) {



                    case 'Better':



                      $padt_better .= 'patient mood, ';

                      break;

                    case 'Worse':



                      $padt_worse .= 'patient mood, ';

                      break;

                    case 'Same':



                      $padt_same .= 'patient mood, ';

                      break;



                }



              //$padt_description .= 'Your mood '.$arr_124[$singlelevel['answer']].'.<br>';

              break;



            case 128:



                switch ($singlelevel['answer']) {



                    case 'Better':



                      $padt_better .= 'patient sleep pattern, ';

                      break;

                    case 'Worse':



                      $padt_worse .= 'patient sleep pattern, ';

                      break;

                    case 'Same':



                      $padt_same .= 'patient sleep pattern, ';

                      break;



                }



              //$padt_description .= 'Your sleep pattern '.$arr_124[$singlelevel['answer']].'.<br>';

              break;



            case 129:



                switch ($singlelevel['answer']) {



                    case 'Better':



                      $padt_better .= 'patient overall functioning, ';

                      break;

                    case 'Worse':



                      $padt_worse .= 'patient overall functioning, ';

                      break;

                    case 'Same':



                      $padt_same .= 'patient overall functioning, ';

                      break;



                }

             // $padt_description .= 'Your overall functioning '.$arr_124[$singlelevel['answer']].'.<br>';

              break;

        }

        $singlelevel['question'] = ucfirst($singlelevel['question']);

        $singlelevel['answer'] = strtoupper($singlelevel['answer']);

        $padt_question .= 'Q'.$count.'. '.$singlelevel['question'] .' | <strong>'.$singlelevel['answer']."</strong>\n";


        $count ++;


      }




      $temp_padt_desc = '';

      $padt_severe = rtrim($padt_severe,', ');

      $padt_moderate = rtrim($padt_moderate,', ');

      $padt_mild = rtrim($padt_mild,', ');

      $padt_none = rtrim($padt_none,', ');



      $padt_better = rtrim($padt_better,', ');

      $padt_worse = rtrim($padt_worse,', ');

      $padt_same = rtrim($padt_same,', ');



      if(!empty($padt_none)){



          $temp_padt_desc .= 'Patient denied side effects of '.$padt_none.'. ';

      }



      if(!empty($padt_mild)){



          $temp_padt_desc .= 'Mild side effects of '.$padt_mild.'. ';

      }



      if(!empty($padt_moderate)){



          $temp_padt_desc .= 'Moderate side effects of '.$padt_moderate.'. ';

      }



      if(!empty($padt_severe)){



          $temp_padt_desc .= 'Severe side effects of '.$padt_severe.'. ';

      }



      $temp_padt_desc .= $padt_description;



      if(!empty($padt_better)){



          $temp_padt_desc .= ucfirst($padt_better).' has improved. ';

      }

      if(!empty($padt_worse)){



          $temp_padt_desc .= ucfirst($padt_worse).' has worsened. ';

      }

      if(!empty($padt_same)){



          $temp_padt_desc .= ucfirst($padt_same).' is stable. ';

      }

      $padt_description = $temp_padt_desc;

    }

  }



  //pr($padt_description);die;

  //die;

  return array('soapp_score' => $soapp_score,'soapp_nagative' => $soapp_nagative,'comm_score' => $comm_score,'comm_nagative' => $comm_nagative,'dast_score' => $dast_score,'soapp_summary' => $soapp_summary,'comm_summary' => $comm_summary,'dast_summary' => $dast_summary,'soapp_description' => $soapp_description,'comm_description' => $comm_description,'dast_description' => $dast_description,'padt_description' => $padt_description,'padt_question' =>$padt_question);

}





 public function prepare_er_followup_detail_question_layman($user_detail = null ){



//pr($user_detail);die;

  $reason_for_visit = '';

  $subjective = "";



  if(!empty($user_detail->pre_op_medications_question_detail) && is_array($user_detail->pre_op_medications_question_detail)){



        //$layman_summar .= '<br /><strong>You provided these hospital/ER follow up details: </strong><br />' ;



        $temp_question_details = array();

      foreach ($user_detail->pre_op_medications_question_detail as $k => $singlelevel) {



            $temp_question_details[$singlelevel['question_id']] = $singlelevel;

      }



      //pr($temp_question_details);die;



      foreach ($user_detail->pre_op_medications_question_detail as $k => $singlelevel) {



          switch ($singlelevel['question_id'])

          {



            case 46:



              $reason_for_visit .= "f/u You are following up with your doctor because of <strong>".$singlelevel['answer'].'</strong>.<br>';

              break;



            case 47:



              $subjective .= "You was admitted to the hospital <strong>".$singlelevel['answer'].'</strong>';

              break;



            case 48 :



              $subjective .= " at <strong>".$singlelevel['answer']."</strong>";

              break;



            case 49:



              $disdate = $singlelevel['answer'];

              break;



            case 50:



               $subjective .= "You were admitted to the hospital for <strong>".$singlelevel['answer']."</strong>.<br>";

               break;



            case 51:



              if($singlelevel['answer'] == 'No'){



                $reason_for_visit .= "<strong>You were not done any surgeries or procedures</strong>.<br>";



              }

              else{



               if(isset($user_detail->pre_op_medications_question_detail[$k+1]['question_id']) && $user_detail->pre_op_medications_question_detail[$k+1]['question_id'] == 52){





                    $reason_for_visit .= "You were done <strong>".$user_detail->pre_op_medications_question_detail[$k+1]['answer']."</strong> surgeries or procedures.<br>";



                }else{



                   $reason_for_visit .= "<strong>You were done surgeries or procedures</strong>.<br>";

                }

              }

              break;



           case 53:



               $subjective .= "You visit <strong>".$singlelevel['answer']."</strong> emergency room.<br>";

               break;



            case 54:



                $ans_54 = $singlelevel['answer'];

                break;



            case 55:



              $subjective .= "You went to the ER for <strong>".$singlelevel['answer']."</strong>";



              if(isset($ans_54) && !empty($ans_54)){



                $subjective .= " at <strong>".$ans_54."</strong>.<br>";

              }



              break;



          case 56:



              if($singlelevel['answer'] == 'No'){



                $subjective .= "<strong>You were not done any lab tests.</strong><br>";



              }

              else{



               if(isset($user_detail->pre_op_medications_question_detail[$k+1]['question_id']) && $user_detail->pre_op_medications_question_detail[$k+1]['question_id'] == 57){





                    $subjective .= "You were done <strong>".$user_detail->pre_op_medications_question_detail[$k+1]['answer']."</strong> lab tests.<br>";



                }else{



                   $subjective .= "<strong>You were done lab tests.</strong><br>";

                }

              }

              break;



           case 58:



              if($singlelevel['answer'] == 'No'){



                $subjective .= "<strong>You were not done any procedures or imaging studies.</strong><br>";



              }

              else{



               if(isset($user_detail->pre_op_medications_question_detail[$k+1]['question_id']) && $user_detail->pre_op_medications_question_detail[$k+1]['question_id'] == 59){





                    $subjective .= "You were done <strong>".$user_detail->pre_op_medications_question_detail[$k+1]['answer']."</strong> procedures or imaging studies.<br>";



                }else{



                   $subjective .= "<strong>You were done procedures or imaging studies.</strong><br>";

                }

              }



              break;

          }

        }



        $subjective .= ' ';

  }



 // pr($subjective);die;

  //die;

  return array('subjective' => $subjective);

}



//generate unique slug for clinic

    static public function slugify($text,$id = null)

    {

          // replace non letter or digits by -

          $text = preg_replace('~[^\pL\d]+~u', '-', $text);



          // transliterate

          $text = iconv('utf-8', 'us-ascii//TRANSLIT', $text);



          // remove unwanted characters

          $text = preg_replace('~[^-\w]+~', '', $text);



          // trim

          $text = trim($text, '-');



          // remove duplicate -

          $text = preg_replace('~-+~', '-', $text);



          // lowercase

          $text = strtolower($text);

/*

          if (empty($text)) {

            return array('success' => false,'msg' => 'Invalid clinic slug');

          }*/



         /*$orgTlb = TableRegistry::get('Organizations');

        // check slug exist in database

         if(!empty($id)){



            $slugdata = $orgTlb->find('all')->where(['org_url'=>$text,'id !=' => $id])->first();

         }

         else{



            $slugdata = $orgTlb->find('all')->where(['org_url'=>$text])->first();

         }



        if(!empty($slugdata)) {



            return array('success' => false,'msg' => 'This clinic slug is already used.');

        }  */

        return $text;

    }



    static public function sentence_uppercase($string)

    {

        //find sentence

        $sentences = preg_split('/([.?!]+)/', $string, -1,

                                PREG_SPLIT_NO_EMPTY|PREG_SPLIT_DELIM_CAPTURE);





        $new_string = '';

        foreach ($sentences as $key => $sentence)

        {



            $new_string .= ($key & 1) == 0? ucfirst(strtolower(trim($sentence))) : strtolower(trim($sentence)).' ';

           // $new_string = rtrim($new_string,' .');

        }

       // die;

        $new_string = str_replace(". .", ".", $new_string);



        $search_keywords = array(' am ',' Am ','Soapp-r','soapp-r','Comm','comm','Padt','padt','Dast-10','dast-10','(l>r)','(r>l)','(l=r)');

        $replace_keywords = array(' AM ',' AM ','SOAPP-R','SOAPP-R','COMM','COMM','PADT','PADT','DAST-10','DAST-10','(L>R)','(R>L)','(L=R)');

        $new_string = str_replace($search_keywords, $replace_keywords, $new_string);

        return trim($new_string);

    }



    public function is_registered($detail)
    {

        $userTlb = TableRegistry::get('Users');
        $user_detail = null;
        $phone = $this->CryptoSecurity->decrypt(base64_decode($detail['phone']),SEC_KEY);
        $phone = trim(str_replace("-", "",$phone));
        $phone = base64_encode($this->CryptoSecurity->encrypt($phone,SEC_KEY));

        if((isset($detail['email']) && !empty($detail['email'])) || (isset($detail['phone']) && !empty($detail['phone'])))
        {

            $filter = array();
            if(!empty($detail['email'])){

                $filter['email'] = $detail['email'];
            }

            if(!empty($phone)){

                $filter['phone'] = $phone;
            }

          $user_detail_all = $userTlb->find('all')->where(['OR'=> $filter])->toArray();
          //pr($user_detail_all);die;
          if(!empty($user_detail_all)){

              $user_valid = 0;
              foreach($user_detail_all as $all_user_key => $all_user_value){

                  if(($detail['email'] != '' && $all_user_value['email'] == $detail['email'] && $phone != '' && $all_user_value['phone'] == $phone) || ($detail['email'] == '' && $phone != '' && $all_user_value['phone'] == $phone) || ($detail['email'] != '' && $all_user_value['email'] == $detail['email'] && $phone == '')){

                      $user_detail = $all_user_value;
                      $user_valid = 1;
                      break;
                  }
              }
            }
        }
        elseif(empty($detail['email']) && empty($detail['phone']) && (!empty($detail['first_name']) && !empty($detail['last_name']) && !empty($detail['dob'])))
        {

            $filter = ['AND'=>
                        ['first_name'=> $detail['first_name'],
                        'last_name' => $detail['last_name'],
                        "dob" => $detail['dob'],
                        ["OR"=>[
                          'email'=>"",
                          'email IS NULL']
                        ],
                        ["OR"=>[
                          'phone'=>"",
                          'phone IS NULL']
                        ]
                      ]];
            $user_detail = $userTlb->find('all')->where($filter)->first();
        }

        if(!empty($user_detail)){

            return $user_detail;
        }
        return 0;
    }





 public function covid_detail_layman($covid_detail){



 	//pr($covid_detail);die;

    $positive_sym = '';

    $negative_sym = '';

    $negative_cond  = '';

    $positive_cond = '';

    $is_user_current_smoke = '';

    $city_arr = array('Washington','Massachusetts','New york');



    if(!empty($covid_detail) && is_array($covid_detail)){



        foreach($covid_detail as $key => $val){



            switch ($val['question_id']) {

                case 143:

                {



                    if($val['answer'] == 'No'){



                       $negative_sym .= 'personal travel to domestic cluster zones, ';

                    }

                    break;

                }



                case 144:

                {



                    $temp_travelled_cities = array_diff($city_arr, $val['answer']);

                   // pr($temp_travelled_cities);die;

                    if(!empty($temp_travelled_cities)){



                        foreach ($temp_travelled_cities as $ckey => $cvalue) {



                            if($cvalue == 'Washington'){



                               $negative_sym .= 'personal travel to nursing facilities in kirkland/standwood WA, ';

                            }

                            elseif($cvalue == 'Massachusetts'){



                                $negative_sym .= 'personal attendance of biogen conference in boston, ';

                            }

                            elseif($cvalue == 'New york'){



                                $negative_sym .= 'personal travel to new rochelle, ';

                            }

                        }

                    }

                    break;

                }



                case 145:

                {

                    $ans_145 = 'personal travel to nursing facilities in kirkland/standwood WA, ';

                    if($val['answer'] == 'No'){



                       $negative_sym .= $ans_145;

                    }

                    else{



                        $positive_sym .= $ans_145;

                    }

                    break;

                }

                case 146:

                {

                    $ans_146 = 'personal attendance of biogen conference in boston, ';

                    if($val['answer'] == 'No'){



                       $negative_sym .= $ans_146;

                    }

                    else{



                        $positive_sym .= $ans_146;

                    }

                    break;

                }



                case 147:

                {

                    $ans_147 = 'personal travel to new rochelle, ';

                    if($val['answer'] == 'No'){



                       $negative_sym .= $ans_147;

                    }

                    else{



                        $positive_sym .= $ans_147;

                    }

                    break;

                }



                case 148:

                {

                    $ans_148 = 'exposure to travelers from states w/covid-19 clusters, ';

                    if($val['answer'] == 'No'){



                       $negative_sym .= $ans_148;

                    }



                    break;

                }

                case 149:

                {

                    //echo $negative_sym;

                    $temp_travelled_cities = array_diff($city_arr, $val['answer']);

                    //pr($temp_travelled_cities);die;

                    if(!empty($temp_travelled_cities)){



                        foreach ($temp_travelled_cities as $ckey => $cvalue) {



                            if($cvalue == 'Washington'){



                               $negative_sym .= 'exposure to traveler to nursing facilities in kirkland/standwood WA, ';

                            }

                            elseif($cvalue == 'Massachusetts'){



                                $negative_sym .= 'exposure to traveler who attended biogen conference in boston, ';

                            }

                            elseif($cvalue == 'New york'){



                                $negative_sym .= 'exposure to traveler who visited new rochelle, ';

                            }

                        }

                    }

                    break;

                }



                case 150:

                {

                    $ans_150 = 'exposure to traveler to nursing facilities in kirkland/standwood WA, ';

                    if($val['answer'] == 'No'){



                       $negative_sym .= $ans_150;

                    }

                    else{



                        $positive_sym .= $ans_150;

                    }

                    break;

                }

                case 151:

                {

                    $ans_151 = 'exposure to traveler who attended biogen conference in boston, ';

                    if($val['answer'] == 'No'){



                       $negative_sym .= $ans_151;

                    }

                    else{



                        $positive_sym .= $ans_151;

                    }

                    break;

                }



                case 152:

                {

                    $ans_152 = 'exposure to traveler who visited new rochelle, ';

                    if($val['answer'] == 'No'){



                       $negative_sym .= $ans_152;

                    }

                    else{



                        $positive_sym .= $ans_152;

                    }

                    break;

                }



                case 153:

                {

                    $ans_153 = 'personal travel on affected cruise lines, ';

                    if($val['answer'] == 'No'){



                       $negative_sym .= $ans_153;

                    }

                    else{



                        $positive_sym .= $ans_153;

                    }

                    break;

                }



                case 154:

                {

                    $ans_154 = 'exposure to travelers who were on affected cruise lines, ';

                    if($val['answer'] == 'No'){



                       $negative_sym .= $ans_154;

                    }

                    else{



                        $positive_sym .= $ans_154;

                    }

                    break;

                }



                case 155:

                {

                    $ans_155 = 'current smoking, ';

                    $is_user_current_smoke = $val['answer'];

                    if($val['answer'] == 'No'){



                       $negative_sym .= $ans_155;

                    }

                    else{



                        $positive_sym .= $ans_155;

                    }

                    break;

                }



                case 156:

                {

                    $ans_156 = $val['answer'];

                    $temp_ans_156 = array();

                    $arr_156  = array(



                            'Chronic obstructive pulmonary disease (COPD)' => 'COPD',

                            'Heart disease (coronary artery disease)' => 'CAD' ,

                            'Diabetes' => 'DM',

                            'High blood pressure (Hypertension)' => 'HTN'

                        );

                    if(!empty($ans_156)){



                        foreach ($ans_156 as $k_156 => $v_156) {



                            if(array_key_exists($v_156, $arr_156)){



                                $temp_ans_156[] = $arr_156[$v_156];

                            }

                        }

                    }



                    $positive_cond = implode(", ", $temp_ans_156);

                    $temp_negative_cond = array_diff($arr_156, $temp_ans_156);

                    $negative_cond = implode(", ", $temp_negative_cond);

                    break;

                }



            }

        }

    }



    $positive_sym = rtrim($positive_sym,', ');

    $negative_sym = rtrim($negative_sym,', ');



    return array('positive_sym' => $positive_sym, 'negative_sym' => $negative_sym, 'positive_cond' => $positive_cond, 'negative_cond' => $negative_cond,'is_user_current_smoke' => $is_user_current_smoke);

 }





 public function follow_up_sx_detail_layman($user_detail)
 {

    $this->ChiefCompliantUserdetails = TableRegistry::get('ChiefCompliantUserdetails');
    $prev_visit_user_detail =  $this->ChiefCompliantUserdetails->find('all')->where(['id' => $user_detail->followup_parent_id])->first();
    $prev_visit_user_detail = $this->prepare_user_detial_data_for_render($prev_visit_user_detail);
    $layman_summar  = '';
    $all_cc_name = '';

    if(!empty($user_detail->follow_up_sx_detail) && is_array($user_detail->follow_up_sx_detail))
    {
        foreach ($user_detail->follow_up_sx_detail as $key => $value)
        {
            $previous_follow_up_symptom_detail = array();
            $cur_cc_name = '';

            foreach ($value as $k => $singlelevel)
            {
                if(is_string($k) && $k == 'cc_data')
                {
                    $cur_cc_name = $singlelevel->name;
                    $all_cc_name .= $cur_cc_name.', ';
                    //collect previous appointment data
                    if(!empty($prev_visit_user_detail))
                    {
                        //if previous appointmnet is symptom complaint
                        if(!empty($prev_visit_user_detail->chief_compliant_details))
                        {
                            if(isset($prev_visit_user_detail->chief_compliant_details[$singlelevel->id]) && !empty($prev_visit_user_detail->chief_compliant_details[$singlelevel->id]))
                            {

                                foreach ($prev_visit_user_detail->chief_compliant_details[$singlelevel->id] as $cc_key => $cc_value)
                                {

                                    if($cc_key == 'cc_data')
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        //check pain scale best is exist or not

                                        if(trim($cc_value['hpi_element']) == 'pain scale best'){

                                            $previous_follow_up_symptom_detail['pain_best_scale'] = $cc_value['answer'];
                                        }
                                        //check pain scale worst is exist or not

                                        if(trim($cc_value['hpi_element']) == 'pain scale worst')
                                        {
                                            $previous_follow_up_symptom_detail['pain_worst_scale'] = $cc_value['answer'];
                                        }

                                        //check temporal is exist or not

                                        if(trim($cc_value['hpi_element']) == 'temporal')
                                        {
                                            $previous_follow_up_symptom_detail['temporal'][] = is_array($cc_value['answer']) ? implode(", ", $cc_value['answer']) : $cc_value['answer'];
                                        }

                                        if(trim($cc_value['hpi_element']) == 'location')
                                        {
                                            $previous_follow_up_symptom_detail['location'][] = is_array($cc_value['answer']) ? implode(", ", $cc_value['answer']) : $cc_value['answer'];

                                            //continue;
                                        }
                                    }
                                }
                            }

                        }

                        elseif(!empty($prev_visit_user_detail->follow_up_sx_detail))
                        {
                            //if previous appointmnet is follow up

                            if(isset($prev_visit_user_detail->follow_up_sx_detail[$singlelevel->id]) && !empty($prev_visit_user_detail->follow_up_sx_detail[$singlelevel->id]))
                            {
                                foreach ($prev_visit_user_detail->follow_up_sx_detail[$singlelevel->id] as $cc_key => $cc_value)
                                {

                                    if($cc_key == 'cc_data'){
                                        continue;
                                    }
                                    else{
                                        //check pain scale best is exist or not

                                        if(in_array($cc_value['question_id'], [134])){

                                            $previous_follow_up_symptom_detail['pain_best_scale'] = $cc_value['answer'];
                                            continue;
                                        }

                                        //check pain scale worst is exist or not

                                        if(in_array($cc_value['question_id'], [135])){

                                            $previous_follow_up_symptom_detail['pain_worst_scale'] = $cc_value['answer'];
                                            continue;
                                        }

                                        //check temporal is exist or not

                                        if(in_array($cc_value['question_id'], [136])){

                                            $previous_follow_up_symptom_detail['temporal'] = $cc_value['answer'];
                                            continue;
                                        }

                                        //check location is exist or not

                                        if(in_array($cc_value['question_id'], [133])){
                                            $previous_follow_up_symptom_detail['location'] = $cc_value['answer'];
                                            continue;
                                        }

                                    }
                                }

                            }

                        }
                    }

                    if(!empty($previous_follow_up_symptom_detail)){

                        $previous_follow_up_symptom_detail = array_filter($previous_follow_up_symptom_detail);

                        foreach ($previous_follow_up_symptom_detail as $pre_key => $pre_value) {

                           $previous_follow_up_symptom_detail[$pre_key] = strtolower(is_array($pre_value) ? implode(", ", $pre_value) : $pre_value);
                        }
                    }
                    //set the cc header

                    $cc_header = $cur_cc_name;

                    if(isset($value[138]) && !empty($value[138])){

                        $ques_ans_138 = $value[138]['answer'];

                        if($ques_ans_138 == 'Yes'){

                            $ques_ans_139 = (isset($value[139]) ? $value[139]['answer'] : '');
                            $cc_header .= !empty($ques_ans_139) ? " and new presentation of ".$ques_ans_139 : "";

                        }
                    }

                    if($singlelevel->id == $user_detail->chief_compliant_id->id){

                        $layman_summar.= "The patient is here for follow up of ".$cc_header.'. ';

                    }

                    else

                    {
                        $layman_summar.= "The patient is also here for follow up of ".$cc_header.'. ';

                    }
                }

                else

                {



                    switch ($singlelevel['question_id']) {

                        case 130:

                            $translate_130 = array(

                                'Completely gone' => 'resolved',

                                'Better' => 'improved',

                                'About the same' => 'remained stable',

                                'Worse' => 'worsened'

                            );

                            $layman_summar .= 'The '.$cur_cc_name.' has '.$translate_130[$singlelevel['answer']].' since last visit. ';
                            break;

                        case 131:

                            $old_loc = isset($previous_follow_up_symptom_detail['location']) ? $previous_follow_up_symptom_detail['location'] : '';

                            $ques_ans_131 = $singlelevel['answer'] == 'Yes' ? "The patient continues to experience the symptoms".(!empty($old_loc) ? ' in the '.$old_loc : "") : 'The patient no longer experiences the symptoms'.(!empty($old_loc) ? ' in the '.$old_loc : "");

                            if(!empty($ques_ans_132)){

                                $layman_summar .= $ques_ans_131.$ques_ans_132;
                                $ques_ans_132 = ''; $ques_ans_131 = '';

                            }
                            break;

                        case 132:

                            $ques_ans_132 = $singlelevel['answer'] == 'Yes' ? ' and now experiences the symptoms in the '.$value[133]['answer'].'. ' : ' and now the patient has not experiences the symptoms in any new location. ';

                            if(!empty($ques_ans_131)){



                                $layman_summar .= $ques_ans_131.$ques_ans_132;

                                $ques_ans_132 = ''; $ques_ans_131 = '';

                            }

                            break;



                        case 134:



                            $layman_summar .= "Pain at best is a ".$singlelevel['answer'].(isset($previous_follow_up_symptom_detail['pain_best_scale']) ? " compared to a ".$previous_follow_up_symptom_detail['pain_best_scale']." last visit" : "").'. ';

                            break;



                        case 135:



                            $layman_summar .= "Pain at worst is a ".$singlelevel['answer'].(isset($previous_follow_up_symptom_detail['pain_worst_scale']) ? " compared to a ".$previous_follow_up_symptom_detail['pain_worst_scale']." last visit" : "").'. ';

                            break;



                        case 136:

                            $temporal = isset($previous_follow_up_symptom_detail['temporal']) ? ' '.$previous_follow_up_symptom_detail['temporal'] : '';

                            if(!empty($temporal)){

                              $temporal = trim($temporal);

                              if($temporal == 'afternoon' || $temporal == 'morning'){

                                  $temporal = ' in the '.$temporal;
                              }
                              elseif($temporal == 'night'){

                                  $temporal = ' at '.$temporal;
                              }
                              elseif($temporal == 'only after meals' || $temporal == 'same all day'){

                                  $temporal = ' '.$temporal;
                              }
                              else{

                                $temporal = ' in the '.$temporal;
                              }
                            }

                            $layman_summar .= ($singlelevel['answer'] == 'Yes' ? 'Symptoms continue to occur'.$temporal : 'Symptoms does not continue to occur'.$temporal).'. ';

                            break;
                        case 137:

                            $ques_ans_137 = strtolower($singlelevel['answer']);
                            if(!empty($ques_ans_137)){

                              if($ques_ans_137 == 'afternoon' || $ques_ans_137 == 'morning'){

                                  $ques_ans_137 = 'in the '.$ques_ans_137;
                              }
                              elseif($ques_ans_137 == 'night'){

                                  $ques_ans_137 = 'at '.$ques_ans_137;
                              }
                              elseif($ques_ans_137 == 'only after meals' || $ques_ans_137 == 'same all day'){

                                  $ques_ans_137 = $ques_ans_137;
                              }
                              else{

                                $ques_ans_137 = 'in the '.$ques_ans_137;
                              }
                            }

                            $layman_summar .= 'Symptoms now occur '.$ques_ans_137.'. ';

                            break;



                        case 140:



                            $ques_ans_140 = $singlelevel['answer'];

                            $well_resp = '';

                            $minimal_resp = '';

                            $no_resp = '';

                            if(isset($ques_ans_140['med_type']) && !empty($ques_ans_140['med_type'])){



                                foreach ($ques_ans_140['med_type'] as $med_key => $med_value) {



                                   if(isset($ques_ans_140[$med_key])){



                                        $med_value = strtolower($med_value);



                                        if($med_value == 'a little'){



                                            $minimal_resp .= $ques_ans_140[$med_key].', ';

                                        }

                                        elseif($med_value == 'a lot'){



                                            $well_resp .= $ques_ans_140[$med_key].', ';

                                        }

                                        elseif($med_value == 'not at all'){



                                            $no_resp .= $ques_ans_140[$med_key].', ';

                                        }



                                   }



                                }

                            }



                            $well_resp = rtrim($well_resp,', ');

                            $minimal_resp = rtrim($minimal_resp,', ');

                            $no_resp = rtrim($no_resp,', ');

                            $layman_summar .= (!empty($well_resp) ? "Responded well to ".strtolower($well_resp).'. ': "");

                            $layman_summar .= (!empty($minimal_resp) ? "Minimal response to ".strtolower($minimal_resp).'. ': "");

                            $layman_summar .= (!empty($no_resp) ? "No response to ".strtolower($no_resp).'. ': "");

                            break;

                    }



                }



             // pr($previous_follow_up_symptom_detail);

            }

        }

    }

    $all_cc_name = rtrim($all_cc_name,', ');

    return array('layman_summar' => $layman_summar,'all_cc_name' => $all_cc_name);

 }





 public function covid_module_subjective($user_detail){

   // pr($user_detail);die;

    $layman_summar = '';

    $ques_213_translate = array(



                    'Chronic obstructive pulmonary disease (COPD)' => 'COPD',

                    'Asthma' => 'asthma',

                    'Heart disease (coronary artery disease)' => 'CAD',

                    'Heart attacks' => 'MI',

                    'Heart failure' => 'CHF',

                    'High blood pressure (hypertension)' => 'HTN',

                    'Diabetes' => 'DM2',

                    'Multiple sclerosis' => 'MS',

                    "Lou Gehrig's disease (ALS)" => 'ALS',

                    "Myasthenia gravis" => 'myasthenia gravis',

                    'Immunsuppression therapy' => 'immunsuppression therapy',

                    'Cirrhosis' => 'cirrhosis',

                    'Chronic kidney disease' => 'CKD',

                    'Obesity' => 'obesity'

                );



    $family_members_translate = array(



        'Father' => 'F',

        'Mother' => 'M',

        'Paternal grandmother' => 'PGM',

        'Paternal grandfather' => 'PGF',

        'Maternal grandmother' => 'MGM',

        'Maternal grandfather' => 'MGF',

        'Brother' => 'brother',

        'Sister' => 'sister',

        'Son' => 'son',

        'Daughter' => 'daughter'

    );



    $smoking_layman  = '';

    $vaping_layman = '';

    $fh_layman = '';

    $first_responder = '';

    $is_pregnate = 0;
    $temperature = '';
    $spo2 = '';



    if(!empty($user_detail->focused_history_detail)){



        if(isset($user_detail->focused_history_detail[218]) && $user_detail->focused_history_detail[218]['answer'] == 'Yes'){

            $is_pregnate = 1;

        }

        if(isset($user_detail->focused_history_detail[219]) && $user_detail->focused_history_detail[219]['answer'] == 'Yes' && isset($user_detail->focused_history_detail[220])){

            $temperature = $user_detail->focused_history_detail[220]['answer'];

        }

        if(isset($user_detail->focused_history_detail[221]) && $user_detail->focused_history_detail[221]['answer'] == 'Yes' && isset($user_detail->focused_history_detail[222])){

           $spo2 = $user_detail->focused_history_detail[222]['answer'];
        }

        if(isset($user_detail->focused_history_detail[213]) && !empty($user_detail->focused_history_detail[213]['answer'])){



            $layman_summar .= "with a PMH significant for ";



            foreach ($user_detail->focused_history_detail[213]['answer'] as $key => $value) {



                $layman_summar .= isset($ques_213_translate[$value]) ? $ques_213_translate[$value].", " : "";

            }



            $layman_summar = rtrim($layman_summar,", ");

        }



        if(isset($user_detail->focused_history_detail[214])){



            $smoking_layman .= $user_detail->focused_history_detail[214]['answer'] == 'Yes' ? "Currently smoking" : "Denies current smoking";

        }



        if(isset($user_detail->focused_history_detail[215])){



            $smoking_layman .= $user_detail->focused_history_detail[215]['answer'] == 'Yes' ? ", +past smoking" : ", denies past smoking";

        }



        if(isset($user_detail->focused_history_detail[216])){



            $vaping_layman .= $user_detail->focused_history_detail[216]['answer'] == 'Yes' ? "Currently vaping" : "Denies current vaping";

        }



        if(isset($user_detail->focused_history_detail[217])){



            $vaping_layman .= $user_detail->focused_history_detail[217]['answer'] == 'Yes' ? ", +past vaping" : ", denies past vaping";

        }



        if(isset($user_detail->focused_history_detail[212]) && !empty($user_detail->focused_history_detail[212]['answer'])){



            $fh_layman .= 'FH is significant for ';

            foreach ($user_detail->focused_history_detail[212]['answer'] as $key => $value) {



                if($key != 'members'){

                    $cond = isset($ques_213_translate[$value]) ? $ques_213_translate[$value] : "";

                    if(!empty($cond) && isset($user_detail->focused_history_detail[212]['answer']['members'][$key])){



                        $members = array();

                        foreach ($user_detail->focused_history_detail[212]['answer']['members'][$key] as $k => $v) {



                            $members[] = isset($family_members_translate[$v]) ? $family_members_translate[$v] : "";

                        }



                        $members = array_filter($members);

                        $fh_layman .= $cond.(!empty($members) ? "(".implode(", ", $members).")":"").", ";

                    }

                }

            }



            $fh_layman = rtrim($fh_layman,", ");

            $ques_ans_212 = $user_detail->focused_history_detail[212]['answer'];

            if(!empty($ques_ans_212)){



                if(isset($ques_ans_212['members'])){



                  unset($ques_ans_212['members']);

                }



                $denied_cond = array_diff(['Asthma','Heart disease (coronary artery disease)','High blood pressure (hypertension)','Diabetes'], $ques_ans_212);

            }

            else{



               $denied_cond  = array('Asthma','Heart disease (coronary artery disease)','High blood pressure (hypertension)','Diabetes');

            }



            if(!empty($denied_cond)){



                $fh_layman .= '. Denies FH of ';

                foreach ($denied_cond as $key => $value) {



                    $fh_layman .= isset($ques_213_translate[$value]) ? $ques_213_translate[$value].', ' : "";

                }



                $fh_layman = rtrim($fh_layman,', ');

            }



        }

    }



    if(!empty($user_detail->chief_compliant_details)){



        $layman_summar .= " requesting a televisit with complaints of ";

        $duration = (isset($user_detail->compliant_length) && !empty($user_detail->compliant_length)) ? $user_detail->compliant_length :"" ;

        foreach ($user_detail->chief_compliant_details as $key => $value) {



            $cur_cc_name = '';

            $onset = '';

           foreach ($value as $k => $v) {



                if(is_string($k) && $k == 'cc_data'){



                    $cur_cc_name = trim($v->name);

                }

                else{



                    if($v['question_id'] == 15){



                       $duration = $v['answer'];

                    }

                    if($v['question_id'] == 172){



                        $onset = $v['answer'] == 'all of a sudden' ? 'sudden onset' : 'gradual onset';

                    }

                }

           }

           $layman_summar .= $onset." ".$cur_cc_name." for ".$duration.", ";

            //gradual onset fever for 1 hour

        }



        $layman_summar = rtrim($layman_summar,', ').". ";

    }



    if(!empty($user_detail->covid_detail)){



        if(isset($user_detail->covid_detail[208]) && $user_detail->covid_detail[208]['answer'] == 'Yes'){



            $first_responder = "HCP/FR ";

        }



        if(isset($user_detail->covid_detail[209])){



            $layman_summar .= ucfirst($user_detail->covid_detail[209]['answer']).'. ';

        }



        if(isset($user_detail->covid_detail[204])){


            if($user_detail->covid_detail[204]['answer'] == 'Yes'){

                $ques_ans_205 = '';

                if(isset($user_detail->covid_detail[205])){



                    $ques_ans_205 = is_array($user_detail->covid_detail[205]['answer']) ? implode(", ",$user_detail->covid_detail[205]['answer']) : $user_detail->covid_detail[205]['answer'];

                    $ques_ans_205 = strtolower($ques_ans_205);

                }



                if(isset($user_detail->covid_detail[206])){



                   $ques_ans_205 = str_replace("other",$user_detail->covid_detail[206]['answer'], $ques_ans_205);

                }
                $layman_summar .= !empty($ques_ans_205) ? "Recent travel to ".$ques_ans_205: "";
            }
            else{

                $layman_summar .= 'Denies domestic travel';
            }

        }



        if(isset($user_detail->covid_detail[201])){

            if($user_detail->covid_detail[201]['answer'] == 'Yes'){

                $ques_ans_202 = '';

                if(isset($user_detail->covid_detail[202])){



                    $ques_ans_202 = is_array($user_detail->covid_detail[202]['answer']) ? implode(", ",$user_detail->covid_detail[202]['answer']) : $user_detail->covid_detail[202]['answer'];

                    $ques_ans_202 = strtolower($ques_ans_202);

                }



                if(isset($user_detail->covid_detail[203])){



                   $ques_ans_202 = str_replace("other",$user_detail->covid_detail[203]['answer'], $ques_ans_202);

                }



                $layman_summar .= !empty($ques_ans_202) ? ", recent travel to ".$ques_ans_202: "";
            }
            else{

                $layman_summar .= ', denies international travel';
            }

        }

        $layman_summar .= ". ";


        if(isset($user_detail->covid_detail[207])){

            $layman_summar .= $user_detail->covid_detail[207]['answer'] == 'Yes' ? "+exposure to lab-confirmed COVID-19. " : "Denies exposure to lab-confirmed COVID-19. ";

        }

    }



    if(!empty($smoking_layman)){



        $layman_summar .= $smoking_layman.'. ';

    }



    if(!empty($vaping_layman)){



        $layman_summar .= $vaping_layman.'. ';

    }



    if(!empty($fh_layman)){



        $layman_summar .= $fh_layman.'. ';

    }

    $layman_summar = $first_responder.$layman_summar;
    //pr($layman_summar);die;
    return  array('is_pregnate' => $is_pregnate, 'layman_summar' => $layman_summar,'temperature' => $temperature,'spo2' => $spo2);

 }


 //this function is used to check all data is available for telehealth call or not
public function checkTelehealthAppointmentData($provider_id, $org_id, $schedule_data){

  //group_id,provider_id,patient_first_name,patient_last_name,patient_email,patient_contact all these data are required for telehealth appointment
  if(!empty($schedule_data) && !empty($schedule_data['last_name']) && !empty($schedule_data['first_name']) && (!empty($schedule_data['email']) || !empty($schedule_data['phone'])))
  {
    $userTlb = TableRegistry::get('Users');
    $orgTbl = TableRegistry::get('Organizations');
    $user_data = $userTlb->find('all')->where(['id' => $provider_id])->first();
    $org_data = $orgTbl->find('all')->where(['id' => $org_id])->first();
    if(!empty($org_data) && !empty($org_data['cl_group_id']) && !empty($user_data) && !empty($user_data['cl_provider_id']) && $user_data['is_telehealth_provider'] == 1){

        return 1;
    }
  }

  return 0;
}


public function chronic_condition_subjective($user_detail,$positive_sym,$negative_sym,$meds)
{
   // pr($user_detail);die;

    $fh_cond = array();
    $layman_summar = '';
    $glu_layman = '';
    $glu_log = '';
    $sh_layman = '';
    $bp_log = '';
    $bp_layman = '';
    $exercise_diet_layman = '';
    $spo2_layman = '';

    $dmii_med = '';
    $cad_med = '';
    $chf_med = '';
    $htn_med = '';
    $copd_med = '';
    $med_layman = '';
    $temp_section = '';
    $caffeine_layman = '';
    $asthma_med = '';
    $peak_flow_log = '';
    $temp_flu_pmu = '';

    $med_how_tken_arr = array("mouth"=>"PO","nasal spray"=>"IN","both ears" => "AU","right ear" => "AD","left ear" => "AS","both eyes" => "OU","right eye" => "OD","left eye" => "OS","muscle injection"=>"IM","subcutaneously"=>"SUBQ","under the skin"=>"SUBQ","under tongue"=>"sublingual","topical"=>"TD","suppository"=>"SUPP");

    $cond_status_trans = array(

    	'worse' => 'worsening',
    	'better' => 'improving',
    	'same' => 'stable'
    );

    $copd_mmrcds_score = array(

        'i get breathless only with strenuous exercise' => 0,
        'i get short of breath when hurrying on level ground or walking up a slight hill' => 1,
        'on level ground, I walk slower than other people my age because of breathlessness, or i have to stop for breath when walking at my own pace' => 2,
        'i stop for breath after walking about 100 yards or after a few minutes on level ground' => 3,
        'i am too breathless to leave the house, or i am breathless when dressing' => 4
    );

    $life_quality_trans = array(
        'none' => 'no',
        'a little' => 'minor',
        'somewhat' => 'moderate',
        'a lot' => 'severe'
    );

    $reading_timing_trans = array(
                                    0 => "",
                                    1 => 'AC breakfast',
                                    2 => 'AC lunch',
                                    3 => 'AC dinner',
                                    4 => "AC HS",
                                    5 => 'post-exercise',
                                    6 => 'postprandial'
                                );

    $peak_flow_reading_timing_trans = array(
        'morning' => 'AM',
        'afternoon' => 'PM'
    );

    $dmii_assoc = array('polyuria','polydipsia','polyphagia','unintentional weight loss','neuropathy','loss of balance','dizziness');
    $cad_assoc = array('angina','fatigue','wheezing','cough','claudication');
    $chf_assoc = array('platypnea','exertional dyspnea','fatigue','unintentional weight loss','edema');
    $htn_assoc = array('dizziness','headache','lightheadedness','syncope');
    $copd_assoc = array('fever','wheezing','cyanosis','cough','hemoptysis','SOB','chest tightness','dyspnea at rest','DOE');
    $asthma_assoc = array('wheezing','cyanosis','gasping','hemoptysis','reflux','chest tightness');

    $dmii_pos_sysm = '';
    $dmii_neg_sysm = '';

    $cad_pos_sysm = '';
    $cad_neg_sysm = '';

    $chf_pos_sysm = '';
    $chf_neg_sysm = '';

    $htn_pos_sysm = '';
    $htn_neg_sysm = '';

    $copd_pos_sysm = '';
    $copd_neg_sysm = '';

    $asthma_pos_sysm = '';
    $asthma_neg_sysm = '';

    $common_flu_peonomia = '';

    if(!empty($positive_sym)){

    	$positive_sym = array_filter(explode(', ', $positive_sym));

    	foreach ($positive_sym as $key => $value) {

    		if(in_array($value, $dmii_assoc)){

    			$dmii_pos_sysm .= $value.', ';
    		}

    		if(in_array($value, $cad_assoc)){

    			$cad_pos_sysm .= $value.', ';
    		}

    		if(in_array($value, $chf_assoc)){

    			$chf_pos_sysm .= $value.', ';
    		}

    		if(in_array($value, $htn_assoc)){

    			$htn_pos_sysm .= $value.', ';
    		}

    		if(in_array($value, $copd_assoc)){

    			$copd_pos_sysm .= $value.', ';
    		}

            if(in_array($value, $asthma_assoc)){

                $asthma_pos_sysm .= $value.', ';
            }
    	}

    	$dmii_pos_sysm = !empty($dmii_pos_sysm) ? ('Patient reports '.rtrim($dmii_pos_sysm,', ').'. ') :'';
    	$cad_pos_sysm = !empty($cad_pos_sysm) ? ('Patient reports '.rtrim($cad_pos_sysm,', ').'. ') :'';
    	$chf_pos_sysm = !empty($chf_pos_sysm) ? ('Patient reports '.rtrim($chf_pos_sysm,', ').'. ') :'';
    	$htn_pos_sysm = !empty($htn_pos_sysm) ? ('Patient reports '.rtrim($htn_pos_sysm,', ').'. ') :'';
    	$copd_pos_sysm = !empty($copd_pos_sysm) ? ('Patient reports '.rtrim($copd_pos_sysm,', ').'. ') :'';
        $asthma_pos_sysm = !empty($asthma_pos_sysm) ? ('Patient reports '.rtrim($asthma_pos_sysm,', ').'. ') :'';

    }


    if(!empty($negative_sym)){

    	$negative_sym = array_filter(explode(', ', $negative_sym));

    	foreach ($negative_sym as $key => $value) {

    		if(in_array($value, $dmii_assoc)){

    			$dmii_neg_sysm .= $value.', ';
    		}

    		if(in_array($value, $cad_assoc)){

    			$cad_neg_sysm .= $value.', ';
    		}

    		if(in_array($value, $chf_assoc)){

    			$chf_neg_sysm .= $value.', ';
    		}

    		if(in_array($value, $htn_assoc)){

    			$htn_neg_sysm .= $value.', ';
    		}

    		if(in_array($value, $copd_assoc)){

    			$copd_neg_sysm .= $value.', ';
    		}

            if(in_array($value, $asthma_assoc)){

                $asthma_neg_sysm .= $value.', ';
            }
    	}

    	$dmii_neg_sysm = !empty($dmii_neg_sysm) ? ('Denies '.rtrim($dmii_neg_sysm,', ').'. ') :'';
    	$cad_neg_sysm = !empty($cad_neg_sysm) ? ('Denies '.rtrim($cad_neg_sysm,', ').'. ') :'';
    	$chf_neg_sysm = !empty($chf_neg_sysm) ? ('Denies '.rtrim($chf_neg_sysm,', ').'. ') :'';
    	$htn_neg_sysm = !empty($htn_neg_sysm) ? ('Denies '.rtrim($htn_neg_sysm,', ').'. ') :'';
    	$copd_neg_sysm = !empty($copd_neg_sysm) ? ('Denies '.rtrim($copd_neg_sysm,', ').'. ') :'';
        $asthma_neg_sysm = !empty($asthma_neg_sysm) ? ('Denies '.rtrim($asthma_neg_sysm,', ').'. ') :'';

    }

    //set the medications for all conditions

    if(!empty($user_detail->chronic_dmii_medication) && is_array($user_detail->chronic_dmii_medication))
    {
        foreach ($user_detail->chronic_dmii_medication as $key => $value)
        {

            // $value['medication_how_taken'] = !empty($med_how_tken_arr[$value['medication_how_taken']]) ? $med_how_tken_arr[$value['medication_how_taken']] : $value['medication_how_taken'] ;

            // if(!empty($value['medication_name_name']))
            // {
            //     $dmii_med .= h($value['medication_name_name']);
            // }
            // if(!empty($value['medication_dose']))
            // {
            //     $dmii_med .= ' '.h($value['medication_dose']);
            // }

            // if(!empty($value['medication_how_often']))
            // {
            //     $dmii_med .= ' '.h($value['medication_how_often']);
            // }

            // if(!empty($value['medication_how_taken']))
            // {
            //     $dmii_med .= ' '.h($value['medication_how_taken']);
            // }


            // $dmii_med .= ', ';

            // New Medication start
            $value['medication_how_taken'] = !empty($value['medication_how_taken']) ? $value['medication_how_taken'] : $value['medication_how_taken'] ;
                $rxnormid = '';
                $medication_name = '';
                if(!empty($value['medication_name_name'])){

                $value['medication_name_name'] = ltrim($value['medication_name_name']);
                $chief_compliant_medication_Tbl = TableRegistry::get('chief_compliant_medication');
                $chief_compliant_medication_rec = $chief_compliant_medication_Tbl->find('all')->where(['layman_name' =>$value['medication_name_name']])->first();
                //pr($chief_compliant_medication_rec); 
                $medication_name  = !empty($value['medication_name_name']) ? $value['medication_name_name'] : '';
                $rxnormid = !empty($chief_compliant_medication_rec['rxnormid']) ? $chief_compliant_medication_rec['rxnormid'] :'';
                $dmii_med .= '{"rxnormid": '.'"'.$rxnormid.'"'.', "medication": '.'"'.h($medication_name).'"';

            }
            if(!empty($value['medication_dose'])){
                $dmii_med .= ', "dose": '.'"'.h($value['medication_dose']).'"';

            }

            if(!empty($value['medication_how_often'])){
                $dmii_med .= ', "frequency": '.'"'.h($value['medication_how_often']).'"';

            }

            if(!empty($value['medication_how_taken'])){
                $dmii_med .= ', "route": '.'"'.h($value['medication_how_taken']).'"';

            }
            if(!empty($meds))
            {
                $dmii_med .="}";
            }


            $dmii_med .= ',';
            // End
        }

        $dmii_med = "[".rtrim($dmii_med, ', ')."]" ;
    }

    if(!empty($user_detail->chronic_chf_medication) && is_array($user_detail->chronic_chf_medication))
    {
        foreach ($user_detail->chronic_chf_medication as $key => $value)
        {

            // $value['medication_how_taken'] = !empty($med_how_tken_arr[$value['medication_how_taken']]) ? $med_how_tken_arr[$value['medication_how_taken']] : $value['medication_how_taken'] ;

            // if(!empty($value['medication_name_name']))
            // {
            //     $chf_med .= h($value['medication_name_name']);
            // }
            // if(!empty($value['medication_dose']))
            // {
            //     $chf_med .= ' '.h($value['medication_dose']);
            // }

            // if(!empty($value['medication_how_often']))
            // {
            //     $chf_med .= ' '.h($value['medication_how_often']);
            // }

            // if(!empty($value['medication_how_taken']))
            // {
            //     $chf_med .= ' '.h($value['medication_how_taken']);
            // }

            // $chf_med .= ', ';
            // New medication Start
            $value['medication_how_taken'] = !empty($value['medication_how_taken']) ? $value['medication_how_taken'] : $value['medication_how_taken'] ;
                $rxnormid = '';
                $medication_name = '';
                if(!empty($value['medication_name_name'])){
                $value['medication_name_name'] = ltrim($value['medication_name_name']);
                $chief_compliant_medication_Tbl = TableRegistry::get('chief_compliant_medication');
                $chief_compliant_medication_rec = $chief_compliant_medication_Tbl->find('all')->where(['layman_name' =>$value['medication_name_name']])->first();
                //pr($chief_compliant_medication_rec); 
                $medication_name  = !empty($value['medication_name_name']) ? $value['medication_name_name'] : '';
                $rxnormid = !empty($chief_compliant_medication_rec['rxnormid']) ? $chief_compliant_medication_rec['rxnormid'] :'';
                $chf_med .= '{"rxnormid": '.'"'.$rxnormid.'"'.', "medication": '.'"'.h($medication_name).'"';

            }
            if(!empty($value['medication_dose'])){
                $chf_med .= ', "dose": '.'"'.h($value['medication_dose']).'"';

            }

            if(!empty($value['medication_how_often'])){
                $chf_med .= ', "frequency": '.'"'.h($value['medication_how_often']).'"';

            }

            if(!empty($value['medication_how_taken'])){
                $chf_med .= ', "route": '.'"'.h($value['medication_how_taken']).'"';

            }
            if(!empty($chf_med))
            {
                $chf_med .="}";
            }


            $chf_med .= ',';
            // End
        }

        $chf_med = "[".rtrim($chf_med, ', ')."]" ;
    }

    if(!empty($user_detail->chronic_htn_medication) && is_array($user_detail->chronic_htn_medication))
    {
        foreach ($user_detail->chronic_htn_medication as $key => $value)
        {


            // $value['medication_how_taken'] = !empty($med_how_tken_arr[$value['medication_how_taken']]) ? $med_how_tken_arr[$value['medication_how_taken']] : $value['medication_how_taken'] ;

            // if(!empty($value['medication_name_name']))
            // {
            //     $htn_med .= h($value['medication_name_name']);
            // }
            // if(!empty($value['medication_dose']))
            // {
            //     $htn_med .= ' '.h($value['medication_dose']);
            // }

            // if(!empty($value['medication_how_often']))
            // {
            //     $htn_med .= ' '.h($value['medication_how_often']);
            // }

            // if(!empty($value['medication_how_taken']))
            // {
            //     $htn_med .= ' '.h($value['medication_how_taken']);
            // }

            // $htn_med .= ', ';
            // New medication Start
            $value['medication_how_taken'] = !empty($value['medication_how_taken']) ? $value['medication_how_taken'] : $value['medication_how_taken'] ;
                $rxnormid = '';
                $medication_name = '';
                if(!empty($value['medication_name_name'])){
                $value['medication_name_name'] = ltrim($value['medication_name_name']);
                $chief_compliant_medication_Tbl = TableRegistry::get('chief_compliant_medication');
                $chief_compliant_medication_rec = $chief_compliant_medication_Tbl->find('all')->where(['layman_name' =>$value['medication_name_name']])->first();
                //pr($chief_compliant_medication_rec); 
                $medication_name  = !empty($value['medication_name_name']) ? $value['medication_name_name'] : '';
                $rxnormid = !empty($chief_compliant_medication_rec['rxnormid']) ? $chief_compliant_medication_rec['rxnormid'] :'';
                $htn_med .= '{"rxnormid": '.'"'.$rxnormid.'"'.', "medication": '.'"'.h($medication_name).'"';

            }
            if(!empty($value['medication_dose'])){
                $htn_med .= ', "dose": '.'"'.h($value['medication_dose']).'"';

            }

            if(!empty($value['medication_how_often'])){
                $htn_med .= ', "frequency": '.'"'.h($value['medication_how_often']).'"';

            }

            if(!empty($value['medication_how_taken'])){
                $htn_med .= ', "route": '.'"'.h($value['medication_how_taken']).'"';

            }
            if(!empty($chf_med))
            {
                $htn_med .="}";
            }


            $htn_med .= ',';
            // end
        }

        $htn_med = !empty($dmii_med) ? "[".rtrim($dmii_med, ', ')."]" :'' ;
        //pr($htn_med);die;
    }

    if(!empty($user_detail->chronic_cad_medication) && is_array($user_detail->chronic_cad_medication))
    {
        foreach ($user_detail->chronic_cad_medication as $key => $value)
        {

            // $value['medication_how_taken'] = !empty($med_how_tken_arr[$value['medication_how_taken']]) ? $med_how_tken_arr[$value['medication_how_taken']] : $value['medication_how_taken'] ;

            // if(!empty($value['medication_name_name']))
            // {
            //     $cad_med .= h($value['medication_name_name']);
            // }
            // if(!empty($value['medication_dose']))
            // {
            //     $cad_med .= ' '.h($value['medication_dose']);
            // }

            // if(!empty($value['medication_how_often']))
            // {
            //     $cad_med .= ' '.h($value['medication_how_often']);
            // }

            // if(!empty($value['medication_how_taken']))
            // {
            //     $cad_med .= ' '.h($value['medication_how_taken']);
            // }

            // $cad_med .= ', ';
            // New medication start
            $value['medication_how_taken'] = !empty($value['medication_how_taken']) ? $value['medication_how_taken'] : $value['medication_how_taken'] ;
                $rxnormid = '';
                $medication_name = '';
                if(!empty($value['medication_name_name'])){
                $value['medication_name_name'] = ltrim($value['medication_name_name']);
                $chief_compliant_medication_Tbl = TableRegistry::get('chief_compliant_medication');
                $chief_compliant_medication_rec = $chief_compliant_medication_Tbl->find('all')->where(['layman_name' =>$value['medication_name_name']])->first();
                //pr($chief_compliant_medication_rec); 
                $medication_name  = !empty($value['medication_name_name']) ? $value['medication_name_name'] : '';
                $rxnormid = !empty($chief_compliant_medication_rec['rxnormid']) ? $chief_compliant_medication_rec['rxnormid'] :'';
                $cad_med .= '{"rxnormid": '.'"'.$rxnormid.'"'.', "medication": '.'"'.h($medication_name).'"';

            }
            if(!empty($value['medication_dose'])){
                $cad_med .= ', "dose": '.'"'.h($value['medication_dose']).'"';

            }

            if(!empty($value['medication_how_often'])){
                $cad_med .= ', "frequency": '.'"'.h($value['medication_how_often']).'"';

            }

            if(!empty($value['medication_how_taken'])){
                $cad_med .= ', "route": '.'"'.h($value['medication_how_taken']).'"';

            }
            if(!empty($chf_med))
            {
                $cad_med .="}";
            }


            $cad_med .= ',';
            // end
            }

        $cad_med = "[".rtrim($cad_med, ', ')."]";
    }

    if(!empty($user_detail->chronic_condition)){
        // pr($user_detail->chronic_condition);die;
        $chronic_cond_name = str_replace("DMII", 'DM',str_replace("ASTHMA", 'asthma',strtoupper(is_array($user_detail->chronic_condition) ? implode(", ", $user_detail->chronic_condition) : $user_detail->chronic_condition)));

        $layman_summar .= 'here for a routine follow up'.($chronic_cond_name !='NONE' ? " of ".$chronic_cond_name:'').'. ';
        $layman_summar = rtrim($layman_summar,' of NONE');
    }


    //set the exercise and diet for all conditions becuase these are common in all conditions
    if(!empty($user_detail->chronic_general_detail)){

    	//set the overrall patient condition
    	if(isset($user_detail->chronic_general_detail[257]) && !empty($user_detail->chronic_general_detail[257])){

    		$ques_ans_257 = strtolower($user_detail->chronic_general_detail[257]['answer']);

            $layman_summar .= 'Overall, patient self-reports condition is '.(isset($cond_status_trans[$ques_ans_257]) ? $cond_status_trans[$ques_ans_257] : $ques_ans_257).". ";
        }

        //set the diet

        if(isset($user_detail->chronic_general_detail[244]) && !empty($user_detail->chronic_general_detail[244])){

            $exercise_diet_layman .= strtolower(is_array($user_detail->chronic_general_detail[244]['answer']) ? implode(", ", $user_detail->chronic_general_detail[244]['answer']) : $user_detail->chronic_general_detail[244]['answer']).' diet, ';
            $exercise_diet_layman = str_replace("diet diet", 'diet', $exercise_diet_layman);
        }

        //set the smoking answers

        if(isset($user_detail->chronic_general_detail[252])){

            $ques_ans_252 = strtolower($user_detail->chronic_general_detail[252]['answer']);
            if($ques_ans_252 == 'no'){

                $temp_section .= 'does not smoke, ';
                $sh_layman .= 'denies smoking, ';
            }
            else{


                if(isset($user_detail->chronic_general_detail[253])){

                    $sh_layman .= '+smoke cigarettes '.$user_detail->chronic_general_detail[253]['answer'].' packs/day, ';
                    $temp_section .= 'smokes '.$user_detail->chronic_general_detail[253]['answer'].' packs of cigarettes daily, ';
                }
                else{

                    $temp_section .= 'smoke cigarettes daily, ';
                    $sh_layman .= '+smoke cigarettes, ';
                }
            }
        }


        if(isset($user_detail->chronic_general_detail[254])){

            $ques_ans_254 = strtolower($user_detail->chronic_general_detail[254]['answer']);
            if($ques_ans_254 == 'no'){

                $temp_section .= 'denies current alcohol use, ';
                $sh_layman .= 'denies alcohol use, ';
            }
            else{


                if(isset($user_detail->chronic_general_detail[255])){

                    $sh_layman .= $user_detail->chronic_general_detail[255]['answer'].' drinks weekly, ';
                    $temp_section .= $user_detail->chronic_general_detail[255]['answer'].' drinks weekly';
                }
                else{

                    $temp_section .= 'alcohol use weekly, ';
                    $sh_layman .= '+alcohol use, ';
                }
            }
        }

        if(isset($user_detail->chronic_general_detail[256])){

            $sh_layman .= strtolower($user_detail->chronic_general_detail[256]['answer']) == 'yes' ? '+vaping, ' : 'denies vaping, ';
        }


        if(isset($user_detail->chronic_general_detail[245])){

            $sh_layman .= $user_detail->chronic_general_detail[245]['answer'].' fast food meals/wk';
        }

        $sh_layman = rtrim($sh_layman,', ').'. ';


        //set the exercise
        if(isset($user_detail->chronic_general_detail[246]) && isset($user_detail->chronic_general_detail[246]['answer']) && strtolower($user_detail->chronic_general_detail[246]['answer']) == 'yes'){


        	if(isset($user_detail->chronic_general_detail[247])){

                $ques_ans_247 = strtolower($user_detail->chronic_general_detail[247]['answer']);

                if($ques_ans_247 == 'no'){

                   $sh_layman .= 'Patient does not lift weights weekly. ';
                }
                else{

                    $sh_layman .= 'Patient lifts weights weekly. ';
                }
            }


            if(isset($user_detail->chronic_general_detail[248]) && isset($user_detail->chronic_general_detail[248]['answer']) && !empty($user_detail->chronic_general_detail[248]['answer']))
            {

                $exercise_diet_layman .= strtolower(is_array($user_detail->chronic_general_detail[248]['answer']) ? implode(", ", $user_detail->chronic_general_detail[248]['answer']) : $user_detail->chronic_general_detail[248]['answer']).' exercise';

                $sh_layman .= 'Aerobic exercise includes '.strtolower(is_array($user_detail->chronic_general_detail[248]['answer']) ? implode(", ", $user_detail->chronic_general_detail[248]['answer']) : $user_detail->chronic_general_detail[248]['answer']).', ';
            }

            if(isset($user_detail->chronic_general_detail[249]) && isset($user_detail->chronic_general_detail[249]['answer'])){

                $exercise_diet_layman = strtolower(str_replace("other",$user_detail->chronic_general_detail[249]['answer'] , $exercise_diet_layman));
                $exercise_diet_layman = rtrim($exercise_diet_layman,', ');
                $sh_layman = strtolower(str_replace("other", $user_detail->chronic_general_detail[249]['answer'], $sh_layman));
            }

            if(isset($user_detail->chronic_general_detail[250])){

                $sh_layman .= 'exercises '.$user_detail->chronic_general_detail[250]['answer'].' times/wk, ';
            }

            if(isset($user_detail->chronic_general_detail[251])){

                $sh_layman .= 'exercise lasts '.$user_detail->chronic_general_detail[251]['answer'].' minutes';
            }


        }
        else{

        	$sh_layman .= 'Patient does not lift weights weekly. Exercise 0 times/wk';
        }

        $exercise_diet_layman = rtrim($exercise_diet_layman,', ');

        $sh_layman = rtrim($sh_layman,', ');
        $sh_layman = rtrim($sh_layman,'.').'. ';


        //caffeine layman
        if(isset($user_detail->chronic_general_detail[258])){

            if(isset($user_detail->chronic_general_detail[258]['answer']) && strtolower($user_detail->chronic_general_detail[258]['answer']) == 'yes'){

                $caffeine_layman .= 'The patient drinks caffeine. ';

                if(isset($user_detail->chronic_general_detail[260]) && isset($user_detail->chronic_general_detail[260]['answer'])){

                    $caffeine_layman .= !empty($user_detail->chronic_general_detail[260]['answer']) ? $user_detail->chronic_general_detail[260]['answer'].' cups of coffee daily, ' : '';
                }

                if(isset($user_detail->chronic_general_detail[261]) && isset($user_detail->chronic_general_detail[261]['answer'])){

                    $caffeine_layman .= !empty($user_detail->chronic_general_detail[261]['answer']) ? $user_detail->chronic_general_detail[261]['answer'].' cans of energy drinks daily, ' : '';
                }

                if(isset($user_detail->chronic_general_detail[262]) && isset($user_detail->chronic_general_detail[262]['answer'])){

                    $caffeine_layman .= !empty($user_detail->chronic_general_detail[262]['answer']) ? $user_detail->chronic_general_detail[262]['answer'].' cups of caffeinated tea daily, ' : '';
                }

               $caffeine_layman = rtrim($caffeine_layman,', ').'. ';
            }
            else{

                $caffeine_layman = 'Denies daily caffeine intake. ';
            }
        }


        if(isset($user_detail->chronic_general_detail[315]) && isset($user_detail->chronic_general_detail[315]['answer']) && !empty($user_detail->chronic_general_detail[315]['answer'])){

            $ques_ans_315 = strtolower($user_detail->chronic_general_detail[315]['answer']);
            if($ques_ans_315 == 'yes'){

                if(isset($user_detail->chronic_general_detail[319]) && isset($user_detail->chronic_general_detail[319]['answer']) && !empty($user_detail->chronic_general_detail[319]['answer']) && is_array($user_detail->chronic_general_detail[319]['answer'])){


                    foreach ($user_detail->chronic_general_detail[319]['answer'] as $key => $value) {

                        $value = strtolower($value);
                        if($value != "i'm not sure"){

                            $temp_flu_pmu .= '+'.$value.', ';
                        }
                    }

                    $temp_flu_pmu = rtrim($temp_flu_pmu,', ');
                }
                else{

                    $temp_flu_pmu .= '+Pneumo vaccine';
                }

                if(isset($user_detail->chronic_general_detail[316]) && isset($user_detail->chronic_general_detail[316]['answer']) && !empty($user_detail->chronic_general_detail[316]['answer'])){

                    $temp_flu_pmu .= ' in '.$user_detail->chronic_general_detail[316]['answer'];
                }
                $temp_flu_pmu .= '. ';
            }
            elseif($ques_ans_315 == 'not sure'){

                $temp_flu_pmu .= 'Patient does not recall pneumo vaccine. ';
            }
            elseif($ques_ans_315 == 'no'){

                $temp_flu_pmu .= ' Denies receiving pneumo vaccine. ';
            }
        }
        

        if(isset($user_detail->chronic_general_detail[317]) && isset($user_detail->chronic_general_detail[317]['answer']) && !empty($user_detail->chronic_general_detail[317]['answer'])){

            $ques_ans_317 = strtolower($user_detail->chronic_general_detail[317]['answer']);
            if($ques_ans_317 == 'yes'){

                $temp_flu_pmu .= '+Flu vaccine for current season';
                if(isset($user_detail->chronic_general_detail[318]) && isset($user_detail->chronic_general_detail[318]['answer']) && !empty($user_detail->chronic_general_detail[318]['answer'])){

                    $temp_flu_pmu .= ' at '.$user_detail->chronic_general_detail[318]['answer'];
                }
                $temp_flu_pmu .= '. ';
            }
            elseif($ques_ans_317 == 'not sure'){

                $temp_flu_pmu .= 'Patient does not recall recieving flu vaccine. ';
            }
            elseif($ques_ans_317 == 'no'){

                $temp_flu_pmu .= 'Denies having flu vaccine for current season. ';
            }
        }

        if(isset($user_detail->chronic_general_detail[700]) && isset($user_detail->chronic_general_detail[700]['answer']) && !empty($user_detail->chronic_general_detail[700]['answer'])){

            $ques_ans_700= strtolower($user_detail->chronic_general_detail[700]['answer']);
            if($ques_ans_700 == 'yes'){
                $temp_flu_pmu .= '+Shingles vaccine';

                if(isset($user_detail->chronic_general_detail[701]) && isset($user_detail->chronic_general_detail[701]['answer']) && !empty($user_detail->chronic_general_detail[701]['answer'])){

                    $temp_flu_pmu .= ' in '.$user_detail->chronic_general_detail[701]['answer'];
                }
                $temp_flu_pmu .= '. ';
            }
            elseif($ques_ans_700 == 'not sure'){

                $temp_flu_pmu .= 'Patient does not recall shingles vaccine. ';
            }
            elseif($ques_ans_700 == 'no'){

                $temp_flu_pmu .= ' Denies receiving shingles vaccine. ';
            }
        }
        if(isset($user_detail->chronic_general_detail[702]) && isset($user_detail->chronic_general_detail[702]['answer']) && !empty($user_detail->chronic_general_detail[702]['answer'])){

            $ques_ans_702 = strtolower($user_detail->chronic_general_detail[702]['answer']);
            if($ques_ans_702 == 'yes'){

                $temp_flu_pmu .= '+Covid-19';
                if(isset($user_detail->chronic_general_detail[703]) && isset($user_detail->chronic_general_detail[703]['answer']) && !empty($user_detail->chronic_general_detail[703]['answer'])){

                    $temp_flu_pmu .= ' at '.$user_detail->chronic_general_detail[703]['answer'];
                }
                $temp_flu_pmu .= '. ';
            }
            elseif($ques_ans_702 == 'not sure'){

                $temp_flu_pmu .= 'Patient does not recall recieving covid-19. ';
            }
            elseif($ques_ans_702 == 'no'){

                $temp_flu_pmu .= 'Denies having covid-19. ';
            }
        }
    }   


    //set the cad condition layman

    if(!empty($user_detail->chronic_cad_detail)){

        $temp_manage = (!empty($cad_med) ? $cad_med: "").(!empty($exercise_diet_layman) ? ", ".$exercise_diet_layman: "");
        $temp_manage = trim($temp_manage,', ');

    	$layman_summar .= 'CAD is currently managed with '.$temp_manage.'. ';
    	$layman_summar .= $cad_pos_sysm.''.$cad_neg_sysm;
    }


    //set the DMII condition layman

    if(!empty($user_detail->chronic_dmii_detail)){

        $temp_manage = (!empty($dmii_med) ? $dmii_med: "").(!empty($exercise_diet_layman) ? ", ".$exercise_diet_layman: "");
        $temp_manage = trim($temp_manage,', ');

    	$layman_summar .= 'DM is currently managed with '.$temp_manage.'. ';

    	if(isset($user_detail->chronic_dmii_detail[235]) && isset($user_detail->chronic_dmii_detail[235]['answer']) && !empty($user_detail->chronic_dmii_detail[235]['answer'])){


            $ques_ans_235 = strtolower($user_detail->chronic_dmii_detail[235]['answer']);
            if($ques_ans_235 == 'no'){

                $layman_summar .= "Patient does not measure glucose at home. ";
            }
            else
            {
                if(!empty($user_detail->glucose_reading_detail)){

                	$temp_glucose_reading = array();
                    usort($user_detail->glucose_reading_detail, function($a, $b) {
                        return strtotime(trim($a['reading_date'])) - strtotime(trim($b['reading_date']));
                    });
                    $reading_val_array = array_column($user_detail->glucose_reading_detail, 'reading_val');
                    $min_reading = min($reading_val_array);
                    $max_reading = max($reading_val_array);
                    if($min_reading == $max_reading){

                        $min_reading = '';
                    }

                    $layman_summar .= 'Self-reported glucose is '.(!empty($min_reading) ? $min_reading.'-' : '').(!empty($max_reading) ? $max_reading : '').". ";
                    $glu_layman = (!empty($min_reading) ? $min_reading.'-' : '').(!empty($max_reading) ? $max_reading : '');

                    foreach ($user_detail->glucose_reading_detail as $reading_key => $reading_value) {

                        $reading_timing_val = isset($reading_timing_trans[$reading_value['reading_timing']]) ? $reading_timing_trans[$reading_value['reading_timing']] : $reading_value['reading_timing'];

                        $glu_log .= $reading_value['reading_date'].(!empty($reading_timing_val) ? " | ".$reading_timing_val : "").(!empty($reading_value['reading_val']) ? " | ".$reading_value['reading_val'] : "")." | self-reported\n ";
                    }

                }
            }
        }
    	$layman_summar .= $dmii_pos_sysm.''.$dmii_neg_sysm;
    }

    //set the HTN condition layman

    if(!empty($user_detail->chronic_htn_detail)){

        $temp_manage = (!empty($htn_med) ? $htn_med: "").(!empty($exercise_diet_layman) ? ", ".$exercise_diet_layman: "");

        $temp_manage = trim($temp_manage,', ');

    	$layman_summar .= 'HTN is currently managed with '.$temp_manage.'. ';

    	if(isset($user_detail->chronic_htn_detail[243]) && isset($user_detail->chronic_htn_detail[243]['answer']) && !empty($user_detail->chronic_htn_detail[243]['answer'])){


            $ques_ans_243 = strtolower($user_detail->chronic_htn_detail[243]['answer']);
            if($ques_ans_243 == 'no'){

                $layman_summar .= "The patient does not measure blood pressure at home. ";
            }
            else
            {
                if(!empty($user_detail->bp_reading_detail)){

                	$temp_bp_reading = array();
                    usort($user_detail->bp_reading_detail, function($a, $b) {
                        return strtotime(trim($a['reading_date'])) - strtotime(trim($b['reading_date']));
                    });
                    $top_number_reading_array = array_column($user_detail->bp_reading_detail, 'top_number');
                    $top_number_min_reading = min($top_number_reading_array);
                    $top_number_max_reading = max($top_number_reading_array);
                    if($top_number_min_reading == $top_number_max_reading){

                        $top_number_min_reading = '';
                    }


                    $bottom_number_reading_array = array_column($user_detail->bp_reading_detail, 'bottom_number');
                    $bottom_number_min_reading = min($bottom_number_reading_array);
                    $bottom_number_max_reading = max($bottom_number_reading_array);
                    if($bottom_number_min_reading == $bottom_number_max_reading){

                        $bottom_number_min_reading = '';
                    }

                    $bottom_reading_layman = (!empty($bottom_number_min_reading) ? $bottom_number_min_reading.'-': '').$bottom_number_max_reading;

                    $top_reading_layman = (!empty($top_number_min_reading) ? $top_number_min_reading.'-': '').$top_number_max_reading;

                    $layman_summar .= 'Self-reported BP readings are '.$top_reading_layman.'/'.$bottom_reading_layman.". ";

                    $bp_layman = $top_number_max_reading.'/'.$bottom_number_max_reading;

                    foreach ($user_detail->bp_reading_detail as $reading_key => $reading_value) {

                        $reading_timing_val = isset($reading_timing_trans[$reading_value['reading_timing']]) ? $reading_timing_trans[$reading_value['reading_timing']] : $reading_value['reading_timing'];

                        $bp_log .= $reading_value['reading_date'].(!empty($reading_timing_val) ? " | ".$reading_timing_val : "").(!empty($reading_value['top_number']) ? " | ".$reading_value['top_number'] : "").(!empty($reading_value['bottom_number']) ? "/".$reading_value['bottom_number'] : "")." | self-reported\n ";
                    }

                }
            }
        }
    	$layman_summar .= $htn_pos_sysm.''.$htn_neg_sysm;
    }


    //set the CHF condition layman

    if(!empty($user_detail->chronic_chf_detail)){

        $temp_manage = (!empty($chf_med) ? $chf_med: "").(!empty($exercise_diet_layman) ? ", ".$exercise_diet_layman: "");
        $temp_manage = trim($temp_manage,', ');

    	$layman_summar .= 'CHF is currently managed with '.$temp_manage.'. ';
        if(isset($user_detail->chronic_chf_detail[234]) && isset($user_detail->chronic_chf_detail[234]['answer']) && !empty($user_detail->chronic_chf_detail[234]['answer'])){


            $ques_ans_234 = strtolower($user_detail->chronic_chf_detail[234]['answer']);
            $layman_summar .= 'The patient feels condition is '.(isset($cond_status_trans[$ques_ans_234]) ? $cond_status_trans[$ques_ans_234] : $ques_ans_234).' with the current regimen. ';
        }
    	$layman_summar .= $chf_pos_sysm.''.$chf_neg_sysm;
    }

    if(!empty($user_detail->chronic_copd_detail)){

        if(isset($user_detail->chronic_copd_detail[289]) && isset($user_detail->chronic_copd_detail[289]['answer']) && !empty($user_detail->chronic_copd_detail[289]['answer'])){

            $copd_med = strtolower(is_array($user_detail->chronic_copd_detail[289]['answer']) ? implode(", ", $user_detail->chronic_copd_detail[289]['answer']) : $user_detail->chronic_copd_detail[289]['answer']);
        }

        if(isset($user_detail->chronic_copd_detail[290]) && isset($user_detail->chronic_copd_detail[290]['answer']) && !empty($user_detail->chronic_copd_detail[290]['answer'])){

            $ques_ans_290 = strtolower(is_array($user_detail->chronic_copd_detail[290]['answer']) ? implode(", ", $user_detail->chronic_copd_detail[290]['answer']) : $user_detail->chronic_copd_detail[290]['answer']);

            $copd_med = str_replace("medication", $ques_ans_290, $copd_med);
        }

        if(isset($user_detail->chronic_copd_detail[291]) && isset($user_detail->chronic_copd_detail[291]['answer']) && !empty($user_detail->chronic_copd_detail[291]['answer'])){

            $copd_med = str_replace("other", $user_detail->chronic_copd_detail[291]['answer'], $copd_med);
        }

        $temp_manage = (!empty($copd_med) ? $copd_med: "").(!empty($exercise_diet_layman) ? ", ".$exercise_diet_layman: "");
        $temp_manage = trim($temp_manage,', ');
        $search_arr_string = array('advair (fluticasone/salmeterol)','albuterol');
        $rep_arr_string = array('Advair (fluticasone/salmeterol)','Albuterol');
        $layman_summar .= 'COPD is currently managed with '.str_replace($search_arr_string, $rep_arr_string,$temp_manage).'. ';
        if(isset($user_detail->chronic_copd_detail[234]) && isset($user_detail->chronic_copd_detail[234]['answer']) && !empty($user_detail->chronic_copd_detail[234]['answer'])){


            $ques_ans_234 = strtolower($user_detail->chronic_copd_detail[234]['answer']);
            $layman_summar .= 'The patient feels condition is '.(isset($cond_status_trans[$ques_ans_234]) ? $cond_status_trans[$ques_ans_234] : $ques_ans_234).' with the current regimen. ';
        }


        if(isset($user_detail->chronic_copd_detail[267]) && isset($user_detail->chronic_copd_detail[267]['answer']) && !empty($user_detail->chronic_copd_detail[267]['answer'])){


            $ques_ans_267 = strtolower($user_detail->chronic_copd_detail[267]['answer']);

            $layman_summar .= 'Modified Medical Research Council Dyspnea Scale score is '.(isset($copd_mmrcds_score[$ques_ans_267]) ? $copd_mmrcds_score[$ques_ans_267] : 0).'. ';
        }

        if(isset($user_detail->chronic_copd_detail[277]) && isset($user_detail->chronic_copd_detail[277]['answer']) && !empty($user_detail->chronic_copd_detail[277]['answer'])){


            $ques_ans_277 = strtolower($user_detail->chronic_copd_detail[277]['answer']);

            $layman_summar .= 'Current symptoms have '.(isset($life_quality_trans[$ques_ans_277]) ? $life_quality_trans[$ques_ans_277] : $ques_ans_277).' impact on quality of life. ';
        }

        if(isset($user_detail->chronic_copd_detail[278]) && isset($user_detail->chronic_copd_detail[278]['answer']) && !empty($user_detail->chronic_copd_detail[278]['answer'])){


            $ques_ans_278 = strtolower($user_detail->chronic_copd_detail[278]['answer']);

            $layman_summar .= $ques_ans_278 == 'yes' ? "Positive history for COPD exacerbations in the past 12 months, " : 'No COPD exacerbations in the past 12 months, ';
        }

        if(isset($user_detail->chronic_copd_detail[279]) && isset($user_detail->chronic_copd_detail[279]['answer']) && !empty($user_detail->chronic_copd_detail[279]['answer'])){

            $layman_summar .= $user_detail->chronic_copd_detail[279]['answer'].' episode(s)';
        }

        $layman_summar = rtrim($layman_summar,', ');

        if(isset($user_detail->chronic_copd_detail[280]) && isset($user_detail->chronic_copd_detail[280]['answer']) && !empty($user_detail->chronic_copd_detail[280]['answer'])){

            $ques_ans_280 = strtolower($user_detail->chronic_copd_detail[280]['answer']);

            if($ques_ans_280 == 'yes'){

                $layman_summar .= ' complete resolution at current dose, ';
            }
            elseif($ques_ans_280 == "i don't have an inhaler"){

                $layman_summar .= ' no inhaler, ';
            }
            else{

                $layman_summar .= ' no resolution at current dose, ';
            }
        }

        if(isset($user_detail->chronic_copd_detail[282]) && isset($user_detail->chronic_copd_detail[282]['answer']) && !empty($user_detail->chronic_copd_detail[282]['answer'])){

            $ques_ans_282 = strtolower($user_detail->chronic_copd_detail[282]['answer']);

            $layman_summar .= $ques_ans_282 == 'yes' ? 'improvement at a higher dose than regimen': 'no resolution at higher dose than regimen';
        }

        $layman_summar = rtrim($layman_summar,', ').'. ';

        if(isset($user_detail->chronic_copd_detail[283]) && isset($user_detail->chronic_copd_detail[283]['answer']) && !empty($user_detail->chronic_copd_detail[283]['answer'])){

            $ques_ans_283 = strtolower($user_detail->chronic_copd_detail[283]['answer']);
            if($ques_ans_283 == 'yes'){

            	$layman_summar .= 'Abx required. ';
            }
            elseif($ques_ans_283 == 'no'){

            	$layman_summar .= 'No abx were required. ';
            }

            //$layman_summar .= $ques_ans_283 == 'yes' ? 'Abx, ': 'No abx, ';
        }

        if(isset($user_detail->chronic_copd_detail[284]) && isset($user_detail->chronic_copd_detail[284]['answer']) && !empty($user_detail->chronic_copd_detail[284]['answer'])){

            $ques_ans_284 = strtolower($user_detail->chronic_copd_detail[284]['answer']);

            if($ques_ans_284 == 'yes'){

            	$layman_summar .= 'OGCs required. ';
            }
            elseif($ques_ans_284 == 'no'){

            	$layman_summar .= 'No OGCs were required. ';
            }

            //$layman_summar .= $ques_ans_284 == 'yes' ? 'OGCs': 'no OGCs';
        }

        if(isset($user_detail->chronic_copd_detail[285]) && isset($user_detail->chronic_copd_detail[285]['answer']) && strtolower($user_detail->chronic_copd_detail[285]['answer']) == 'yes'){

        	if(isset($user_detail->chronic_copd_detail[286]) && isset($user_detail->chronic_copd_detail[286]['answer']) && !empty($user_detail->chronic_copd_detail[286]['answer'])){

        		$layman_summar .= $user_detail->chronic_copd_detail[286]['answer'].' ED visits for symptoms, ';
        	}

        	if(isset($user_detail->chronic_copd_detail[287]) && isset($user_detail->chronic_copd_detail[287]['answer']) && strtolower($user_detail->chronic_copd_detail[287]['answer']) == 'yes'){

        		$layman_summar .= 'patient was admitted';

        		if(isset($user_detail->chronic_copd_detail[288]) && isset($user_detail->chronic_copd_detail[288]['answer']) && !empty($user_detail->chronic_copd_detail[288]['answer'])){

	        		$layman_summar .= ' for '.$user_detail->chronic_copd_detail[288]['answer'].' nights';
	        	}
	        	$layman_summar .= '. ';
        	}
        	else{

        		$layman_summar .= 'no hospital admissions. ';
        	}
        }
        else{

        	$layman_summar .= 'Denies seeking care at the ED. ';
        }


        $temp_flu_pnu = '';
        // if(isset($user_detail->chronic_copd_detail[275]) && isset($user_detail->chronic_copd_detail[275]['answer']) && !empty($user_detail->chronic_copd_detail[275]['answer'])){
        //
        // 	$ques_ans_275 = strtolower($user_detail->chronic_copd_detail[275]['answer']);
        // 	if($ques_ans_275 == 'yes'){
        //
        // 		$temp_flu_pnu .= 'received pneumo vaccine';
        // 		if(isset($user_detail->chronic_copd_detail[276]) && isset($user_detail->chronic_copd_detail[276]['answer']) && !empty($user_detail->chronic_copd_detail[276]['answer'])){
        //
        // 			$temp_flu_pnu .= ' in '.$user_detail->chronic_copd_detail[276]['answer'];
        // 		}
        // 		$temp_flu_pnu .= ', ';
        // 	}
        // 	elseif($ques_ans_275 == 'no'){
        //
        // 		$temp_flu_pnu .= 'not received pneumo vaccine, ';
        // 	}
        // }

        // if(isset($user_detail->chronic_copd_detail[274]) && isset($user_detail->chronic_copd_detail[274]['answer']) && !empty($user_detail->chronic_copd_detail[274]['answer'])){
        //
        // 	$ques_ans_275 = strtolower($user_detail->chronic_copd_detail[275]['answer']);
        // 	if($ques_ans_275 == 'yes'){
        //
        // 		$temp_flu_pnu .= 'received flu vaccine for this season';
        // 	}
        // 	elseif($ques_ans_275 == 'no'){
        //
        // 		$temp_flu_pnu .= 'not received flu vaccine for this season';
        // 	}
        //
        // }

        //$layman_summar .= 'Patient has '.$common_flu_peonomia;

        // if(!empty($temp_flu_pnu)){
        //
        // 	$temp_flu_pnu = rtrim($temp_flu_pnu,', ').'. ';
        // 	$layman_summar .= 'Patient has '.$temp_flu_pnu;
        // }



        if(isset($user_detail->chronic_copd_detail[270]) && isset($user_detail->chronic_copd_detail[270]['answer']) && strtolower($user_detail->chronic_copd_detail[270]['answer']) == 'yes'){

        	$layman_summar .= '+current smoking, ';

        	if(isset($user_detail->chronic_copd_detail[271]) && isset($user_detail->chronic_copd_detail[271]['answer']) && !empty($user_detail->chronic_copd_detail[271]['answer'])){

        		$layman_summar .= $user_detail->chronic_copd_detail[271]['answer'].' packs/day, ';
        	}

        	if(isset($user_detail->chronic_copd_detail[272]) && isset($user_detail->chronic_copd_detail[272]['answer']) && !empty($user_detail->chronic_copd_detail[272]['answer'])){

        		$layman_summar .= $user_detail->chronic_copd_detail[272]['answer'].' years long';
        	}
        	$layman_summar = rtrim($layman_summar,', ').'. ';

        	if(isset($user_detail->chronic_copd_detail[273]) && isset($user_detail->chronic_copd_detail[273]['answer']) && strtolower($user_detail->chronic_copd_detail[273]['answer']) == 'yes'){

        		$layman_summar .= 'Patient is interested in smoking cessation. ';
        	}
        	else{

        		$layman_summar .= 'Patient is not interested in smoking cessation. ';
        	}
        }
        else{

        	$layman_summar .= 'Denies current smoking. ';
        }


        $layman_summar .= $copd_pos_sysm.''.$copd_neg_sysm;

        //set the spo2 detail
        if(isset($user_detail->chronic_copd_detail[265]) && isset($user_detail->chronic_copd_detail[265]['answer']) && strtolower($user_detail->chronic_copd_detail[265]['answer']) == 'yes'){

        	if(isset($user_detail->chronic_copd_detail[266]) && isset($user_detail->chronic_copd_detail[266]['answer'])){

        		$spo2_layman = $user_detail->chronic_copd_detail[266]['answer'];
        	}
        }

        if(isset($user_detail->chronic_copd_detail[269]) && isset($user_detail->chronic_copd_detail[269]['answer']) && !empty($user_detail->chronic_copd_detail[269]['answer'])){

            foreach ($user_detail->chronic_copd_detail[269]['answer'] as $key => $value) {

                $fh_cond[]['name'] = $value;
            }
        }

    }

    //asthma condition layman
    if(!empty($user_detail->chronic_asthma_detail)){

        $temp_asthma_cond = '';

        if(isset($user_detail->chronic_asthma_detail[234]) && isset($user_detail->chronic_asthma_detail[234]['answer']) && !empty($user_detail->chronic_asthma_detail[234]['answer'])){


            $ques_ans_234 = strtolower($user_detail->chronic_asthma_detail[234]['answer']);
            $temp_asthma_cond .= 'The patient feels condition is '.(isset($cond_status_trans[$ques_ans_234]) ? $cond_status_trans[$ques_ans_234] : $ques_ans_234).' with the current regimen';
        }

        if(isset($user_detail->chronic_asthma_detail[293]) && isset($user_detail->chronic_asthma_detail[293]['answer']) && !empty($user_detail->chronic_asthma_detail[293]['answer'])){

            $asthma_med = strtolower(is_array($user_detail->chronic_asthma_detail[293]['answer']) ? implode(", ", $user_detail->chronic_asthma_detail[293]['answer']) : $user_detail->chronic_asthma_detail[293]['answer']);
        }

        if(isset($user_detail->chronic_asthma_detail[294]) && isset($user_detail->chronic_asthma_detail[294]['answer']) && !empty($user_detail->chronic_asthma_detail[294]['answer'])){

            $asthma_med = str_replace("other", $user_detail->chronic_asthma_detail[294]['answer'], $asthma_med);
        }

        if(!empty($asthma_med) && !empty($temp_asthma_cond)){

            $temp_asthma_cond .= ' of '.$asthma_med;
        }

        $layman_summar .= !empty($temp_asthma_cond) ? $temp_asthma_cond.'. ' : '';

        if(isset($user_detail->chronic_asthma_detail[296]) && isset($user_detail->chronic_asthma_detail[296]['answer']) && !empty($user_detail->chronic_asthma_detail[296]['answer'])){

            $layman_summar .= 'Asthma sx frequency is described as '.$user_detail->chronic_asthma_detail[296]['answer'].' times/wk. ';
        }

        if(isset($user_detail->chronic_asthma_detail[297]) && isset($user_detail->chronic_asthma_detail[297]['answer']) && !empty($user_detail->chronic_asthma_detail[297]['answer'])){

            $asthma_daytime_trans = array(

                '0-2 times a week' => '0-2 times/wk',
                'every other day' => 'every other day',
                'every day' => 'daily',
                'several times a day' => 'multiple times daily'
            );

            $ques_ans_297 = strtolower($user_detail->chronic_asthma_detail[297]['answer']);

            $layman_summar .= 'Daytime symptoms '.(isset($asthma_daytime_trans[$ques_ans_297]) ? $asthma_daytime_trans[$ques_ans_297] : $ques_ans_297).'. ';
        }

        if(isset($user_detail->chronic_asthma_detail[298]) && isset($user_detail->chronic_asthma_detail[298]['answer']) && !empty($user_detail->chronic_asthma_detail[298]['answer'])){

            $layman_summar .= 'Awakens at night due to sx '.$user_detail->chronic_asthma_detail[298]['answer'].' times/mo. ';
        }

        if(isset($user_detail->chronic_asthma_detail[299]) && isset($user_detail->chronic_asthma_detail[299]['answer']) && !empty($user_detail->chronic_asthma_detail[299]['answer'])){

            $asthma_impact_trans = array(

                'none' => 'no limitations',
                'minor limits' => 'minor limitations',
                'some limits' => 'moderate limitations',
                'extremely limited' => 'severe limitations'
            );

            $ques_ans_299 = strtolower($user_detail->chronic_asthma_detail[299]['answer']);
            $layman_summar .= (ucfirst(isset($asthma_impact_trans[$ques_ans_299]) ? $asthma_impact_trans[$ques_ans_299] : $ques_ans_299)).' on normal daily activities. ';
        }

        if(isset($user_detail->chronic_asthma_detail[300]) && isset($user_detail->chronic_asthma_detail[300]['answer']) && !empty($user_detail->chronic_asthma_detail[300]['answer'])){

            $layman_summar .= 'SABA rescue inhaler used '.$user_detail->chronic_asthma_detail[300]['answer'].' times/wk. ';
        }

        if(isset($user_detail->chronic_asthma_detail[301]) && isset($user_detail->chronic_asthma_detail[301]['answer']) && strtolower($user_detail->chronic_asthma_detail[301]['answer']) == 'yes'){

           if(isset($user_detail->chronic_asthma_detail[302]) && isset($user_detail->chronic_asthma_detail[302]['answer']) && !empty($user_detail->chronic_asthma_detail[302]['answer'])){

                $layman_summar .= 'PO GCS required '.$user_detail->chronic_asthma_detail[302]['answer'].' time(s) in past 12 months. ';
            }
            else{

                $layman_summar .= 'PO GCS required for sx in past 12 months. ';
            }
        }
        else{

            $layman_summar .= 'No PO GCS required for sx in past 12 months. ';
        }

        $temp_asthma_exacerb = '';

        if(isset($user_detail->chronic_asthma_detail[303]) && isset($user_detail->chronic_asthma_detail[303]['answer']) && !empty($user_detail->chronic_asthma_detail[303]['answer'])){

            $temp_asthma_exacerb .= strtolower($user_detail->chronic_asthma_detail[303]['answer']) == 'yes' ? "History is positive for asthma exacerbations in the past 6 months" : "No asthma exacerbations in past 6 months";
        }

        if(isset($user_detail->chronic_asthma_detail[304]) && isset($user_detail->chronic_asthma_detail[304]['answer']) && !empty($user_detail->chronic_asthma_detail[304]['answer'])){

            $temp_asthma_exacerb .= ", approximately ".$user_detail->chronic_asthma_detail[304]['answer']." exacerbations in past 6 months";
        }

        if(isset($user_detail->chronic_asthma_detail[305]) && isset($user_detail->chronic_asthma_detail[305]['answer']) && !empty($user_detail->chronic_asthma_detail[305]['answer'])){

            $temp_asthma_exacerb .= ", ".(strtolower($user_detail->chronic_asthma_detail[305]['answer']) == 'yes' ? "complete resolution with rescue inhaler" : "incomplete response to rescue inhaler");
        }

        if(!empty($temp_asthma_exacerb)){

            $layman_summar .= ltrim($temp_asthma_exacerb,', ').'. ';
        }

        if(isset($user_detail->chronic_asthma_detail[306]) && isset($user_detail->chronic_asthma_detail[306]['answer']) && strtolower($user_detail->chronic_asthma_detail[306]['answer']) == 'yes'){

           if(isset($user_detail->chronic_asthma_detail[307]) && isset($user_detail->chronic_asthma_detail[307]['answer']) && !empty($user_detail->chronic_asthma_detail[307]['answer'])){

                $layman_summar .= $user_detail->chronic_asthma_detail[307]['answer'].' ED visits for asthma exacerbations. ';
            }
            else{

                $layman_summar .= 'ED visits for asthma exacerbations. ';
            }

            if(isset($user_detail->chronic_asthma_detail[308]) && isset($user_detail->chronic_asthma_detail[308]['answer']) && !empty($user_detail->chronic_asthma_detail[308]['answer'])){

                $layman_summar .= strtolower($user_detail->chronic_asthma_detail[308]['answer']) == 'yes'? 'The patient was intubated. ' : "Denies being intubated. ";
            }
        }
        else{

            $layman_summar .= 'Denies ED visits for asthma exacerbations. ';
        }

        $temp_asthma_smoke_vape = '';
        if(isset($user_detail->chronic_asthma_detail[310]) && isset($user_detail->chronic_asthma_detail[310]['answer']) && !empty($user_detail->chronic_asthma_detail[310]['answer'])){

            $temp_asthma_smoke_vape .= strtolower($user_detail->chronic_asthma_detail[310]['answer']) == 'yes'? '+Current smoking, ' : "denies current smoking, ";
        }

        if(isset($user_detail->chronic_asthma_detail[311]) && isset($user_detail->chronic_asthma_detail[311]['answer']) && !empty($user_detail->chronic_asthma_detail[311]['answer'])){

            $temp_asthma_smoke_vape .= strtolower($user_detail->chronic_asthma_detail[311]['answer']) == 'yes'? '+exposure to second hand smoke, ' : "no exposure to second hand smoke, ";
        }

        if(isset($user_detail->chronic_asthma_detail[312]) && isset($user_detail->chronic_asthma_detail[312]['answer']) && !empty($user_detail->chronic_asthma_detail[312]['answer'])){

            $temp_asthma_smoke_vape .= strtolower($user_detail->chronic_asthma_detail[312]['answer']) == 'yes'? '+current vaping, ' : "denies current vaping, ";
        }

        if(!empty($temp_asthma_smoke_vape)){

            $layman_summar .= ucfirst(rtrim($temp_asthma_smoke_vape,', ')).'. ';
        }

        $layman_summar .= $temp_flu_pmu.''.$asthma_pos_sysm.''.$asthma_neg_sysm;


        if(isset($user_detail->chronic_asthma_detail[295]) && isset($user_detail->chronic_asthma_detail[295]['answer']) && strtolower($user_detail->chronic_asthma_detail[295]['answer']) == 'yes'){

            if(!empty($user_detail->peak_flow_reading_detail)){

                $temp_peak_flow_reading = array();
                usort($user_detail->peak_flow_reading_detail, function($a, $b) {
                    return strtotime(trim($a['reading_date'])) - strtotime(trim($b['reading_date']));
                });

                foreach ($user_detail->peak_flow_reading_detail as $reading_key => $reading_value) {

                    $reading_value['reading_timing']  = strtolower($reading_value['reading_timing']);
                    $reading_timing_val = isset($peak_flow_reading_timing_trans[$reading_value['reading_timing']]) ? $peak_flow_reading_timing_trans[$reading_value['reading_timing']] : $reading_value['reading_timing'];

                    $peak_flow_log .= $reading_value['reading_date'].(!empty($reading_timing_val) ? " | ".$reading_timing_val : "").(!empty($reading_value['reading_val']) ? " | ".$reading_value['reading_val'] : "")." | self-reported\n ";
                }

            }

        }

        $temp_fh_array = array();
        $family_his_cond_name = array_column($fh_cond, 'name');
        $fh_asthma_cond_key = array_search("asthma", $family_his_cond_name);
        if(isset($user_detail->chronic_asthma_detail[313]) && isset($user_detail->chronic_asthma_detail[313]['answer']) && strtolower($user_detail->chronic_asthma_detail[313]['answer']) == 'yes' && $fh_asthma_cond_key === false){

            $temp_fh_array['name'] = 'asthma';
        }

        if(isset($user_detail->chronic_asthma_detail[314]) && isset($user_detail->chronic_asthma_detail[314]['answer']) && !empty($user_detail->chronic_asthma_detail[314]['answer'])){

            if($fh_asthma_cond_key !== false){

               $fh_cond[$fh_asthma_cond_key]['members'] = $user_detail->chronic_asthma_detail[314]['answer'];
            }
            elseif(!empty($temp_fh_array)){

                $temp_fh_array['members'] = $user_detail->chronic_asthma_detail[314]['answer'];
            }
        }

        if(!empty($temp_fh_array)){

            $fh_cond[] = $temp_fh_array;
        }
    }

    $layman_summar .= $caffeine_layman;
    $temp_section = rtrim($temp_section,', ');
    if(!empty($temp_section)){

        $layman_summar .= "Patient ".$temp_section.'. ';
    }

    $med_layman .= (!empty($dmii_med) ? $dmii_med.', ': '').(!empty($cad_med) ? $cad_med.', ': '').(!empty($chf_med) ? $chf_med.', ': '').(!empty($htn_med) ? $htn_med.', ': '').(!empty($copd_med) ? $copd_med.', ': '').(!empty($asthma_med) ? $asthma_med.', ': '');
    $med_layman = rtrim($med_layman,', ');

    return array('layman_summar' => $layman_summar,'sh_layman' => $sh_layman,'glu_layman' => $glu_layman,'glu_log' => $glu_log,'bp_layman'=> $bp_layman,'bp_log' => $bp_log,'med_layman' => $med_layman,'spo2_layman' => $spo2_layman,'peak_flow_log' => $peak_flow_log,'fh_cond' => $fh_cond);
}


public function cancer_layman($user_detail,$gender){

    //pr($user_detail);die;
    $commonTable = TableRegistry::get('common_conditions');

    $sti_severe_sym = '';
    $sti_moderate_sym = '';
    $sti_mild_sym = '';
    $sti_neg_sym = '';

    $sti_high_qol = '';
    $sti_avg_qol = '';
    $sti_low_qol = '';
    $sti_neg_qol = '';
    $chemo_none = '';
    $chemo_mild = '';
    $chemo_moderate = '';
    $chemo_severe = '';
    $chemo_threatening = '';
    $cancer_cc = '';
    $hpi = '';
    $treatment_hx = '';
    //$fh_positive = '';
    $fh_negative = '';
    //$sargical_hx = '';
    $estrogen_treatments = '';
    $gyn_hx = '';
    $sh = '';
    $pmh = '';

    $qa_neuro = '';
    $qa_gi = '';
    $qa_eye = '';
    $qa_psych = '';
    $qa_resp = '';
    $qa_cv = '';
    $qa_skin = '';
    $qa_msk = '';
    $qa_gu = '';
    $qa_gen = '';
    $qa_heme_lymph = '';
    $qa_ent = '';
    $qa_all_imm = '';
    $qa_breast = '';

    $ehr_hpi_arr = [];

    $cancer_name_trans = array(

                'Brain cancer' => 'new brain CA diagnosis',
                'Breast cancer' => 'new breast CA diagnosis',
                'Colon cancer' => 'new colon CA diagnosis',
                'Cervical cancer' => 'new cervical CA diagnosis',
                'Throat cancer (esophageal)' => 'new esophageal CA diagnosis',
                'Stomach cancer' => 'new stomach CA diagnosis',
                'Pancreatic cancer' => 'new pancreatic CA diagnosis',
                'Overian cancer' => 'new ovarian CA diagnosis',
                'Prostate cancer' => 'new prostate CA diagnosis',
                'Lung cancer' => 'new lung CA diagnosis',
                'Liver cancer' => 'new liver CA diagnosis',
                'Thyroid cancer' => 'new thyroid CA diagnosis',
                'Kidney cancer' => 'new kidney CA diagnosis',
                'Uterine cancer' => 'new uterine CA diagnosis',
                'Vaginal cancer' => 'new vaginal CA diagnosis',
                'Vulva cancer' => 'new vulvar CA diagnosis',
                'Leukemia' => 'new leukemia diagnosis',
                'Lymphoma' => 'new lymphoma diagnosis'
             );

    $diagnostic_procedure_trans = array(

        "endoscopy" => "endoscopy",
        "barium swallow test" => "barium swallow",
        "biopsy" => "biopsy",
        "endoscopic ultrasound" => "endoscopic US"
    );

    $breast_cancer_test_trans = array(

       'Mammogram' => "abnormal mammogram",
        'MRI' => "abnormal MRI results",
        'CT scan' => "abnormal CT results",
        'Blood work' => "abnormal lab results",
        'Biopsy' => "abnormal biopsy",
        "Ultrasound" => "abnormal US",
        'Not sure' => "abnormal test results"
     );

    $second_opinion_trans = array(

        'Diagnosis' => "a second opinion of a diagnosis",
        'Test results' => "a second opinion of abnormal test results",
        "Treatment plan" => "a second opinion of a treatment plan"
     );

    $medical_history_trans = array(

        'hepatitis b' => 'HBV',
        'hepatitis c' => 'HCV',
        'cirrhosis' => 'cirrhosis'
    );





    if(!empty($user_detail['cancer_assessments'])){

        //sti symptom layman

        if(isset($user_detail['cancer_assessments']['assessment_history']) && !empty($user_detail['cancer_assessments']['assessment_history'])){

            foreach ($user_detail['cancer_assessments']['assessment_history'] as $key => $value) {

                if($value['answer'] >= 1 && $value['answer'] <= 3){

                    $sti_mild_sym .= $value['name'].', ';
                }

                if($value['answer'] >= 4 && $value['answer'] <= 6){

                    $sti_moderate_sym .= $value['name'].', ';
                }

                if($value['answer'] >= 7 && $value['answer'] <= 10){

                    $sti_severe_sym .= $value['name'].', ';
                }
            }

            $sti_positive_sym_ids = array_column($user_detail['cancer_assessments']['assessment_history'], 'symtoms_id');

            $sti_neg_sym_detail = $commonTable->find('list', [
            'keyField' => 'id',
            'valueField' => 'note_name'
                  ])->where(['id NOT IN' => $sti_positive_sym_ids,'cond_type' => 6])->toArray();
            if(!empty($sti_neg_sym_detail)){

                $sti_neg_sym = implode(", ", $sti_neg_sym_detail);
            }

            $sti_severe_sym = rtrim($sti_severe_sym,', ');
            $sti_moderate_sym = rtrim($sti_moderate_sym,', ');
            $sti_mild_sym = rtrim($sti_mild_sym,', ');
        }
        else
        {
            $sti_neg_sym_detail = $commonTable->find('list', [
            'keyField' => 'id',
            'valueField' => 'note_name'
                  ])->where(['cond_type' => 6])->toArray();
            if(!empty($sti_neg_sym_detail)){

                $sti_neg_sym = implode(", ", $sti_neg_sym_detail);
            }
        }    



        //sti life quality layman

        if(isset($user_detail['cancer_assessments']['life_assessment']) && !empty($user_detail['cancer_assessments']['life_assessment'])){

            foreach ($user_detail['cancer_assessments']['life_assessment'] as $key => $value) {

                if($value['answer'] >= 1 && $value['answer'] <= 4){

                    $sti_low_qol .= $value['name'].', ';
                }

                if($value['answer'] >= 5 && $value['answer'] <= 9){

                    $sti_avg_qol .= $value['name'].', ';
                }

                if($value['answer'] == 10){

                    $sti_high_qol .= $value['name'].', ';
                }
            }

            $sti_high_qol = rtrim($sti_high_qol,', ');
            $sti_avg_qol = rtrim($sti_avg_qol,', ');
            $sti_low_qol = rtrim($sti_low_qol,', ');
        }

        if(isset($user_detail['cancer_assessments']['chemo_assessment']) && !empty($user_detail['cancer_assessments']['chemo_assessment'])){

            foreach ($user_detail['cancer_assessments']['chemo_assessment'] as $key => $value) {

                if($value['answer'] == 'none'){

                    $chemo_none .= $value['name'].', ';
                }

                if($value['answer'] == 'mild'){

                    $chemo_mild .= $value['name'].', ';
                }
                if($value['answer'] == 'moderate'){

                    $chemo_moderate .= $value['name'].', ';
                }
                if($value['answer'] == 'severe'){

                    $chemo_severe .= $value['name'].', ';
                }
                if($value['answer'] == 'life threatening'){

                    $chemo_threatening .= $value['name'].', ';
                }
            }

            $chemo_none = rtrim($chemo_none,', ');
            $chemo_mild = rtrim($chemo_mild,', ');
            $chemo_moderate = rtrim($chemo_moderate,', ');
            $chemo_severe = rtrim($chemo_severe,', ');
            $chemo_threatening = rtrim($chemo_threatening,', ');
        }
    }

    if(!empty($user_detail['cancer_cc_detail'])){

        $cancer_cc_detail = $user_detail['cancer_cc_detail'];

        //general question of cancer

        //set the cc
        if(isset($cancer_cc_detail[333]) && isset($cancer_cc_detail[333]['answer']) && strtolower($cancer_cc_detail[333]['answer']) == 'yes'){

            $cancer_cc .= 'call:ADT/SIU, ';
        }

        if(isset($cancer_cc_detail[332]) && isset($cancer_cc_detail[332]['answer']) && !empty($cancer_cc_detail[332]['answer']) && is_array($cancer_cc_detail[332]['answer']) && in_array("Transferring care from another oncologist",$cancer_cc_detail[332]['answer'])){

                $cancer_cc .= "transfer of care, ";
        }

        if(isset($cancer_cc_detail[321]) && isset($cancer_cc_detail[321]['answer']) && !empty($cancer_cc_detail[321]['answer']) && is_array($cancer_cc_detail[321]['answer'])){

            foreach ($cancer_cc_detail[321]['answer'] as $key => $value) {

                $cancer_cc .= (isset($cancer_name_trans[$value]) ? $cancer_name_trans[$value] : strtolower($value)).", ";
            }
        }

        if(isset($cancer_cc_detail[322]) && isset($cancer_cc_detail[322]['answer']) && !empty($cancer_cc_detail[322]['answer'])){

            $cancer_cc = str_replace("other", strtolower($cancer_cc_detail[322]['answer']), $cancer_cc);
        }

        if(isset($cancer_cc_detail[323]) && isset($cancer_cc_detail[323]['answer']) && !empty($cancer_cc_detail[323]['answer']) && is_array($cancer_cc_detail[323]['answer'])){

            foreach ($cancer_cc_detail[323]['answer'] as $key => $value) {

                $cancer_cc .= (isset($breast_cancer_test_trans[$value]) ? $breast_cancer_test_trans[$value] : strtolower($value)).", ";
            }
        }

        if(isset($cancer_cc_detail[324]) && isset($cancer_cc_detail[324]['answer']) && !empty($cancer_cc_detail[324]['answer'])){

            $cancer_cc = str_replace("other", strtolower($cancer_cc_detail[324]['answer']), $cancer_cc);
        }

        if(isset($cancer_cc_detail[325]) && isset($cancer_cc_detail[325]['answer']) && !empty($cancer_cc_detail[325]['answer']) && is_array($cancer_cc_detail[325]['answer'])){

            foreach ($cancer_cc_detail[325]['answer'] as $key => $value) {

                $cancer_cc .= (isset($second_opinion_trans[$value]) ? $second_opinion_trans[$value] : strtolower($value)).", ";
            }
        }

        if(isset($cancer_cc_detail[326]) && isset($cancer_cc_detail[326]['answer']) && !empty($cancer_cc_detail[326]['answer'])){

            $cancer_cc .= strtolower($cancer_cc_detail[326]['answer']);
        }

        if(isset($cancer_cc_detail[329]) && isset($cancer_cc_detail[329]['answer']) && strtolower($cancer_cc_detail[329]['answer']) == 'yes'){

            if(isset($cancer_cc_detail[330]) && isset($cancer_cc_detail[330]['answer']) && !empty($cancer_cc_detail[330]['answer'])){

                $hpi .= 'referred to by '.strtolower($cancer_cc_detail[330]['answer']);
            }
        }

        $cancer_cc = rtrim($cancer_cc,', ');
        $hpi .= (!empty($cancer_cc) ? ' here for '.$cancer_cc : '').". ";


        if(isset($cancer_cc_detail[327]) && isset($cancer_cc_detail[327]['answer']) && strtolower($cancer_cc_detail[327]['answer']) == 'yes'){

            if(isset($cancer_cc_detail[328]) && isset($cancer_cc_detail[328]['answer']) && !empty($cancer_cc_detail[328]['answer'])){

                $hpi .= 'Patient is accompanied by '.(str_replace('other relative', 'relative', strtolower(is_array($cancer_cc_detail[328]['answer']) ? implode(", ", $cancer_cc_detail[328]['answer']) : $cancer_cc_detail[328]['answer']))).". ";
            }
        }
    }

    if(!empty($user_detail['cancer_history_detail'])){



        $cancer_history_detail_layman = $this->cancer_history_layman($user_detail['cancer_history_detail'],$gender);

        $ehr_hpi_arr = array_merge([$hpi], $cancer_history_detail_layman['ehr_hpi_arr']);

        $hpi .= isset($cancer_history_detail_layman['hpi']) ? $cancer_history_detail_layman['hpi'] : '';
        $treatment_hx .= isset($cancer_history_detail_layman['treatment_hx']) ? $cancer_history_detail_layman['treatment_hx'] : '';
        $qa_neuro = isset($cancer_history_detail_layman['qa_neuro']) ? $cancer_history_detail_layman['qa_neuro'] : '';
        $qa_gi = isset($cancer_history_detail_layman['qa_gi']) ? $cancer_history_detail_layman['qa_gi'] : '';
        $qa_eye = isset($cancer_history_detail_layman['qa_eye']) ? $cancer_history_detail_layman['qa_eye'] : '';
        $qa_psych = isset($cancer_history_detail_layman['qa_psych']) ? $cancer_history_detail_layman['qa_psych'] : '';
        $qa_resp = isset($cancer_history_detail_layman['qa_resp']) ? $cancer_history_detail_layman['qa_resp'] : '';
        $qa_cv = isset($cancer_history_detail_layman['qa_cv']) ? $cancer_history_detail_layman['qa_cv'] : '';
        $qa_skin = isset($cancer_history_detail_layman['qa_skin']) ? $cancer_history_detail_layman['qa_skin'] : '';
        $qa_msk = isset($cancer_history_detail_layman['qa_msk']) ? $cancer_history_detail_layman['qa_msk'] : '';
        $qa_gu = isset($cancer_history_detail_layman['qa_gu']) ? $cancer_history_detail_layman['qa_gu'] : '';
        $qa_gen = isset($cancer_history_detail_layman['qa_gen']) ? $cancer_history_detail_layman['qa_gen'] : '';
        $qa_heme_lymph = isset($cancer_history_detail_layman['qa_heme_lymph']) ? $cancer_history_detail_layman['qa_heme_lymph'] : '';
        $qa_ent = isset($cancer_history_detail_layman['qa_ent']) ? $cancer_history_detail_layman['qa_ent'] : '';
        $qa_all_imm = isset($cancer_history_detail_layman['qa_all_imm']) ? $cancer_history_detail_layman['qa_all_imm'] : '';
        $qa_breast = isset($cancer_history_detail_layman['qa_breast']) ? $cancer_history_detail_layman['qa_breast'] : '';
    }

    $gyn_uterus_overy = '';
    //cancer medical history
    if(!empty($user_detail['cancer_medical_detail'])){

        $cancer_medical_detail = $user_detail['cancer_medical_detail'];

        //sergical history

        if(isset($cancer_medical_detail['345']) && !empty($cancer_medical_detail['345'])){

            $ques_and_345 = strtolower($cancer_medical_detail['345']['answer']);
            if($ques_and_345 == 'right ovary'){

                //$sargical_hx .= 'R oopherectomy';
                $gyn_uterus_overy .= 'R oopherectomy';
            }
            elseif($ques_and_345 == 'left ovary'){

               //$sargical_hx .= 'L oopherectomy';
               $gyn_uterus_overy .= 'L oopherectomy';
            }
            elseif($ques_and_345 == 'both ovaries'){

                //$sargical_hx .= 'bilateral oopherectomy';
                $gyn_uterus_overy .= 'bilateral oopherectomy';
            }
        }
        else{

            $gyn_uterus_overy .= 'ovaries present, ';
        }

        if(isset($cancer_medical_detail['346']) && !empty($cancer_medical_detail['346'])){

          //$sargical_hx .= ' ('.$cancer_medical_detail['346']['answer']."), ";
           $gyn_uterus_overy .= ' ('.$cancer_medical_detail['346']['answer']."), ";
        }
        else{

            //$sargical_hx .= ', ';
           //$gyn_uterus_overy .= ', ';
        }

        if(isset($cancer_medical_detail['347']) && !empty($cancer_medical_detail['347']) && strtolower($cancer_medical_detail['347']['answer']) == 'yes'){

           // $sargical_hx .= "Uterus removal (hysterectomy)";
            $gyn_uterus_overy .= "Uterus removal (hysterectomy)";
        }
        else{

           $gyn_uterus_overy .= 'uterus present, ';
        }

        if(isset($cancer_medical_detail['348']) && !empty($cancer_medical_detail['348'])){

            //$sargical_hx .= " (".$cancer_medical_detail['348']['answer']."), ";
            $gyn_uterus_overy .= " (".$cancer_medical_detail['348']['answer']."), ";
        }
        else{

            //$sargical_hx .= ', ';
           // $gyn_uterus_overy .= ', ';
        }


        //family history

        if(isset($cancer_medical_detail['355']) && !empty($cancer_medical_detail['355'])){

            $ques_ans_355 = strtolower($cancer_medical_detail['355']['answer']);
            if($ques_ans_355 == 'no'){

                $fh_negative .= 'cancer, ';
            }

            /*if($ques_ans_355 == 'yes'){

                if(isset($user_detail['cancer_family_members'][355]) && !empty($user_detail['cancer_family_members'][355]) && is_array($user_detail['cancer_family_members'][355])){

                    foreach ($user_detail['cancer_family_members'][355] as $key => $value) {

                        $member_name = strtolower($value);
                        if(!empty($user_detail['family_members_cancer_disease_detail']) && isset($user_detail['family_members_cancer_disease_detail'][$value]) && isset($user_detail['family_members_cancer_disease_detail'][$value]['disease']) && !empty($user_detail['family_members_cancer_disease_detail'][$value]['disease'])){

                            $cancer_names = strtolower(is_array($user_detail['family_members_cancer_disease_detail'][$value]['disease']) ? implode(", ", $user_detail['family_members_cancer_disease_detail'][$value]['disease']) : $user_detail['family_members_cancer_disease_detail'][$value]['disease']);

                            if(isset($user_detail['family_members_cancer_disease_detail'][$value]['other']) && !empty($user_detail['family_members_cancer_disease_detail'][$value]['other'])){

                                $cancer_names = str_replace("other", strtolower($user_detail['family_members_cancer_disease_detail'][$value]['other']), $cancer_names);
                            }

                            $fh_positive .= $cancer_names.' - '.$member_name.(isset($user_detail['family_members_cancer_disease_detail'][$value]['age']) && !empty($user_detail['family_members_cancer_disease_detail'][$value]['age']) ? " (".$user_detail['family_members_cancer_disease_detail'][$value]['age'].") ": "")."\n ";
                        }
                    }
                }
            }
            else{

                $fh_negative .= 'cancer, ';
            }*/
        }
        if(isset($cancer_medical_detail['359']) && !empty($cancer_medical_detail['359'])){

            $ques_ans_359 = strtolower($cancer_medical_detail['359']['answer']);
            if($ques_ans_359 == 'no'){

                $fh_negative .= 'cardiomyopathy, ';
            }
            /*if($ques_ans_359 == 'yes'){

                $fh_positive .= 'cardiomyopathy';

                if(isset($user_detail['cancer_family_members'][359]) && !empty($user_detail['cancer_family_members'][359])){

                    $fh_positive .= ' - '.(is_array($user_detail['cancer_family_members'][359]) ? implode(", ", $user_detail['cancer_family_members'][359]) : $user_detail['cancer_family_members'][359]);
                }

               $fh_positive .= "\n ";
            }
            else{

                $fh_negative .= 'cardiomyopathy, ';
            }*/
        }

        if(isset($cancer_medical_detail['360']) && !empty($cancer_medical_detail['360'])){

            $ques_ans_360 = strtolower($cancer_medical_detail['360']['answer']);
            if($ques_ans_360 == 'no'){

                $fh_negative .= 'CAD, ';
            }
            /*if($ques_ans_360 == 'yes'){

                $fh_positive .= 'CAD';

                if(isset($user_detail['cancer_family_members'][360]) && !empty($user_detail['cancer_family_members'][360])){

                    $fh_positive .= ' - '.(is_array($user_detail['cancer_family_members'][360]) ? implode(", ", $user_detail['cancer_family_members'][360]) : $user_detail['cancer_family_members'][360]);
                }

                $fh_positive .= "\n ";
            }
            else{

                $fh_negative .= 'CAD, ';
            }*/
        }

        if(isset($cancer_medical_detail['361']) && !empty($cancer_medical_detail['361'])){

            $ques_ans_361 = strtolower($cancer_medical_detail['361']['answer']);
            if($ques_ans_361 == 'no'){

                $fh_negative .= 'CF, ';
            }
            /*if($ques_ans_361 == 'yes'){

                $fh_positive .= 'CF';

                if(isset($user_detail['cancer_family_members'][361]) && !empty($user_detail['cancer_family_members'][361])){

                    $fh_positive .= ' - '.(is_array($user_detail['cancer_family_members'][361]) ? implode(", ", $user_detail['cancer_family_members'][361]) : $user_detail['cancer_family_members'][361]);
                }

                $fh_positive .= "\n ";
            }
            else{

                $fh_negative .= 'CF, ';
            }*/
        }

        if(isset($cancer_medical_detail['362']) && !empty($cancer_medical_detail['362'])){

            $ques_ans_362 = strtolower($cancer_medical_detail['362']['answer']);
            $disease_name = 'diabetes';
            if(isset($cancer_medical_detail['363']) && !empty($cancer_medical_detail['363'])){
              $str = "";
              foreach($cancer_medical_detail['363']['answer'] as $k => $v){
                $str .= $k.'('.strtolower($v).'), ';
              }
              $positive_symptoms = rtrim(trim($str),',')." have diabetes</br>";
            }
            if(!empty($disease_name)){

                if($ques_ans_362 == 'no'){

                    $fh_negative .= $disease_name.', ';
                }
                /*if($ques_ans_362 == 'yes'){

                    $fh_positive .= $disease_name;

                    if(isset($user_detail['cancer_family_members'][362]) && !empty($user_detail['cancer_family_members'][362])){

                        $fh_positive .= ' - '.(is_array($user_detail['cancer_family_members'][362]) ? implode(", ", $user_detail['cancer_family_members'][362]) : $user_detail['cancer_family_members'][362]);
                    }

                    $fh_positive .= "\n ";
                }
                else{

                    $fh_negative .= $disease_name.', ';
                }*/
            }
        }

        if(isset($cancer_medical_detail['364']) && !empty($cancer_medical_detail['364'])){

            $ques_ans_364 = strtolower($cancer_medical_detail['364']['answer']);
            if($ques_ans_364 == 'no'){

                $fh_negative .= 'HLD, ';
            }
            /*if($ques_ans_364 == 'yes'){

                $fh_positive .= 'HLD';

                if(isset($user_detail['cancer_family_members'][364]) && !empty($user_detail['cancer_family_members'][364])){

                    $fh_positive .= ' - '.(is_array($user_detail['cancer_family_members'][364]) ? implode(", ", $user_detail['cancer_family_members'][364]) : $user_detail['cancer_family_members'][364]);
                }

                $fh_positive .= "\n ";
            }
            else{

                $fh_negative .= 'HLD, ';
            }*/
        }

        if(isset($cancer_medical_detail['365']) && !empty($cancer_medical_detail['365'])){

            $ques_ans_365 = strtolower($cancer_medical_detail['365']['answer']);
            if($ques_ans_365 == 'no'){

                $fh_negative .= 'HTN, ';
            }
            /*if($ques_ans_365 == 'yes'){

                $fh_positive .= 'HTN';

                if(isset($user_detail['cancer_family_members'][365]) && !empty($user_detail['cancer_family_members'][365])){

                    $fh_positive .= ' - '.(is_array($user_detail['cancer_family_members'][365]) ? implode(", ", $user_detail['cancer_family_members'][365]) : $user_detail['cancer_family_members'][365]);
                }

                $fh_positive .= "\n ";
            }
            else{

                $fh_negative .= 'HTN, ';
            }*/
        }

        if(isset($cancer_medical_detail['366']) && !empty($cancer_medical_detail['366'])){

            $ques_ans_366 = strtolower($cancer_medical_detail['366']['answer']);
            if($ques_ans_366 == 'no'){

                $fh_negative .= 'SLE, ';
            }
            /*if($ques_ans_366 == 'yes'){

                $fh_positive .= 'SLE';

                if(isset($user_detail['cancer_family_members'][366]) && !empty($user_detail['cancer_family_members'][366])){

                    $fh_positive .= ' - '.(is_array($user_detail['cancer_family_members'][366]) ? implode(", ", $user_detail['cancer_family_members'][366]) : $user_detail['cancer_family_members'][366]);
                }

                $fh_positive .= "\n ";
            }
            else{

                $fh_negative .= 'SLE, ';
            }*/
        }

        if(isset($cancer_medical_detail['367']) && !empty($cancer_medical_detail['367'])){

            $ques_ans_367 = strtolower($cancer_medical_detail['367']['answer']);
            if($ques_ans_367 == 'no'){

                $fh_negative .= 'PVD, ';
            }
            /*if($ques_ans_367 == 'yes'){

                $fh_positive .= 'PVD';

                if(isset($user_detail['cancer_family_members'][367]) && !empty($user_detail['cancer_family_members'][367])){

                    $fh_positive .= ' - '.(is_array($user_detail['cancer_family_members'][367]) ? implode(", ", $user_detail['cancer_family_members'][367]) : $user_detail['cancer_family_members'][367]);
                }

                $fh_positive .= "\n ";
            }
            else{

                $fh_negative .= 'PVD, ';
            }*/
        }

        if(isset($cancer_medical_detail['368']) && !empty($cancer_medical_detail['368'])){

            $ques_ans_368 = strtolower($cancer_medical_detail['368']['answer']);
            if($ques_ans_368 == 'no'){

                $fh_negative .= 'SC, ';
            }
            /*if($ques_ans_368 == 'yes'){

                $fh_positive .= 'SC';

                if(isset($user_detail['cancer_family_members'][368]) && !empty($user_detail['cancer_family_members'][368])){

                    $fh_positive .= ' - '.(is_array($user_detail['cancer_family_members'][368]) ? implode(", ", $user_detail['cancer_family_members'][368]) : $user_detail['cancer_family_members'][368]);
                }

                $fh_positive .= "\n ";
            }
            else{

                $fh_negative .= 'SC, ';
            }*/
        }

        if(isset($cancer_medical_detail['369']) && !empty($cancer_medical_detail['369'])){

            $ques_ans_369 = strtolower($cancer_medical_detail['369']['answer']);
            if($ques_ans_369 == 'no'){

                $fh_negative .= 'HbS, ';
            }
            /*if($ques_ans_368 == 'yes'){

                $fh_positive .= 'HbS';

                if(isset($user_detail['cancer_family_members'][369]) && !empty($user_detail['cancer_family_members'][369])){

                    $fh_positive .= ' - '.(is_array($user_detail['cancer_family_members'][369]) ? implode(", ", $user_detail['cancer_family_members'][369]) : $user_detail['cancer_family_members'][369]);
                }

                $fh_positive .= "\n ";
            }
            else{

                $fh_negative .= 'HbS, ';
            }*/
        }

        if(isset($cancer_medical_detail['370']) && !empty($cancer_medical_detail['370'])){

            $ques_ans_370 = strtolower($cancer_medical_detail['370']['answer']);
            $desease_name  = isset($cancer_medical_detail['371']) && !empty($cancer_medical_detail['371']) ? $cancer_medical_detail['371']['answer'] : "genetic disorder";

            if($ques_ans_370 == 'no'){

                $fh_negative .= $desease_name.', ';
            }
            /*if($ques_ans_370 == 'yes'){

                $fh_positive .= $desease_name;

                if(isset($user_detail['cancer_family_members'][370]) && !empty($user_detail['cancer_family_members'][370])){

                    $fh_positive .= ' - '.(is_array($user_detail['cancer_family_members'][370]) ? implode(", ", $user_detail['cancer_family_members'][370]) : $user_detail['cancer_family_members'][370]);
                }

                $fh_positive .= "\n ";
            }
            else{

                $fh_negative .= $desease_name.', ';
            }*/
        }

        if(isset($cancer_medical_detail['456']) && !empty($cancer_medical_detail['456'])){

            $ques_ans_456 = strtolower($cancer_medical_detail['456']['answer']);
            if($ques_ans_456 == 'no'){

                $fh_negative .= "MEN2, ";
            }

            /*if($ques_ans_456 == 'yes'){

                $fh_positive .= "MEN2\n ";
            }
            elseif($ques_ans_456 == 'no'){

                $fh_negative .= "MEN2, ";
            }*/
        }

        if(isset($cancer_medical_detail['457']) && !empty($cancer_medical_detail['457'])){

            $ques_ans_457 = strtolower($cancer_medical_detail['457']['answer']);
            if($ques_ans_457 == 'no'){

                $fh_negative .= "medullary thyroid CA, ";
            }

            /*if($ques_ans_457 == 'yes'){

                $fh_positive .= "medullary thyroid CA\n ";
            }
            elseif($ques_ans_457 == 'no'){

                $fh_negative .= "medullary thyroid CA, ";
            }*/
        }



        /*if(isset($cancer_medical_detail['458']) && !empty($cancer_medical_detail['458']) && isset($cancer_medical_detail['458']['answer']) && !empty($cancer_medical_detail['458']['answer']) && is_array($cancer_medical_detail['458']['answer'])){

            foreach ($cancer_medical_detail['458']['answer'] as $key => $value) {

                $value = strtolower($value);
                $pmh .= isset($medical_history_trans[$value]) ? $medical_history_trans[$value].", ": $value.", ";
            }
        }*/

        /*$sh = '';

        if(isset($cancer_medical_detail['349']) && !empty($cancer_medical_detail['349']) && strtolower($cancer_medical_detail['349']['answer']) == 'yes'){

            $sh .= 'currently smoking';

            if(isset($cancer_medical_detail['350']) && !empty($cancer_medical_detail['350'])){

               $sh .=  $cancer_medical_detail['350']['answer'] == 'morethan10' ? " more than 10 packs/wk" : " ".$cancer_medical_detail['350']['answer']." packs/wk";
            }

        }
        else{

            $sh .= 'denies current smoking';
        }*/


        //set estrogen treatments

        if(isset($cancer_medical_detail['375']) && !empty($cancer_medical_detail['375']) && !empty($cancer_medical_detail['375']['answer'])){

            $estrogen_treatments .= "OCPs (".$cancer_medical_detail['375']['answer']."), ";
        }

        if(isset($cancer_medical_detail['376']) && !empty($cancer_medical_detail['376']) && !empty($cancer_medical_detail['376']['answer'])){

            $estrogen_treatments .= strtolower($cancer_medical_detail['376']['question'])." (".$cancer_medical_detail['376']['answer']."), ";
        }

        if(isset($cancer_medical_detail['504']) && !empty($cancer_medical_detail['504']) && !empty($cancer_medical_detail['504']['answer'])){

            $estrogen_treatments .= strtolower($cancer_medical_detail['504']['question'])." (".$cancer_medical_detail['504']['answer']."), ";
        }

        if(isset($cancer_medical_detail['377']) && !empty($cancer_medical_detail['377']) && !empty($cancer_medical_detail['377']['answer'])){

            $estrogen_treatments .= strtolower($cancer_medical_detail['377']['question'])." (".$cancer_medical_detail['377']['answer']."), ";
        }

        if(isset($cancer_medical_detail['378']) && !empty($cancer_medical_detail['378']) && !empty($cancer_medical_detail['378']['answer'])){

            $estrogen_treatments .= strtolower($cancer_medical_detail['378']['question'])." (".$cancer_medical_detail['378']['answer']."), ";
        }

        if(isset($cancer_medical_detail['379']) && !empty($cancer_medical_detail['379']) && !empty($cancer_medical_detail['379']['answer'])){

            $estrogen_treatments .= strtolower($cancer_medical_detail['379']['question'])." (".$cancer_medical_detail['379']['answer']."), ";
        }

        if(isset($cancer_medical_detail['380']) && !empty($cancer_medical_detail['380']) && !empty($cancer_medical_detail['380']['answer'])){

            $estrogen_treatments .= strtolower($cancer_medical_detail['380']['question'])." (".$cancer_medical_detail['380']['answer']."), ";
        }

        if(isset($cancer_medical_detail['381']) && !empty($cancer_medical_detail['381']) && !empty($cancer_medical_detail['381']['answer'])){

            $estrogen_treatments .= strtolower($cancer_medical_detail['381']['question'])." (".$cancer_medical_detail['381']['answer']."), ";
        }

        if(isset($cancer_medical_detail['382']) && !empty($cancer_medical_detail['382']) && !empty($cancer_medical_detail['382']['answer'])){

            $estrogen_treatments .= strtolower($cancer_medical_detail['382']['answer']);

            if(isset($cancer_medical_detail['383']) && !empty($cancer_medical_detail['383']) && !empty($cancer_medical_detail['383']['answer'])){

                $estrogen_treatments .= " (".$cancer_medical_detail['383']['answer'].")";
            }

            $estrogen_treatments .= ", ";

        }

        if(isset($cancer_medical_detail['389']) && !empty($cancer_medical_detail['389']) && strtolower($cancer_medical_detail['389']['answer']) == 'yes'){

            $gyn_hx .= 'Patient has menopause';
            if(isset($cancer_medical_detail['390']) && !empty($cancer_medical_detail['390']) && !empty($cancer_medical_detail['390']['answer'])){

                $gyn_hx .= ' at age '.$cancer_medical_detail['390']['answer'];
            }

            $gyn_hx .= '. ';
        }
        else{

            if(isset($cancer_medical_detail['391']) && !empty($cancer_medical_detail['391']) && !empty($cancer_medical_detail['391']['answer'])){

                 $gyn_hx .= 'Secondary amenorrhea due to '.$cancer_medical_detail['391']['answer'].". ";
            }
            if(isset($cancer_medical_detail['392']) && !empty($cancer_medical_detail['392']) && !empty($cancer_medical_detail['392']['answer'])){

                $gyn_hx = str_replace("other", strtolower($cancer_medical_detail['392']['answer']), $gyn_hx);
            }
        }

        if(isset($cancer_medical_detail['385']) && !empty($cancer_medical_detail['385']) && !empty($cancer_medical_detail['385']['answer'])){

           $gyn_hx .= 'LMP '.$cancer_medical_detail['385']['answer'].", ";
        }

        if(isset($cancer_medical_detail['388']) && !empty($cancer_medical_detail['388']) && !empty($cancer_medical_detail['388']['answer'])){

           $gyn_hx .= strtolower($cancer_medical_detail['388']['answer']) == "yes" ? "regular, " : "irregular, ";
        }

        if(isset($cancer_medical_detail['387']) && !empty($cancer_medical_detail['387']) && !empty($cancer_medical_detail['387']['answer'])){

           $gyn_hx .= 'interval '.$cancer_medical_detail['387']['answer'].' days, ';
        }

        if(isset($cancer_medical_detail['386']) && !empty($cancer_medical_detail['386']) && !empty($cancer_medical_detail['386']['answer'])){

           $gyn_hx .= 'duration '.$cancer_medical_detail['386']['answer'].' days, ';
        }

        if((isset($cancer_medical_detail['386']) && !empty($cancer_medical_detail['386']['answer'])) || (isset($cancer_medical_detail['387']) && !empty($cancer_medical_detail['387']['answer'])) || (isset($cancer_medical_detail['388']) && !empty($cancer_medical_detail['388']['answer'])) || (isset($cancer_medical_detail['385']) && !empty($cancer_medical_detail['385']['answer']))){

            $gyn_hx = rtrim($gyn_hx,', ');
            $gyn_hx .= ". ";
        }

        $gyn_hx .= 'menarche ';

    }

    $temp_ehr_hpi = "";
    if(!empty($sti_severe_sym) || !empty($sti_moderate_sym) || !empty($sti_mild_sym)){

        $temp_ehr_hpi .= 'Baseline SIT symptom inventory positive for';
        $temp_ehr_hpi .= !empty($sti_severe_sym) ? ' severe '.$sti_severe_sym.',': '';
        $temp_ehr_hpi .= !empty($sti_moderate_sym) ? ' moderate '.$sti_moderate_sym.',': '';
        $temp_ehr_hpi .= !empty($sti_mild_sym) ? ' mild '.$sti_mild_sym.',': '';
        $temp_ehr_hpi = trim($temp_ehr_hpi,',');
        $temp_ehr_hpi .= '. ';
    }

    if(!empty($sti_neg_sym)){

        $temp_ehr_hpi .= 'Baseline SIT symptom inventory negative for '.$sti_neg_sym.'. ';
    }

    /*if(!empty($sti_high_qol) || !empty($sti_avg_qol) || !empty($sti_low_qol)){

        $hpi .= 'Baseline SIT quality of life indicates';
        $hpi .= !empty($sti_low_qol) ? ' low '.$sti_low_qol.',': '';
        $hpi .= !empty($sti_avg_qol) ? ' average '.$sti_avg_qol.',': '';
        $hpi .= !empty($sti_high_qol) ? ' high '.$sti_high_qol.',': '';
        $hpi = trim($hpi,',');
        $hpi .= '. ';
    }*/

    if(!empty($chemo_threatening) || !empty($chemo_severe) || !empty($chemo_moderate) || !empty($chemo_mild)) {
        $temp_ehr_hpi .= 'CIPN screen is significant for ';

      //  $hpi .= 'CIPN screen is significant for';
        $temp_ehr_hpi .= !empty($chemo_threatening) ? ' disabling/life threatening '.$chemo_threatening.',': '';
        $temp_ehr_hpi .= !empty($chemo_severe) ? ' severe '.$chemo_severe.',': '';
        $temp_ehr_hpi .= !empty($chemo_moderate) ? ' moderate '.$chemo_moderate.',': '';
        $temp_ehr_hpi .= !empty($chemo_mild) ? ' mild '.$chemo_mild.',': '';
        //$hpi .= !empty($chemo_none) ? ' none '.$chemo_none.',': '';
        $temp_ehr_hpi = trim($temp_ehr_hpi,',');
        $temp_ehr_hpi .= '. ';
    }
    else{
        $temp_ehr_hpi .= 'CIPN screen is unremarkable.';
        $temp_ehr_hpi = trim($temp_ehr_hpi,',');
    }

    $ehr_hpi_arr[] = $temp_ehr_hpi;
    $hpi .= $temp_ehr_hpi;

    //$sargical_hx = rtrim($sargical_hx,', ');
    //$pmh  = rtrim($pmh,", ");
    $gyn_uterus_overy = ucfirst(strtolower(rtrim($gyn_uterus_overy,', ')));
    //$fh_positive = rtrim($fh_positive,', ');
    $fh_negative = rtrim($fh_negative,', ');
    $estrogen_treatments = rtrim($estrogen_treatments,', ');
    if(!empty($estrogen_treatments)){

        $treatment_hx .= ' Estrogen hx is significant for '.$estrogen_treatments.'. ';
    }

    if(!empty($gyn_uterus_overy)){

        $gyn_hx .= $gyn_uterus_overy.". ";
    }

    $sti_severe_sym = ucfirst($sti_severe_sym);
    $sti_moderate_sym = ucfirst($sti_moderate_sym);
    $sti_mild_sym = ucfirst($sti_mild_sym);
    $sti_neg_sym = ucfirst($sti_neg_sym);
    $sti_high_qol = ucfirst($sti_high_qol);
    $sti_avg_qol = ucfirst($sti_avg_qol);
    $sti_low_qol = ucfirst($sti_low_qol);
    $sti_neg_qol = ucfirst($sti_neg_qol);
    $chemo_threatening = ucfirst($chemo_threatening);

    $chemo_severe = ucfirst($chemo_severe);
    $chemo_moderate = ucfirst($chemo_moderate);
    $chemo_mild = ucfirst($chemo_mild);
    $chemo_none = ucfirst($chemo_none);


    //$response = array('sti_severe_sym' => $sti_severe_sym, 'sti_moderate_sym' => $sti_moderate_sym,'sti_mild_sym' => $sti_mild_sym,'sti_neg_sym' => $sti_neg_sym,'sti_high_qol' => $sti_high_qol, 'sti_avg_qol' => $sti_avg_qol, 'sti_low_qol' => $sti_low_qol, 'sti_neg_qol' => $sti_neg_qol,'chemo_threatening' => $chemo_threatening, 'chemo_severe' => $chemo_severe, 'chemo_moderate' => $chemo_moderate, 'chemo_mild' => $chemo_mild, 'chemo_none' => $chemo_none,'hpi' => $hpi,'treatment_hx' => $treatment_hx,'fh_positive' => $fh_positive,'fh_negative' => $fh_negative,'sargical_hx' => $sargical_hx,'sh' => $sh,'gyn_hx' => $gyn_hx,'cancer_cc' => $cancer_cc,'pmh' => $pmh,'qa_neuro' => $qa_neuro,'qa_gi' => $qa_gi, 'qa_eye' => $qa_eye,'qa_psych' => $qa_psych,'qa_resp' => $qa_resp,'qa_cv' => $qa_cv,'qa_skin' => $qa_skin,'qa_msk' => $qa_msk,'qa_gu' => $qa_gu,'qa_gen' => $qa_gen,'qa_heme_lymph' => $qa_heme_lymph,'qa_ent' => $qa_ent,'qa_all_imm' => $qa_all_imm,'qa_breast' => $qa_breast);

    $response = array('sti_severe_sym' => $sti_severe_sym, 'sti_moderate_sym' => $sti_moderate_sym,'sti_mild_sym' => $sti_mild_sym,'sti_neg_sym' => $sti_neg_sym,'sti_high_qol' => $sti_high_qol, 'sti_avg_qol' => $sti_avg_qol, 'sti_low_qol' => $sti_low_qol, 'sti_neg_qol' => $sti_neg_qol,'chemo_threatening' => $chemo_threatening, 'chemo_severe' => $chemo_severe, 'chemo_moderate' => $chemo_moderate, 'chemo_mild' => $chemo_mild, 'chemo_none' => $chemo_none,'hpi' => $hpi,'treatment_hx' => $treatment_hx,'fh_negative' => $fh_negative,'gyn_hx' => $gyn_hx,'cancer_cc' => $cancer_cc,'qa_neuro' => $qa_neuro,'qa_gi' => $qa_gi, 'qa_eye' => $qa_eye,'qa_psych' => $qa_psych,'qa_resp' => $qa_resp,'qa_cv' => $qa_cv,'qa_skin' => $qa_skin,'qa_msk' => $qa_msk,'qa_gu' => $qa_gu,'qa_gen' => $qa_gen,'qa_heme_lymph' => $qa_heme_lymph,'qa_ent' => $qa_ent,'qa_all_imm' => $qa_all_imm,'qa_breast' => $qa_breast,'ehr_hpi_arr' => $ehr_hpi_arr);
    //pr($response);die;

    return $response;
}


public function cancer_history_layman($cancer_history_detail , $gender){

    //pr($cancer_history_detail);die;
    $hpi = '';
    $treatment_hx = '';
    $diagnostic_procedure_trans = array(

        "endoscopy" => "endoscopy",
        "barium swallow test" => "barium swallow",
        "biopsy" => "biopsy",
        "endoscopic ultrasound" => "endoscopic US",
        'colonscopy' => 'colonscopy',
        'sigmoidoscopy' => 'sigmoidoscopy',
        'ct colonography' => 'CT colonography',
        'pillcam' => 'pillcam',
        'tumor marker lab tests' => 'tumor markers',
        'blood work' => 'labs',
        'physician diagnosis' => 'clinical presentation',
        'pelvic exam' => 'pelvic exam',
        'scope exam (colposcopy)' => 'colposcopy',
        'pap smear' => 'pap smear',
        'hpv test' => 'HPV test',
        'ct scan' => 'CT',
        'mri' => 'MRI',
        'tumor markers' => 'tumor markers',
        'ultrasound' => 'US',
        'psa test' => 'PSA',
        'angiogram' => 'angiography',
        'endoscopic ultrasound' => 'endoscopic US',
        'chest xray' => 'CXR',
        'they took a sample of my breast using a device with a large needle (core biopsy)' => 'core biopsy',
        'they cut out all or a piece of a lump in the office (lumpectomy or excisional biopsy)' => 'lumpectomy',
        'surgical biopsy' => 'surgical biopsy',
        'ct' => 'CT',
        'vaginal scope exam (colposcopy)' => 'colposcopy',
        'thyroid hormone lab work' => 'TFTs',
        'a sample was taken with a small needle (fine needle aspiration)' => 'FNA',
        'radioactive idodine test (rat scan)' => 'RAT scan',
        'they took a sample of my breast using a large needle (core biopsy)' => 'core biopsy of breast tissue',
        'they cut out all or piece of a lump in the office (excisional biopsy)' => 'excisional biopsy',
        'they took a sample of a different area than my breast' => 'biopsy of non-breast tissue',
        'they took a sample of my breast using small syringe and needle (fine needle aspiration)' => 'FNA'
    );

    $breast_cancer_test_trans = array(

       'Mammogram' => "abnormal mammogram",
        'MRI' => "abnormal MRI results",
        'CT scan' => "abnormal CT results",
        'Blood work' => "abnormal lab results",
        'Biopsy' => "abnormal biopsy",
        'Not sure' => "abnormal test results"
     );

    $treatment_trans = array(

        'endoscopy' => 'endoscopy',
        'barium swallow test' => 'barium swallow',
        'biopsy' => 'biopsy',
        'endoscopic ultrasound' => 'endoscopic US',
        'surgery' => 'surgery',
        'chemotherapy' => 'chemotherapy',
        'radiation therapy' => 'radition',
        'combination therapy (chemo/radiation)' => 'combo chemo/radiation therapy',
        'steroids' => 'steroids',
        'seizure prevention medication' => 'seizure prophylaxis',
        'active surveillance' => 'active surveillance',
        'immunotherapy' => 'immunotherapy',
        'parp therapy' => 'PARP',
        'blood transfusions' => 'transfusion',
        'antibiotics' => 'antibiotics',
        'stimulating factors' => 'CSFs',
        'bone marrow transplant' => 'bone marrow transplant'
    );

    $initial_symptoms_trans = array(

        'trouble swallowing' => 'dysphagia',
        'headaches' => 'headaches',
        'nausea' => 'nausea',
        'vomiting' => 'vomiting',
        'double vision' => 'diplopia',
        'told my personality has changed' => 'personality changes',
        'severe fatigue' => 'severe fatigue',
        'fainting' => 'syncope',
        'aphasia' => 'aphasia',
        'apraxia' => 'apraxia',
        'depressed mood' => 'depressed mood',
        'gait ataxia' => 'gait ataxia',
        'visual loss' => 'visual loss',
        'nipple discharge' => 'nipple dx',
        'breast pain' => 'breast pain',
        'breast grew in size' => 'breast enlargement',
        'breast redness' => 'breast redness',
        'lump or swelling in armpit' => 'axillary LAD',
        'arm swelling' => 'arm edema',
        'nipple cratering (inversion)' => 'nipple inversion',
        "dimpling or puckering of breast skin" => 'breast dimpling',
        'constant cough' => 'constant cough',
        'coughing up blood' => 'hemoptysis',
        'shortness of breath' => 'SOB',
        'chest pain' => 'chest pain',
        'wheezing' => 'wheezing',
        'unintentional weight loss' => 'unintentional weight loss',
        'abdominal pain' => 'abdominal pain',
        'feeling full too quickly' => 'early satiety',
        'stomach ulcers' => 'peptic ulcers',
        'really dark stools' => 'melena',
        'throwing up rusty or coffee ground looking stuff' => 'coffee-ground hematemesis',
        'asthenia' => 'lack of energy and strength',
        'anorexia' => 'anorexia',
        'dark urine' => 'dark urine',
        'yellow skin' => 'jaundice',
        'back pain' => 'back pain',
        'diarrhea' => 'diarrhea',
        'greasy, bad-smelling diarrhea' => 'steatorrhea',
        'flank pain' => 'flank pain',
        'hematuria' => 'visible blood in urine',
        'scrotal enlargement' => 'scrotal enlargement',
        'abdominal mass' => 'abdominal mass',
        'le edema' => 'ankle and/or leg swelling',
        'ascites' => 'ascites',
        'bright red blood in poop' => 'hematochezia',
        'dark stools' => 'melena',
        'constipation' => 'constipation',
        'bloating' => 'bloating',
        'rectal mass' => 'rectal mass',
        'abdominal mass' => 'abdominal mass',
        'pain when urinating' => 'dysuria',
        'nocturia' => 'nocturia',
        'loss of bladder control' => 'loss of bladder control',
        'urinary incontinence' => 'urinary incontinence',
        'weak urine stream' => 'decreased urine flow',
        'blood or red-colored urine' => 'hematuria',
        'blood in semen' => 'hematospermia',
        'frequent periods' => 'frequent periods',
        'heavy periods' => 'menorrhagia',
        'prolonged periods' => 'prolonged periods',
        'pelvic pain' => 'pelvic pain',
        'pelvic mass' => 'pelvic mass',
        'bowel changes' => 'bowel changes',
        'urinary urgency' => 'urinary urgency',
        'urinary frequency' => 'urinary frequency',
        'early satiety' => 'early satiety',
        'sob' => 'shortness of breath',
        'ascites' => 'abdominal swelling',
        'postmenopausal bleeding' => 'postmenopausal bleeding',
        'rectal bleeding' => 'rectal bleeding',
        'irregular periods' => 'metrorrhagia',
        'heavy bleeding' => 'mennorhagia',
        'bleeding after sex' => 'post-coital bleeding',
        'vaginal discharge' => 'vaginal discharge',
        'vaginal itching' => 'vaginal pruritis',
        'vulvar lesions' => 'vulvar lesions',
        'vaginal bleeding' => 'vaginal bleeding',
        'dysuria' => 'dysuria',
        'pain when pooping' => 'dyschezia',
        'rectal bleeding' => 'rectal bleeding',
        'ankle and/or leg swelling' => 'LE edema',
        'fatigue' => 'fatigue',
        'chills' => 'chills',
        'decreased appetite' => 'anorexia',
        'fever' => 'fever',
        'tiny red or purple spots on skin' => 'petechiae',
        'loss of face color, always looking pale' => 'pallor',
        'larger red or purple spots on skin' => 'purpura',
        'frequent bleeding' => 'frequent bleeding',
        'bleeding gums' => 'bleeding gums',
        'bruising' => 'bruising',
        'swollen gums' => 'swollen gums',
        'frequent infections' => 'frequent infections',
        'severe lad' => 'LAD',
        'yellow skin or eyes' => 'jaundice',
        'easy bruising' => 'easy bruising',
        'easy bleeding' => 'easy bleeding',
        'pain with swallowing' => 'dysphagia',
        'cough' => 'cough',
        'choking sensation' => 'globus sensation',
        'hoarseness' => 'hoarseness',
        'abnormal vaginal bleeding' => 'abnormal vaginal bleeding',
        'veginal discharge' => 'veginal dx',
        'bleeding or spotting after sex' => 'post-coital bleeding'
    );

    $health_question_arr = [];

    $qa_neuro = [];
    $neuro_arr = array('syncope','headache','aphasia','apraxia','gait ataxia');

    $qa_gi = [];
    $gi_arr = array('nausea','dysphagia','vomiting','abdominal pain','early satiety','melena','asthenia','diarrhea','steatorrhea','hematochezia','constipation','bloating','rectal mass','bowel changes','rectal bleeding','dyschezia','peptic ulcers','coffee-ground hematemesis','ascites','globus sensation');

    $qa_eye = [];
    $eye_arr = array('diplopia','visual loss');

    $qa_psych = [];
    $psych_arr = array('personality changes','depressed mood');

    $qa_breast = [];
    $breast_arr = array('nipple dx','breast pain','breast enlargement','breast redness');

    $qa_resp = [];
    $resp_arr = array('hemoptysis','SOB','wheezing','cough');

    $qa_cv = [];
    $cv_arr = array('chest pain');

    $qa_skin = [];
    $skin_arr = array('jaundice','pallor');

    $qa_msk = [];
    $msk_arr = array('back pain');

    $qa_gu = [];
    $gu_arr = array('flank pain','hematuria','scrotal enlargement','palpable abdominal mass','abdominal mass','dysuria','nocturia','loss of bladder control','urinary incontinence','decreased urine flow','hematospermia','frequent periods','menorrhagia','prolonged periods','pelvic pain','pelvic mass','urinary urgency','urinary frequency','early satiety','postmenopausal bleeding','post-coital bleeding','vaginal discharge','vaginal pruritis','vulvar lesions','vaginal bleeding','dysuria','post-coital bleeding','dark urine','metrorrhagia','mennorhagia','abnormal vaginal bleeding','vaginal discharge');


    $qa_gen= [];
    $gen_arr = array('fatigue','chills','anorexia','fever','severe fatigue','constant cough','unintentional weight loss');

    $qa_heme_lymph = [];
    $heme_lymph_arr = array('petechiae','purpura','frequent bleeding','bruising','axillary LAD','arm edema','LE edema','easy bruising','easy bleeding');


    $qa_ent = [];
    $ent_arr = array('bleeding gums','swollen gums','hoarseness');


    $qa_all_imm = [];
    $all_imm_arr = array('frequent infections');
    $ehr_hpi_arr = [];

    //pr($cancer_history_detail);die;

    if(!empty($cancer_history_detail)){


        //breast cancer history detail
        if(isset($cancer_history_detail['breast cancer']) && !empty($cancer_history_detail['breast cancer']))
        {
            $breast_cancer_history_detail = $cancer_history_detail['breast cancer'];
            //pr($breast_cancer_history_detail);die;

            $hpi .= "<strong>Breast Cancer: </strong>";

            $temp_initial_symptom = '';
            $temp_discharge_color = "";

            if(isset($breast_cancer_history_detail[334]) && isset($breast_cancer_history_detail[334]['answer']) && !empty($breast_cancer_history_detail[334]['answer'])){

                $ques_ans_334 = strtolower(is_array($breast_cancer_history_detail[334]['answer']) ? implode(", ", $breast_cancer_history_detail[334]['answer']) : $breast_cancer_history_detail[334]['answer']);

                if($ques_ans_334 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($breast_cancer_history_detail[334]['answer'] as $key => $value) {

                        $value = strtolower($value);
                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value];
                        }
                        else{

                            $temp_initial_symptom .= $value;
                        }

                        if($value == 'nipple discharge'){

                            if(isset($breast_cancer_history_detail[505]) && isset($breast_cancer_history_detail[505]['answer']) && !empty($breast_cancer_history_detail[505]['answer'])){

                                $temp_initial_symptom .= " (".$breast_cancer_history_detail[505]['answer'].")";
                            }

                            if(isset($breast_cancer_history_detail[506]) && isset($breast_cancer_history_detail[506]['answer']) && !empty($breast_cancer_history_detail[506]['answer'])){

                                $ans_ques_506 = strtolower(is_array($breast_cancer_history_detail[506]['answer']) ? implode(", ", $breast_cancer_history_detail[506]['answer']) : $breast_cancer_history_detail[506]['answer']);
                                if($ans_ques_506 != 'not sure'){

                                  $temp_discharge_color .= "Nipple discharge color is ".$ans_ques_506.". ";
                                }
                                
                            }
                        }

                        elseif($value == 'breast pain'){

                            if(isset($breast_cancer_history_detail[507]) && isset($breast_cancer_history_detail[507]['answer']) && !empty($breast_cancer_history_detail[507]['answer'])){

                                $temp_initial_symptom .= " (".$breast_cancer_history_detail[507]['answer'].")";
                            }
                        }

                        elseif($value == 'breast grew in size'){

                            if(isset($breast_cancer_history_detail[508]) && isset($breast_cancer_history_detail[508]['answer']) && !empty($breast_cancer_history_detail[508]['answer'])){

                                $temp_initial_symptom .= " (".$breast_cancer_history_detail[508]['answer'].")";
                            }
                        }

                        elseif($value == 'lump or swelling in armpit'){

                            if(isset($breast_cancer_history_detail[509]) && isset($breast_cancer_history_detail[509]['answer']) && !empty($breast_cancer_history_detail[509]['answer'])){

                                $temp_initial_symptom .= " (".$breast_cancer_history_detail[509]['answer'].")";
                            }
                        }

                        elseif($value == 'arm swelling'){

                            if(isset($breast_cancer_history_detail[510]) && isset($breast_cancer_history_detail[510]['answer']) && !empty($breast_cancer_history_detail[510]['answer'])){

                                $temp_initial_symptom .= " (".$breast_cancer_history_detail[510]['answer'].")";
                            }
                        }

                        elseif($value == 'nipple changes'){

                            if(isset($breast_cancer_history_detail[511]) && isset($breast_cancer_history_detail[511]['answer']) && !empty($breast_cancer_history_detail[511]['answer'])){

                                $temp_initial_symptom .= " (".$breast_cancer_history_detail[511]['answer'].")";
                            }
                        }

                        elseif($value == 'nipple cratering (inversion)'){

                            if(isset($breast_cancer_history_detail[513]) && isset($breast_cancer_history_detail[513]['answer']) && !empty($breast_cancer_history_detail[513]['answer'])){

                                $temp_initial_symptom .= " (".$breast_cancer_history_detail[513]['answer'].")";
                            }
                        }

                        elseif($value == 'dimpling or puckering of breast skin'){

                            if(isset($breast_cancer_history_detail[514]) && isset($breast_cancer_history_detail[514]['answer']) && !empty($breast_cancer_history_detail[514]['answer'])){

                                $temp_initial_symptom .= " (".$breast_cancer_history_detail[514]['answer'].")";
                            }
                        }

                        elseif($value == 'other'){

                            if(isset($breast_cancer_history_detail[372]) && isset($breast_cancer_history_detail[372]['answer']) && !empty($breast_cancer_history_detail[372]['answer'])){

                                $temp_initial_symptom = str_replace("other", strtolower($breast_cancer_history_detail[372]['answer']), $temp_initial_symptom) ;
                            }

                            if(isset($breast_cancer_history_detail[515]) && isset($breast_cancer_history_detail[515]['answer']) && !empty($breast_cancer_history_detail[515]['answer'])){

                                $temp_initial_symptom .= " (".$breast_cancer_history_detail[515]['answer'].")";
                            }
                        }
                        $temp_initial_symptom .= ", ";
                    }
                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            /*if(isset($breast_cancer_history_detail[372]) && isset($breast_cancer_history_detail[372]['answer']) && !empty($breast_cancer_history_detail[372]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($breast_cancer_history_detail[372]['answer']), $temp_initial_symptom);
            }*/

            $hpi .= $temp_initial_symptom;

            if(isset($breast_cancer_history_detail[340]) && isset($breast_cancer_history_detail[340]['answer']) && !empty($breast_cancer_history_detail[340]['answer'])){

                $que_ans_340 = strtolower($breast_cancer_history_detail[340]['answer']);
                $hpi .= ' localized to ';
                if($que_ans_340 == 'right breast'){

                    $hpi .= 'R breast';
                }
                if($que_ans_340 == 'left breast'){

                    $hpi .= 'L breast';
                }
                if($que_ans_340 == 'both breasts'){

                    $hpi .= 'both breasts bilaterally';
                }
            }

            /*if(isset($breast_cancer_history_detail[335]) && isset($breast_cancer_history_detail[335]['answer']) && !empty($breast_cancer_history_detail[335]['answer'])){

                $hpi .= ' approximately '.$breast_cancer_history_detail[335]['answer'].' ago';
            }*/

            if(!empty($hpi)){

                $hpi .= '. ';
            }
            if(!empty($temp_discharge_color)){

                $hpi .= $temp_discharge_color;
            }

            if(isset($breast_cancer_history_detail[336]) && isset($breast_cancer_history_detail[336]['answer']) && !empty($breast_cancer_history_detail[336]['answer'])){

                $que_ans_336 = strtolower($breast_cancer_history_detail[336]['answer']);

                if($que_ans_336 == 'yes'){

                    $hpi .= 'A breast lump was detected';

                    if(isset($breast_cancer_history_detail[338]) && isset($breast_cancer_history_detail[338]['answer']) && !empty($breast_cancer_history_detail[338]['answer'])){

                        $que_ans_338 = strtolower($breast_cancer_history_detail[338]['answer']);
                        if($que_ans_338 == 'self-breast exam'){

                            $hpi .= ' via patient SBE';
                        }
                        else{

                            $hpi .= ' via '.$que_ans_338;
                        }
                    }

                    if(isset($breast_cancer_history_detail[337]) && isset($breast_cancer_history_detail[337]['answer']) && !empty($breast_cancer_history_detail[337]['answer'])){

                        $hpi .= ' approximately '.$breast_cancer_history_detail[337]['answer'].' ago';
                    }
                }
                else{

                    $hpi .= 'No breast lumps were detected';
                }

                $hpi .= '. ';
            }

            if(isset($breast_cancer_history_detail[339]) && isset($breast_cancer_history_detail[339]['answer']) && !empty($breast_cancer_history_detail[339]['answer'])){

                $que_ans_339 = strtolower($breast_cancer_history_detail[339]['answer']);
                if($que_ans_339 == 'yes'){

                    $hpi .= "Positive history of inflammatory breast changes. ";
                }
                if($que_ans_339 == 'no'){

                    $hpi .= "History is negative for inflammatory breast changes. ";
                }
            }

            if(isset($breast_cancer_history_detail[341]) && isset($breast_cancer_history_detail[341]['answer']) && !empty($breast_cancer_history_detail[341]['answer']) && is_array($breast_cancer_history_detail[341]['answer'])){

                $temp_diagnosis = '';
                foreach ($breast_cancer_history_detail[341]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($breast_cancer_history_detail[342]) && isset($breast_cancer_history_detail[342]['answer']) && !empty($breast_cancer_history_detail[342]['answer'])){

                $que_ans_342 = strtolower($breast_cancer_history_detail[342]['answer']);
                if($que_ans_342 == 'yes'){

                    if(isset($breast_cancer_history_detail[343]) && isset($breast_cancer_history_detail[343]['answer']) && !empty($breast_cancer_history_detail[343]['answer']) && is_array($breast_cancer_history_detail[343]['answer'])){

                        $temp_treatment = '';

                        foreach ($breast_cancer_history_detail[343]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            if($value == 'surgery'){

                                $temp_treatment .= 'surgery, ';
                            }
                            elseif($value == 'chemotherapy'){

                                $temp_treatment .= 'chemotherapy, ';
                            }
                            elseif($value == 'radiation therapy'){

                                $temp_treatment .= 'radiation, ';
                            }
                            elseif($value == 'combination therapy (chemo/radiation)'){

                                $temp_treatment .= 'combo chemo/radiation therapy, ';
                            }

                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            //$treatment_hx = 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                        //$treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_342 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }



        //esophageal cancer history detail
        if(!empty($cancer_history_detail) && isset($cancer_history_detail['esophageal cancer']) && !empty($cancer_history_detail['esophageal cancer']))
        {
            $esophageal_cancer_history_detail = $cancer_history_detail['esophageal cancer'];

            $hpi .= "<strong>Esophageal Cancer: </strong>";
            $temp_initial_symptom = '';

            if(isset($esophageal_cancer_history_detail[393]) && isset($esophageal_cancer_history_detail[393]['answer']) && !empty($esophageal_cancer_history_detail[393]['answer'])){

                $ques_ans_393 = strtolower(is_array($esophageal_cancer_history_detail[393]['answer']) ? implode(", ", $esophageal_cancer_history_detail[393]['answer']) : $esophageal_cancer_history_detail[393]['answer']);
                //$temp_initial_symptom = 'The patient initially noticed '.($ques_ans_393 == 'none of these' ? 'symptoms' : $ques_ans_393);

                if($ques_ans_393 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($esophageal_cancer_history_detail[393]['answer'] as $key => $value) {

                        $value = strtolower($value);

                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value].", ";
                        }
                        else{

                            $temp_initial_symptom .= $value.", ";
                        }
                    }

                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            if(isset($esophageal_cancer_history_detail[395]) && isset($esophageal_cancer_history_detail[395]['answer']) && !empty($esophageal_cancer_history_detail[395]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($esophageal_cancer_history_detail[395]['answer']), $temp_initial_symptom);
            }

            $hpi .= $temp_initial_symptom;

            if(isset($esophageal_cancer_history_detail[396]) && isset($esophageal_cancer_history_detail[396]['answer']) && !empty($esophageal_cancer_history_detail[396]['answer'])){

                $hpi .= ' approximately '.$esophageal_cancer_history_detail[396]['answer'].' ago';
            }

            if(!empty($hpi)){

                $hpi .= '. ';
            }

            if(isset($esophageal_cancer_history_detail[397]) && isset($esophageal_cancer_history_detail[397]['answer']) && !empty($esophageal_cancer_history_detail[397]['answer']) && is_array($esophageal_cancer_history_detail[397]['answer'])){

                $temp_diagnosis = '';
                foreach ($esophageal_cancer_history_detail[397]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($esophageal_cancer_history_detail[398]) && isset($esophageal_cancer_history_detail[398]['answer']) && !empty($esophageal_cancer_history_detail[398]['answer'])){

                $que_ans_398 = strtolower($esophageal_cancer_history_detail[398]['answer']);
                if($que_ans_398 == 'yes'){

                    if(isset($esophageal_cancer_history_detail[399]) && isset($esophageal_cancer_history_detail[399]['answer']) && !empty($esophageal_cancer_history_detail[399]['answer']) && is_array($esophageal_cancer_history_detail[399]['answer'])){

                        $temp_treatment = '';

                        foreach ($esophageal_cancer_history_detail[399]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            if($value == 'surgery'){

                                $temp_treatment .= 'surgery, ';
                            }
                            elseif($value == 'chemotherapy'){

                                $temp_treatment .= 'chemotherapy, ';
                            }
                            elseif($value == 'radiation therapy'){

                                $temp_treatment .= 'radiation, ';
                            }
                            elseif($value == 'combination therapy (chemo/radiation)'){

                                $temp_treatment .= 'combo chemo/radiation therapy, ';
                            }

                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                        //$treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_398 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }

        //brain cancer history detail
        if(!empty($cancer_history_detail) && isset($cancer_history_detail['brain cancer']) && !empty($cancer_history_detail['brain cancer']))
        {
            $brain_cancer_history_detail = $cancer_history_detail['brain cancer'];

            $hpi .= "<strong>Brain Cancer: </strong>";
            $temp_initial_symptom = '';

            if(isset($brain_cancer_history_detail[400]) && isset($brain_cancer_history_detail[400]['answer']) && !empty($brain_cancer_history_detail[400]['answer'])){

                $ques_ans_400 = strtolower(is_array($brain_cancer_history_detail[400]['answer']) ? implode(", ", $brain_cancer_history_detail[400]['answer']) : $brain_cancer_history_detail[400]['answer']);
                //$temp_initial_symptom = 'The patient initially noticed '.($ques_ans_400 == 'none of these' ? 'symptoms' : $ques_ans_400);

                if($ques_ans_400 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($brain_cancer_history_detail[400]['answer'] as $key => $value) {

                        $value = strtolower($value);
                        //$temp_initial_symptom .= (isset($initial_symptoms_trans[$value]) ? $initial_symptoms_trans[$value] : $value).", ";

                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value].", ";
                        }
                        else{

                            $temp_initial_symptom .= $value.", ";
                        }
                    }

                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            if(isset($brain_cancer_history_detail[401]) && isset($brain_cancer_history_detail[401]['answer']) && !empty($brain_cancer_history_detail[401]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($brain_cancer_history_detail[401]['answer']), $temp_initial_symptom);
            }

            $hpi .= $temp_initial_symptom;

            if(isset($brain_cancer_history_detail[396]) && isset($brain_cancer_history_detail[396]['answer']) && !empty($brain_cancer_history_detail[396]['answer'])){

                $hpi .= ' approximately '.$brain_cancer_history_detail[396]['answer'].' ago';
            }

            if(!empty($hpi)){

                $hpi .= '. ';
            }

            if(isset($brain_cancer_history_detail[402]) && isset($brain_cancer_history_detail[402]['answer']) && !empty($brain_cancer_history_detail[402]['answer']) && is_array($brain_cancer_history_detail[402]['answer'])){

                $temp_diagnosis = '';
                foreach ($brain_cancer_history_detail[402]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($brain_cancer_history_detail[398]) && isset($brain_cancer_history_detail[398]['answer']) && !empty($brain_cancer_history_detail[398]['answer'])){

                $que_ans_398 = strtolower($brain_cancer_history_detail[398]['answer']);
                if($que_ans_398 == 'yes'){

                    if(isset($brain_cancer_history_detail[404]) && isset($brain_cancer_history_detail[404]['answer']) && !empty($brain_cancer_history_detail[404]['answer']) && is_array($brain_cancer_history_detail[404]['answer'])){

                        $temp_treatment = '';

                        foreach ($brain_cancer_history_detail[404]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            $temp_treatment .= isset($treatment_trans[$value]) ? $treatment_trans[$value].", ": "";
                            //echo $temp_treatment;
                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                        //$treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_398 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }

        //pr($hpi);die;

        //colon cancer history detail
        if(!empty($cancer_history_detail) && isset($cancer_history_detail['colon cancer']) && !empty($cancer_history_detail['colon cancer']))
        {
            $colon_cancer_history_detail = $cancer_history_detail['colon cancer'];

            $hpi .= "<strong>Colon Cancer: </strong>";
            $temp_initial_symptom = '';

            if(isset($colon_cancer_history_detail[414]) && isset($colon_cancer_history_detail[414]['answer']) && !empty($colon_cancer_history_detail[414]['answer'])){

                $ques_ans_414 = strtolower(is_array($colon_cancer_history_detail[414]['answer']) ? implode(", ", $colon_cancer_history_detail[414]['answer']) : $colon_cancer_history_detail[414]['answer']);
                //$temp_initial_symptom = 'The patient initially noticed '.($ques_ans_414 == 'none of these' ? 'symptoms' : $ques_ans_414);

                if($ques_ans_414 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($colon_cancer_history_detail[414]['answer'] as $key => $value) {

                        $value = strtolower($value);
                        //$temp_initial_symptom .= (isset($initial_symptoms_trans[$value]) ? $initial_symptoms_trans[$value] : $value).", ";

                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value].", ";
                        }
                        else{

                            $temp_initial_symptom .= $value.", ";
                        }
                    }

                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            if(isset($colon_cancer_history_detail[415]) && isset($colon_cancer_history_detail[415]['answer']) && !empty($colon_cancer_history_detail[415]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($colon_cancer_history_detail[415]['answer']), $temp_initial_symptom);
            }

            $hpi .= $temp_initial_symptom;

            if(isset($colon_cancer_history_detail[396]) && isset($colon_cancer_history_detail[396]['answer']) && !empty($colon_cancer_history_detail[396]['answer'])){

                $hpi .= ' approximately '.$colon_cancer_history_detail[396]['answer'].' ago';
            }

            if(!empty($hpi)){

                $hpi .= '. ';
            }

            if(isset($colon_cancer_history_detail[416]) && isset($colon_cancer_history_detail[416]['answer']) && !empty($colon_cancer_history_detail[416]['answer']) && is_array($colon_cancer_history_detail[416]['answer'])){

                $temp_diagnosis = '';
                foreach ($colon_cancer_history_detail[416]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($colon_cancer_history_detail[398]) && isset($colon_cancer_history_detail[398]['answer']) && !empty($colon_cancer_history_detail[398]['answer'])){

                $que_ans_398 = strtolower($colon_cancer_history_detail[398]['answer']);
                if($que_ans_398 == 'yes'){

                    if(isset($colon_cancer_history_detail[399]) && isset($colon_cancer_history_detail[399]['answer']) && !empty($colon_cancer_history_detail[399]['answer']) && is_array($colon_cancer_history_detail[399]['answer'])){

                        $temp_treatment = '';

                        foreach ($colon_cancer_history_detail[399]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            $temp_treatment .= isset($treatment_trans[$value]) ? $treatment_trans[$value].", ": "";
                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                       // $treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_398 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }

        //cervical cancer history detail
        if(!empty($cancer_history_detail) && isset($cancer_history_detail['cervical cancer']) && !empty($cancer_history_detail['cervical cancer']))
        {
            $cervical_cancer_history_detail = $cancer_history_detail['cervical cancer'];

            $hpi .= "<strong>Cervical Cancer: </strong>";
            $temp_initial_symptom = '';

            if(isset($cervical_cancer_history_detail[426]) && isset($cervical_cancer_history_detail[426]['answer']) && !empty($cervical_cancer_history_detail[426]['answer'])){

                $ques_ans_426 = strtolower(is_array($cervical_cancer_history_detail[426]['answer']) ? implode(", ", $cervical_cancer_history_detail[426]['answer']) : $cervical_cancer_history_detail[426]['answer']);
                //$temp_initial_symptom = 'The patient initially noticed '.($ques_ans_426 == 'none of these' ? 'symptoms' : $ques_ans_426);

                if($ques_ans_426 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($cervical_cancer_history_detail[426]['answer'] as $key => $value) {

                        $value = strtolower($value);
                        //$temp_initial_symptom .= (isset($initial_symptoms_trans[$value]) ? $initial_symptoms_trans[$value] : $value).", ";

                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value].", ";
                        }
                        else{

                            $temp_initial_symptom .= $value.", ";
                        }
                    }

                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            if(isset($cervical_cancer_history_detail[427]) && isset($cervical_cancer_history_detail[427]['answer']) && !empty($cervical_cancer_history_detail[427]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($cervical_cancer_history_detail[427]['answer']), $temp_initial_symptom);
            }

            $hpi .= $temp_initial_symptom;

            if(isset($cervical_cancer_history_detail[396]) && isset($cervical_cancer_history_detail[396]['answer']) && !empty($cervical_cancer_history_detail[396]['answer'])){

                $hpi .= ' approximately '.$cervical_cancer_history_detail[396]['answer'].' ago';
            }

            if(!empty($hpi)){

                $hpi .= '. ';
            }

            if(isset($cervical_cancer_history_detail[428]) && isset($cervical_cancer_history_detail[428]['answer']) && !empty($cervical_cancer_history_detail[428]['answer']) && is_array($cervical_cancer_history_detail[428]['answer'])){

                $temp_diagnosis = '';
                foreach ($cervical_cancer_history_detail[428]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($cervical_cancer_history_detail[398]) && isset($cervical_cancer_history_detail[398]['answer']) && !empty($cervical_cancer_history_detail[398]['answer'])){

                $que_ans_398 = strtolower($cervical_cancer_history_detail[398]['answer']);
                if($que_ans_398 == 'yes'){

                    if(isset($cervical_cancer_history_detail[399]) && isset($cervical_cancer_history_detail[399]['answer']) && !empty($cervical_cancer_history_detail[399]['answer']) && is_array($cervical_cancer_history_detail[399]['answer'])){

                        $temp_treatment = '';

                        foreach ($cervical_cancer_history_detail[399]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            $temp_treatment .= isset($treatment_trans[$value]) ? $treatment_trans[$value].", ": "";
                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                        //$treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_398 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }

        //stomach cancer history detail
        if(!empty($cancer_history_detail) && isset($cancer_history_detail['stomach cancer']) && !empty($cancer_history_detail['stomach cancer']))
        {
            $stomach_cancer_history_detail = $cancer_history_detail['stomach cancer'];

            $hpi .= "<strong>Stomach Cancer: </strong>";
            $temp_initial_symptom = '';

            if(isset($stomach_cancer_history_detail[408]) && isset($stomach_cancer_history_detail[408]['answer']) && !empty($stomach_cancer_history_detail[408]['answer'])){

                $ques_ans_408 = strtolower(is_array($stomach_cancer_history_detail[408]['answer']) ? implode(", ", $stomach_cancer_history_detail[408]['answer']) : $stomach_cancer_history_detail[408]['answer']);
               // $temp_initial_symptom = 'The patient initially noticed '.($ques_ans_408 == 'none of these' ? 'symptoms' : $ques_ans_408);

                if($ques_ans_408 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($stomach_cancer_history_detail[408]['answer'] as $key => $value) {

                        $value = strtolower($value);
                        //$temp_initial_symptom .= (isset($initial_symptoms_trans[$value]) ? $initial_symptoms_trans[$value] : $value).", ";

                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value].", ";
                        }
                        else{

                            $temp_initial_symptom .= $value.", ";
                        }
                    }

                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            if(isset($stomach_cancer_history_detail[409]) && isset($stomach_cancer_history_detail[409]['answer']) && !empty($stomach_cancer_history_detail[409]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($stomach_cancer_history_detail[409]['answer']), $temp_initial_symptom);
            }

            $hpi .= $temp_initial_symptom;

            if(isset($stomach_cancer_history_detail[396]) && isset($stomach_cancer_history_detail[396]['answer']) && !empty($stomach_cancer_history_detail[396]['answer'])){

                $hpi .= ' approximately '.$stomach_cancer_history_detail[396]['answer'].' ago';
            }

            if(!empty($hpi)){

                $hpi .= '. ';
            }

            if(isset($stomach_cancer_history_detail[410]) && isset($stomach_cancer_history_detail[410]['answer']) && !empty($stomach_cancer_history_detail[410]['answer']) && is_array($stomach_cancer_history_detail[410]['answer'])){

                $temp_diagnosis = '';
                foreach ($stomach_cancer_history_detail[410]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($stomach_cancer_history_detail[398]) && isset($stomach_cancer_history_detail[398]['answer']) && !empty($stomach_cancer_history_detail[398]['answer'])){

                $que_ans_398 = strtolower($stomach_cancer_history_detail[398]['answer']);
                if($que_ans_398 == 'yes'){

                    if(isset($stomach_cancer_history_detail[399]) && isset($stomach_cancer_history_detail[399]['answer']) && !empty($stomach_cancer_history_detail[399]['answer']) && is_array($stomach_cancer_history_detail[399]['answer'])){

                        $temp_treatment = '';

                        foreach ($stomach_cancer_history_detail[399]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            $temp_treatment .= isset($treatment_trans[$value]) ? $treatment_trans[$value].", ": "";
                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                        //$treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_398 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }

        //pr($treatment_hx);die;

         //ovarian cancer history detail
        if(!empty($cancer_history_detail) && isset($cancer_history_detail['ovarian cancer']) && !empty($cancer_history_detail['ovarian cancer']))
        {
            $ovarian_cancer_history_detail = $cancer_history_detail['ovarian cancer'];

            $hpi .= "<strong>Ovarian Cancer: </strong>";
            $temp_initial_symptom = '';

            if(isset($ovarian_cancer_history_detail[429]) && isset($ovarian_cancer_history_detail[429]['answer']) && !empty($ovarian_cancer_history_detail[429]['answer'])){

                $ques_ans_429 = strtolower(is_array($ovarian_cancer_history_detail[429]['answer']) ? implode(", ", $ovarian_cancer_history_detail[429]['answer']) : $ovarian_cancer_history_detail[429]['answer']);
               // $temp_initial_symptom = 'The patient initially noticed '.($ques_ans_429 == 'none of these' ? 'symptoms' : $ques_ans_429);

                if($ques_ans_429 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($ovarian_cancer_history_detail[429]['answer'] as $key => $value) {

                        $value = strtolower($value);
                        //$temp_initial_symptom .= (isset($initial_symptoms_trans[$value]) ? $initial_symptoms_trans[$value] : $value).", ";

                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value].", ";
                        }
                        else{

                            $temp_initial_symptom .= $value.", ";
                        }
                    }

                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            if(isset($ovarian_cancer_history_detail[430]) && isset($ovarian_cancer_history_detail[430]['answer']) && !empty($ovarian_cancer_history_detail[430]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($ovarian_cancer_history_detail[430]['answer']), $temp_initial_symptom);
            }

            $hpi .= $temp_initial_symptom;

            if(isset($ovarian_cancer_history_detail[396]) && isset($ovarian_cancer_history_detail[396]['answer']) && !empty($ovarian_cancer_history_detail[396]['answer'])){

                $hpi .= ' approximately '.$ovarian_cancer_history_detail[396]['answer'].' ago';
            }

            if(!empty($hpi)){

                $hpi .= '. ';
            }

            if(isset($ovarian_cancer_history_detail[431]) && isset($ovarian_cancer_history_detail[431]['answer']) && !empty($ovarian_cancer_history_detail[431]['answer']) && is_array($ovarian_cancer_history_detail[431]['answer'])){

                $temp_diagnosis = '';
                foreach ($ovarian_cancer_history_detail[431]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($ovarian_cancer_history_detail[398]) && isset($ovarian_cancer_history_detail[398]['answer']) && !empty($ovarian_cancer_history_detail[398]['answer'])){

                $que_ans_398 = strtolower($ovarian_cancer_history_detail[398]['answer']);
                if($que_ans_398 == 'yes'){

                    if(isset($ovarian_cancer_history_detail[432]) && isset($ovarian_cancer_history_detail[432]['answer']) && !empty($ovarian_cancer_history_detail[432]['answer']) && is_array($ovarian_cancer_history_detail[432]['answer'])){

                        $temp_treatment = '';

                        foreach ($ovarian_cancer_history_detail[432]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            $temp_treatment .= isset($treatment_trans[$value]) ? $treatment_trans[$value].", ": "";
                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            //$treatment_hx = 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                        //$treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_398 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }

        //prostate cancer history detail
        if(!empty($cancer_history_detail) && isset($cancer_history_detail['prostate cancer']) && !empty($cancer_history_detail['prostate cancer']))
        {
            $prostate_cancer_history_detail = $cancer_history_detail['prostate cancer'];

            $hpi .= "<strong>Prostate Cancer: </strong>";
            $temp_initial_symptom = '';

            if(isset($prostate_cancer_history_detail[417]) && isset($prostate_cancer_history_detail[417]['answer']) && !empty($prostate_cancer_history_detail[417]['answer'])){

                $ques_ans_417 = strtolower(is_array($prostate_cancer_history_detail[417]['answer']) ? implode(", ", $prostate_cancer_history_detail[417]['answer']) : $prostate_cancer_history_detail[417]['answer']);
                //$temp_initial_symptom = 'The patient initially noticed '.($ques_ans_417 == 'none of these' ? 'symptoms' : $ques_ans_417);

                if($ques_ans_417 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($prostate_cancer_history_detail[417]['answer'] as $key => $value) {

                        $value = strtolower($value);
                       // $temp_initial_symptom .= (isset($initial_symptoms_trans[$value]) ? $initial_symptoms_trans[$value] : $value).", ";

                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value].", ";
                        }
                        else{

                            $temp_initial_symptom .= $value.", ";
                        }
                    }

                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            if(isset($prostate_cancer_history_detail[418]) && isset($prostate_cancer_history_detail[418]['answer']) && !empty($prostate_cancer_history_detail[418]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($prostate_cancer_history_detail[418]['answer']), $temp_initial_symptom);
            }

            $hpi .= $temp_initial_symptom;

            if(isset($prostate_cancer_history_detail[396]) && isset($prostate_cancer_history_detail[396]['answer']) && !empty($prostate_cancer_history_detail[396]['answer'])){

                $hpi .= ' approximately '.$prostate_cancer_history_detail[396]['answer'].' ago';
            }

            if(!empty($hpi)){

                $hpi .= '. ';
            }

            if(isset($prostate_cancer_history_detail[419]) && isset($prostate_cancer_history_detail[419]['answer']) && !empty($prostate_cancer_history_detail[419]['answer']) && is_array($prostate_cancer_history_detail[419]['answer'])){

                $temp_diagnosis = '';
                foreach ($prostate_cancer_history_detail[419]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($prostate_cancer_history_detail[398]) && isset($prostate_cancer_history_detail[398]['answer']) && !empty($prostate_cancer_history_detail[398]['answer'])){

                $que_ans_398 = strtolower($prostate_cancer_history_detail[398]['answer']);
                if($que_ans_398 == 'yes'){

                    if(isset($prostate_cancer_history_detail[399]) && isset($prostate_cancer_history_detail[399]['answer']) && !empty($prostate_cancer_history_detail[399]['answer']) && is_array($prostate_cancer_history_detail[399]['answer'])){

                        $temp_treatment = '';

                        foreach ($prostate_cancer_history_detail[399]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            $temp_treatment .= isset($treatment_trans[$value]) ? $treatment_trans[$value].", ": "";
                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            //$treatment_hx = 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                        //$treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_398 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }

        //lung cancer history detail
        if(!empty($cancer_history_detail) && isset($cancer_history_detail['lung cancer']) && !empty($cancer_history_detail['lung cancer']))
        {
            $lung_cancer_history_detail = $cancer_history_detail['lung cancer'];

            $hpi .= "<strong>Lung Cancer: </strong>";
            $temp_initial_symptom = '';

            if(isset($lung_cancer_history_detail[405]) && isset($lung_cancer_history_detail[405]['answer']) && !empty($lung_cancer_history_detail[405]['answer'])){

                $ques_ans_405 = strtolower(is_array($lung_cancer_history_detail[405]['answer']) ? implode(", ", $lung_cancer_history_detail[405]['answer']) : $lung_cancer_history_detail[405]['answer']);
                //$temp_initial_symptom = 'The patient initially noticed '.($ques_ans_405 == 'none of these' ? 'symptoms' : $ques_ans_405);

                if($ques_ans_405 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($lung_cancer_history_detail[405]['answer'] as $key => $value) {

                        $value = strtolower($value);
                        //$temp_initial_symptom .= (isset($initial_symptoms_trans[$value]) ? $initial_symptoms_trans[$value] : $value).", ";

                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value].", ";
                        }
                        else{

                            $temp_initial_symptom .= $value.", ";
                        }
                    }

                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            if(isset($lung_cancer_history_detail[406]) && isset($lung_cancer_history_detail[406]['answer']) && !empty($lung_cancer_history_detail[406]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($lung_cancer_history_detail[406]['answer']), $temp_initial_symptom);
            }

            $hpi .= $temp_initial_symptom;

            if(isset($lung_cancer_history_detail[396]) && isset($lung_cancer_history_detail[396]['answer']) && !empty($lung_cancer_history_detail[396]['answer'])){

                $hpi .= ' approximately '.$lung_cancer_history_detail[396]['answer'].' ago';
            }

            if(!empty($hpi)){

                $hpi .= '. ';
            }

            if(isset($lung_cancer_history_detail[407]) && isset($lung_cancer_history_detail[407]['answer']) && !empty($lung_cancer_history_detail[407]['answer']) && is_array($lung_cancer_history_detail[407]['answer'])){

                $temp_diagnosis = '';
                foreach ($lung_cancer_history_detail[407]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($lung_cancer_history_detail[398]) && isset($lung_cancer_history_detail[398]['answer']) && !empty($lung_cancer_history_detail[398]['answer'])){

                $que_ans_398 = strtolower($lung_cancer_history_detail[398]['answer']);
                if($que_ans_398 == 'yes'){

                    if(isset($lung_cancer_history_detail[399]) && isset($lung_cancer_history_detail[399]['answer']) && !empty($lung_cancer_history_detail[399]['answer']) && is_array($lung_cancer_history_detail[399]['answer'])){

                        $temp_treatment = '';

                        foreach ($lung_cancer_history_detail[399]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            $temp_treatment .= isset($treatment_trans[$value]) ? $treatment_trans[$value].", ": "";
                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            //$treatment_hx = 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                        //$treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_398 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }

        //liver cancer history detail
        if(!empty($cancer_history_detail) && isset($cancer_history_detail['liver cancer']) && !empty($cancer_history_detail['liver cancer']))
        {
            $liver_cancer_history_detail = $cancer_history_detail['liver cancer'];

            $hpi .= "<strong>Liver Cancer: </strong>";
            $temp_initial_symptom = '';

            if(isset($liver_cancer_history_detail[449]) && isset($liver_cancer_history_detail[449]['answer']) && !empty($liver_cancer_history_detail[449]['answer'])){

                $ques_ans_449 = strtolower(is_array($liver_cancer_history_detail[449]['answer']) ? implode(", ", $liver_cancer_history_detail[449]['answer']) : $liver_cancer_history_detail[449]['answer']);
                //$temp_initial_symptom = 'The patient initially noticed '.($ques_ans_449 == 'none of these' ? 'symptoms' : $ques_ans_449);

                if($ques_ans_449 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($liver_cancer_history_detail[449]['answer'] as $key => $value) {

                        $value = strtolower($value);
                        //$temp_initial_symptom .= (isset($initial_symptoms_trans[$value]) ? $initial_symptoms_trans[$value] : $value).", ";

                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value].", ";
                        }
                        else{

                            $temp_initial_symptom .= $value.", ";
                        }
                    }

                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            if(isset($liver_cancer_history_detail[450]) && isset($liver_cancer_history_detail[450]['answer']) && !empty($liver_cancer_history_detail[450]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($liver_cancer_history_detail[450]['answer']), $temp_initial_symptom);
            }

            $hpi .= $temp_initial_symptom;

            if(isset($liver_cancer_history_detail[396]) && isset($liver_cancer_history_detail[396]['answer']) && !empty($liver_cancer_history_detail[396]['answer'])){

                $hpi .= ' approximately '.$liver_cancer_history_detail[396]['answer'].' ago';
            }

            if(!empty($hpi)){

                $hpi .= '. ';
            }

            if(isset($liver_cancer_history_detail[451]) && isset($liver_cancer_history_detail[451]['answer']) && !empty($liver_cancer_history_detail[451]['answer']) && is_array($liver_cancer_history_detail[451]['answer'])){

                $temp_diagnosis = '';
                foreach ($liver_cancer_history_detail[451]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($liver_cancer_history_detail[398]) && isset($liver_cancer_history_detail[398]['answer']) && !empty($liver_cancer_history_detail[398]['answer'])){

                $que_ans_398 = strtolower($liver_cancer_history_detail[398]['answer']);
                if($que_ans_398 == 'yes'){

                    if(isset($liver_cancer_history_detail[452]) && isset($liver_cancer_history_detail[452]['answer']) && !empty($liver_cancer_history_detail[452]['answer']) && is_array($liver_cancer_history_detail[452]['answer'])){

                        $temp_treatment = '';

                        foreach ($liver_cancer_history_detail[452]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            $temp_treatment .= isset($treatment_trans[$value]) ? $treatment_trans[$value].", ": "";
                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            //$treatment_hx = 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                        //$treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_398 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }

        //thyroid cancer history detail
        if(!empty($cancer_history_detail) && isset($cancer_history_detail['thyroid cancer']) && !empty($cancer_history_detail['thyroid cancer']))
        {
            $thyroid_cancer_history_detail = $cancer_history_detail['thyroid cancer'];

            $hpi .= "<strong>Thyroid Cancer: </strong>";
            $temp_initial_symptom = '';

            if(isset($thyroid_cancer_history_detail[453]) && isset($thyroid_cancer_history_detail[453]['answer']) && !empty($thyroid_cancer_history_detail[453]['answer'])){

                $ques_ans_453 = strtolower(is_array($thyroid_cancer_history_detail[453]['answer']) ? implode(", ", $thyroid_cancer_history_detail[453]['answer']) : $thyroid_cancer_history_detail[453]['answer']);
                //$temp_initial_symptom = 'The patient initially noticed '.($ques_ans_453 == 'none of these' ? 'symptoms' : $ques_ans_453);

                if($ques_ans_453 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($thyroid_cancer_history_detail[453]['answer'] as $key => $value) {

                        $value = strtolower($value);
                        //$temp_initial_symptom .= (isset($initial_symptoms_trans[$value]) ? $initial_symptoms_trans[$value] : $value).", ";

                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value].", ";
                        }
                        else{

                            $temp_initial_symptom .= $value.", ";
                        }
                    }

                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            if(isset($thyroid_cancer_history_detail[454]) && isset($thyroid_cancer_history_detail[454]['answer']) && !empty($thyroid_cancer_history_detail[454]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($thyroid_cancer_history_detail[454]['answer']), $temp_initial_symptom);
            }

            $hpi .= $temp_initial_symptom;

            if(isset($thyroid_cancer_history_detail[396]) && isset($thyroid_cancer_history_detail[396]['answer']) && !empty($thyroid_cancer_history_detail[396]['answer'])){

                $hpi .= ' approximately '.$thyroid_cancer_history_detail[396]['answer'].' ago';
            }

            if(!empty($hpi)){

                $hpi .= '. ';
            }

            if(isset($thyroid_cancer_history_detail[455]) && isset($thyroid_cancer_history_detail[455]['answer']) && !empty($thyroid_cancer_history_detail[455]['answer']) && is_array($thyroid_cancer_history_detail[455]['answer'])){

                $temp_diagnosis = '';
                foreach ($thyroid_cancer_history_detail[455]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($thyroid_cancer_history_detail[398]) && isset($thyroid_cancer_history_detail[398]['answer']) && !empty($thyroid_cancer_history_detail[398]['answer'])){

                $que_ans_398 = strtolower($thyroid_cancer_history_detail[398]['answer']);
                if($que_ans_398 == 'yes'){

                    if(isset($thyroid_cancer_history_detail[399]) && isset($thyroid_cancer_history_detail[399]['answer']) && !empty($thyroid_cancer_history_detail[399]['answer']) && is_array($thyroid_cancer_history_detail[399]['answer'])){

                        $temp_treatment = '';

                        foreach ($thyroid_cancer_history_detail[399]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            $temp_treatment .= isset($treatment_trans[$value]) ? $treatment_trans[$value].", ": "";
                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            //$treatment_hx = 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                        //$treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_398 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }

        //kidney cancer history detail
        if(!empty($cancer_history_detail) && isset($cancer_history_detail['kidney cancer']) && !empty($cancer_history_detail['kidney cancer']))
        {
            $kidney_cancer_history_detail = $cancer_history_detail['kidney cancer'];

            $hpi .= "<strong>Kidney Cancer: </strong>";
            $temp_initial_symptom = '';

            if(isset($kidney_cancer_history_detail[411]) && isset($kidney_cancer_history_detail[411]['answer']) && !empty($kidney_cancer_history_detail[411]['answer'])){

                $ques_ans_411 = strtolower(is_array($kidney_cancer_history_detail[411]['answer']) ? implode(", ", $kidney_cancer_history_detail[411]['answer']) : $kidney_cancer_history_detail[411]['answer']);
                //$temp_initial_symptom = 'The patient initially noticed '.($ques_ans_411 == 'none of these' ? 'symptoms' : $ques_ans_411);

                if($ques_ans_411 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($kidney_cancer_history_detail[411]['answer'] as $key => $value) {

                        $value = strtolower($value);
                        //$temp_initial_symptom .= (isset($initial_symptoms_trans[$value]) ? $initial_symptoms_trans[$value] : $value).", ";

                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value].", ";
                        }
                        else{

                            $temp_initial_symptom .= $value.", ";
                        }
                    }

                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            if(isset($kidney_cancer_history_detail[412]) && isset($kidney_cancer_history_detail[412]['answer']) && !empty($kidney_cancer_history_detail[412]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($kidney_cancer_history_detail[412]['answer']), $temp_initial_symptom);
            }

            $hpi .= $temp_initial_symptom;

            if(isset($kidney_cancer_history_detail[396]) && isset($kidney_cancer_history_detail[396]['answer']) && !empty($kidney_cancer_history_detail[396]['answer'])){

                $hpi .= ' approximately '.$kidney_cancer_history_detail[396]['answer'].' ago';
            }

            if(!empty($hpi)){

                $hpi .= '. ';
            }

            if(isset($kidney_cancer_history_detail[413]) && isset($kidney_cancer_history_detail[413]['answer']) && !empty($kidney_cancer_history_detail[413]['answer']) && is_array($kidney_cancer_history_detail[413]['answer'])){

                $temp_diagnosis = '';
                foreach ($kidney_cancer_history_detail[413]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($kidney_cancer_history_detail[398]) && isset($kidney_cancer_history_detail[398]['answer']) && !empty($kidney_cancer_history_detail[398]['answer'])){

                $que_ans_398 = strtolower($kidney_cancer_history_detail[398]['answer']);
                if($que_ans_398 == 'yes'){

                    if(isset($kidney_cancer_history_detail[399]) && isset($kidney_cancer_history_detail[399]['answer']) && !empty($kidney_cancer_history_detail[399]['answer']) && is_array($kidney_cancer_history_detail[399]['answer'])){

                        $temp_treatment = '';

                        foreach ($kidney_cancer_history_detail[399]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            $temp_treatment .= isset($treatment_trans[$value]) ? $treatment_trans[$value].", ": "";
                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            //$treatment_hx = 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                        //$treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_398 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }

        //uterine cancer history detail
        if(!empty($cancer_history_detail) && isset($cancer_history_detail['uterine cancer']) && !empty($cancer_history_detail['uterine cancer']))
        {
            $uterine_cancer_history_detail = $cancer_history_detail['uterine cancer'];

            $hpi .= "<strong>Uterine Cancer: </strong>";
            $temp_initial_symptom = '';

            if(isset($uterine_cancer_history_detail[420]) && isset($uterine_cancer_history_detail[420]['answer']) && !empty($uterine_cancer_history_detail[420]['answer'])){

                $ques_ans_420 = strtolower(is_array($uterine_cancer_history_detail[420]['answer']) ? implode(", ", $uterine_cancer_history_detail[420]['answer']) : $uterine_cancer_history_detail[420]['answer']);
                //$temp_initial_symptom = 'The patient initially noticed '.($ques_ans_420 == 'none of these' ? 'symptoms' : $ques_ans_420);

                if($ques_ans_420 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($uterine_cancer_history_detail[420]['answer'] as $key => $value) {

                        $value = strtolower($value);
                        //$temp_initial_symptom .= (isset($initial_symptoms_trans[$value]) ? $initial_symptoms_trans[$value] : $value).", ";

                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value].", ";

                        }
                        else{

                            $temp_initial_symptom .= $value.", ";
                        }
                    }

                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            if(isset($uterine_cancer_history_detail[421]) && isset($uterine_cancer_history_detail[421]['answer']) && !empty($uterine_cancer_history_detail[421]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($uterine_cancer_history_detail[421]['answer']), $temp_initial_symptom);
            }

            $hpi .= $temp_initial_symptom;

            if(isset($uterine_cancer_history_detail[396]) && isset($uterine_cancer_history_detail[396]['answer']) && !empty($uterine_cancer_history_detail[396]['answer'])){

                $hpi .= ' approximately '.$uterine_cancer_history_detail[396]['answer'].' ago';
            }

            if(!empty($hpi)){

                $hpi .= '. ';
            }

            if(isset($uterine_cancer_history_detail[422]) && isset($uterine_cancer_history_detail[422]['answer']) && !empty($uterine_cancer_history_detail[422]['answer']) && is_array($uterine_cancer_history_detail[422]['answer'])){

                $temp_diagnosis = '';
                foreach ($uterine_cancer_history_detail[422]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($uterine_cancer_history_detail[398]) && isset($uterine_cancer_history_detail[398]['answer']) && !empty($uterine_cancer_history_detail[398]['answer'])){

                $que_ans_398 = strtolower($uterine_cancer_history_detail[398]['answer']);
                if($que_ans_398 == 'yes'){

                    if(isset($uterine_cancer_history_detail[399]) && isset($uterine_cancer_history_detail[399]['answer']) && !empty($uterine_cancer_history_detail[399]['answer']) && is_array($uterine_cancer_history_detail[399]['answer'])){

                        $temp_treatment = '';

                        foreach ($uterine_cancer_history_detail[399]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            $temp_treatment .= isset($treatment_trans[$value]) ? $treatment_trans[$value].", ": "";
                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            //$treatment_hx = 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                        //$treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_398 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }

        //vaginal cancer history detail
        if(!empty($cancer_history_detail) && isset($cancer_history_detail['vaginal cancer']) && !empty($cancer_history_detail['vaginal cancer']))
        {
            $vaginal_cancer_history_detail = $cancer_history_detail['vaginal cancer'];

            $hpi .= "<strong>Vaginal Cancer: </strong>";
            $temp_initial_symptom = '';

            if(isset($vaginal_cancer_history_detail[445]) && isset($vaginal_cancer_history_detail[445]['answer']) && !empty($vaginal_cancer_history_detail[445]['answer'])){

                $ques_ans_445 = strtolower(is_array($vaginal_cancer_history_detail[445]['answer']) ? implode(", ", $vaginal_cancer_history_detail[445]['answer']) : $vaginal_cancer_history_detail[445]['answer']);
                //$temp_initial_symptom = 'The patient initially noticed '.($ques_ans_445 == 'none of these' ? 'symptoms' : $ques_ans_445);

                if($ques_ans_445 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($vaginal_cancer_history_detail[445]['answer'] as $key => $value) {

                        $value = strtolower($value);
                        //$temp_initial_symptom .= (isset($initial_symptoms_trans[$value]) ? $initial_symptoms_trans[$value] : $value).", ";

                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value].", ";
                        }
                        else{

                            $temp_initial_symptom .= $value.", ";
                        }
                    }

                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            if(isset($vaginal_cancer_history_detail[446]) && isset($vaginal_cancer_history_detail[446]['answer']) && !empty($vaginal_cancer_history_detail[446]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($vaginal_cancer_history_detail[446]['answer']), $temp_initial_symptom);
            }

            $hpi .= $temp_initial_symptom;

            if(isset($vaginal_cancer_history_detail[396]) && isset($vaginal_cancer_history_detail[396]['answer']) && !empty($vaginal_cancer_history_detail[396]['answer'])){

                $hpi .= ' approximately '.$vaginal_cancer_history_detail[396]['answer'].' ago';
            }

            if(!empty($hpi)){

                $hpi .= '. ';
            }

            if(isset($vaginal_cancer_history_detail[447]) && isset($vaginal_cancer_history_detail[447]['answer']) && !empty($vaginal_cancer_history_detail[447]['answer']) && is_array($vaginal_cancer_history_detail[447]['answer'])){

                $temp_diagnosis = '';
                foreach ($vaginal_cancer_history_detail[447]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($vaginal_cancer_history_detail[398]) && isset($vaginal_cancer_history_detail[398]['answer']) && !empty($vaginal_cancer_history_detail[398]['answer'])){

                $que_ans_398 = strtolower($vaginal_cancer_history_detail[398]['answer']);
                if($que_ans_398 == 'yes'){

                    if(isset($vaginal_cancer_history_detail[448]) && isset($vaginal_cancer_history_detail[448]['answer']) && !empty($vaginal_cancer_history_detail[448]['answer']) && is_array($vaginal_cancer_history_detail[448]['answer'])){

                        $temp_treatment = '';

                        foreach ($vaginal_cancer_history_detail[448]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            $temp_treatment .= isset($treatment_trans[$value]) ? $treatment_trans[$value].", ": "";
                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            //$treatment_hx = 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                        //$treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_398 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }

        //vulvar cancer history detail
        if(!empty($cancer_history_detail) && isset($cancer_history_detail['vulvar cancer']) && !empty($cancer_history_detail['vulvar cancer']))
        {
            $vulvar_cancer_history_detail = $cancer_history_detail['vulvar cancer'];

            $hpi .= "<strong>Vulvar Cancer: </strong>";
            $temp_initial_symptom = '';

            if(isset($vulvar_cancer_history_detail[423]) && isset($vulvar_cancer_history_detail[423]['answer']) && !empty($vulvar_cancer_history_detail[423]['answer'])){

                $ques_ans_423 = strtolower(is_array($vulvar_cancer_history_detail[423]['answer']) ? implode(", ", $vulvar_cancer_history_detail[423]['answer']) : $vulvar_cancer_history_detail[423]['answer']);
                //$temp_initial_symptom = 'The patient initially noticed '.($ques_ans_423 == 'none of these' ? 'symptoms' : $ques_ans_423);

                if($ques_ans_423 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($vulvar_cancer_history_detail[423]['answer'] as $key => $value) {

                        $value = strtolower($value);
                        //$temp_initial_symptom .= (isset($initial_symptoms_trans[$value]) ? $initial_symptoms_trans[$value] : $value).", ";

                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value].", ";
                        }
                        else{

                            $temp_initial_symptom .= $value.", ";
                        }
                    }

                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            if(isset($vulvar_cancer_history_detail[424]) && isset($vulvar_cancer_history_detail[424]['answer']) && !empty($vulvar_cancer_history_detail[424]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($vulvar_cancer_history_detail[424]['answer']), $temp_initial_symptom);
            }

            $hpi .= $temp_initial_symptom;

            if(isset($vulvar_cancer_history_detail[396]) && isset($vulvar_cancer_history_detail[396]['answer']) && !empty($vulvar_cancer_history_detail[396]['answer'])){

                $hpi .= ' approximately '.$vulvar_cancer_history_detail[396]['answer'].' ago';
            }

            if(!empty($hpi)){

                $hpi .= '. ';
            }

            if(isset($vulvar_cancer_history_detail[425]) && isset($vulvar_cancer_history_detail[425]['answer']) && !empty($vulvar_cancer_history_detail[425]['answer']) && is_array($vulvar_cancer_history_detail[425]['answer'])){

                $temp_diagnosis = '';
                foreach ($vulvar_cancer_history_detail[425]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($vulvar_cancer_history_detail[398]) && isset($vulvar_cancer_history_detail[398]['answer']) && !empty($vulvar_cancer_history_detail[398]['answer'])){

                $que_ans_398 = strtolower($vulvar_cancer_history_detail[398]['answer']);
                if($que_ans_398 == 'yes'){

                    if(isset($vulvar_cancer_history_detail[399]) && isset($vulvar_cancer_history_detail[399]['answer']) && !empty($vulvar_cancer_history_detail[399]['answer']) && is_array($vulvar_cancer_history_detail[399]['answer'])){

                        $temp_treatment = '';

                        foreach ($vulvar_cancer_history_detail[399]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            $temp_treatment .= isset($treatment_trans[$value]) ? $treatment_trans[$value].", ": "";
                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            //$treatment_hx = 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                        //$treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_398 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }

        //leukemia cancer history detail
        if(!empty($cancer_history_detail) && isset($cancer_history_detail['leukemia']) && !empty($cancer_history_detail['leukemia']))
        {
            $leukemia_history_detail = $cancer_history_detail['leukemia'];

            $hpi .= "<strong>Leukemia: </strong>";
            $temp_initial_symptom = '';

            if(isset($leukemia_history_detail[440]) && isset($leukemia_history_detail[440]['answer']) && !empty($leukemia_history_detail[440]['answer'])){

                $ques_ans_440 = strtolower(is_array($leukemia_history_detail[440]['answer']) ? implode(", ", $leukemia_history_detail[440]['answer']) : $leukemia_history_detail[440]['answer']);
               // $temp_initial_symptom = 'The patient initially noticed '.($ques_ans_440 == 'none of these' ? 'symptoms' : $ques_ans_440);

                if($ques_ans_440 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($leukemia_history_detail[440]['answer'] as $key => $value) {

                        $value = strtolower($value);
                        //$temp_initial_symptom .= (isset($initial_symptoms_trans[$value]) ? $initial_symptoms_trans[$value] : $value).", ";

                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value].", ";
                        }
                        else{

                            $temp_initial_symptom .= $value.", ";
                        }
                    }

                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            if(isset($leukemia_history_detail[442]) && isset($leukemia_history_detail[442]['answer']) && !empty($leukemia_history_detail[442]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($leukemia_history_detail[442]['answer']), $temp_initial_symptom);
            }

            $hpi .= $temp_initial_symptom;

            if(isset($leukemia_history_detail[396]) && isset($leukemia_history_detail[396]['answer']) && !empty($leukemia_history_detail[396]['answer'])){

                $hpi .= ' approximately '.$leukemia_history_detail[396]['answer'].' ago';
            }

            if(!empty($hpi)){

                $hpi .= '. ';
            }

            if(isset($leukemia_history_detail[441]) && isset($leukemia_history_detail[441]['answer']) && !empty($leukemia_history_detail[441]['answer'])){

                $temp_str_102 = $this->CcDetail->cheif_complaint_question_102($leukemia_history_detail[441]['answer'],$gender);
                if(!empty($temp_str_102)){
                    $hpi .=  "Patient localizes the abdominal pain to the ".$temp_str_102.". ";
                }
            }

            if(isset($leukemia_history_detail[443]) && isset($leukemia_history_detail[443]['answer']) && !empty($leukemia_history_detail[443]['answer']) && is_array($leukemia_history_detail[443]['answer'])){

                $temp_diagnosis = '';
                foreach ($leukemia_history_detail[443]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($leukemia_history_detail[398]) && isset($leukemia_history_detail[398]['answer']) && !empty($leukemia_history_detail[398]['answer'])){

                $que_ans_398 = strtolower($leukemia_history_detail[398]['answer']);
                if($que_ans_398 == 'yes'){

                    if(isset($leukemia_history_detail[444]) && isset($leukemia_history_detail[444]['answer']) && !empty($leukemia_history_detail[444]['answer']) && is_array($leukemia_history_detail[444]['answer'])){

                        $temp_treatment = '';

                        foreach ($leukemia_history_detail[444]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            $temp_treatment .= isset($treatment_trans[$value]) ? $treatment_trans[$value].", ": "";
                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            //$treatment_hx = 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                        //$treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_398 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }


        //pancreatic cancer history detail
        if(!empty($cancer_history_detail) && isset($cancer_history_detail['pancreatic cancer']) && !empty($cancer_history_detail['pancreatic cancer']))
        {
            $pancreatic_cancer_history_detail = $cancer_history_detail['pancreatic cancer'];

            $hpi .= "<strong>Pancreatic cancer: </strong>";
            $temp_initial_symptom = '';

            if(isset($pancreatic_cancer_history_detail[433]) && isset($pancreatic_cancer_history_detail[433]['answer']) && !empty($pancreatic_cancer_history_detail[433]['answer'])){

                $ques_ans_433 = strtolower(is_array($pancreatic_cancer_history_detail[433]['answer']) ? implode(", ", $pancreatic_cancer_history_detail[433]['answer']) : $pancreatic_cancer_history_detail[433]['answer']);
               //$temp_initial_symptom = 'The patient initially noticed '.($ques_ans_433 == 'none of these' ? 'symptoms' : $ques_ans_433);

                if($ques_ans_433 == 'none of these'){

                    $temp_initial_symptom = 'The patient initially noticed symptoms';
                }
                else{

                    foreach ($pancreatic_cancer_history_detail[433]['answer'] as $key => $value) {

                        $value = strtolower($value);
                        //$temp_initial_symptom .= (isset($initial_symptoms_trans[$value]) ? $initial_symptoms_trans[$value] : $value).", ";

                        if(isset($initial_symptoms_trans[$value])){

                            $health_question_arr[] = $initial_symptoms_trans[$value];
                            $temp_initial_symptom .= $initial_symptoms_trans[$value].", ";
                        }
                        else{

                            $temp_initial_symptom .= $value.", ";
                        }
                    }

                    $temp_initial_symptom = 'The patient initially noticed '.rtrim($temp_initial_symptom,', ');
                }
            }

            if(isset($pancreatic_cancer_history_detail[437]) && isset($pancreatic_cancer_history_detail[437]['answer']) && !empty($pancreatic_cancer_history_detail[437]['answer'])){

                $temp_initial_symptom = str_replace('other', strtolower($pancreatic_cancer_history_detail[437]['answer']), $temp_initial_symptom);
            }

            $hpi .= $temp_initial_symptom;

            if(isset($pancreatic_cancer_history_detail[396]) && isset($pancreatic_cancer_history_detail[396]['answer']) && !empty($leukemia_history_detail[396]['answer'])){

                $hpi .= ' approximately '.$pancreatic_cancer_history_detail[396]['answer'].' ago';
            }

            if(!empty($hpi)){

                $hpi .= '. ';
            }

            if(isset($pancreatic_cancer_history_detail[434]) && isset($pancreatic_cancer_history_detail[434]['answer']) && !empty($pancreatic_cancer_history_detail[434]['answer'])){

                $temp_str_102 = $this->CcDetail->cheif_complaint_question_102($pancreatic_cancer_history_detail[434]['answer'],$gender);
                if(!empty($temp_str_102)){
                    $hpi .=  "Patient localizes the abdominal pain to the ".$temp_str_102.". ";
                }
            }


            if(isset($pancreatic_cancer_history_detail[435]) && isset($pancreatic_cancer_history_detail[435]['answer']) && !empty($pancreatic_cancer_history_detail[435]['answer'])){

                $hpi .=  "Abdominal pain radiation is ".strtolower($pancreatic_cancer_history_detail[435]['answer']).". ";
            }

            if(isset($pancreatic_cancer_history_detail[436]) && isset($pancreatic_cancer_history_detail[436]['answer']) && !empty($pancreatic_cancer_history_detail[436]['answer'])){

                $hpi .=  "Back pain radiation is ".strtolower($pancreatic_cancer_history_detail[436]['answer']).". ";
            }

            if(isset($pancreatic_cancer_history_detail[438]) && isset($pancreatic_cancer_history_detail[438]['answer']) && !empty($pancreatic_cancer_history_detail[438]['answer']) && is_array($pancreatic_cancer_history_detail[438]['answer'])){

                $temp_diagnosis = '';
                foreach ($pancreatic_cancer_history_detail[438]['answer'] as $key => $value) {

                    $value = strtolower($value);
                    $temp_diagnosis .= isset($diagnostic_procedure_trans[$value]) ? $diagnostic_procedure_trans[$value].", " : "";
                }

                $temp_diagnosis = rtrim($temp_diagnosis,", ");

                if(!empty($temp_diagnosis)){

                    $hpi .= "Diagnosis was confirmed by ".rtrim($temp_diagnosis,', ').". ";
                }
            }

            if(isset($pancreatic_cancer_history_detail[398]) && isset($pancreatic_cancer_history_detail[398]['answer']) && !empty($pancreatic_cancer_history_detail[398]['answer'])){

                $que_ans_398 = strtolower($pancreatic_cancer_history_detail[398]['answer']);
                if($que_ans_398 == 'yes'){

                    if(isset($pancreatic_cancer_history_detail[439]) && isset($pancreatic_cancer_history_detail[439]['answer']) && !empty($pancreatic_cancer_history_detail[439]['answer']) && is_array($pancreatic_cancer_history_detail[439]['answer'])){

                        $temp_treatment = '';

                        foreach ($pancreatic_cancer_history_detail[439]['answer'] as $key => $value) {

                            $value = strtolower($value);
                            $temp_treatment .= isset($treatment_trans[$value]) ? $treatment_trans[$value].", ": "";
                        }

                        if(!empty($temp_treatment)){

                            $hpi .= 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            //$treatment_hx = 'Patient has undergone initial treatment with '.rtrim($temp_treatment,', ');
                            $treatment_hx .= $temp_treatment;
                        }

                    }
                    else{

                        $hpi .= 'Patient has undergone with initial treatments';
                        //$treatment_hx = 'Patient has undergone with initial treatments';
                    }
                }
                if($que_ans_398 == 'no'){

                    $hpi .= "Denies initiating primary treatments";
                    //$treatment_hx = "Denies initatiating primary treatments";
                }
                $hpi .= '. ';
                //$treatment_hx .= '. ';
            }

            $hpi .= "\n";
        }
    }

    if(!empty($hpi)){

        $hpi = "\n".$hpi."\n";
    }

    if(!empty($treatment_hx)){

        $treatment_hx = rtrim($treatment_hx);
        $temp_treatment_tx = explode(", ", rtrim($treatment_hx));
        if(is_array($temp_treatment_tx)){

           $temp_treatment_tx = array_unique($temp_treatment_tx);
           $treatment_hx = implode(", ", $temp_treatment_tx);
        }

        $treatment_hx = 'Patient has undergone initial treatment with '.rtrim($treatment_hx,', ').".";
    }
    else{

       $treatment_hx = "Denies initiating primary treatments.";
    }

    if(!empty($health_question_arr)){

        foreach ($health_question_arr as $key => $technical_name) {

            //check in which group this symptom belogs and manage health questionnaire
            if(!empty($technical_name) && in_array($technical_name, $neuro_arr)){

                $qa_neuro[] = $technical_name;
            }

            if(!empty($technical_name) && in_array($technical_name, $gi_arr)){

                $qa_gi[] = $technical_name;
            }

            if(!empty($technical_name) && in_array($technical_name, $eye_arr)){

                $qa_eye[] = $technical_name;
            }

            if(!empty($technical_name) && in_array($technical_name, $psych_arr)){

                $qa_psych[] = $technical_name;
            }

            if(!empty($technical_name) && in_array($technical_name, $resp_arr)){

                $qa_resp[] = $technical_name;
            }

            if(!empty($technical_name) && in_array($technical_name, $cv_arr)){

                $qa_cv[] = $technical_name;
            }

            if(!empty($technical_name) && in_array($technical_name, $skin_arr)){

                $qa_skin[] = $technical_name;
            }

            if(!empty($technical_name) && in_array($technical_name, $msk_arr)){

                $qa_msk[] = $technical_name;
            }

            if(!empty($technical_name) && in_array($technical_name, $cv_arr)){

                $qa_cv[] = $technical_name;
            }

            if(!empty($technical_name) && in_array($technical_name, $gu_arr)){

                $qa_gu[] = $technical_name;
            }


            if(!empty($technical_name) && in_array($technical_name, $gen_arr)){

                $qa_gen[] = $technical_name;
            }

            if(!empty($technical_name) && in_array($technical_name, $heme_lymph_arr)){

                $qa_heme_lymph[] = $technical_name;
            }

            if(!empty($technical_name) && in_array($technical_name, $ent_arr)){

                $qa_ent[] = $technical_name;
            }

            if(!empty($technical_name) && in_array($technical_name, $all_imm_arr)){

                $qa_all_imm[] = $technical_name;
            }

            if(!empty($technical_name) && in_array($technical_name, $breast_arr)){

                $qa_breast[] = $technical_name;
            }
        }
    }

    $qa_neuro = implode(", +", array_unique($qa_neuro));
    $qa_gi = implode(", +", array_unique($qa_gi));
    $qa_eye = implode(", +", array_unique($qa_eye));
    $qa_psych = implode(", +", array_unique($qa_psych));
    $qa_resp = implode(", +", array_unique($qa_resp));
    $qa_cv = implode(", +", array_unique($qa_cv));
    $qa_skin = implode(", +", array_unique($qa_skin));
    $qa_msk = implode(", +", array_unique($qa_msk));
    $qa_gu = implode(", +", array_unique($qa_gu));
    $qa_gen = implode(", +", array_unique($qa_gen));
    $qa_heme_lymph = implode(", +", array_unique($qa_heme_lymph));
    $qa_ent = implode(", +", array_unique($qa_ent));
    $qa_all_imm = implode(", +", array_unique($qa_all_imm));
    $qa_breast = implode(", +", array_unique($qa_breast));


    $qa_neuro = !empty($qa_neuro) ? "+".$qa_neuro : $qa_neuro;
    $qa_gi = !empty($qa_gi) ? "+".$qa_gi : $qa_gi;
    $qa_eye = !empty($qa_eye) ? "+".$qa_eye : $qa_eye;
    $qa_psych = !empty($qa_psych) ? "+".$qa_psych : $qa_psych;
    $qa_resp = !empty($qa_resp) ? "+".$qa_resp : $qa_resp;
    $qa_cv = !empty($qa_cv) ? "+".$qa_cv : $qa_cv;
    $qa_skin = !empty($qa_skin) ? "+".$qa_skin : $qa_skin;
    $qa_msk = !empty($qa_msk) ? "+".$qa_msk : $qa_msk;
    $qa_gu = !empty($qa_gu) ? "+".$qa_gu : $qa_gu;
    $qa_gen = !empty($qa_gen) ? "+".$qa_gen : $qa_gen;
    $qa_heme_lymph = !empty($qa_heme_lymph) ? "+".$qa_heme_lymph : $qa_heme_lymph;
    $qa_ent = !empty($qa_ent) ? "+".$qa_ent : $qa_ent;
    $qa_all_imm = !empty($qa_all_imm) ? "+".$qa_all_imm : $qa_all_imm;
    $qa_breast = !empty($qa_breast) ? "+".$qa_breast : $qa_breast;

    $temp_ehr_hpi = trim(strip_tags($hpi));
    $ehr_hpi_arr = explode("\n", $temp_ehr_hpi);
    $ehr_hpi_arr = array_filter($ehr_hpi_arr);

    return array('hpi' => $hpi,'treatment_hx' => $treatment_hx,'qa_neuro' => $qa_neuro,'qa_gi' => $qa_gi, 'qa_eye' => $qa_eye,'qa_psych' => $qa_psych,'qa_resp' => $qa_resp,'qa_cv' => $qa_cv,'qa_skin' => $qa_skin,'qa_msk' => $qa_msk,'qa_gu' => $qa_gu,'qa_gen' => $qa_gen,'qa_heme_lymph' => $qa_heme_lymph,'qa_ent' => $qa_ent,'qa_all_imm' => $qa_all_imm,'qa_breast' => $qa_breast,'ehr_hpi_arr' => $ehr_hpi_arr);
}


public function pre_op_post_op_detail_layman($user_detail,$gender)
 {
    //pr($user_detail);die;
   $layman_summar = '';

    $feeling_trans = array(
                        'great' => 'very well',
                        'good' => 'well',
                        'bad' => 'unwell'
                    );

    $diet_trans = array(
                     'regular diet' => 'regular diet',
                     'soft foods only' => 'soft diet',
                     'clear liquids only' => 'liquid diet'
                   );

    $reason_for_visit = '';

   if(!empty($user_detail->pre_op_post_op)){

      $pre_op_post_op = $user_detail->pre_op_post_op;

        if(isset($pre_op_post_op[459]) && isset($pre_op_post_op[459]['answer']) && !empty($pre_op_post_op[459]['answer'])){

            $ques_ans_459 = strtolower($pre_op_post_op[459]['answer']);
            $layman_summar .= ($ques_ans_459 == "endoscopy (egd)" ? "EGD" : $ques_ans_459)." performed";

            $reason_for_visit .= ($ques_ans_459 == "endoscopy (egd)" ? "EGD" : $ques_ans_459);
        }

        if(isset($pre_op_post_op[460]) && isset($pre_op_post_op[460]['answer']) && !empty($pre_op_post_op[460]['answer'])){

            $layman_summar = str_replace('other', strtolower($pre_op_post_op[460]['answer']), $layman_summar);
            $reason_for_visit = str_replace('other', strtolower($pre_op_post_op[460]['answer']), $reason_for_visit);
        }


        if(isset($pre_op_post_op[461]) && isset($pre_op_post_op[461]['answer']) && !empty($pre_op_post_op[461]['answer'])){

            $layman_summar .= " on ".$pre_op_post_op[461]['answer'];
            $reason_for_visit .= " day ".$pre_op_post_op[461]['answer'];
        }

        $layman_summar .= ". ";


        if(isset($pre_op_post_op[470]) && isset($pre_op_post_op[470]['answer']) && !empty($pre_op_post_op[470]['answer'])){

            $ques_ans_470 = strtolower($pre_op_post_op[470]['answer']);
            $layman_summar .= "Patient is feeling overall ".(isset($feeling_trans[$ques_ans_470]) ? $feeling_trans[$ques_ans_470] : $ques_ans_470).". ";
        }

        if(isset($pre_op_post_op[465]) && isset($pre_op_post_op[465]['answer']) && !empty($pre_op_post_op[465]['answer']) && isset($pre_op_post_op[466]) && isset($pre_op_post_op[466]['answer']) && !empty($pre_op_post_op[466]['answer'])){

            $ques_ans_465 = strtolower($pre_op_post_op[465]['answer']);
            $temp_diet = isset($diet_trans[$ques_ans_465]) ? $diet_trans[$ques_ans_465] : $ques_ans_465;

            $temp_tolerate = strtolower($pre_op_post_op[466]['answer']) == 'well' ? 'tolerating' : 'not tolerating';
            $layman_summar .= ($gender == 0 ? 'She':'He')." is ".$temp_tolerate." a ".$temp_diet.". ";
        }

        if(isset($pre_op_post_op[462]) && isset($pre_op_post_op[462]['answer']) && strtolower($pre_op_post_op[462]['answer']) == 'yes'){

            $layman_summar .= 'Patient states being on anticoagulants';

            if(isset($pre_op_post_op[463]) && isset($pre_op_post_op[463]['answer']) && strtolower($pre_op_post_op[463]['answer']) == 'yes'){

                if(isset($pre_op_post_op[464]) && isset($pre_op_post_op[464]['answer']) && !empty($pre_op_post_op[464]['answer']))
                {

                    $layman_summar .= ' which were resumed on '.$pre_op_post_op[463]['answer'];
                }
            }
            else{

                $layman_summar .= ' and has not resumed taking them';
            }

            $layman_summar .= ". ";

        }

        $neg_sym = array('vomiting','abdominal pain','dark black stools','bright red blood in stools');
        $positive_sym = null;



        if(isset($pre_op_post_op[467]) && isset($pre_op_post_op[467]['answer']) && !empty($pre_op_post_op[467]['answer'])){

            $ques_ans_467 = is_array($pre_op_post_op[467]['answer']) ? strtolower(implode(", ", $pre_op_post_op[467]['answer'])) : strtolower($pre_op_post_op[467]['answer']);

            $positive_sym = explode(", ", $ques_ans_467);
            $symp = array('vomiting','abdominal pain','dark black stools','bright red blood in stools');
            $neg_sym = !empty($positive_sym) && is_array($positive_sym) ? array_diff($symp, $positive_sym) : $symp;
        }

        if(isset($pre_op_post_op[469]) && isset($pre_op_post_op[469]['answer']) && strtolower($pre_op_post_op[469]['answer']) == 'yes' && is_array($positive_sym)){

            $positive_sym[] = "hematemesis";
        }

        if(!empty($positive_sym)){

            $layman_summar .= "Patient is positive for ".(is_array($positive_sym) ? implode(", ", $positive_sym) : $positive_sym).". ";
        }

        if(!empty($neg_sym)){

            $layman_summar .= ($gender == 0 ? 'She':"He")." denies ".(is_array($neg_sym) ? implode(", ", $neg_sym): $neg_sym).". ";
        }
   }

    if(!empty($reason_for_visit)){

        $reason_for_visit = "s/p ".$reason_for_visit;
    }

   return array('layman_summar' => $layman_summar, 'reason_for_visit' => $reason_for_visit);

 }


 public function oncology_follow_up_detail_layman($user_detail,$gender)
 {
    //pr($user_detail);die;
   $commonTable = TableRegistry::get('common_conditions');
   $layman_summar = '';
   $hpi = '';
   $sti_severe_sym = '';
   $sti_moderate_sym = '';
   $sti_mild_sym = '';
   $sti_neg_sym = '';

   $sti_high_qol = '';
   $sti_avg_qol = '';
   $sti_low_qol = '';
   $sti_neg_qol = '';

   $chemo_none = '';
   $chemo_mild = '';
   $chemo_moderate = '';
   $chemo_severe = '';
   $chemo_threatening = '';
   $cancer_cc = '';
   $hpi = '';
   $treatment_hx = '';
   $fh_positive = '';
   $fh_negative = '';
   $sargical_hx = '';
   $estrogen_treatments = '';
   $gyn_hx = '';
   $sh = '';
   $pmh = '';

   $qa_neuro = '';
   $qa_gi = '';
   $qa_eye = '';
   $qa_psych = '';
   $qa_resp = '';
   $qa_cv = '';
   $qa_skin = '';
   $qa_msk = '';
   $qa_gu = '';
   $qa_gen = '';
   $qa_heme_lymph = '';
   $qa_ent = '';
   $qa_all_imm = '';
   $qa_breast = '';

   $preventative_health = "";

    $feeling_trans = array(
                        'Good' => 'well',
                        'Alright' => 'unremarkable',
                        'Bad' => 'unwell'
                    );

      $visit =   array(
                          'Hospital stay' => 'hospitalization',
                          'Emergency room visit only' => 'ED visit',
                      );

    $reason_for_visit = '';


    /*if(!empty($user_detail['followup_assessment'])){

        //sti symptom layman

        if(isset($user_detail['followup_assessment']['assessment_history']) && !empty($user_detail['followup_assessment']['assessment_history'])){

            foreach ($user_detail['followup_assessment']['assessment_history'] as $key => $value) {

                if($value['answer'] >= 1 && $value['answer'] <= 3){

                    $sti_mild_sym .= $value['name'].', ';
                }

                if($value['answer'] >= 4 && $value['answer'] <= 6){

                    $sti_moderate_sym .= $value['name'].', ';
                }

                if($value['answer'] >= 7 && $value['answer'] <= 10){

                    $sti_severe_sym .= $value['name'].', ';
                }
            }

            $sti_positive_sym_ids = array_column($user_detail['followup_assessment']['assessment_history'], 'symtoms_id');
            $sti_neg_sym_detail = $commonTable->find('list', [
            'keyField' => 'id',
            'valueField' => 'note_name'
                  ])->where(['id NOT IN' => $sti_positive_sym_ids,'cond_type' => 6])->toArray();
            if(!empty($sti_neg_sym_detail)){

                $sti_neg_sym = implode(", ", $sti_neg_sym_detail);
            }

            $sti_severe_sym = rtrim($sti_severe_sym,', ');
            $sti_moderate_sym = rtrim($sti_moderate_sym,', ');
            $sti_mild_sym = rtrim($sti_mild_sym,', ');
        }


        //sti life quality layman

        if(isset($user_detail['followup_assessment']['life_assessment']) && !empty($user_detail['followup_assessment']['life_assessment'])){

            foreach ($user_detail['followup_assessment']['life_assessment'] as $key => $value) {

                if($value['answer'] >= 1 && $value['answer'] <= 4){

                    $sti_low_qol .= $value['name'].', ';
                }

                if($value['answer'] >= 5 && $value['answer'] <= 9){

                    $sti_avg_qol .= $value['name'].', ';
                }

                if($value['answer'] == 10){

                    $sti_high_qol .= $value['name'].', ';
                }
            }

            $sti_high_qol = rtrim($sti_high_qol,', ');
            $sti_avg_qol = rtrim($sti_avg_qol,', ');
            $sti_low_qol = rtrim($sti_low_qol,', ');
        }



        if(isset($user_detail['followup_assessment']['chemo_assessment']) && !empty($user_detail['followup_assessment']['chemo_assessment'])){

            foreach ($user_detail['followup_assessment']['chemo_assessment'] as $key => $value) {

                if($value['answer'] == 'none'){

                    $chemo_none .= $value['name'].', ';
                }

                if($value['answer'] == 'mild'){

                    $chemo_mild .= $value['name'].', ';
                }
                if($value['answer'] == 'moderate'){

                    $chemo_moderate .= $value['name'].', ';
                }
                if($value['answer'] == 'severe'){

                    $chemo_severe .= $value['name'].', ';
                }
                if($value['answer'] == 'life threatening'){

                    $chemo_threatening .= $value['name'].', ';
                }
            }

            $chemo_none = rtrim($chemo_none,', ');
            $chemo_mild = rtrim($chemo_mild,', ');
            $chemo_moderate = rtrim($chemo_moderate,', ');
            $chemo_severe = rtrim($chemo_severe,', ');
            $chemo_threatening = rtrim($chemo_threatening,', ');
        }
    }*/

    if(!empty($user_detail['cancer_assessments'])){

        //sti symptom layman

        if(isset($user_detail['cancer_assessments']['assessment_history']) && !empty($user_detail['cancer_assessments']['assessment_history'])){

            foreach ($user_detail['cancer_assessments']['assessment_history'] as $key => $value) {

                if($value['answer'] >= 1 && $value['answer'] <= 3){

                    $sti_mild_sym .= $value['name'].', ';
                }

                if($value['answer'] >= 4 && $value['answer'] <= 6){

                    $sti_moderate_sym .= $value['name'].', ';
                }

                if($value['answer'] >= 7 && $value['answer'] <= 10){

                    $sti_severe_sym .= $value['name'].', ';
                }
            }

            $sti_positive_sym_ids = array_column($user_detail['cancer_assessments']['assessment_history'], 'symtoms_id');
            $sti_neg_sym_detail = $commonTable->find('list', [
            'keyField' => 'id',
            'valueField' => 'note_name'
                  ])->where(['id NOT IN' => $sti_positive_sym_ids,'cond_type' => 6])->toArray();
            if(!empty($sti_neg_sym_detail)){

                $sti_neg_sym = implode(", ", $sti_neg_sym_detail);
            }

            $sti_severe_sym = rtrim($sti_severe_sym,', ');
            $sti_moderate_sym = rtrim($sti_moderate_sym,', ');
            $sti_mild_sym = rtrim($sti_mild_sym,', ');
        }


        //sti life quality layman

        if(isset($user_detail['cancer_assessments']['life_assessment']) && !empty($user_detail['cancer_assessments']['life_assessment'])){

            foreach ($user_detail['cancer_assessments']['life_assessment'] as $key => $value) {

                if($value['answer'] >= 1 && $value['answer'] <= 4){

                    $sti_low_qol .= $value['name'].', ';
                }

                if($value['answer'] >= 5 && $value['answer'] <= 9){

                    $sti_avg_qol .= $value['name'].', ';
                }

                if($value['answer'] == 10){

                    $sti_high_qol .= $value['name'].', ';
                }
            }

            $sti_high_qol = rtrim($sti_high_qol,', ');
            $sti_avg_qol = rtrim($sti_avg_qol,', ');
            $sti_low_qol = rtrim($sti_low_qol,', ');
        }

        if(isset($user_detail['cancer_assessments']['chemo_assessment']) && !empty($user_detail['cancer_assessments']['chemo_assessment'])){

            foreach ($user_detail['cancer_assessments']['chemo_assessment'] as $key => $value) {

                if($value['answer'] == 'none'){

                    $chemo_none .= $value['name'].', ';
                }

                if($value['answer'] == 'mild'){

                    $chemo_mild .= $value['name'].', ';
                }
                if($value['answer'] == 'moderate'){

                    $chemo_moderate .= $value['name'].', ';
                }
                if($value['answer'] == 'severe'){

                    $chemo_severe .= $value['name'].', ';
                }
                if($value['answer'] == 'life threatening'){

                    $chemo_threatening .= $value['name'].', ';
                }
            }

            $chemo_none = rtrim($chemo_none,', ');
            $chemo_mild = rtrim($chemo_mild,', ');
            $chemo_moderate = rtrim($chemo_moderate,', ');
            $chemo_severe = rtrim($chemo_severe,', ');
            $chemo_threatening = rtrim($chemo_threatening,', ');
        }
    }

   if(!empty($user_detail->cancer_followup_general_detail)){


      $cancer_followup_general_detail = $user_detail->cancer_followup_general_detail;


        if(isset($cancer_followup_general_detail[471]) && isset($cancer_followup_general_detail[471]['answer']) && !empty($cancer_followup_general_detail[471]['answer']) && $cancer_followup_general_detail[471]['answer'] == 'Yes' ){

            $ques_ans_472 = 'Patient is accompanied by ';
            $ques_ans_472 .=  is_array($cancer_followup_general_detail[472]['answer']) ? strtolower(implode(", ", $cancer_followup_general_detail[472]['answer'])) : strtolower($cancer_followup_general_detail[472]['answer']);
            $layman_summar .= $ques_ans_472.'. ';
        }
        else
        {
          $ques_ans_472 = '';
          $layman_summar .= $ques_ans_472;
        }

        if(isset($user_detail['previous_appointment_date']) &&  !empty($user_detail['previous_appointment_date']))
        {
          $layman_summar .= 'Last visit was on '.date("m/d/Y",strtotime($user_detail['previous_appointment_date'])).'. ';
        }




        if(isset($cancer_followup_general_detail[475]) && isset($cancer_followup_general_detail[475]['answer']) && !empty($cancer_followup_general_detail[471]['answer'])){

            $ques_ans_475 = 'Patient describes feeling generally ';
            $ques_ans_475 .= $feeling_trans[$cancer_followup_general_detail[475]['answer']];
            $ques_ans_475 .= ' since last visit';
            $layman_summar .= $ques_ans_475.'. ';
        }


        if(isset($cancer_followup_general_detail[473]) && isset($cancer_followup_general_detail[473]['answer']) && $cancer_followup_general_detail[473]['answer'] == 'Yes')
        {

          if(isset($user_detail['chief_compliant_id']) && !empty($user_detail['chief_compliant_id']))
          {
            $ques_ans_473 = 'Currently concerned with complaints of ';

            $ques_ans_473 .= $user_detail['chief_compliant_id']['name'];
            // foreach($user_detail['chief_compliant_id'] as $key => $chiefcomplaints)
            // {
            //   die('tesdt');
            //   $chiefcompaints[] = $chiefcomplaints->name;
            // }
          }
        }
        else {
          $ques_ans_473 = 'No symptom complaints of concern';
        }
   }



   if(!empty($user_detail['cancer_history_detail'])){

       $cancer_history_detail_layman = $this->cancer_history_layman($user_detail['cancer_history_detail'],$gender);
       $treatment_hx .= isset($cancer_history_detail_layman['treatment_hx']) ? $cancer_history_detail_layman['treatment_hx'] : '';
     }






     $gyn_uterus_overy = '';
     if(!empty($user_detail['cancer_medical_detail'])){
         $cancer_medical_detail = $user_detail['cancer_medical_detail'];

         if(isset($cancer_medical_detail['345']) && !empty($cancer_medical_detail['345'])){

             $ques_and_345 = strtolower($cancer_medical_detail['345']['answer']);
             if($ques_and_345 == 'right ovary'){

                 $sargical_hx .= 'R oopherectomy';
                 $gyn_uterus_overy .= 'R oopherectomy';
             }
             elseif($ques_and_345 == 'left ovary'){

                $sargical_hx .= 'L oopherectomy';
                $gyn_uterus_overy .= 'L oopherectomy';
             }
             elseif($ques_and_345 == 'both ovaries'){

                 $sargical_hx .= 'bilateral oopherectomy';
                 $gyn_uterus_overy .= 'bilateral oopherectomy';
             }
         }
         else{

             $gyn_uterus_overy .= 'ovaries present, ';
         }

         if(isset($cancer_medical_detail['346']) && !empty($cancer_medical_detail['346'])){

            $sargical_hx .= ' ('.$cancer_medical_detail['346']['answer']."), ";
            $gyn_uterus_overy .= ' ('.$cancer_medical_detail['346']['answer']."), ";
         }
         else{

             $sargical_hx .= ', ';
            //$gyn_uterus_overy .= ', ';
         }

         if(isset($cancer_medical_detail['347']) && !empty($cancer_medical_detail['347']) && strtolower($cancer_medical_detail['347']['answer']) == 'yes'){

             $sargical_hx .= "Uterus removal (hysterectomy)";
             $gyn_uterus_overy .= "Uterus removal (hysterectomy)";
         }
         else{

            $gyn_uterus_overy .= 'uterus present, ';
         }

         if(isset($cancer_medical_detail['348']) && !empty($cancer_medical_detail['348'])){

             $sargical_hx .= " (".$cancer_medical_detail['348']['answer']."), ";
             $gyn_uterus_overy .= " (".$cancer_medical_detail['348']['answer']."), ";
         }
         else{
             $sargical_hx .= ', ';
            // $gyn_uterus_overy .= ', ';
         }



         if(isset($cancer_medical_detail['375']) && !empty($cancer_medical_detail['375']) && !empty($cancer_medical_detail['375']['answer'])){

             $estrogen_treatments .= "OCPs (".$cancer_medical_detail['375']['answer']."), ";
         }

         if(isset($cancer_medical_detail['376']) && !empty($cancer_medical_detail['376']) && !empty($cancer_medical_detail['376']['answer'])){

             $estrogen_treatments .= strtolower($cancer_medical_detail['376']['question'])." (".$cancer_medical_detail['376']['answer']."), ";
         }

         if(isset($cancer_medical_detail['377']) && !empty($cancer_medical_detail['377']) && !empty($cancer_medical_detail['377']['answer'])){

             $estrogen_treatments .= strtolower($cancer_medical_detail['377']['question'])." (".$cancer_medical_detail['377']['answer']."), ";
         }

         if(isset($cancer_medical_detail['378']) && !empty($cancer_medical_detail['378']) && !empty($cancer_medical_detail['378']['answer'])){

             $estrogen_treatments .= strtolower($cancer_medical_detail['378']['question'])." (".$cancer_medical_detail['378']['answer']."), ";
         }

         if(isset($cancer_medical_detail['379']) && !empty($cancer_medical_detail['379']) && !empty($cancer_medical_detail['379']['answer'])){

             $estrogen_treatments .= strtolower($cancer_medical_detail['379']['question'])." (".$cancer_medical_detail['379']['answer']."), ";
         }

         if(isset($cancer_medical_detail['380']) && !empty($cancer_medical_detail['380']) && !empty($cancer_medical_detail['380']['answer'])){

             $estrogen_treatments .= strtolower($cancer_medical_detail['380']['question'])." (".$cancer_medical_detail['380']['answer']."), ";
         }

         if(isset($cancer_medical_detail['381']) && !empty($cancer_medical_detail['381']) && !empty($cancer_medical_detail['381']['answer'])){

             $estrogen_treatments .= strtolower($cancer_medical_detail['381']['question'])." (".$cancer_medical_detail['381']['answer']."), ";
         }

         if(isset($cancer_medical_detail['382']) && !empty($cancer_medical_detail['382']) && !empty($cancer_medical_detail['382']['answer'])){

             $estrogen_treatments .= strtolower($cancer_medical_detail['382']['answer']);

             if(isset($cancer_medical_detail['383']) && !empty($cancer_medical_detail['383']) && !empty($cancer_medical_detail['383']['answer'])){

                 $estrogen_treatments .= " (".$cancer_medical_detail['383']['answer'].")";
             }
             $estrogen_treatments .= ", ";
         }
      }


    if(!empty($user_detail->followup_medical_history_detail)){

        $followup_medical_history_detail = $user_detail->followup_medical_history_detail;
        if(isset($followup_medical_history_detail[478]) && isset($followup_medical_history_detail[478]['answer']) && !empty($followup_medical_history_detail[478]['answer'] == 'Yes')){

            $ques_ans_479 = 'History is significant for ';
            $ques_ans_479 .= $visit[$followup_medical_history_detail[479]['answer']];
            $layman_summar .= $ques_ans_479.'. ';
        }

        if(isset($followup_medical_history_detail[480]) && isset($followup_medical_history_detail[480]['answer'])){

            $ques_ans_480 = 'Patient was admitted to ';
            $ques_ans_480 .= $followup_medical_history_detail[480]['answer'];
            $layman_summar .= $ques_ans_480;
        }

        if(isset($followup_medical_history_detail[486]) && isset($followup_medical_history_detail[486]['answer'])){

            $ques_ans_486 = 'Patient went to the ED at ';
            $ques_ans_486 .= $followup_medical_history_detail[486]['answer'];
            $layman_summar .= $ques_ans_486;
        }

        if(isset($followup_medical_history_detail[481]) && isset($followup_medical_history_detail[481]['answer'])){

            $ques_ans_481 = ' on ';
            $ques_ans_481 .= $followup_medical_history_detail[481]['answer'];
            $layman_summar .= $ques_ans_481;
        }

        if(isset($followup_medical_history_detail[487]) && isset($followup_medical_history_detail[487]['answer'])){

            $ques_ans_487 = ' on ';
            $ques_ans_487 .= $followup_medical_history_detail[487]['answer'];
            $layman_summar .= $ques_ans_487;
        }

        if(isset($followup_medical_history_detail[483]) && isset($followup_medical_history_detail[483]['answer'])){

            $ques_ans_483 = ' for ';
            $ques_ans_483 .= $followup_medical_history_detail[483]['answer'];
            $layman_summar .= $ques_ans_483.'. ';
        }

        if(isset($followup_medical_history_detail[488]) && isset($followup_medical_history_detail[488]['answer'])){

            $ques_ans_488 = ' for ';
            $ques_ans_488 .= $followup_medical_history_detail[488]['answer'];
            $layman_summar .= $ques_ans_488.'. ';
        }

        if(isset($followup_medical_history_detail[484]) && isset($followup_medical_history_detail[484]['answer']) && $followup_medical_history_detail[484]['answer'] == 'Yes'){

            $ques_ans_485 = 'Patient were performed procedure ';
            $ques_ans_485 .= $followup_medical_history_detail[485]['answer'];
            $layman_summar .= $ques_ans_485.'. ';
        }else if(isset($followup_medical_history_detail[484]) && isset($followup_medical_history_detail[484]['answer']) && $followup_medical_history_detail[484]['answer'] == 'No'){

          $ques_ans_485 = '';
          $ques_ans_485 = 'No procedure were performed according to the patient';
          $layman_summar .= $ques_ans_485.'. ';

        }

        if(isset($followup_medical_history_detail[489]) && isset($followup_medical_history_detail[489]['answer']) && $followup_medical_history_detail[489]['answer'] == 'Yes'){

            $ques_ans_489 = 'Lab tests were performed according to patient';
           // $ques_ans_489 .= $followup_medical_history_detail[489]['answer'];
            $layman_summar .= $ques_ans_489.'. ';
        }else if(isset($followup_medical_history_detail[489]) && isset($followup_medical_history_detail[489]['answer']) && $followup_medical_history_detail[489]['answer'] == 'No'){

          $ques_ans_489 = 'No tests were performed according to the patient';
          //$ques_ans_489 .= $followup_medical_history_detail[489]['answer'];
          $layman_summar .= $ques_ans_489.'. ';

        }

        if(isset($followup_medical_history_detail[482]) && isset($followup_medical_history_detail[482]['answer']) && !empty($followup_medical_history_detail[482]['answer'])){

            $ques_ans_482 = 'Patient was discharged from hospital on ';
            $ques_ans_482 .= $followup_medical_history_detail[482]['answer'];
            $layman_summar .= $ques_ans_482.'. ';
        }

        if(isset($ques_ans_473))
        {
            $layman_summar .= $ques_ans_473.'. ';
        }

        if(isset($followup_medical_history_detail[504]) && isset($followup_medical_history_detail[504]['answer']) && !empty($followup_medical_history_detail[504]['answer'] != 'dont remember')){

            $preventative_health .= "Last memmogram in ".$followup_medical_history_detail[504]['answer'].". ";
        }

        if(isset($followup_medical_history_detail[505]) && isset($followup_medical_history_detail[505]['answer']) && !empty($followup_medical_history_detail[505]['answer'] != 'dont remember')){

            $preventative_health .= "Last colonscopy in ".$followup_medical_history_detail[505]['answer'].". ";
        }

        if(isset($followup_medical_history_detail[506]) && isset($followup_medical_history_detail[506]['answer']) && !empty($followup_medical_history_detail[506]['answer'] != 'dont remember')){

            $preventative_health .= "Last DEXA scan in ".$followup_medical_history_detail[506]['answer'].". ";
        }




        if(isset($followup_medical_history_detail['514']) && !empty($followup_medical_history_detail['514']) && strtolower($followup_medical_history_detail['514']['answer']) == 'yes'){

            $gyn_hx .= 'Patient has menopause';
            if(isset($followup_medical_history_detail['515']) && !empty($followup_medical_history_detail['515']) && !empty($followup_medical_history_detail['515']['answer'])){

                $gyn_hx .= ' at age '.$followup_medical_history_detail['515']['answer'];
            }

            $gyn_hx .= '. ';
        }
        else{

            if(isset($followup_medical_history_detail['516']) && !empty($followup_medical_history_detail['516']) && !empty($followup_medical_history_detail['516']['answer'])){

                 $gyn_hx .= 'Secondary amenorrhea due to '.$followup_medical_history_detail['516']['answer'].". ";
            }
            if(isset($followup_medical_history_detail['517']) && !empty($followup_medical_history_detail['517']) && !empty($followup_medical_history_detail['517']['answer'])){

                $gyn_hx = str_replace("other", strtolower($followup_medical_history_detail['517']['answer']), $gyn_hx);
            }
        }

        if(isset($followup_medical_history_detail['508']) && !empty($followup_medical_history_detail['508']) && !empty($followup_medical_history_detail['508']['answer'])){

           $gyn_hx .= 'LMP '.$followup_medical_history_detail['508']['answer'].", ";
        }

        if(isset($followup_medical_history_detail['511']) && !empty($followup_medical_history_detail['511']) && !empty($followup_medical_history_detail['511']['answer'])){

           $gyn_hx .= strtolower($followup_medical_history_detail['511']['answer']) == "yes" ? "regular, " : "irregular, ";
        }

        if(isset($followup_medical_history_detail['510']) && !empty($followup_medical_history_detail['510']) && !empty($followup_medical_history_detail['510']['answer'])){

           $gyn_hx .= 'interval '.$followup_medical_history_detail['510']['answer'].' days, ';
        }

        if(isset($followup_medical_history_detail['509']) && !empty($followup_medical_history_detail['509']) && !empty($followup_medical_history_detail['509']['answer'])){

           $gyn_hx .= 'duration '.$followup_medical_history_detail['509']['answer'].' days, ';
        }

        if((isset($followup_medical_history_detail['509']) && !empty($followup_medical_history_detail['509']['answer'])) || (isset($followup_medical_history_detail['510']) && !empty($followup_medical_history_detail['510']['answer'])) || (isset($followup_medical_history_detail['511']) && !empty($followup_medical_history_detail['511']['answer'])) || (isset($followup_medical_history_detail['508']) && !empty($followup_medical_history_detail['508']['answer']))){

            $gyn_hx = rtrim($gyn_hx,', ');
            $gyn_hx .= ". ";
        }

        $gyn_hx .= 'menarche ';
   }

   if(!empty($chemo_threatening) || !empty($chemo_severe) || !empty($chemo_moderate) || !empty($chemo_mild)) {
       $layman_summar .= 'CIPN screen is significant for ';

     //  $hpi .= 'CIPN screen is significant for';
       $layman_summar .= !empty($chemo_threatening) ? ' disabling/life threatening '.$chemo_threatening.',': '';
       $layman_summar .= !empty($chemo_severe) ? ' severe '.$chemo_severe.',': '';
       $layman_summar .= !empty($chemo_moderate) ? ' moderate '.$chemo_moderate.',': '';
       $layman_summar .= !empty($chemo_mild) ? ' mild '.$chemo_mild.',': '';
       //$hpi .= !empty($chemo_none) ? ' none '.$chemo_none.',': '';
       $layman_summar = trim($layman_summar,',');
       $layman_summar .= '. ';
   }
   else{
       $layman_summar .= 'CIPN screen is unremarkable.';
       $layman_summar = trim($layman_summar,',');
   }

   $sargical_hx = rtrim($sargical_hx,', ');
   //$pmh  = rtrim($pmh,", ");
   $gyn_uterus_overy = ucfirst(strtolower(rtrim($gyn_uterus_overy,', ')));
   $fh_positive = rtrim($fh_positive,', ');
   $fh_negative = rtrim($fh_negative,', ');
   $estrogen_treatments = rtrim($estrogen_treatments,', ');

   if(!empty($gyn_uterus_overy)){

       $gyn_hx .= $gyn_uterus_overy.". ";
   }


   if(!empty($estrogen_treatments)){

       $treatment_hx .= ' Estrogen hx is significant for '.$estrogen_treatments.'. ';
   }

   $sti_severe_sym = ucfirst($sti_severe_sym);
   $sti_moderate_sym = ucfirst($sti_moderate_sym);
   $sti_mild_sym = ucfirst($sti_mild_sym);
   $sti_neg_sym = ucfirst($sti_neg_sym);
   $sti_high_qol = ucfirst($sti_high_qol);
   $sti_avg_qol = ucfirst($sti_avg_qol);
   $sti_low_qol = ucfirst($sti_low_qol);
   $sti_neg_qol = ucfirst($sti_neg_qol);
   $chemo_threatening = ucfirst($chemo_threatening);

   $chemo_severe = ucfirst($chemo_severe);
   $chemo_moderate = ucfirst($chemo_moderate);
   $chemo_mild = ucfirst($chemo_mild);
   $chemo_none = ucfirst($chemo_none);

   $response = array('sti_severe_sym' => $sti_severe_sym, 'sti_moderate_sym' => $sti_moderate_sym,'sti_mild_sym' => $sti_mild_sym,'sti_neg_sym' => $sti_neg_sym,'sti_high_qol' => $sti_high_qol, 'sti_avg_qol' => $sti_avg_qol, 'sti_low_qol' => $sti_low_qol, 'sti_neg_qol' => $sti_neg_qol,'chemo_threatening' => $chemo_threatening, 'chemo_severe' => $chemo_severe, 'chemo_moderate' => $chemo_moderate, 'chemo_mild' => $chemo_mild, 'chemo_none' => $chemo_none,'hpi' => $hpi,'treatment_hx' => $treatment_hx,'fh_positive' => $fh_positive,'fh_negative' => $fh_negative,'sargical_hx' => $sargical_hx,'sh' => $sh,'gyn_hx' => $gyn_hx,'cancer_cc' => $cancer_cc,'pmh' => $pmh,'qa_neuro' => $qa_neuro,'qa_gi' => $qa_gi, 'qa_eye' => $qa_eye,'qa_psych' => $qa_psych,'qa_resp' => $qa_resp,'qa_cv' => $qa_cv,'qa_skin' => $qa_skin,'qa_msk' => $qa_msk,'qa_gu' => $qa_gu,'qa_gen' => $qa_gen,'qa_heme_lymph' => $qa_heme_lymph,'qa_ent' => $qa_ent,'qa_all_imm' => $qa_all_imm,'qa_breast' => $qa_breast,'layman_summar' =>$layman_summar, 'preventative_health' => $preventative_health);
   //pr($response);die;

   return $response;

   //return array('layman_summar' => $layman_summar);

 }


public function generateClientSecret(int $length = 64, string $keyspace = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$&*'):string
     {
            $pieces = [];
            $max = mb_strlen($keyspace, '8bit') - 1;
            for ($i = 0; $i < $length; ++$i) {
                $pieces []= $keyspace[random_int(0, $max)];
            }
            return implode('', $pieces);
            $c = random_str();

     }


    public function userActivity($activity)
    {

        $activity['ip'] = $_SERVER['REMOTE_ADDR'];
        $userActivityObj = TableRegistry::get('user_activities');
        $entity =  $userActivityObj->newEntity();
        $userActivity = $userActivityObj->patchEntity($entity, $activity);
        $userActivityObj->save($userActivity);
    }

    public function checkDateFormat($date)
    {
        if (!$date) {
           return false;
       } else {
           $date = date_parse($date);
           if($date['error_count'] == 0 && $date['warning_count'] == 0){
               return checkdate($date['month'], $date['day'], $date['year']);
           } else {
               return false;
           }
       }
    }

    public function chronic_pain_assessment_layman($user_detail,$chronic_pain_assessment_tmb = null,$chronic_pain_assessment_pmh = null,$chronic_pain_treatment_history = null,$chronic_pain_curr_treat_history = null,$chronic_pain_past_treat_history = null,$chronic_pain_opioid_overdose_risk = null,$chronic_pain_assessment_ort = null) 
    {


      $gender = Security::decrypt( base64_decode($user_detail['user']['gender']), SEC_KEY);     
      $sevrity = '';
      $comorbidities = '';
      $opioid_overdose_risk = '';
      $positive_sym = '';
      $negative_sym = '';
      $opioidfreq = '';
      $opedDate = '';
      $opedfac = '';
      $ortTool = 0;
      $ortIndication = '';
      $currtx = array();
      $csigeefic = array();
      $cmodeefic = array();
      $cnoeefic = array();

      $sigimpact = array();
      $modimpact = array();
      $noimpact = array();
      $opoidOverdoseRisk = '';
      $currentTx = '';
    $pastTx = '';
    $physicalPhychological = '';


      if(!empty($chronic_pain_assessment_tmb) && is_array($chronic_pain_assessment_tmb)){



        foreach($chronic_pain_assessment_tmb as $key => $val){
            switch ($val['question_id']) {

                case 167:   
                {                    
                    $sevrity .= 'Current pain level is '.$val['answer'].'. Patient self-describes pain serverity as '.$chronic_pain_assessment_tmb[$key-1]['answer'];
                    break;
                }
                
            }
        }

        $seletedSymtomsId = array();

        if(!empty($chronic_pain_assessment_pmh) && is_array($chronic_pain_assessment_pmh)){

        foreach ($chronic_pain_assessment_pmh as $key => $value) {
           $seletedSymtomsId[] = $key;
         }

        $selSymptoms  = $this->CommonConditions->find('all')->where(['id IN' => $seletedSymtomsId,'cond_type' =>9])->toArray();
        $deniesSymptoms  = $this->CommonConditions->find('all')->where(['id NOT IN' => $seletedSymtomsId,'cond_type' =>9])->toArray();

        $comorbidities .= 'Focused PMH is significant for ';

        foreach ($selSymptoms as $key => $value) {
            $comorbidities .= $value['note_name']!=''?$value['note_name']:$value['name'].', ';
            $comorbidities .= ' ('.$chronic_pain_assessment_pmh[$value['id']].') ';            
        }

        $comorbidities .=' Denies ';

        $tmpArrayDeniesSymtom = array();   
         foreach ($deniesSymptoms as $dkey => $dvalue) {
            $tmpArrayDeniesSymtom[] = $dvalue['note_name']!=''?$dvalue['note_name']:$dvalue['name'];
        }

        $comorbidities .= implode(', ',$tmpArrayDeniesSymtom); 
       }
   }


   if(!empty($chronic_pain_treatment_history) && is_array($chronic_pain_treatment_history))
   {
    

    foreach ($chronic_pain_treatment_history as $key => $val) {

        $painArray = array('0' =>'spine injections', '1' =>'joint injections', '2' =>'PT');
        $efficacy = array('1' =>'spine injections', '2' =>'joint injections', '3' =>"PT");
        $medication = array('353' =>'naproxen','354' =>'ibuprofen','355' =>'baclofen','356' =>'celebrex','357' =>'Cymbalta','358' => 'Effexor','359' =>'amitriptyline','360' =>'Flexeril','361' =>'ketamine','362' =>'ketorolac','363' =>'Lyrica','364' =>'meloxicam','365' =>'gabapentin','366' =>'Oxycontin','367' =>'nortriptyline','368' =>'Percocet','369' =>'Prozac','370' =>'Roxicet','371' =>'Roxicodone','372' =>'doxepin','373' =>'tramadol','374' =>'Tylenol','375' =>'Vicodin','376' =>'Vicoprofen','377' =>'other');
        $physicalPhycho = array('175' =>'activity','176' =>'work','177' =>'ADLs','178' =>'sleep','179' =>'relationships','180' =>'mood','181' =>'appetite','182' =>'stress levels');

        switch ($val['question_id']) {

        case 169:
                {
                    if($val['answer'] == 'No'){

                        $currentTx .= 'Denies current tx for pain';
                    }
                    else
                    {
                         if(!empty($chronic_pain_treatment_history[$key+1]['answer']) && is_array($chronic_pain_treatment_history[$key+1]['answer']))
                         {                            
                             foreach($chronic_pain_treatment_history[$key+1]['answer'] as $key => $value)
                             {
                                if(is_numeric($value)) {
                                $currtx[] = $painArray[$key];

                                if($value == 1)
                                {
                                    $csigeefic[] = $efficacy[$value];
                                }   
                                else if($value == 2)
                                {
                                    $cmodeefic[] = $efficacy[$value];
                                } 
                                elseif ($value == 3) {
                                    $cnoeefic[] = $efficacy[$value];  
                                }
                              }
                             }   
                         }


                         if(!empty($chronic_pain_curr_treat_history) && is_array($chronic_pain_curr_treat_history))
                         {
                            $seletedMedicationId = array();                            
                            foreach ($chronic_pain_curr_treat_history as $key => $value) {                              

                             $selmedication  = $this->ChiefCompliantMedication->find('all')->where(['id' => $key,'medication_disease' =>'chronic pain medicine'])->first();  

                              $currtx[] = $selmedication['doctor_specific_name']!=''? $selmedication['doctor_specific_name']:$value['layman_name'];
                               if($value == 1)
                                {
                                    $csigeefic[] = $medication[$key];
                                }   
                                else if($value == 2)
                                {
                                    $cmodeefic[] = $medication[$key];
                                } 
                                elseif ($value == 3) {
                                    $cnoeefic[] = $medication[$key];  
                                }
                              }
                         }

                         if(!empty($currtx) && is_array($currtx))
                         {
                            $currentTx .= "Currently being treated for pain with ".(is_array($currtx) ? implode(", ", $currtx) : '').".";
                         }   

                         if(!empty($csigeefic) && is_array($csigeefic))
                         {
                            $currentTx .= is_array($csigeefic) ? implode(", ", $csigeefic) :'';
                            $currentTx .= ' provided significant relief. ';
                         }  

                         if(!empty($cmodeefic) && is_array($cmodeefic))
                         {
                             $currentTx .= is_array($cmodeefic) ? implode(", ", $cmodeefic) :'';
                             $currentTx .= ' provided moderate relief. ';
                         } 

                         if(!empty($cnoeefic) && is_array($cnoeefic))
                         {
                             $currentTx .= is_array($cnoeefic) ? implode(", ", $cnoeefic) :'';
                             $currentTx .= ' provided no relief. ';
                         }                         
                    }                                    
                    break;
                }

                case 172:
                {
                    if($val['answer'] == 'No'){

                        $pastTx .= 'Denies current tx for pain';
                    }
                    else
                    {
                         if(!empty($chronic_pain_treatment_history[$key+1]['answer']) && is_array($chronic_pain_treatment_history[$key+1]['answer']))
                         {                            
                             foreach($chronic_pain_treatment_history[$key+1]['answer'] as $key => $value)
                             {
                                if(is_numeric($value)) {
                                $currtx[] = $painArray[$key];

                                if($value == 1)
                                {
                                    $csigeefic[] = $efficacy[$value];
                                }   
                                else if($value == 2)
                                {
                                    $cmodeefic[] = $efficacy[$value];
                                } 
                                elseif ($value == 3) {
                                    $cnoeefic[] = $efficacy[$value];  
                                }
                              }
                             }   
                         }


                         if(!empty($chronic_pain_past_treat_history) && is_array($chronic_pain_past_treat_history))
                         {
                            $seletedMedicationId = array();                            
                            foreach ($chronic_pain_past_treat_history as $key => $value) {                              

                             $selmedication  = $this->ChiefCompliantMedication->find('all')->where(['id' => $key,'medication_disease' =>'chronic pain medicine'])->first();  

                              $currtx[] = $selmedication['doctor_specific_name']!=''? $selmedication['doctor_specific_name']:$value['layman_name'];
                               if($value == 1)
                                {
                                    $csigeefic[] = $medication[$key];
                                }   
                                else if($value == 2)
                                {
                                    $cmodeefic[] = $medication[$key];
                                } 
                                elseif ($value == 3) {
                                    $cnoeefic[] = $medication[$key];  
                                }
                              }
                         }

                         if(!empty($currtx) && is_array($currtx))
                         {
                            $pastTx .= "Patient treated for chronic pain in the past with ".(is_array($currtx) ? implode(", ", $currtx) : '').".";
                         }   

                         if(!empty($csigeefic) && is_array($csigeefic))
                         {
                            $pastTx .= is_array($csigeefic) ? implode(", ", $csigeefic) :'';
                            $pastTx .= ' provided significant relief. ';
                         }  

                         if(!empty($cmodeefic) && is_array($cmodeefic))
                         {
                             $pastTx .= is_array($cmodeefic) ? implode(", ", $cmodeefic) :'';
                             $pastTx .= ' provided moderate relief. ';
                         } 

                         if(!empty($cnoeefic) && is_array($cnoeefic))
                         {
                             $pastTx .= is_array($cnoeefic) ? implode(", ", $cnoeefic) :'';
                             $pastTx .= ' provided no relief. ';
                         }                         
                    }                                    
                    break;
                }     

            }

    }


    foreach ($chronic_pain_treatment_history as $key => $val) {

        if($key == '175' || $key == '176' || $key == '177' || $key == '178' || $key == '179' || $key == '180' || $key == '181' || $key == '182')
         {
            if($val['answer'] == 'A lot')
            {
                $sigimpact[] = $physicalPhycho[$val['question_id']];    
            }
            else if($val['answer'] == 'A little')
            {
                $modimpact[] = $physicalPhycho[$val['question_id']];     
            }  
            else if ($val['answer'] == 'Not at all') {
                $noimpact[] = $physicalPhycho[$val['question_id']];
              }              
         }
    }        

      if(!empty($sigimpact) && is_array($sigimpact))
                {
                    $physicalPhychological .= is_array($sigimpact) ? implode(", ", $sigimpact) :'';
                    $physicalPhychological .= ' significantly impacted. ';                     
                }  

                if(!empty($modimpact) && is_array($modimpact))
                {
                    $physicalPhychological .= is_array($modimpact) ? implode(", ", $modimpact) :'';
                    $physicalPhychological .= ' moderately impacted. ';                     
                }   

                 if(!empty($noimpact) && is_array($noimpact))
                {
                    $physicalPhychological .= is_array($noimpact) ? implode(", ", $noimpact) :'';
                    $physicalPhychological .= ' unaffected. ';                     
                } 
   }


    if(!empty($chronic_pain_opioid_overdose_risk) && is_array($chronic_pain_opioid_overdose_risk)){

         foreach ($chronic_pain_opioid_overdose_risk as $key => $val) {

        switch ($val['question_id']) {

             case 183:
                {
                    $ans_183 = 'Significant for current opioid rx from other providers, ';

                    if($val['answer'] == 'No'){
                        $negative_sym .= $ans_183;
                    }
                    else{
                        $positive_sym .= $ans_183;
                    }
                    break;

                }

                case 184:
                {
                    $ans_184 = 'active rotating opioid drug regimen, ';

                    if($val['answer'] == 'No'){
                        $negative_sym .= $ans_184;
                    }
                    else{
                        $positive_sym .= $ans_184;
                    }
                    break;
                }

                 case 185:
                {
                    $ans_185 = 'active rotating route regimen, ';

                    if($val['answer'] == 'No'){
                        $negative_sym .= $ans_185;
                    }
                    else{
                        $positive_sym .= $ans_185;
                    }
                    break;
                }

                  case 186:
                {
                    $ans_186 = 'non rx or street opioid use, ';

                    if($val['answer'] == 'No'){
                        $negative_sym .= $ans_186;
                    }
                    else{
                        $positive_sym .= $ans_186;
                    }
                    break;
                }

                case 187:
                {
                    foreach ($val['answer'] as $ckey => $cvalue) {                    
                    
                        $positive_sym .= 'current LA opioids '.$cvalue.', ';
                    }
                    break;
                }

                case 188:
                {
                    $ans_188 = 'recent release from incarceration w/ OUD hx, ';

                    if($val['answer'] == 'No'){
                        $negative_sym .= $ans_188;
                    }
                    else{
                        $positive_sym .= $ans_188;
                    }
                    break;
                }

                case 189:
                {
                    $ans_189 = 'resuming opioid therapy after tx interruption, ';

                    if($val['answer'] == 'No'){
                        $negative_sym .= $ans_189;
                    }
                    else{
                        $positive_sym .= $ans_189;
                    }
                    break;
                }

                 case 190:
                {
                    $ans_190 = 'OUD/dependence hx, ';

                    if($val['answer'] == 'No'){
                        $negative_sym .= $ans_190;
                    }
                    else{
                        $positive_sym .= $ans_190;
                    }
                    break;
                }

                  case 191:
                {
                    $ans_191 = 'opioid intoxication/OD, ';

                    if($val['answer'] == 'No'){
                        $negative_sym .= $ans_191;
                    }
                    else{
                        $positive_sym .= $ans_191;
                    }
                    break;
                }

                case 192:
                {
                    $ans_191 = 'OD/intoxication episodes, ';

                    $opioidfreq = $val['answer'].' '.$ans_191;
                    break;
                }

                 case 193:
                {
                    $ans_193 = 'manadatory opioid detox program, ';

                    if($val['answer'] == 'No'){
                        $negative_sym .= $ans_193;
                    }
                    else{
                        $positive_sym .= $ans_193;
                    }
                    break;
                }

                 case 194:
                {
                    $opedDate = $val['answer'];
                    break;                   
                }

                 case 195:
                {
                     $opedfac = $val['answer'];
                     break;                      
                }
            }  



         } 
         

         if(isset($positive_sym) && !empty($positive_sym))
         {
            $opoidOverdoseRisk .= substr(trim($positive_sym), 0, -1).'.';
         } 

         if(isset($opioidfreq) && !empty($opioidfreq))
         {
            $opoidOverdoseRisk .= substr(trim($opioidfreq), 0, -1).'.';  
         } 

         if(isset($opedDate) && !empty($opedDate))
         {
            $opoidOverdoseRisk .= substr(trim($opedDate), 0, -1).'.';  
         } 

        if(isset($opedfac) && !empty($opedfac))
         {
            $opoidOverdoseRisk .= substr(trim($opedfac), 0, -1).'.';  
         }

         if(isset($negative_sym) && !empty($negative_sym))
         {
            $opoidOverdoseRisk .= ' Denies '.substr(trim($negative_sym), 0, -1);  
         }            
    }


     if(!empty($chronic_pain_assessment_ort) && is_array($chronic_pain_assessment_ort)){

       
         foreach ($chronic_pain_assessment_ort as $key => $val) {

            if($gender == 1)
            {
             switch ($val['question_id']) {
              case 196:
                {                             
                 foreach ($val['answer'] as $key => $value) {                      
                    if($value == 'alcohol'){                       
                        $ortTool += 3;
                    }
                    if($value == 'illegal drugs'){
                        $ortTool += 3;
                    }
                    if($value == 'rx drugs'){
                        $ortTool += 4;
                    }                    
                    } 
                    break;
                }
                 case 197:
                {                             
                 foreach ($val['answer'] as $key => $value) {                      
                    if($value == 'alcohol'){                       
                        $ortTool += 3;
                    }
                    if($value == 'illegal drugs'){
                        $ortTool += 4;
                    }
                    if($value == 'rx drugs'){
                        $ortTool += 5;
                    }                    
                    } 
                    break;
                }

                  case 198:
                {
                    if($val['answer'] == 'No'){
                        $ortTool += 0;
                    }
                    else{
                        $ortTool += 0;
                    }
                    break;
                }

                    case 199:
                {
                    if($val['answer'] == 'No'){
                        $ortTool += 0;
                    }
                    else{
                        $ortTool += 2;
                    }
                    break;
                }

                     case 200:
                {
                    if($val['answer'] == 'No'){
                        $ortTool += 0;
                    }
                    else{
                        $ortTool += 1;
                    }
                    break;
                }


            }
          }
          else if($gender == 0)
          {
                      switch ($val['question_id']) {
                      case 196:
                        {                             
                         foreach ($val['answer'] as $key => $value) {                      
                            if($value == 'alcohol'){                       
                                $ortTool += 1;
                            }
                            if($value == 'illegal drugs'){
                                $ortTool += 2;
                            }
                            if($value == 'rx drugs'){
                                $ortTool += 4;
                            }                    
                            } 
                            break;
                        }
                         case 197:
                        {                             
                         foreach ($val['answer'] as $key => $value) {                      
                            if($value == 'alcohol'){                       
                                $ortTool += 3;
                            }
                            if($value == 'illegal drugs'){
                                $ortTool += 4;
                            }
                            if($value == 'rx drugs'){
                                $ortTool += 6;
                            }                    
                            } 
                            break;
                        }

                          case 198:
                        {
                            if($val['answer'] == 'No'){
                                $ortTool += 0;
                            }
                            else{
                                $ortTool += 3;
                            }
                            break;
                        }

                            case 199:
                        {
                            if($val['answer'] == 'No'){
                                $ortTool += 0;
                            }
                            else{
                                $ortTool += 2;
                            }
                            break;
                        }

                             case 200:
                        {
                            if($val['answer'] == 'No'){
                                $ortTool += 0;
                            }
                            else{
                                $ortTool += 1;
                            }
                            break;
                        }
                    }

          }  
         }  

         if(isset($ortTool) && !empty($ortTool))
         {  
         $ortIndication = $this->getIndication($ortTool);          
         }       
     }


     return array('sevrity' => $sevrity, 'comorbidities' => $comorbidities,'opoidOverdoseRisk' =>$opoidOverdoseRisk,'ortTool' =>$ortTool,'ortIndication' =>$ortIndication,'currentTx' => $currentTx,'pastTx' =>$pastTx,'physicalPhychological' =>$physicalPhychological);

    }
    public function getIndication($ortScore)
    {
        $ortIndication = '';
        if(isset($ortScore) && !empty($ortScore))
        {
            if($ortScore < 4)
            {
                $ortIndication = 'Low risk for future opioid abuse';
            }   
            else if($ortScore >=  4 && $ortScore <= 7)
            {
                $ortIndication = 'Moderate risk for future opioid abuse';
            }
            elseif ($ortScore > 7) 
            {
              $ortIndication = 'High risk for future opioid abuse';            
            }    

        } 
        return $ortIndication;   
    }
    
    public function m3_score_range($type, $score)
    {
        $interpretation = '';
        if(($score <= 2 && $type == 'anxiety') || ($score <= 4 && $type == 'depression') || ($score <= 1 && ($type == 'bipolar' || $type == 'PTSD')))
            $interpretation = 'Unlikely';
        elseif(($score <= 5 && $type == 'anxiety') || ($score <= 7 && $type == 'depression') || ($score <= 3 && ($type == 'bipolar' || $type == 'PTSD')))
            $interpretation = 'Low';
        elseif(($score <= 11 && $type == 'anxiety') || ($score <= 10 && $type == 'depression') || ($score <= 6 && ($type == 'bipolar' || $type == 'PTSD')))
            $interpretation = 'Medium';
        elseif(($score <= 24 && $type == 'anxiety') || ($score <= 40 && ($type == 'depression' || $type == 'bipolar' || $type == 'PTSD')))
            $interpretation = 'High';
        return $interpretation;

    }
    public function m3_dementia_summary($question_id)
    {
        $m3_dementia_summary = '';
        switch ($question_id) {
            case 671:
                $m3_dementia_summary = 'judgement';
                break;
            case 672:
                $m3_dementia_summary = 'interest in hobbies/activities';
                break;
            case 673:
                $m3_dementia_summary = 'repetition';
                break;
            case 674:
                $m3_dementia_summary = 'operating tools/appliances';
                break;
            case 675:
                $m3_dementia_summary = 'date recall';
                break;
            case 676:
                $m3_dementia_summary = 'financial tasks';
                break;
            case 677:
                $m3_dementia_summary = 'remembering appointments';
                break;
            case 678:
                $m3_dementia_summary = 'thinking/memory';
                break;
            
            default:
                // code...
                break;
        }
        return $m3_dementia_summary;

    }
    public function natural_word_join($array)
    {   
        $str = '';
        // echo array_search('Other', $array);die;
        if(!in_array('Other', $array))
        {
          $str = count($array) > 1 ? array_pop($array):'';  
        }
        if(in_array('Other', $array))
        { 
          $array = array_diff($array,['Other']);
        }
        return implode(', ',$array).($str ? ' and '.$str:'');
    }

    /*public function save_appointment_schedule_data($detail){

      if(!empty($detail) && is_array($detail)){

        $this->Schedule = TableRegistry::get('Schedule');

        $enc_last_name = isset($detail['last_name']) && !empty($detail['last_name']) ? $detail['last_name'] : '';

        $enc_first_name = isset($detail['first_name']) && !empty($detail['first_name']) ? $detail['first_name'] : '';

        $enc_dob = isset($detail['dob']) && !empty($detail['dob']) ? $detail['dob'] : '';

        $enc_mrn = isset($detail['mrn']) && !empty($detail['mrn']) ? $detail['mrn'] : '';

        $enc_phone = isset($detail['phone']) && !empty($detail['phone']) ? $detail['phone'] : '';

        $enc_email = isset($detail['email']) && !empty($detail['email']) ? $detail['email'] : '';

        $enc_appointment_time = isset($detail['appointment_time']) && !empty($detail['appointment_time']) ? $detail['appointment_time'] : '';

        $enc_doctor_name = isset($detail['doctor_name']) && !empty($detail['doctor_name']) ? $detail['doctor_name'] : '';

        $enc_appointment_reason = isset($detail['appointment_reason']) && !empty($detail['appointment_reason']) ? $detail['appointment_reason'] : '';
        $provider_id = isset($detail['provider_id']) && !empty($detail['provider_id']) ? $detail['provider_id'] : '';
        $doctor_id = isset($detail['doctor_id']) && !empty($detail['doctor_id']) ? $detail['doctor_id'] : '';
        $organization_id = isset($detail['organization_id']) && !empty($detail['organization_id']) ? $detail['organization_id'] : '';
        $user_id = isset($detail['user_id']) && !empty($detail['user_id']) ? $detail['user_id'] : '';

        //check for all required data
        if(empty($enc_phone) && empty($enc_email) && (empty($enc_last_name) || empty($enc_first_name) || empty($dob)) && (empty($provider_id) || empty($organization_id))){

          return 0;
        }

        $schedule_data = array(
          'last_name' => $enc_last_name,
          'first_name' => $enc_first_name,
          'email' => $enc_email,
          'dob' => $enc_dob,
          'mrn' => $enc_mrn,
          'phone' => $enc_phone,
          'appointment_time' => $enc_appointment_time,
          'appointment_reason' => $enc_appointment_reason,
          'doctor_name' => $enc_doctor_name,
          'appointment_date' => date('Y-m-d'),
          'provider_id' => $provider_id,
          'doctor_id' => $doctor_id,
          'organization_id' => $organization_id,
          'user_id' => $user_id
        );


        if(isset($enc_email) && !empty($enc_email))
        {
        $checkAlreadyScheduleData  = $this->Schedule->find('all',array('order'=> array('id' => 'desc')))->where(['email' =>$enc_email,'appointment_date >=' => date('Y-m-d'),'organization_id' =>$organization_id])->first();

              if(empty($checkAlreadyScheduleData) || (!empty($checkAlreadyScheduleData) && $checkAlreadyScheduleData['status'] == 3)){
              $is_saved = 1;
              }
              else{
              //using email schedule is already in running state
              $is_saved = 0;
              }
        }

        elseif(isset($enc_phone) && !empty($enc_phone)){

                    $checkAlreadyScheduleData = $this->Schedule->find('all',array('order'=> array('id' => 'desc')))->where(['phone' =>$enc_phone,'appointment_date >=' => date('Y-m-d'),'organization_id' =>$organization_id])->first();

                    if(empty($checkAlreadyScheduleData) || (!empty($checkAlreadyScheduleData) && $checkAlreadyScheduleData['status'] == 3)){
                      $is_saved = 1;
                    }
                    else{
                      //using phone number schedule is already running
                      $is_saved = 0;
                    }
        }

        elseif(isset($enc_first_name) && isset($enc_last_name) && isset($enc_dob)){

                      $checkAlreadyScheduleData = $this->Schedule->find('all',array('order'=> array('id' => 'desc')))->where(['first_name' =>$enc_first_name,'last_name' => $enc_last_name,'dob' => $enc_dob,'appointment_date >=' => date('Y-m-d'),'organization_id' =>$organization_id])->first();

                      if(empty($checkAlreadyScheduleData) || (!empty($checkAlreadyScheduleData) && $checkAlreadyScheduleData['status'] == 3)){
                        $is_saved = 1;
                      }
                      else{
                       //using first name, last name, dob schedule is alredy running
                        $is_saved = 0;
                      }
        }

        if($is_saved == 0)
        {
          return 0;  //already exists
        }
        else {
          return 1;  //Not exist
        }
      }
    }*/

}
